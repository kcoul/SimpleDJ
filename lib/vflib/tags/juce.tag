<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>juce_AbstractFifo.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/containers/</path>
    <filename>juce__AbstractFifo_8h</filename>
    <class kind="class">AbstractFifo</class>
  </compound>
  <compound kind="file">
    <name>juce_ActionBroadcaster.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_events/broadcasters/</path>
    <filename>juce__ActionBroadcaster_8h</filename>
    <class kind="class">ActionBroadcaster</class>
  </compound>
  <compound kind="file">
    <name>juce_ActionListener.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_events/broadcasters/</path>
    <filename>juce__ActionListener_8h</filename>
    <class kind="class">ActionListener</class>
  </compound>
  <compound kind="file">
    <name>juce_ActiveXControlComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/embedding/</path>
    <filename>juce__ActiveXControlComponent_8h</filename>
    <class kind="class">ActiveXControlComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_AffineTransform.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__AffineTransform_8h</filename>
    <class kind="class">AffineTransform</class>
  </compound>
  <compound kind="file">
    <name>juce_AiffAudioFormat.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__AiffAudioFormat_8h</filename>
    <class kind="class">AiffAudioFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_AlertWindow.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__AlertWindow_8h</filename>
    <class kind="class">AlertWindow</class>
  </compound>
  <compound kind="file">
    <name>juce_AppleRemote.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__AppleRemote_8h</filename>
    <class kind="class">AppleRemoteDevice</class>
  </compound>
  <compound kind="file">
    <name>juce_Application.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/application/</path>
    <filename>juce__Application_8h</filename>
    <class kind="class">JUCEApplication</class>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationBase.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_events/messages/</path>
    <filename>juce__ApplicationBase_8h</filename>
    <class kind="class">JUCEApplicationBase</class>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationCommandID.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/commands/</path>
    <filename>juce__ApplicationCommandID_8h</filename>
    <member kind="typedef">
      <type>int</type>
      <name>CommandID</name>
      <anchorfile>juce__ApplicationCommandID_8h.html</anchorfile>
      <anchor>afd69b5d28aad07b587b693925e09308b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationCommandInfo.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/commands/</path>
    <filename>juce__ApplicationCommandInfo_8h</filename>
    <class kind="struct">ApplicationCommandInfo</class>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationCommandManager.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/commands/</path>
    <filename>juce__ApplicationCommandManager_8h</filename>
    <class kind="class">ApplicationCommandManager</class>
    <class kind="class">ApplicationCommandManagerListener</class>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationCommandTarget.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/commands/</path>
    <filename>juce__ApplicationCommandTarget_8h</filename>
    <class kind="class">ApplicationCommandTarget</class>
    <class kind="struct">ApplicationCommandTarget::InvocationInfo</class>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationProperties.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_data_structures/app_properties/</path>
    <filename>juce__ApplicationProperties_8h</filename>
    <class kind="class">ApplicationProperties</class>
  </compound>
  <compound kind="file">
    <name>juce_Array.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/containers/</path>
    <filename>juce__Array_8h</filename>
    <class kind="class">Array</class>
  </compound>
  <compound kind="file">
    <name>juce_ArrayAllocationBase.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/containers/</path>
    <filename>juce__ArrayAllocationBase_8h</filename>
    <class kind="class">ArrayAllocationBase</class>
  </compound>
  <compound kind="file">
    <name>juce_ArrowButton.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__ArrowButton_8h</filename>
    <class kind="class">ArrowButton</class>
  </compound>
  <compound kind="file">
    <name>juce_AsyncUpdater.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_events/broadcasters/</path>
    <filename>juce__AsyncUpdater_8h</filename>
    <class kind="class">AsyncUpdater</class>
  </compound>
  <compound kind="file">
    <name>juce_Atomic.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/memory/</path>
    <filename>juce__Atomic_8h</filename>
    <class kind="class">Atomic</class>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_ATOMICS_MAC</name>
      <anchorfile>juce__Atomic_8h.html</anchorfile>
      <anchor>a17506b18b29f9a6d3a797274baf66b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_MAC_ATOMICS_VOLATILE</name>
      <anchorfile>juce__Atomic_8h.html</anchorfile>
      <anchor>a72cf91413b9b045ccbb73042b2c079b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_64BIT_ATOMICS_UNAVAILABLE</name>
      <anchorfile>juce__Atomic_8h.html</anchorfile>
      <anchor>a1b526d9ae416f2ae30d7f84da12db6bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_AttributedString.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/fonts/</path>
    <filename>juce__AttributedString_8h</filename>
    <class kind="class">AttributedString</class>
    <class kind="class">AttributedString::Attribute</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioCDBurner.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_devices/audio_cd/</path>
    <filename>juce__AudioCDBurner_8h</filename>
    <class kind="class">AudioCDBurner</class>
    <class kind="class">AudioCDBurner::BurnProgressListener</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioCDReader.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_devices/audio_cd/</path>
    <filename>juce__AudioCDReader_8h</filename>
    <class kind="class">AudioCDReader</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioDataConverters.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/buffers/</path>
    <filename>juce__AudioDataConverters_8h</filename>
    <class kind="class">AudioData</class>
    <class kind="class">AudioData::Pointer</class>
    <class kind="class">AudioData::Converter</class>
    <class kind="class">AudioData::ConverterInstance</class>
    <class kind="class">AudioDataConverters</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioDeviceManager.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_devices/audio_io/</path>
    <filename>juce__AudioDeviceManager_8h</filename>
    <class kind="class">AudioDeviceManager</class>
    <class kind="struct">AudioDeviceManager::AudioDeviceSetup</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioDeviceSelectorComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_utils/gui/</path>
    <filename>juce__AudioDeviceSelectorComponent_8h</filename>
    <class kind="class">AudioDeviceSelectorComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioFormat.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_formats/format/</path>
    <filename>juce__AudioFormat_8h</filename>
    <class kind="class">AudioFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioFormatManager.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_formats/format/</path>
    <filename>juce__AudioFormatManager_8h</filename>
    <class kind="class">AudioFormatManager</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioFormatReader.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_formats/format/</path>
    <filename>juce__AudioFormatReader_8h</filename>
    <class kind="class">AudioFormatReader</class>
    <class kind="struct">AudioFormatReader::ReadHelper</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioFormatReaderSource.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_formats/format/</path>
    <filename>juce__AudioFormatReaderSource_8h</filename>
    <class kind="class">AudioFormatReaderSource</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioFormatWriter.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_formats/format/</path>
    <filename>juce__AudioFormatWriter_8h</filename>
    <class kind="class">AudioFormatWriter</class>
    <class kind="class">AudioFormatWriter::ThreadedWriter</class>
    <class kind="class">AudioFormatWriter::ThreadedWriter::IncomingDataReceiver</class>
    <class kind="struct">AudioFormatWriter::WriteHelper</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioIODevice.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_devices/audio_io/</path>
    <filename>juce__AudioIODevice_8h</filename>
    <class kind="class">AudioIODeviceCallback</class>
    <class kind="class">AudioIODevice</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioIODeviceType.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_devices/audio_io/</path>
    <filename>juce__AudioIODeviceType_8h</filename>
    <class kind="class">AudioIODeviceType</class>
    <class kind="class">AudioIODeviceType::Listener</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioPlayHead.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__AudioPlayHead_8h</filename>
    <class kind="class">AudioPlayHead</class>
    <class kind="struct">AudioPlayHead::CurrentPositionInfo</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioPluginFormat.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/format/</path>
    <filename>juce__AudioPluginFormat_8h</filename>
    <class kind="class">AudioPluginFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioPluginFormatManager.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/format/</path>
    <filename>juce__AudioPluginFormatManager_8h</filename>
    <class kind="class">AudioPluginFormatManager</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioPluginInstance.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__AudioPluginInstance_8h</filename>
    <class kind="class">AudioPluginInstance</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessor.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__AudioProcessor_8h</filename>
    <class kind="class">AudioProcessor</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessorEditor.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__AudioProcessorEditor_8h</filename>
    <class kind="class">AudioProcessorEditor</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessorGraph.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__AudioProcessorGraph_8h</filename>
    <class kind="class">AudioProcessorGraph</class>
    <class kind="class">AudioProcessorGraph::Node</class>
    <class kind="struct">AudioProcessorGraph::Connection</class>
    <class kind="class">AudioProcessorGraph::AudioGraphIOProcessor</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessorListener.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__AudioProcessorListener_8h</filename>
    <class kind="class">AudioProcessorListener</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessorPlayer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_utils/players/</path>
    <filename>juce__AudioProcessorPlayer_8h</filename>
    <class kind="class">AudioProcessorPlayer</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioSampleBuffer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/buffers/</path>
    <filename>juce__AudioSampleBuffer_8h</filename>
    <class kind="class">AudioSampleBuffer</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioSource.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__AudioSource_8h</filename>
    <class kind="struct">AudioSourceChannelInfo</class>
    <class kind="class">AudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioSourcePlayer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_devices/sources/</path>
    <filename>juce__AudioSourcePlayer_8h</filename>
    <class kind="class">AudioSourcePlayer</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioSubsectionReader.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_formats/format/</path>
    <filename>juce__AudioSubsectionReader_8h</filename>
    <class kind="class">AudioSubsectionReader</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioThumbnail.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_utils/gui/</path>
    <filename>juce__AudioThumbnail_8h</filename>
    <class kind="class">AudioThumbnail</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioThumbnailBase.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_utils/gui/</path>
    <filename>juce__AudioThumbnailBase_8h</filename>
    <class kind="class">AudioThumbnailBase</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioThumbnailCache.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_utils/gui/</path>
    <filename>juce__AudioThumbnailCache_8h</filename>
    <class kind="class">AudioThumbnailCache</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioTransportSource.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_devices/sources/</path>
    <filename>juce__AudioTransportSource_8h</filename>
    <class kind="class">AudioTransportSource</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioUnitPluginFormat.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/format_types/</path>
    <filename>juce__AudioUnitPluginFormat_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_BigInteger.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/maths/</path>
    <filename>juce__BigInteger_8h</filename>
    <class kind="class">BigInteger</class>
    <member kind="function">
      <type>OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__BigInteger_8h.html</anchorfile>
      <anchor>aad1d3fbf4eac3f0aaf3ca7d741e6faad</anchor>
      <arglist>(OutputStream &amp;stream, const BigInteger &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_BlowFish.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_cryptography/encryption/</path>
    <filename>juce__BlowFish_8h</filename>
    <class kind="class">BlowFish</class>
  </compound>
  <compound kind="file">
    <name>juce_BooleanPropertyComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/properties/</path>
    <filename>juce__BooleanPropertyComponent_8h</filename>
    <class kind="class">BooleanPropertyComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_BorderSize.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__BorderSize_8h</filename>
    <class kind="class">BorderSize</class>
  </compound>
  <compound kind="file">
    <name>juce_BrowserPluginComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_browser_plugin/wrapper/</path>
    <filename>juce__BrowserPluginComponent_8h</filename>
    <class kind="class">BrowserPluginComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_BubbleComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/misc/</path>
    <filename>juce__BubbleComponent_8h</filename>
    <class kind="class">BubbleComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_BubbleMessageComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__BubbleMessageComponent_8h</filename>
    <class kind="class">BubbleMessageComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_BufferedInputStream.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/streams/</path>
    <filename>juce__BufferedInputStream_8h</filename>
    <class kind="class">BufferedInputStream</class>
  </compound>
  <compound kind="file">
    <name>juce_BufferingAudioSource.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__BufferingAudioSource_8h</filename>
    <class kind="class">BufferingAudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_Button.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__Button_8h</filename>
    <class kind="class">Button</class>
    <class kind="class">Button::Listener</class>
    <class kind="struct">Button::Ids</class>
  </compound>
  <compound kind="file">
    <name>juce_ButtonPropertyComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/properties/</path>
    <filename>juce__ButtonPropertyComponent_8h</filename>
    <class kind="class">ButtonPropertyComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_ByteOrder.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/memory/</path>
    <filename>juce__ByteOrder_8h</filename>
    <class kind="class">ByteOrder</class>
  </compound>
  <compound kind="file">
    <name>juce_CachedComponentImage.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/components/</path>
    <filename>juce__CachedComponentImage_8h</filename>
    <class kind="class">CachedComponentImage</class>
  </compound>
  <compound kind="file">
    <name>juce_CallbackMessage.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_events/messages/</path>
    <filename>juce__CallbackMessage_8h</filename>
    <class kind="class">CallbackMessage</class>
  </compound>
  <compound kind="file">
    <name>juce_CallOutBox.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__CallOutBox_8h</filename>
    <class kind="class">CallOutBox</class>
  </compound>
  <compound kind="file">
    <name>juce_CameraDevice.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_video/capture/</path>
    <filename>juce__CameraDevice_8h</filename>
    <class kind="class">CameraDevice</class>
    <class kind="class">CameraDevice::Listener</class>
    <member kind="typedef">
      <type>CameraDevice::Listener</type>
      <name>CameraImageListener</name>
      <anchorfile>juce__CameraDevice_8h.html</anchorfile>
      <anchor>a348759e82dfebdaa8679a49b686efa42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_CarbonVisibility.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_plugin_client/utility/</path>
    <filename>juce__CarbonVisibility_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_CaretComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>juce__CaretComponent_8h</filename>
    <class kind="class">CaretComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_ChangeBroadcaster.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_events/broadcasters/</path>
    <filename>juce__ChangeBroadcaster_8h</filename>
    <class kind="class">ChangeBroadcaster</class>
  </compound>
  <compound kind="file">
    <name>juce_ChangeListener.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_events/broadcasters/</path>
    <filename>juce__ChangeListener_8h</filename>
    <class kind="class">ChangeListener</class>
  </compound>
  <compound kind="file">
    <name>juce_ChannelRemappingAudioSource.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__ChannelRemappingAudioSource_8h</filename>
    <class kind="class">ChannelRemappingAudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_CharacterFunctions.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/text/</path>
    <filename>juce__CharacterFunctions_8h</filename>
    <class kind="class">CharacterFunctions</class>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_NATIVE_WCHAR_IS_UTF8</name>
      <anchorfile>juce__CharacterFunctions_8h.html</anchorfile>
      <anchor>adee5e9cf98ee0bd0a2e5a91fb479f640</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_NATIVE_WCHAR_IS_UTF16</name>
      <anchorfile>juce__CharacterFunctions_8h.html</anchorfile>
      <anchor>a8472d1d49a6a5a7692e2ec94e17ce63c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_NATIVE_WCHAR_IS_UTF32</name>
      <anchorfile>juce__CharacterFunctions_8h.html</anchorfile>
      <anchor>a32ffe19f7697fad5b1febdce3b5fab4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>wchar_t</type>
      <name>juce_wchar</name>
      <anchorfile>juce__CharacterFunctions_8h.html</anchorfile>
      <anchor>a7d83261f3888884bbf04a58edc2672da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_CharPointer_ASCII.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/text/</path>
    <filename>juce__CharPointer__ASCII_8h</filename>
    <class kind="class">CharPointer_ASCII</class>
  </compound>
  <compound kind="file">
    <name>juce_CharPointer_UTF16.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/text/</path>
    <filename>juce__CharPointer__UTF16_8h</filename>
    <class kind="class">CharPointer_UTF16</class>
  </compound>
  <compound kind="file">
    <name>juce_CharPointer_UTF32.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/text/</path>
    <filename>juce__CharPointer__UTF32_8h</filename>
    <class kind="class">CharPointer_UTF32</class>
  </compound>
  <compound kind="file">
    <name>juce_CharPointer_UTF8.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/text/</path>
    <filename>juce__CharPointer__UTF8_8h</filename>
    <class kind="class">CharPointer_UTF8</class>
  </compound>
  <compound kind="file">
    <name>juce_CheckSettingMacros.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_plugin_client/utility/</path>
    <filename>juce__CheckSettingMacros_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_ChildProcess.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/threads/</path>
    <filename>juce__ChildProcess_8h</filename>
    <class kind="class">ChildProcess</class>
  </compound>
  <compound kind="file">
    <name>juce_ChoicePropertyComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/properties/</path>
    <filename>juce__ChoicePropertyComponent_8h</filename>
    <class kind="class">ChoicePropertyComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_CodeDocument.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/code_editor/</path>
    <filename>juce__CodeDocument_8h</filename>
    <class kind="class">CodeDocument</class>
    <class kind="class">CodeDocument::Position</class>
    <class kind="class">CodeDocument::Listener</class>
    <class kind="class">CodeDocument::Iterator</class>
  </compound>
  <compound kind="file">
    <name>juce_CodeEditorComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/code_editor/</path>
    <filename>juce__CodeEditorComponent_8h</filename>
    <class kind="class">CodeEditorComponent</class>
    <class kind="struct">CodeEditorComponent::State</class>
    <class kind="struct">CodeEditorComponent::ColourScheme</class>
    <class kind="struct">CodeEditorComponent::ColourScheme::TokenType</class>
  </compound>
  <compound kind="file">
    <name>juce_CodeTokeniser.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/code_editor/</path>
    <filename>juce__CodeTokeniser_8h</filename>
    <class kind="class">CodeTokeniser</class>
  </compound>
  <compound kind="file">
    <name>juce_Colour.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/colour/</path>
    <filename>juce__Colour_8h</filename>
    <class kind="class">Colour</class>
  </compound>
  <compound kind="file">
    <name>juce_ColourGradient.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/colour/</path>
    <filename>juce__ColourGradient_8h</filename>
    <class kind="class">ColourGradient</class>
  </compound>
  <compound kind="file">
    <name>juce_Colours.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/colour/</path>
    <filename>juce__Colours_8h</filename>
    <class kind="class">Colours</class>
  </compound>
  <compound kind="file">
    <name>juce_ColourSelector.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__ColourSelector_8h</filename>
    <class kind="class">ColourSelector</class>
  </compound>
  <compound kind="file">
    <name>juce_ComboBox.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__ComboBox_8h</filename>
    <class kind="class">ComboBox</class>
    <class kind="class">ComboBox::Listener</class>
    <class kind="struct">ComboBox::Ids</class>
    <member kind="typedef">
      <type>ComboBox::Listener</type>
      <name>ComboBoxListener</name>
      <anchorfile>juce__ComboBox_8h.html</anchorfile>
      <anchor>ab480afea56011a420dab466db0dac97e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Component.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/components/</path>
    <filename>juce__Component_8h</filename>
    <class kind="class">Component</class>
    <class kind="class">Component::SafePointer</class>
    <class kind="class">Component::BailOutChecker</class>
    <class kind="class">Component::Positioner</class>
  </compound>
  <compound kind="file">
    <name>juce_ComponentAnimator.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ComponentAnimator_8h</filename>
    <class kind="class">ComponentAnimator</class>
  </compound>
  <compound kind="file">
    <name>juce_ComponentBoundsConstrainer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ComponentBoundsConstrainer_8h</filename>
    <class kind="class">ComponentBoundsConstrainer</class>
  </compound>
  <compound kind="file">
    <name>juce_ComponentBuilder.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ComponentBuilder_8h</filename>
    <class kind="class">ComponentBuilder</class>
    <class kind="class">ComponentBuilder::TypeHandler</class>
    <class kind="class">ComponentBuilder::ImageProvider</class>
  </compound>
  <compound kind="file">
    <name>juce_ComponentDragger.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__ComponentDragger_8h</filename>
    <class kind="class">ComponentDragger</class>
  </compound>
  <compound kind="file">
    <name>juce_ComponentListener.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/components/</path>
    <filename>juce__ComponentListener_8h</filename>
    <class kind="class">ComponentListener</class>
  </compound>
  <compound kind="file">
    <name>juce_ComponentMovementWatcher.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ComponentMovementWatcher_8h</filename>
    <class kind="class">ComponentMovementWatcher</class>
  </compound>
  <compound kind="file">
    <name>juce_ComponentPeer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__ComponentPeer_8h</filename>
    <class kind="class">ComponentPeer</class>
    <class kind="struct">ComponentPeer::DragInfo</class>
  </compound>
  <compound kind="file">
    <name>juce_CoreAudioFormat.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__CoreAudioFormat_8h</filename>
    <class kind="class">CoreAudioFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_CPlusPlusCodeTokeniser.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/code_editor/</path>
    <filename>juce__CPlusPlusCodeTokeniser_8h</filename>
    <class kind="class">CPlusPlusCodeTokeniser</class>
  </compound>
  <compound kind="file">
    <name>juce_CriticalSection.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/threads/</path>
    <filename>juce__CriticalSection_8h</filename>
    <class kind="class">CriticalSection</class>
    <class kind="class">DummyCriticalSection</class>
    <class kind="struct">DummyCriticalSection::ScopedLockType</class>
    <member kind="typedef">
      <type>CriticalSection::ScopedLockType</type>
      <name>ScopedLock</name>
      <anchorfile>juce__CriticalSection_8h.html</anchorfile>
      <anchor>acedaa6fb1373c96d2d15e7a617a5cec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CriticalSection::ScopedUnlockType</type>
      <name>ScopedUnlock</name>
      <anchorfile>juce__CriticalSection_8h.html</anchorfile>
      <anchor>a4cc435f24ace2a8f59b488ed66d9cf2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CriticalSection::ScopedTryLockType</type>
      <name>ScopedTryLock</name>
      <anchorfile>juce__CriticalSection_8h.html</anchorfile>
      <anchor>a5d3ed387d4c09d8fbfb8ad1f2db610df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_CustomTypeface.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/fonts/</path>
    <filename>juce__CustomTypeface_8h</filename>
    <class kind="class">CustomTypeface</class>
  </compound>
  <compound kind="file">
    <name>juce_Decibels.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/effects/</path>
    <filename>juce__Decibels_8h</filename>
    <class kind="class">Decibels</class>
  </compound>
  <compound kind="file">
    <name>juce_DeletedAtShutdown.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_events/messages/</path>
    <filename>juce__DeletedAtShutdown_8h</filename>
    <class kind="class">DeletedAtShutdown</class>
  </compound>
  <compound kind="file">
    <name>juce_Desktop.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/components/</path>
    <filename>juce__Desktop_8h</filename>
    <class kind="class">FocusChangeListener</class>
    <class kind="class">Desktop</class>
    <class kind="class">Desktop::Displays</class>
    <class kind="struct">Desktop::Displays::Display</class>
  </compound>
  <compound kind="file">
    <name>juce_DialogWindow.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__DialogWindow_8h</filename>
    <class kind="class">DialogWindow</class>
  </compound>
  <compound kind="file">
    <name>juce_DirectoryContentsDisplayComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__DirectoryContentsDisplayComponent_8h</filename>
    <class kind="class">DirectoryContentsDisplayComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_DirectoryContentsList.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__DirectoryContentsList_8h</filename>
    <class kind="class">DirectoryContentsList</class>
    <class kind="struct">DirectoryContentsList::FileInfo</class>
  </compound>
  <compound kind="file">
    <name>juce_DirectoryIterator.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/files/</path>
    <filename>juce__DirectoryIterator_8h</filename>
    <class kind="class">DirectoryIterator</class>
  </compound>
  <compound kind="file">
    <name>juce_DirectShowComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_video/playback/</path>
    <filename>juce__DirectShowComponent_8h</filename>
    <class kind="class">DirectShowComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_DirectXPluginFormat.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/format_types/</path>
    <filename>juce__DirectXPluginFormat_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_DocumentWindow.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__DocumentWindow_8h</filename>
    <class kind="class">DocumentWindow</class>
  </compound>
  <compound kind="file">
    <name>juce_DragAndDropContainer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__DragAndDropContainer_8h</filename>
    <class kind="class">DragAndDropContainer</class>
  </compound>
  <compound kind="file">
    <name>juce_DragAndDropTarget.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__DragAndDropTarget_8h</filename>
    <class kind="class">DragAndDropTarget</class>
    <class kind="class">DragAndDropTarget::SourceDetails</class>
  </compound>
  <compound kind="file">
    <name>juce_Draggable3DOrientation.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__Draggable3DOrientation_8h</filename>
    <class kind="class">Draggable3DOrientation</class>
  </compound>
  <compound kind="file">
    <name>juce_Drawable.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/drawables/</path>
    <filename>juce__Drawable_8h</filename>
    <class kind="class">Drawable</class>
    <class kind="class">Drawable::ValueTreeWrapperBase</class>
  </compound>
  <compound kind="file">
    <name>juce_DrawableButton.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__DrawableButton_8h</filename>
    <class kind="class">DrawableButton</class>
  </compound>
  <compound kind="file">
    <name>juce_DrawableComposite.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/drawables/</path>
    <filename>juce__DrawableComposite_8h</filename>
    <class kind="class">DrawableComposite</class>
    <class kind="class">DrawableComposite::ValueTreeWrapper</class>
  </compound>
  <compound kind="file">
    <name>juce_DrawableImage.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/drawables/</path>
    <filename>juce__DrawableImage_8h</filename>
    <class kind="class">DrawableImage</class>
    <class kind="class">DrawableImage::ValueTreeWrapper</class>
  </compound>
  <compound kind="file">
    <name>juce_DrawablePath.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/drawables/</path>
    <filename>juce__DrawablePath_8h</filename>
    <class kind="class">DrawablePath</class>
    <class kind="class">DrawablePath::ValueTreeWrapper</class>
    <class kind="class">DrawablePath::ValueTreeWrapper::Element</class>
  </compound>
  <compound kind="file">
    <name>juce_DrawableRectangle.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/drawables/</path>
    <filename>juce__DrawableRectangle_8h</filename>
    <class kind="class">DrawableRectangle</class>
    <class kind="class">DrawableRectangle::ValueTreeWrapper</class>
  </compound>
  <compound kind="file">
    <name>juce_DrawableShape.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/drawables/</path>
    <filename>juce__DrawableShape_8h</filename>
    <class kind="class">DrawableShape</class>
    <class kind="class">DrawableShape::RelativeFillType</class>
    <class kind="class">DrawableShape::FillAndStrokeState</class>
  </compound>
  <compound kind="file">
    <name>juce_DrawableText.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/drawables/</path>
    <filename>juce__DrawableText_8h</filename>
    <class kind="class">DrawableText</class>
    <class kind="class">DrawableText::ValueTreeWrapper</class>
  </compound>
  <compound kind="file">
    <name>juce_DropShadowEffect.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/effects/</path>
    <filename>juce__DropShadowEffect_8h</filename>
    <class kind="class">DropShadowEffect</class>
  </compound>
  <compound kind="file">
    <name>juce_DropShadower.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/misc/</path>
    <filename>juce__DropShadower_8h</filename>
    <class kind="class">DropShadower</class>
  </compound>
  <compound kind="file">
    <name>juce_DynamicLibrary.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/threads/</path>
    <filename>juce__DynamicLibrary_8h</filename>
    <class kind="class">DynamicLibrary</class>
  </compound>
  <compound kind="file">
    <name>juce_DynamicObject.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/containers/</path>
    <filename>juce__DynamicObject_8h</filename>
    <class kind="class">DynamicObject</class>
  </compound>
  <compound kind="file">
    <name>juce_EdgeTable.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__EdgeTable_8h</filename>
    <class kind="class">EdgeTable</class>
  </compound>
  <compound kind="file">
    <name>juce_ElementComparator.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/containers/</path>
    <filename>juce__ElementComparator_8h</filename>
    <class kind="class">DefaultElementComparator</class>
  </compound>
  <compound kind="file">
    <name>juce_Expression.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/maths/</path>
    <filename>juce__Expression_8h</filename>
    <class kind="class">Expression</class>
    <class kind="class">Expression::Scope</class>
    <class kind="class">Expression::Scope::Visitor</class>
    <class kind="struct">Expression::Symbol</class>
    <class kind="class">Expression::ParseError</class>
  </compound>
  <compound kind="file">
    <name>juce_FakeMouseMoveGenerator.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_plugin_client/utility/</path>
    <filename>juce__FakeMouseMoveGenerator_8h</filename>
    <class kind="struct">FakeMouseMoveGenerator</class>
  </compound>
  <compound kind="file">
    <name>juce_File.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/files/</path>
    <filename>juce__File_8h</filename>
    <class kind="class">File</class>
  </compound>
  <compound kind="file">
    <name>juce_FileBasedDocument.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/documents/</path>
    <filename>juce__FileBasedDocument_8h</filename>
    <class kind="class">FileBasedDocument</class>
  </compound>
  <compound kind="file">
    <name>juce_FileBrowserComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FileBrowserComponent_8h</filename>
    <class kind="class">FileBrowserComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_FileBrowserListener.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FileBrowserListener_8h</filename>
    <class kind="class">FileBrowserListener</class>
  </compound>
  <compound kind="file">
    <name>juce_FileChooser.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FileChooser_8h</filename>
    <class kind="class">FileChooser</class>
  </compound>
  <compound kind="file">
    <name>juce_FileChooserDialogBox.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FileChooserDialogBox_8h</filename>
    <class kind="class">FileChooserDialogBox</class>
  </compound>
  <compound kind="file">
    <name>juce_FileDragAndDropTarget.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__FileDragAndDropTarget_8h</filename>
    <class kind="class">FileDragAndDropTarget</class>
  </compound>
  <compound kind="file">
    <name>juce_FileFilter.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FileFilter_8h</filename>
    <class kind="class">FileFilter</class>
  </compound>
  <compound kind="file">
    <name>juce_FileInputSource.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/streams/</path>
    <filename>juce__FileInputSource_8h</filename>
    <class kind="class">FileInputSource</class>
  </compound>
  <compound kind="file">
    <name>juce_FileInputStream.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/files/</path>
    <filename>juce__FileInputStream_8h</filename>
    <class kind="class">FileInputStream</class>
  </compound>
  <compound kind="file">
    <name>juce_FileListComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FileListComponent_8h</filename>
    <class kind="class">FileListComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_FileLogger.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/logging/</path>
    <filename>juce__FileLogger_8h</filename>
    <class kind="class">FileLogger</class>
  </compound>
  <compound kind="file">
    <name>juce_FilenameComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FilenameComponent_8h</filename>
    <class kind="class">FilenameComponentListener</class>
    <class kind="class">FilenameComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_FileOutputStream.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/files/</path>
    <filename>juce__FileOutputStream_8h</filename>
    <class kind="class">FileOutputStream</class>
  </compound>
  <compound kind="file">
    <name>juce_FilePreviewComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FilePreviewComponent_8h</filename>
    <class kind="class">FilePreviewComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_FileSearchPath.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/files/</path>
    <filename>juce__FileSearchPath_8h</filename>
    <class kind="class">FileSearchPath</class>
  </compound>
  <compound kind="file">
    <name>juce_FileSearchPathListComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FileSearchPathListComponent_8h</filename>
    <class kind="class">FileSearchPathListComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_FileTreeComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FileTreeComponent_8h</filename>
    <class kind="class">FileTreeComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_FillType.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/colour/</path>
    <filename>juce__FillType_8h</filename>
    <class kind="class">FillType</class>
  </compound>
  <compound kind="file">
    <name>juce_FlacAudioFormat.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__FlacAudioFormat_8h</filename>
    <class kind="class">FlacAudioFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_Font.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/fonts/</path>
    <filename>juce__Font_8h</filename>
    <class kind="class">Font</class>
  </compound>
  <compound kind="file">
    <name>juce_GenericAudioProcessorEditor.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__GenericAudioProcessorEditor_8h</filename>
    <class kind="class">GenericAudioProcessorEditor</class>
  </compound>
  <compound kind="file">
    <name>juce_GlowEffect.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/effects/</path>
    <filename>juce__GlowEffect_8h</filename>
    <class kind="class">GlowEffect</class>
  </compound>
  <compound kind="file">
    <name>juce_GlyphArrangement.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/fonts/</path>
    <filename>juce__GlyphArrangement_8h</filename>
    <class kind="class">PositionedGlyph</class>
    <class kind="class">GlyphArrangement</class>
  </compound>
  <compound kind="file">
    <name>juce_GraphicsContext.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/contexts/</path>
    <filename>juce__GraphicsContext_8h</filename>
    <class kind="class">Graphics</class>
    <class kind="class">Graphics::ScopedSaveState</class>
  </compound>
  <compound kind="file">
    <name>juce_GroupComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__GroupComponent_8h</filename>
    <class kind="class">GroupComponent</class>
    <class kind="struct">GroupComponent::Ids</class>
  </compound>
  <compound kind="file">
    <name>juce_GZIPCompressorOutputStream.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/zip/</path>
    <filename>juce__GZIPCompressorOutputStream_8h</filename>
    <class kind="class">GZIPCompressorOutputStream</class>
  </compound>
  <compound kind="file">
    <name>juce_GZIPDecompressorInputStream.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/zip/</path>
    <filename>juce__GZIPDecompressorInputStream_8h</filename>
    <class kind="class">GZIPDecompressorInputStream</class>
  </compound>
  <compound kind="file">
    <name>juce_HashMap.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/containers/</path>
    <filename>juce__HashMap_8h</filename>
    <class kind="class">DefaultHashFunctions</class>
    <class kind="class">HashMap</class>
    <class kind="class">HashMap::Iterator</class>
  </compound>
  <compound kind="file">
    <name>juce_HeapBlock.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/memory/</path>
    <filename>juce__HeapBlock_8h</filename>
    <class kind="class">HeapBlock</class>
  </compound>
  <compound kind="file">
    <name>juce_HyperlinkButton.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__HyperlinkButton_8h</filename>
    <class kind="class">HyperlinkButton</class>
    <class kind="struct">HyperlinkButton::Ids</class>
  </compound>
  <compound kind="file">
    <name>juce_Identifier.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/text/</path>
    <filename>juce__Identifier_8h</filename>
    <class kind="class">Identifier</class>
  </compound>
  <compound kind="file">
    <name>juce_IIRFilter.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/effects/</path>
    <filename>juce__IIRFilter_8h</filename>
    <class kind="class">IIRFilter</class>
  </compound>
  <compound kind="file">
    <name>juce_IIRFilterAudioSource.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__IIRFilterAudioSource_8h</filename>
    <class kind="class">IIRFilterAudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_Image.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/images/</path>
    <filename>juce__Image_8h</filename>
    <class kind="class">Image</class>
    <class kind="class">Image::BitmapData</class>
    <class kind="class">Image::BitmapData::BitmapDataReleaser</class>
    <class kind="class">ImagePixelData</class>
    <class kind="class">ImageType</class>
    <class kind="class">SoftwareImageType</class>
    <class kind="class">NativeImageType</class>
  </compound>
  <compound kind="file">
    <name>juce_ImageButton.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__ImageButton_8h</filename>
    <class kind="class">ImageButton</class>
    <class kind="struct">ImageButton::Ids</class>
  </compound>
  <compound kind="file">
    <name>juce_ImageCache.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/images/</path>
    <filename>juce__ImageCache_8h</filename>
    <class kind="class">ImageCache</class>
  </compound>
  <compound kind="file">
    <name>juce_ImageComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__ImageComponent_8h</filename>
    <class kind="class">ImageComponent</class>
    <class kind="struct">ImageComponent::Ids</class>
  </compound>
  <compound kind="file">
    <name>juce_ImageConvolutionKernel.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/images/</path>
    <filename>juce__ImageConvolutionKernel_8h</filename>
    <class kind="class">ImageConvolutionKernel</class>
  </compound>
  <compound kind="file">
    <name>juce_ImageEffectFilter.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/effects/</path>
    <filename>juce__ImageEffectFilter_8h</filename>
    <class kind="class">ImageEffectFilter</class>
  </compound>
  <compound kind="file">
    <name>juce_ImageFileFormat.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/images/</path>
    <filename>juce__ImageFileFormat_8h</filename>
    <class kind="class">ImageFileFormat</class>
    <class kind="class">PNGImageFormat</class>
    <class kind="class">JPEGImageFormat</class>
    <class kind="class">GIFImageFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_ImagePreviewComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__ImagePreviewComponent_8h</filename>
    <class kind="class">ImagePreviewComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_IncludeModuleHeaders.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_plugin_client/utility/</path>
    <filename>juce__IncludeModuleHeaders_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_IncludeSystemHeaders.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_plugin_client/utility/</path>
    <filename>juce__IncludeSystemHeaders_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_Initialisation.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/application/</path>
    <filename>juce__Initialisation_8h</filename>
    <class kind="class">ScopedJuceInitialiser_GUI</class>
    <member kind="define">
      <type>#define</type>
      <name>START_JUCE_APPLICATION</name>
      <anchorfile>juce__Initialisation_8h.html</anchorfile>
      <anchor>a10c79cf9cafd40244a741e5945878e79</anchor>
      <arglist>(AppClass)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API void JUCE_CALLTYPE</type>
      <name>initialiseJuce_GUI</name>
      <anchorfile>juce__Initialisation_8h.html</anchorfile>
      <anchor>aa648b242fe6ecc639ac53ec9c969822f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API void JUCE_CALLTYPE</type>
      <name>shutdownJuce_GUI</name>
      <anchorfile>juce__Initialisation_8h.html</anchorfile>
      <anchor>a1c949ca46c8ef9bcefbaf9256ab6ff80</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_InputSource.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/streams/</path>
    <filename>juce__InputSource_8h</filename>
    <class kind="class">InputSource</class>
  </compound>
  <compound kind="file">
    <name>juce_InputStream.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/streams/</path>
    <filename>juce__InputStream_8h</filename>
    <class kind="class">InputStream</class>
  </compound>
  <compound kind="file">
    <name>juce_InterprocessConnection.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_events/interprocess/</path>
    <filename>juce__InterprocessConnection_8h</filename>
    <class kind="class">InterprocessConnection</class>
  </compound>
  <compound kind="file">
    <name>juce_InterprocessConnectionServer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_events/interprocess/</path>
    <filename>juce__InterprocessConnectionServer_8h</filename>
    <class kind="class">InterprocessConnectionServer</class>
  </compound>
  <compound kind="file">
    <name>juce_InterProcessLock.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/threads/</path>
    <filename>juce__InterProcessLock_8h</filename>
    <class kind="class">InterProcessLock</class>
    <class kind="class">InterProcessLock::ScopedLockType</class>
  </compound>
  <compound kind="file">
    <name>juce_JSON.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/json/</path>
    <filename>juce__JSON_8h</filename>
    <class kind="class">JSON</class>
  </compound>
  <compound kind="file">
    <name>juce_Justification.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/placement/</path>
    <filename>juce__Justification_8h</filename>
    <class kind="class">Justification</class>
  </compound>
  <compound kind="file">
    <name>juce_KeyboardFocusTraverser.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>juce__KeyboardFocusTraverser_8h</filename>
    <class kind="class">KeyboardFocusTraverser</class>
  </compound>
  <compound kind="file">
    <name>juce_KeyListener.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>juce__KeyListener_8h</filename>
    <class kind="class">KeyListener</class>
  </compound>
  <compound kind="file">
    <name>juce_KeyMappingEditorComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__KeyMappingEditorComponent_8h</filename>
    <class kind="class">KeyMappingEditorComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_KeyPress.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>juce__KeyPress_8h</filename>
    <class kind="class">KeyPress</class>
  </compound>
  <compound kind="file">
    <name>juce_KeyPressMappingSet.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/commands/</path>
    <filename>juce__KeyPressMappingSet_8h</filename>
    <class kind="class">KeyPressMappingSet</class>
  </compound>
  <compound kind="file">
    <name>juce_KnownPluginList.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/scanning/</path>
    <filename>juce__KnownPluginList_8h</filename>
    <class kind="class">KnownPluginList</class>
  </compound>
  <compound kind="file">
    <name>juce_Label.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__Label_8h</filename>
    <class kind="class">Label</class>
    <class kind="class">Label::Listener</class>
    <class kind="struct">Label::Ids</class>
    <member kind="typedef">
      <type>Label::Listener</type>
      <name>LabelListener</name>
      <anchorfile>juce__Label_8h.html</anchorfile>
      <anchor>ab9b5d624453111189a1343155b81218e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_LADSPAPluginFormat.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/format_types/</path>
    <filename>juce__LADSPAPluginFormat_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_LassoComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__LassoComponent_8h</filename>
    <class kind="class">LassoSource</class>
    <class kind="class">LassoComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_LeakedObjectDetector.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/memory/</path>
    <filename>juce__LeakedObjectDetector_8h</filename>
    <class kind="class">LeakedObjectDetector</class>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_LEAK_DETECTOR</name>
      <anchorfile>juce__LeakedObjectDetector_8h.html</anchorfile>
      <anchor>ab3639a79598b35f2116f4572af0d93f1</anchor>
      <arglist>(OwnerClass)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Line.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__Line_8h</filename>
    <class kind="class">Line</class>
  </compound>
  <compound kind="file">
    <name>juce_LinkedListPointer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/containers/</path>
    <filename>juce__LinkedListPointer_8h</filename>
    <class kind="class">LinkedListPointer</class>
    <class kind="class">LinkedListPointer::Appender</class>
  </compound>
  <compound kind="file">
    <name>juce_ListBox.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__ListBox_8h</filename>
    <class kind="class">ListBoxModel</class>
    <class kind="class">ListBox</class>
    <class kind="struct">ListBox::Ids</class>
  </compound>
  <compound kind="file">
    <name>juce_ListenerList.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_events/broadcasters/</path>
    <filename>juce__ListenerList_8h</filename>
    <class kind="class">ListenerList</class>
    <class kind="class">ListenerList::DummyBailOutChecker</class>
    <class kind="class">ListenerList::Iterator</class>
  </compound>
  <compound kind="file">
    <name>juce_LocalisedStrings.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/text/</path>
    <filename>juce__LocalisedStrings_8h</filename>
    <class kind="class">LocalisedStrings</class>
    <member kind="define">
      <type>#define</type>
      <name>TRANS</name>
      <anchorfile>juce__LocalisedStrings_8h.html</anchorfile>
      <anchor>af3c28ad27b0d8fa2f615888701e32b07</anchor>
      <arglist>(stringLiteral)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>translate</name>
      <anchorfile>juce__LocalisedStrings_8h.html</anchorfile>
      <anchor>a4326829416c1aa01a16c7ada506244a8</anchor>
      <arglist>(const String &amp;stringLiteral)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>translate</name>
      <anchorfile>juce__LocalisedStrings_8h.html</anchorfile>
      <anchor>ae148974ff676a67e85924ce73587ae1e</anchor>
      <arglist>(const char *stringLiteral)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>translate</name>
      <anchorfile>juce__LocalisedStrings_8h.html</anchorfile>
      <anchor>ae29a8236bdf6cdcbd834c7861f3f5ef4</anchor>
      <arglist>(const String &amp;stringLiteral, const String &amp;resultIfNotFound)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Logger.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/logging/</path>
    <filename>juce__Logger_8h</filename>
    <class kind="class">Logger</class>
  </compound>
  <compound kind="file">
    <name>juce_LookAndFeel.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/lookandfeel/</path>
    <filename>juce__LookAndFeel_8h</filename>
    <class kind="class">LookAndFeel</class>
  </compound>
  <compound kind="file">
    <name>juce_LowLevelGraphicsContext.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/contexts/</path>
    <filename>juce__LowLevelGraphicsContext_8h</filename>
    <class kind="class">LowLevelGraphicsContext</class>
  </compound>
  <compound kind="file">
    <name>juce_LowLevelGraphicsPostScriptRenderer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/contexts/</path>
    <filename>juce__LowLevelGraphicsPostScriptRenderer_8h</filename>
    <class kind="class">LowLevelGraphicsPostScriptRenderer</class>
    <class kind="struct">LowLevelGraphicsPostScriptRenderer::SavedState</class>
  </compound>
  <compound kind="file">
    <name>juce_LowLevelGraphicsSoftwareRenderer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/contexts/</path>
    <filename>juce__LowLevelGraphicsSoftwareRenderer_8h</filename>
    <class kind="class">LowLevelGraphicsSoftwareRenderer</class>
  </compound>
  <compound kind="file">
    <name>juce_MACAddress.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/network/</path>
    <filename>juce__MACAddress_8h</filename>
    <class kind="class">MACAddress</class>
  </compound>
  <compound kind="file">
    <name>juce_MarkerList.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/positioning/</path>
    <filename>juce__MarkerList_8h</filename>
    <class kind="class">MarkerList</class>
    <class kind="class">MarkerList::Marker</class>
    <class kind="class">MarkerList::Listener</class>
    <class kind="class">MarkerList::ValueTreeWrapper</class>
  </compound>
  <compound kind="file">
    <name>juce_MathsFunctions.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/maths/</path>
    <filename>juce__MathsFunctions_8h</filename>
    <class kind="struct">TypeHelpers::ParameterType</class>
    <class kind="struct">TypeHelpers::SmallestFloatType</class>
    <class kind="struct">TypeHelpers::SmallestFloatType&lt; double &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>literal64bit</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a2a04225a9df1324513c2913f2d184abc</anchor>
      <arglist>(longLiteral)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_UNDENORMALISE</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a339666bd60cc6cb0831cb79c8f1b07b6</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PARAMETER_TYPE</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>ab17e68e410cbcdaf3074214aed490ec8</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="typedef">
      <type>signed char</type>
      <name>int8</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a1b956fe1df85f3c132b21edb4e116458</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uint8</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>adde6aaee8457bee49c2a92621fe22b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed short</type>
      <name>int16</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a259fa4834387bd68627ddf37bb3ebdb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>uint16</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a05f6b0ae8f6a6e135b0e290c25fe0e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed int</type>
      <name>int32</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a43d43196463bde49cb067f5c20ab8481</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint32</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a1134b580f8da4de94ca6b1de4d37975e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long</type>
      <name>int64</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>aecfc3c54bd29ad5964e1c1c3ccbf89df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>uint64</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a29940ae63ec06c9998bba873e25407ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>pointer_sized_int</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a8d188377fe1977ca9d1a9b738019dd78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>pointer_sized_uint</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a2d432c371b407ba6f36d34aa95229423</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>jmax</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>aafa7f705c9f978725910c5956d04226c</anchor>
      <arglist>(const Type a, const Type b)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>jmax</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>afcbc3b08f54b224588dc59db245bbec9</anchor>
      <arglist>(const Type a, const Type b, const Type c)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>jmax</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>aba21bad1517dd8777ed53ca423f4f5d3</anchor>
      <arglist>(const Type a, const Type b, const Type c, const Type d)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>jmin</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>abc3ad3738e50ba0dadc7ac2e5535a09a</anchor>
      <arglist>(const Type a, const Type b)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>jmin</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a391795999a08aa26e06aca6009199cf1</anchor>
      <arglist>(const Type a, const Type b, const Type c)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>jmin</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a120320899f42c1e2aa87841159200e4e</anchor>
      <arglist>(const Type a, const Type b, const Type c, const Type d)</arglist>
    </member>
    <member kind="function">
      <type>const Type</type>
      <name>findMinimum</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a781fe92da79a06a8dc38249c67d9b064</anchor>
      <arglist>(const Type *data, int numValues)</arglist>
    </member>
    <member kind="function">
      <type>const Type</type>
      <name>findMaximum</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>acf223ee84fd5d48ac3fe8e6afd655de1</anchor>
      <arglist>(const Type *values, int numValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findMinAndMax</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a8b2e19439406e1608c876bd8a44a7cb8</anchor>
      <arglist>(const Type *values, int numValues, Type &amp;lowest, Type &amp;highest)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>jlimit</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a6efeed0752de995d3bc123123f199735</anchor>
      <arglist>(const Type lowerLimit, const Type upperLimit, const Type valueToConstrain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositiveAndBelow</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a73c8f4283f104ebb3b9e026e5f487f1d</anchor>
      <arglist>(Type valueToTest, Type upperLimit) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositiveAndBelow</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a9e09fe6bca6583ce62dd0ba5eb2ec3fb</anchor>
      <arglist>(const int valueToTest, const int upperLimit) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositiveAndNotGreaterThan</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>afa66fb44e73cae43c71e86c2fff0f7c3</anchor>
      <arglist>(Type valueToTest, Type upperLimit) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositiveAndNotGreaterThan</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>ad08b1d778b33d8655218610d76616978</anchor>
      <arglist>(const int valueToTest, const int upperLimit) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapVariables</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>aff5d0bdbb9ef4111ca1ced0cc59a5bed</anchor>
      <arglist>(Type &amp;variable1, Type &amp;variable2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numElementsInArray</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a53205e331c49a67a9a7af0710d44d65e</anchor>
      <arglist>(Type(&amp;array)[N])</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>juce_hypot</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a18cf7a25c960a8c2b10cd4ea914eae75</anchor>
      <arglist>(Type a, Type b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>abs64</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>aeb0dad8278fdd49dd101532e47852148</anchor>
      <arglist>(const int64 n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>juce_isfinite</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a6f1d1715582be5ebe0e4efc72afddce3</anchor>
      <arglist>(FloatingPointType value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>roundToInt</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>afe8eb86381d389f4ba9f9931a38e1a44</anchor>
      <arglist>(const FloatType value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>roundToIntAccurate</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a7d50b878ef3d055bfbd7acdeefd14b4f</anchor>
      <arglist>(const double value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>roundDoubleToInt</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>aa93b4dcb7316e52b5852b6b0109fe216</anchor>
      <arglist>(const double value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>roundFloatToInt</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>abf62a9bf70ca904f80cdc33ee5ab6264</anchor>
      <arglist>(const float value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPowerOfTwo</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a6b41ad6a2ec0e7fd3c206ff794b26f49</anchor>
      <arglist>(IntegerType value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nextPowerOfTwo</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a137419534afee570f5ff25d643c77176</anchor>
      <arglist>(int n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>negativeAwareModulo</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a676484e2e5fb03b9863b97c182ba46d9</anchor>
      <arglist>(IntegerType dividend, const IntegerType divisor) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>double_Pi</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>aa929b9e10eedb3b7a6bd8f6ba2d9ddaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const float</type>
      <name>float_Pi</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>ac93fbc5e59d440cab26842b9c575d161</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Matrix3D.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__Matrix3D_8h</filename>
    <class kind="class">Matrix3D</class>
  </compound>
  <compound kind="file">
    <name>juce_MD5.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_cryptography/hashing/</path>
    <filename>juce__MD5_8h</filename>
    <class kind="class">MD5</class>
  </compound>
  <compound kind="file">
    <name>juce_Memory.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/memory/</path>
    <filename>juce__Memory_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>juce_UseDebuggingNewOperator</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>a881926ad904a631336e5d4b15f05c548</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zeromem</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>a48fb9b158a3767e6573d27a8160956ea</anchor>
      <arglist>(void *memory, size_t numBytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zerostruct</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>a1f3dbe374ad9280ed9ba72f510d8e5b0</anchor>
      <arglist>(Type &amp;structure) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAndZero</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>a4163b928fab6bebea5691e97c72fc4fa</anchor>
      <arglist>(Type &amp;pointer)</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>addBytesToPointer</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>aff4da7e8de7b9df89709b2fc39ebd6fe</anchor>
      <arglist>(Type *pointer, int bytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAddressDifference</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>a667897ead2d6fd7f9f682bd8f75da26a</anchor>
      <arglist>(Type1 *pointer1, Type2 *pointer2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>createCopyIfNotNull</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>a607b18f00ee6152503a1c5352d4efeb8</anchor>
      <arglist>(Type *pointer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_MemoryBlock.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/memory/</path>
    <filename>juce__MemoryBlock_8h</filename>
    <class kind="class">MemoryBlock</class>
  </compound>
  <compound kind="file">
    <name>juce_MemoryInputStream.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/streams/</path>
    <filename>juce__MemoryInputStream_8h</filename>
    <class kind="class">MemoryInputStream</class>
  </compound>
  <compound kind="file">
    <name>juce_MemoryMappedFile.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/files/</path>
    <filename>juce__MemoryMappedFile_8h</filename>
    <class kind="class">MemoryMappedFile</class>
  </compound>
  <compound kind="file">
    <name>juce_MemoryOutputStream.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/streams/</path>
    <filename>juce__MemoryOutputStream_8h</filename>
    <class kind="class">MemoryOutputStream</class>
    <member kind="function">
      <type>OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__MemoryOutputStream_8h.html</anchorfile>
      <anchor>a17036cdcf5bf836c01e2ee847f01d3d0</anchor>
      <arglist>(OutputStream &amp;stream, const MemoryOutputStream &amp;streamToRead)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_MenuBarComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/menus/</path>
    <filename>juce__MenuBarComponent_8h</filename>
    <class kind="class">MenuBarComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_MenuBarModel.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/menus/</path>
    <filename>juce__MenuBarModel_8h</filename>
    <class kind="class">MenuBarModel</class>
    <class kind="class">MenuBarModel::Listener</class>
    <member kind="typedef">
      <type>MenuBarModel::Listener</type>
      <name>MenuBarModelListener</name>
      <anchorfile>juce__MenuBarModel_8h.html</anchorfile>
      <anchor>a7657d02fc9f68fc56cb1d0e7902537dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Message.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_events/messages/</path>
    <filename>juce__Message_8h</filename>
    <class kind="class">Message</class>
  </compound>
  <compound kind="file">
    <name>juce_MessageListener.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_events/messages/</path>
    <filename>juce__MessageListener_8h</filename>
    <class kind="class">MessageListener</class>
  </compound>
  <compound kind="file">
    <name>juce_MessageManager.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_events/messages/</path>
    <filename>juce__MessageManager_8h</filename>
    <class kind="class">MessageManager</class>
    <class kind="class">MessageManager::MessageBase</class>
    <class kind="class">MessageManagerLock</class>
    <member kind="typedef">
      <type>void *(</type>
      <name>MessageCallbackFunction</name>
      <anchorfile>juce__MessageManager_8h.html</anchorfile>
      <anchor>a107bb4f42cc6661a36a13b0fad22196d</anchor>
      <arglist>)(void *userData)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_MidiBuffer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/midi/</path>
    <filename>juce__MidiBuffer_8h</filename>
    <class kind="class">MidiBuffer</class>
    <class kind="class">MidiBuffer::Iterator</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiFile.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/midi/</path>
    <filename>juce__MidiFile_8h</filename>
    <class kind="class">MidiFile</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiInput.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_devices/midi_io/</path>
    <filename>juce__MidiInput_8h</filename>
    <class kind="class">MidiInputCallback</class>
    <class kind="class">MidiInput</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiKeyboardComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_utils/gui/</path>
    <filename>juce__MidiKeyboardComponent_8h</filename>
    <class kind="class">MidiKeyboardComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiKeyboardState.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/midi/</path>
    <filename>juce__MidiKeyboardState_8h</filename>
    <class kind="class">MidiKeyboardStateListener</class>
    <class kind="class">MidiKeyboardState</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiMessage.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/midi/</path>
    <filename>juce__MidiMessage_8h</filename>
    <class kind="class">MidiMessage</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiMessageCollector.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_devices/midi_io/</path>
    <filename>juce__MidiMessageCollector_8h</filename>
    <class kind="class">MidiMessageCollector</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiMessageSequence.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/midi/</path>
    <filename>juce__MidiMessageSequence_8h</filename>
    <class kind="class">MidiMessageSequence</class>
    <class kind="class">MidiMessageSequence::MidiEventHolder</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiOutput.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_devices/midi_io/</path>
    <filename>juce__MidiOutput_8h</filename>
    <class kind="class">MidiOutput</class>
  </compound>
  <compound kind="file">
    <name>juce_MixerAudioSource.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__MixerAudioSource_8h</filename>
    <class kind="class">MixerAudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_ModalComponentManager.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/components/</path>
    <filename>juce__ModalComponentManager_8h</filename>
    <class kind="class">ModalComponentManager</class>
    <class kind="class">ModalComponentManager::Callback</class>
    <class kind="class">ModalCallbackFunction</class>
  </compound>
  <compound kind="file">
    <name>juce_ModifierKeys.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>juce__ModifierKeys_8h</filename>
    <class kind="class">ModifierKeys</class>
  </compound>
  <compound kind="file">
    <name>juce_MouseCursor.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__MouseCursor_8h</filename>
    <class kind="class">MouseCursor</class>
  </compound>
  <compound kind="file">
    <name>juce_MouseEvent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__MouseEvent_8h</filename>
    <class kind="class">MouseEvent</class>
    <class kind="struct">MouseWheelDetails</class>
  </compound>
  <compound kind="file">
    <name>juce_MouseInputSource.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__MouseInputSource_8h</filename>
    <class kind="class">MouseInputSource</class>
  </compound>
  <compound kind="file">
    <name>juce_MouseListener.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__MouseListener_8h</filename>
    <class kind="class">MouseListener</class>
  </compound>
  <compound kind="file">
    <name>juce_MP3AudioFormat.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__MP3AudioFormat_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_MultiDocumentPanel.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__MultiDocumentPanel_8h</filename>
    <class kind="class">MultiDocumentPanelWindow</class>
    <class kind="class">MultiDocumentPanel</class>
  </compound>
  <compound kind="file">
    <name>juce_MultiTimer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_events/timers/</path>
    <filename>juce__MultiTimer_8h</filename>
    <class kind="class">MultiTimer</class>
  </compound>
  <compound kind="file">
    <name>juce_NamedPipe.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/network/</path>
    <filename>juce__NamedPipe_8h</filename>
    <class kind="class">NamedPipe</class>
  </compound>
  <compound kind="file">
    <name>juce_NamedValueSet.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/containers/</path>
    <filename>juce__NamedValueSet_8h</filename>
    <class kind="class">NamedValueSet</class>
  </compound>
  <compound kind="file">
    <name>juce_NativeMessageBox.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__NativeMessageBox_8h</filename>
    <class kind="class">NativeMessageBox</class>
  </compound>
  <compound kind="file">
    <name>juce_NewLine.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/text/</path>
    <filename>juce__NewLine_8h</filename>
    <class kind="class">NewLine</class>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__NewLine_8h.html</anchorfile>
      <anchor>aa57adff1276b30d4439a0000999303a1</anchor>
      <arglist>(String &amp;string1, const NewLine &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>NewLine</type>
      <name>newLine</name>
      <anchorfile>juce__NewLine_8h.html</anchorfile>
      <anchor>abd231b88341c3e2c328178d34f3ce8fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_NSViewComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/embedding/</path>
    <filename>juce__NSViewComponent_8h</filename>
    <class kind="class">NSViewComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_OggVorbisAudioFormat.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__OggVorbisAudioFormat_8h</filename>
    <class kind="class">OggVorbisAudioFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_OldSchoolLookAndFeel.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/lookandfeel/</path>
    <filename>juce__OldSchoolLookAndFeel_8h</filename>
    <class kind="class">OldSchoolLookAndFeel</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLContext.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLContext_8h</filename>
    <class kind="class">OpenGLContext</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLFrameBuffer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLFrameBuffer_8h</filename>
    <class kind="class">OpenGLFrameBuffer</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLGraphicsContext.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLGraphicsContext_8h</filename>
    <member kind="function">
      <type>LowLevelGraphicsContext *</type>
      <name>createOpenGLGraphicsContext</name>
      <anchorfile>juce__OpenGLGraphicsContext_8h.html</anchorfile>
      <anchor>ae05d83372160a5db647aba82df4610ec</anchor>
      <arglist>(OpenGLContext &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>LowLevelGraphicsContext *</type>
      <name>createOpenGLGraphicsContext</name>
      <anchorfile>juce__OpenGLGraphicsContext_8h.html</anchorfile>
      <anchor>adbc556b3cdfa0df072a4c681806fa836</anchor>
      <arglist>(OpenGLContext &amp;context, OpenGLFrameBuffer &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>LowLevelGraphicsContext *</type>
      <name>createOpenGLGraphicsContext</name>
      <anchorfile>juce__OpenGLGraphicsContext_8h.html</anchorfile>
      <anchor>a1fa859ece4aed6ca32da77ffda2daebe</anchor>
      <arglist>(OpenGLContext &amp;context, unsigned int frameBufferID, int width, int height)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLHelpers.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLHelpers_8h</filename>
    <class kind="class">OpenGLHelpers</class>
    <class kind="class">OpenGLTextureFromImage</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLImage.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLImage_8h</filename>
    <class kind="class">OpenGLImageType</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLPixelFormat.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLPixelFormat_8h</filename>
    <class kind="class">OpenGLPixelFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLRenderer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLRenderer_8h</filename>
    <class kind="class">OpenGLRenderer</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLShaderProgram.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLShaderProgram_8h</filename>
    <class kind="class">OpenGLShaderProgram</class>
    <class kind="struct">OpenGLShaderProgram::Uniform</class>
    <class kind="struct">OpenGLShaderProgram::Attribute</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLTexture.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLTexture_8h</filename>
    <class kind="class">OpenGLTexture</class>
  </compound>
  <compound kind="file">
    <name>juce_OptionalScopedPointer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/memory/</path>
    <filename>juce__OptionalScopedPointer_8h</filename>
    <class kind="class">OptionalScopedPointer</class>
  </compound>
  <compound kind="file">
    <name>juce_OutputStream.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/streams/</path>
    <filename>juce__OutputStream_8h</filename>
    <class kind="class">OutputStream</class>
    <member kind="function">
      <type>OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>aebbf7c4da4a8a6d00537f9c2d4601569</anchor>
      <arglist>(OutputStream &amp;stream, int number)</arglist>
    </member>
    <member kind="function">
      <type>OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>ac54590833da9c7cd7e285cef4a111782</anchor>
      <arglist>(OutputStream &amp;stream, int64 number)</arglist>
    </member>
    <member kind="function">
      <type>OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>adba91c15c39e3eae8ed171b50771a223</anchor>
      <arglist>(OutputStream &amp;stream, double number)</arglist>
    </member>
    <member kind="function">
      <type>OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>a3e089b30a6da889130d53d343c6ba956</anchor>
      <arglist>(OutputStream &amp;stream, char character)</arglist>
    </member>
    <member kind="function">
      <type>OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>a23f2d981ecb1e398ef4c74f3e7f190c2</anchor>
      <arglist>(OutputStream &amp;stream, const char *text)</arglist>
    </member>
    <member kind="function">
      <type>OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>a7571c3249229c12b0dff1dcc2ca458ab</anchor>
      <arglist>(OutputStream &amp;stream, const MemoryBlock &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>a07fdee5f75932d78da59b9b98b1c7901</anchor>
      <arglist>(OutputStream &amp;stream, const File &amp;fileToRead)</arglist>
    </member>
    <member kind="function">
      <type>OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>a77dc198a61bfb3ea032f8eab04078348</anchor>
      <arglist>(OutputStream &amp;stream, InputStream &amp;streamToRead)</arglist>
    </member>
    <member kind="function">
      <type>OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>ae136e884f2016f13a55aba6c5b7c9ce4</anchor>
      <arglist>(OutputStream &amp;stream, const NewLine &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_OwnedArray.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/containers/</path>
    <filename>juce__OwnedArray_8h</filename>
    <class kind="class">OwnedArray</class>
  </compound>
  <compound kind="file">
    <name>juce_Path.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__Path_8h</filename>
    <class kind="class">Path</class>
    <class kind="class">Path::Iterator</class>
  </compound>
  <compound kind="file">
    <name>juce_PathIterator.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__PathIterator_8h</filename>
    <class kind="class">PathFlatteningIterator</class>
  </compound>
  <compound kind="file">
    <name>juce_PathStrokeType.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__PathStrokeType_8h</filename>
    <class kind="class">PathStrokeType</class>
  </compound>
  <compound kind="file">
    <name>juce_PerformanceCounter.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/time/</path>
    <filename>juce__PerformanceCounter_8h</filename>
    <class kind="class">PerformanceCounter</class>
  </compound>
  <compound kind="file">
    <name>juce_PixelFormats.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/colour/</path>
    <filename>juce__PixelFormats_8h</filename>
    <class kind="class">PixelARGB</class>
    <class kind="class">PixelRGB</class>
    <class kind="class">PixelAlpha</class>
  </compound>
  <compound kind="file">
    <name>juce_PlatformDefs.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/system/</path>
    <filename>juce__PlatformDefs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_CALLTYPE</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>af0b3f78ca801d88a7912f4c6bbf50e58</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_CDECL</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>af6815e7d8ca906bd8a6087d4d72d694c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>juce_LogCurrentAssertion</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a003e8bb6b9c1e3bee63827de72ca76aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>juce_breakDebugger</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a875142924cb37a18783af2e03c3feb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DBG</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a5335262a7d74113caa4edd740bded17d</anchor>
      <arglist>(dbgtext)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>jassertfalse</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>adc044ce5efecbecf2f5a44cd00db67b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>jassert</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a1f96ab6751237979b907a54f52a7296a</anchor>
      <arglist>(expression)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>static_jassert</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a0eb872d7ee75ed5bb25589dd175af725</anchor>
      <arglist>(expression)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_DECLARE_NON_COPYABLE</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a6ab7a603bf4435c7cb286b1744366eb2</anchor>
      <arglist>(className)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a851b02724a8158a7f746c66b5758b3dd</anchor>
      <arglist>(className)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_PREVENT_HEAP_ALLOCATION</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>abe12fb8b712ed0602dd1678599a3167b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_JOIN_MACRO</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a4dac24572cf8155c09d75f34c8297a47</anchor>
      <arglist>(item1, item2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_STRINGIFY</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a7fab1bb48f05df367f0a57bc6cf3d12f</anchor>
      <arglist>(item)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_TRY</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a267fd4f83073fb084b389df70243c52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_CATCH_EXCEPTION</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a76b33d944e52097017e10dbc10de503b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_CATCH_ALL</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>af8a67a7a14b17c2033ceb721e7fb7c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_CATCH_ALL_ASSERT</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a9bb6baa78f9a86902caa02b0f7c30b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forcedinline</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>ac2535cb549b141b3a96b8a08014e46cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_ALIGN</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>acd5d010d01e78e318786ab060742acd1</anchor>
      <arglist>(bytes)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>af25d2cb3e6d1124146f7f1fcd8648016</anchor>
      <arglist>(functionDef)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_MODAL_LOOPS_PERMITTED</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>ab78bf674b269119c2890d4bea40082b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_PluginDescription.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__PluginDescription_8h</filename>
    <class kind="class">PluginDescription</class>
  </compound>
  <compound kind="file">
    <name>juce_PluginDirectoryScanner.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/scanning/</path>
    <filename>juce__PluginDirectoryScanner_8h</filename>
    <class kind="class">PluginDirectoryScanner</class>
  </compound>
  <compound kind="file">
    <name>juce_PluginHostType.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_plugin_client/utility/</path>
    <filename>juce__PluginHostType_8h</filename>
    <class kind="class">PluginHostType</class>
  </compound>
  <compound kind="file">
    <name>juce_PluginListComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/scanning/</path>
    <filename>juce__PluginListComponent_8h</filename>
    <class kind="class">PluginListComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_Point.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__Point_8h</filename>
    <class kind="class">Point</class>
  </compound>
  <compound kind="file">
    <name>juce_PopupMenu.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/menus/</path>
    <filename>juce__PopupMenu_8h</filename>
    <class kind="class">PopupMenu</class>
    <class kind="class">PopupMenu::Options</class>
    <class kind="class">PopupMenu::MenuItemIterator</class>
    <class kind="class">PopupMenu::CustomComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_PositionableAudioSource.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__PositionableAudioSource_8h</filename>
    <class kind="class">PositionableAudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_PreferencesPanel.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__PreferencesPanel_8h</filename>
    <class kind="class">PreferencesPanel</class>
  </compound>
  <compound kind="file">
    <name>juce_Primes.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_cryptography/encryption/</path>
    <filename>juce__Primes_8h</filename>
    <class kind="class">Primes</class>
  </compound>
  <compound kind="file">
    <name>juce_Process.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/threads/</path>
    <filename>juce__Process_8h</filename>
    <class kind="class">Process</class>
  </compound>
  <compound kind="file">
    <name>juce_ProgressBar.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__ProgressBar_8h</filename>
    <class kind="class">ProgressBar</class>
  </compound>
  <compound kind="file">
    <name>juce_PropertiesFile.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_data_structures/app_properties/</path>
    <filename>juce__PropertiesFile_8h</filename>
    <class kind="class">PropertiesFile</class>
    <class kind="struct">PropertiesFile::Options</class>
  </compound>
  <compound kind="file">
    <name>juce_PropertyComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/properties/</path>
    <filename>juce__PropertyComponent_8h</filename>
    <class kind="class">PropertyComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_PropertyPanel.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/properties/</path>
    <filename>juce__PropertyPanel_8h</filename>
    <class kind="class">PropertyPanel</class>
  </compound>
  <compound kind="file">
    <name>juce_PropertySet.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/containers/</path>
    <filename>juce__PropertySet_8h</filename>
    <class kind="class">PropertySet</class>
  </compound>
  <compound kind="file">
    <name>juce_Quaternion.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__Quaternion_8h</filename>
    <class kind="class">Quaternion</class>
  </compound>
  <compound kind="file">
    <name>juce_QuickTimeAudioFormat.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__QuickTimeAudioFormat_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_QuickTimeMovieComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_video/playback/</path>
    <filename>juce__QuickTimeMovieComponent_8h</filename>
    <class kind="class">QuickTimeMovieComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_Random.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/maths/</path>
    <filename>juce__Random_8h</filename>
    <class kind="class">Random</class>
  </compound>
  <compound kind="file">
    <name>juce_Range.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/maths/</path>
    <filename>juce__Range_8h</filename>
    <class kind="class">Range</class>
  </compound>
  <compound kind="file">
    <name>juce_ReadWriteLock.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/threads/</path>
    <filename>juce__ReadWriteLock_8h</filename>
    <class kind="class">ReadWriteLock</class>
  </compound>
  <compound kind="file">
    <name>juce_RecentlyOpenedFilesList.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__RecentlyOpenedFilesList_8h</filename>
    <class kind="class">RecentlyOpenedFilesList</class>
  </compound>
  <compound kind="file">
    <name>juce_Rectangle.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__Rectangle_8h</filename>
    <class kind="class">Rectangle</class>
  </compound>
  <compound kind="file">
    <name>juce_RectangleList.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__RectangleList_8h</filename>
    <class kind="class">RectangleList</class>
    <class kind="class">RectangleList::Iterator</class>
  </compound>
  <compound kind="file">
    <name>juce_RectanglePlacement.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/placement/</path>
    <filename>juce__RectanglePlacement_8h</filename>
    <class kind="class">RectanglePlacement</class>
  </compound>
  <compound kind="file">
    <name>juce_ReferenceCountedArray.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/containers/</path>
    <filename>juce__ReferenceCountedArray_8h</filename>
    <class kind="class">ReferenceCountedArray</class>
  </compound>
  <compound kind="file">
    <name>juce_ReferenceCountedObject.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/memory/</path>
    <filename>juce__ReferenceCountedObject_8h</filename>
    <class kind="class">ReferenceCountedObject</class>
    <class kind="class">SingleThreadedReferenceCountedObject</class>
    <class kind="class">ReferenceCountedObjectPtr</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>juce__ReferenceCountedObject_8h.html</anchorfile>
      <anchor>a9fe3092d0a699f09ea15287dd040181a</anchor>
      <arglist>(const ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;object1, ReferenceCountedObjectClass *const object2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>juce__ReferenceCountedObject_8h.html</anchorfile>
      <anchor>aa1955b9309ddae26fc9abb53ecbdbec0</anchor>
      <arglist>(const ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;object1, const ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;object2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>juce__ReferenceCountedObject_8h.html</anchorfile>
      <anchor>ae7e6fe01bd10ec030fc8e74b5ddde129</anchor>
      <arglist>(ReferenceCountedObjectClass *object1, ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;object2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>juce__ReferenceCountedObject_8h.html</anchorfile>
      <anchor>a98d9adee99bce84b370ccdbf0dda395b</anchor>
      <arglist>(const ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;object1, const ReferenceCountedObjectClass *object2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>juce__ReferenceCountedObject_8h.html</anchorfile>
      <anchor>a299f655314f2f6d6f326962b0f7580ee</anchor>
      <arglist>(const ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;object1, ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;object2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>juce__ReferenceCountedObject_8h.html</anchorfile>
      <anchor>a243e8f237ce04e3470a9a509a94ca289</anchor>
      <arglist>(ReferenceCountedObjectClass *object1, ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;object2) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_RelativeCoordinate.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/positioning/</path>
    <filename>juce__RelativeCoordinate_8h</filename>
    <class kind="class">RelativeCoordinate</class>
    <class kind="struct">RelativeCoordinate::Strings</class>
    <class kind="struct">RelativeCoordinate::StandardStrings</class>
  </compound>
  <compound kind="file">
    <name>juce_RelativeCoordinatePositioner.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/positioning/</path>
    <filename>juce__RelativeCoordinatePositioner_8h</filename>
    <class kind="class">RelativeCoordinatePositionerBase</class>
    <class kind="class">RelativeCoordinatePositionerBase::ComponentScope</class>
  </compound>
  <compound kind="file">
    <name>juce_RelativeParallelogram.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/positioning/</path>
    <filename>juce__RelativeParallelogram_8h</filename>
    <class kind="class">RelativeParallelogram</class>
  </compound>
  <compound kind="file">
    <name>juce_RelativePoint.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/positioning/</path>
    <filename>juce__RelativePoint_8h</filename>
    <class kind="class">RelativePoint</class>
  </compound>
  <compound kind="file">
    <name>juce_RelativePointPath.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/positioning/</path>
    <filename>juce__RelativePointPath_8h</filename>
    <class kind="class">RelativePointPath</class>
    <class kind="class">RelativePointPath::ElementBase</class>
    <class kind="class">RelativePointPath::StartSubPath</class>
    <class kind="class">RelativePointPath::CloseSubPath</class>
    <class kind="class">RelativePointPath::LineTo</class>
    <class kind="class">RelativePointPath::QuadraticTo</class>
    <class kind="class">RelativePointPath::CubicTo</class>
  </compound>
  <compound kind="file">
    <name>juce_RelativeRectangle.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/positioning/</path>
    <filename>juce__RelativeRectangle_8h</filename>
    <class kind="class">RelativeRectangle</class>
  </compound>
  <compound kind="file">
    <name>juce_RelativeTime.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/time/</path>
    <filename>juce__RelativeTime_8h</filename>
    <class kind="class">RelativeTime</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>juce__RelativeTime_8h.html</anchorfile>
      <anchor>a61dba358e4af8c43c104572ded16ecdf</anchor>
      <arglist>(const RelativeTime &amp;t1, const RelativeTime &amp;t2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>juce__RelativeTime_8h.html</anchorfile>
      <anchor>aaae77e047ed42c1192d39efc77412d38</anchor>
      <arglist>(const RelativeTime &amp;t1, const RelativeTime &amp;t2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>juce__RelativeTime_8h.html</anchorfile>
      <anchor>a571f7c76076d6896ccf91bd03cb9fc2d</anchor>
      <arglist>(const RelativeTime &amp;t1, const RelativeTime &amp;t2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>juce__RelativeTime_8h.html</anchorfile>
      <anchor>a16fb81e975d55e3caf5e70a4f6fa52d4</anchor>
      <arglist>(const RelativeTime &amp;t1, const RelativeTime &amp;t2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>juce__RelativeTime_8h.html</anchorfile>
      <anchor>a9ca85b9193c8743f0727aeb844dbdb58</anchor>
      <arglist>(const RelativeTime &amp;t1, const RelativeTime &amp;t2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>juce__RelativeTime_8h.html</anchorfile>
      <anchor>a8db5555beff63edd2e397ed5443fb175</anchor>
      <arglist>(const RelativeTime &amp;t1, const RelativeTime &amp;t2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RelativeTime</type>
      <name>operator+</name>
      <anchorfile>juce__RelativeTime_8h.html</anchorfile>
      <anchor>a346cbdcc31c3ec0d42ae075ca6592dde</anchor>
      <arglist>(const RelativeTime &amp;t1, const RelativeTime &amp;t2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RelativeTime</type>
      <name>operator-</name>
      <anchorfile>juce__RelativeTime_8h.html</anchorfile>
      <anchor>ad19ca314c367b2b11efb9df7e85c456d</anchor>
      <arglist>(const RelativeTime &amp;t1, const RelativeTime &amp;t2) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ResamplingAudioSource.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__ResamplingAudioSource_8h</filename>
    <class kind="class">ResamplingAudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_ResizableBorderComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ResizableBorderComponent_8h</filename>
    <class kind="class">ResizableBorderComponent</class>
    <class kind="class">ResizableBorderComponent::Zone</class>
  </compound>
  <compound kind="file">
    <name>juce_ResizableCornerComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ResizableCornerComponent_8h</filename>
    <class kind="class">ResizableCornerComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_ResizableEdgeComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ResizableEdgeComponent_8h</filename>
    <class kind="class">ResizableEdgeComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_ResizableWindow.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__ResizableWindow_8h</filename>
    <class kind="class">ResizableWindow</class>
  </compound>
  <compound kind="file">
    <name>juce_Result.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/misc/</path>
    <filename>juce__Result_8h</filename>
    <class kind="class">Result</class>
  </compound>
  <compound kind="file">
    <name>juce_Reverb.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/effects/</path>
    <filename>juce__Reverb_8h</filename>
    <class kind="class">Reverb</class>
    <class kind="struct">Reverb::Parameters</class>
  </compound>
  <compound kind="file">
    <name>juce_ReverbAudioSource.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__ReverbAudioSource_8h</filename>
    <class kind="class">ReverbAudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_RSAKey.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_cryptography/encryption/</path>
    <filename>juce__RSAKey_8h</filename>
    <class kind="class">RSAKey</class>
  </compound>
  <compound kind="file">
    <name>juce_RTAS_DigiCode_Header.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_plugin_client/RTAS/</path>
    <filename>juce__RTAS__DigiCode__Header_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_Sampler.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_formats/sampler/</path>
    <filename>juce__Sampler_8h</filename>
    <class kind="class">SamplerSound</class>
    <class kind="class">SamplerVoice</class>
  </compound>
  <compound kind="file">
    <name>juce_ScopedLock.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/threads/</path>
    <filename>juce__ScopedLock_8h</filename>
    <class kind="class">GenericScopedLock</class>
    <class kind="class">GenericScopedUnlock</class>
    <class kind="class">GenericScopedTryLock</class>
  </compound>
  <compound kind="file">
    <name>juce_ScopedPointer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/memory/</path>
    <filename>juce__ScopedPointer_8h</filename>
    <class kind="class">ScopedPointer</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>juce__ScopedPointer_8h.html</anchorfile>
      <anchor>a44c6f65eba15909069b2ae838cbd96d1</anchor>
      <arglist>(const ScopedPointer&lt; ObjectType &gt; &amp;pointer1, ObjectType *const pointer2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>juce__ScopedPointer_8h.html</anchorfile>
      <anchor>a08ebf907fd87957ebdc43e49eb5cfccd</anchor>
      <arglist>(const ScopedPointer&lt; ObjectType &gt; &amp;pointer1, ObjectType *const pointer2) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ScopedReadLock.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/threads/</path>
    <filename>juce__ScopedReadLock_8h</filename>
    <class kind="class">ScopedReadLock</class>
  </compound>
  <compound kind="file">
    <name>juce_ScopedValueSetter.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/containers/</path>
    <filename>juce__ScopedValueSetter_8h</filename>
    <class kind="class">ScopedValueSetter</class>
  </compound>
  <compound kind="file">
    <name>juce_ScopedWriteLock.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/threads/</path>
    <filename>juce__ScopedWriteLock_8h</filename>
    <class kind="class">ScopedWriteLock</class>
  </compound>
  <compound kind="file">
    <name>juce_ScrollBar.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ScrollBar_8h</filename>
    <class kind="class">ScrollBar</class>
    <class kind="class">ScrollBar::Listener</class>
    <member kind="typedef">
      <type>ScrollBar::Listener</type>
      <name>ScrollBarListener</name>
      <anchorfile>juce__ScrollBar_8h.html</anchorfile>
      <anchor>aca2ee37ad48d18a710340db288ea80c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_SelectedItemSet.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__SelectedItemSet_8h</filename>
    <class kind="class">SelectedItemSet</class>
  </compound>
  <compound kind="file">
    <name>juce_SHA256.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_cryptography/hashing/</path>
    <filename>juce__SHA256_8h</filename>
    <class kind="class">SHA256</class>
  </compound>
  <compound kind="file">
    <name>juce_ShapeButton.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__ShapeButton_8h</filename>
    <class kind="class">ShapeButton</class>
  </compound>
  <compound kind="file">
    <name>juce_Singleton.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/memory/</path>
    <filename>juce__Singleton_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>juce_DeclareSingleton</name>
      <anchorfile>juce__Singleton_8h.html</anchorfile>
      <anchor>ac46b66c5d38d6bd3a937af241d152a44</anchor>
      <arglist>(classname, doNotRecreateAfterDeletion)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>juce_ImplementSingleton</name>
      <anchorfile>juce__Singleton_8h.html</anchorfile>
      <anchor>a514301c5c269b87e3a3e3da3a6640f8f</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>juce_DeclareSingleton_SingleThreaded</name>
      <anchorfile>juce__Singleton_8h.html</anchorfile>
      <anchor>a253f51f3a9ac2b4795e2ce08b2a756d9</anchor>
      <arglist>(classname, doNotRecreateAfterDeletion)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>juce_DeclareSingleton_SingleThreaded_Minimal</name>
      <anchorfile>juce__Singleton_8h.html</anchorfile>
      <anchor>a354e37d287b39d02097f4f74be14af51</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>juce_ImplementSingleton_SingleThreaded</name>
      <anchorfile>juce__Singleton_8h.html</anchorfile>
      <anchor>a4404ed444ce628bab43d7fb68f7f1884</anchor>
      <arglist>(classname)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Slider.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__Slider_8h</filename>
    <class kind="class">Slider</class>
    <class kind="class">Slider::Listener</class>
    <class kind="struct">Slider::Ids</class>
    <member kind="typedef">
      <type>Slider::Listener</type>
      <name>SliderListener</name>
      <anchorfile>juce__Slider_8h.html</anchorfile>
      <anchor>aef569434c5f0f6aca195bc50e4af0a0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_SliderPropertyComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/properties/</path>
    <filename>juce__SliderPropertyComponent_8h</filename>
    <class kind="class">SliderPropertyComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_Socket.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/network/</path>
    <filename>juce__Socket_8h</filename>
    <class kind="class">StreamingSocket</class>
    <class kind="class">DatagramSocket</class>
  </compound>
  <compound kind="file">
    <name>juce_SortedSet.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/containers/</path>
    <filename>juce__SortedSet_8h</filename>
    <class kind="class">SortedSet</class>
  </compound>
  <compound kind="file">
    <name>juce_SparseSet.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/containers/</path>
    <filename>juce__SparseSet_8h</filename>
    <class kind="class">SparseSet</class>
  </compound>
  <compound kind="file">
    <name>juce_SpinLock.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/threads/</path>
    <filename>juce__SpinLock_8h</filename>
    <class kind="class">SpinLock</class>
  </compound>
  <compound kind="file">
    <name>juce_SplashScreen.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__SplashScreen_8h</filename>
    <class kind="class">SplashScreen</class>
  </compound>
  <compound kind="file">
    <name>juce_StandaloneFilterWindow.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_plugin_client/Standalone/</path>
    <filename>juce__StandaloneFilterWindow_8h</filename>
    <class kind="class">StandaloneFilterWindow</class>
    <member kind="function">
      <type>AudioProcessor *JUCE_CALLTYPE</type>
      <name>createPluginFilter</name>
      <anchorfile>juce__StandaloneFilterWindow_8h.html</anchorfile>
      <anchor>a803761ea8219833514254308e552a8d3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_StandardHeader.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/system/</path>
    <filename>juce__StandardHeader_8h</filename>
    <class kind="class">ScopedAutoReleasePool</class>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_MAJOR_VERSION</name>
      <anchorfile>juce__StandardHeader_8h.html</anchorfile>
      <anchor>ad39afa9c8302295c83a3c431c553bc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_MINOR_VERSION</name>
      <anchorfile>juce__StandardHeader_8h.html</anchorfile>
      <anchor>a2a583ff83063cc1e7f9abeb35a21dff1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_BUILDNUMBER</name>
      <anchorfile>juce__StandardHeader_8h.html</anchorfile>
      <anchor>a9ac1dc104cd00f4cc2ff6dece8711f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_VERSION</name>
      <anchorfile>juce__StandardHeader_8h.html</anchorfile>
      <anchor>a8e9e97736d05e318de09b9bedab1aaa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_API</name>
      <anchorfile>juce__StandardHeader_8h.html</anchorfile>
      <anchor>a65961b3bfbda0ffb83750d914cee38fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_PUBLIC_FUNCTION</name>
      <anchorfile>juce__StandardHeader_8h.html</anchorfile>
      <anchor>a96fbdc03e0c892905daef7b47337c84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_AUTORELEASEPOOL</name>
      <anchorfile>juce__StandardHeader_8h.html</anchorfile>
      <anchor>ad73fadcd76040b11a626d5bdf833ad49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>BEGIN_JUCE_NAMESPACE JUCE_API bool JUCE_CALLTYPE</type>
      <name>juce_isRunningUnderDebugger</name>
      <anchorfile>juce__StandardHeader_8h.html</anchorfile>
      <anchor>a1ae594ac7801c1936131b0512157c1dd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_StretchableLayoutManager.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__StretchableLayoutManager_8h</filename>
    <class kind="class">StretchableLayoutManager</class>
  </compound>
  <compound kind="file">
    <name>juce_StretchableLayoutResizerBar.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__StretchableLayoutResizerBar_8h</filename>
    <class kind="class">StretchableLayoutResizerBar</class>
  </compound>
  <compound kind="file">
    <name>juce_StretchableObjectResizer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__StretchableObjectResizer_8h</filename>
    <class kind="class">StretchableObjectResizer</class>
  </compound>
  <compound kind="file">
    <name>juce_String.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/text/</path>
    <filename>juce__String_8h</filename>
    <class kind="class">String</class>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_STRING_UTF_TYPE</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>abf84e9c5d914b5000483aa6c975aaf75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>ae0f6b7a1acb4a2d3060666bf04b31f4e</anchor>
      <arglist>(const char *string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a3a619def69edcfd73d70288d21656071</anchor>
      <arglist>(const wchar_t *string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a96b597b42d55a8c5cb4db648fcdd4433</anchor>
      <arglist>(char string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a289a7ddd2aa611007fdfd999bbb67984</anchor>
      <arglist>(wchar_t string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a0ff1262628ab09e48213c4576b2699ef</anchor>
      <arglist>(String string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a80408c62699a01f1253730ff924ad296</anchor>
      <arglist>(String string1, const char *string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a67a5325e801ca088aeb972ca92c0b70f</anchor>
      <arglist>(String string1, const wchar_t *string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a8f47c45d46a66a1fa9011ec742fc92ce</anchor>
      <arglist>(String string1, char characterToAppend)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a8f8db7bad3db2cec132fa4f7dc7981d6</anchor>
      <arglist>(String string1, wchar_t characterToAppend)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a2b2f2a59cf79a16bdb6ec4c209a0d476</anchor>
      <arglist>(String &amp;string1, char characterToAppend)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a6e6aafbf73ea057e3e4ac4c5f1a51074</anchor>
      <arglist>(String &amp;string1, wchar_t characterToAppend)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a245f8927b83129e9c37b09e264ae3607</anchor>
      <arglist>(String &amp;string1, const char *string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a05362992d3329fa260cb894957d814bd</anchor>
      <arglist>(String &amp;string1, const wchar_t *string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a0f0698c593294b72c1c3d1d0c18c9203</anchor>
      <arglist>(String &amp;string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a6a1276f6108d092973905baf8d6265a8</anchor>
      <arglist>(String &amp;string1, short number)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>aa15383b496d234f9d80edd441634fa90</anchor>
      <arglist>(String &amp;string1, int number)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>adf6e4e4381e9443bd029d6c2fc6ec58b</anchor>
      <arglist>(String &amp;string1, long number)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a595ca2aa67e574b0b35bcd58f86b88f0</anchor>
      <arglist>(String &amp;string1, float number)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a493d08281ed7696c36df9acb2bcae945</anchor>
      <arglist>(String &amp;string1, double number)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator==</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>ac63080f46c282d58b2cf9ad5c36ea1bd</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator==</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a3b88a6404df2d63a88cf66b798b1d435</anchor>
      <arglist>(const String &amp;string1, const char *string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator==</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a4a0596007eb54934fa2fc026afed40d8</anchor>
      <arglist>(const String &amp;string1, const wchar_t *string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator==</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a61f2d2e9d0555f50dd298ef9d94c5bb0</anchor>
      <arglist>(const String &amp;string1, const CharPointer_UTF8 &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator==</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a59923725995bca7292bcb9473b407192</anchor>
      <arglist>(const String &amp;string1, const CharPointer_UTF16 &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator==</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a0a6691a739bfdd4371330b4dfb35931a</anchor>
      <arglist>(const String &amp;string1, const CharPointer_UTF32 &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator!=</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a2b8ed7c3d382fe5764b0b2dd4d7885ad</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator!=</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>aab136b396cae71bb857706b0e7c33b90</anchor>
      <arglist>(const String &amp;string1, const char *string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator!=</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a1bb9551991fb47687874b185834278c3</anchor>
      <arglist>(const String &amp;string1, const wchar_t *string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator!=</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a8f4ed439ac58c51cc250832a1031cf5d</anchor>
      <arglist>(const String &amp;string1, const CharPointer_UTF8 &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator!=</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a9d1a6ade1b2b34d74792b50493c0070b</anchor>
      <arglist>(const String &amp;string1, const CharPointer_UTF16 &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator!=</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a49ae78d20bff07ba7086ccb2b53f1885</anchor>
      <arglist>(const String &amp;string1, const CharPointer_UTF32 &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator&gt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a8f94b7fdb0c55c2a97b06c92bc7ee04c</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>aeac6221ecc76986be02984494cce74f3</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator&gt;=</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>ade5ad81bc2e1403565b49086e81bc717</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator&lt;=</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>abfcf280ae0bbe84d3822b2d330e99d58</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; char, traits &gt; &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>aeb8f16cdf7cbd9d5c2d9863767c6a300</anchor>
      <arglist>(std::basic_ostream&lt; char, traits &gt; &amp;stream, const String &amp;stringToWrite)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; wchar_t, traits &gt; &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a658d972ca79f5270ac88b18de27f505e</anchor>
      <arglist>(std::basic_ostream&lt; wchar_t, traits &gt; &amp;stream, const String &amp;stringToWrite)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a54cae297934c6894de21d45e8ad935a2</anchor>
      <arglist>(OutputStream &amp;stream, const String &amp;stringToWrite)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_StringArray.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/text/</path>
    <filename>juce__StringArray_8h</filename>
    <class kind="class">StringArray</class>
  </compound>
  <compound kind="file">
    <name>juce_StringPairArray.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/text/</path>
    <filename>juce__StringPairArray_8h</filename>
    <class kind="class">StringPairArray</class>
  </compound>
  <compound kind="file">
    <name>juce_StringPool.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/text/</path>
    <filename>juce__StringPool_8h</filename>
    <class kind="class">StringPool</class>
  </compound>
  <compound kind="file">
    <name>juce_SubregionStream.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/streams/</path>
    <filename>juce__SubregionStream_8h</filename>
    <class kind="class">SubregionStream</class>
  </compound>
  <compound kind="file">
    <name>juce_Synthesiser.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/synthesisers/</path>
    <filename>juce__Synthesiser_8h</filename>
    <class kind="class">SynthesiserSound</class>
    <class kind="class">SynthesiserVoice</class>
    <class kind="class">Synthesiser</class>
  </compound>
  <compound kind="file">
    <name>juce_SystemClipboard.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>juce__SystemClipboard_8h</filename>
    <class kind="class">SystemClipboard</class>
  </compound>
  <compound kind="file">
    <name>juce_SystemStats.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/system/</path>
    <filename>juce__SystemStats_8h</filename>
    <class kind="class">SystemStats</class>
  </compound>
  <compound kind="file">
    <name>juce_SystemTrayIconComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__SystemTrayIconComponent_8h</filename>
    <class kind="class">SystemTrayIconComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_TabbedButtonBar.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__TabbedButtonBar_8h</filename>
    <class kind="class">TabBarButton</class>
    <class kind="class">TabbedButtonBar</class>
  </compound>
  <compound kind="file">
    <name>juce_TabbedComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__TabbedComponent_8h</filename>
    <class kind="class">TabbedComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_TableHeaderComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__TableHeaderComponent_8h</filename>
    <class kind="class">TableHeaderComponent</class>
    <class kind="class">TableHeaderComponent::Listener</class>
    <member kind="typedef">
      <type>TableHeaderComponent::Listener</type>
      <name>TableHeaderListener</name>
      <anchorfile>juce__TableHeaderComponent_8h.html</anchorfile>
      <anchor>ab85495eafcdcfa2d8b0cd9fc7d7d1096</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_TableListBox.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__TableListBox_8h</filename>
    <class kind="class">TableListBoxModel</class>
    <class kind="class">TableListBox</class>
  </compound>
  <compound kind="file">
    <name>juce_TargetPlatform.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/system/</path>
    <filename>juce__TargetPlatform_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_ANDROID</name>
      <anchorfile>juce__TargetPlatform_8h.html</anchorfile>
      <anchor>a6fda198266d9276b5c331071dd0ba014</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_DEBUG</name>
      <anchorfile>juce__TargetPlatform_8h.html</anchorfile>
      <anchor>a5f55c9671da5cfdf8377deba11c06044</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_BIG_ENDIAN</name>
      <anchorfile>juce__TargetPlatform_8h.html</anchorfile>
      <anchor>ae7c65e2fe39a04d255d8c723668969bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_INTEL</name>
      <anchorfile>juce__TargetPlatform_8h.html</anchorfile>
      <anchor>af1c7ad8bdab01aa04e43c5f431faf08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_32BIT</name>
      <anchorfile>juce__TargetPlatform_8h.html</anchorfile>
      <anchor>a298f3b24ad0e105ede05218dc834dd24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_BIG_ENDIAN</name>
      <anchorfile>juce__TargetPlatform_8h.html</anchorfile>
      <anchor>ae7c65e2fe39a04d255d8c723668969bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_32BIT</name>
      <anchorfile>juce__TargetPlatform_8h.html</anchorfile>
      <anchor>a298f3b24ad0e105ede05218dc834dd24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_TemporaryFile.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/files/</path>
    <filename>juce__TemporaryFile_8h</filename>
    <class kind="class">TemporaryFile</class>
  </compound>
  <compound kind="file">
    <name>juce_TextButton.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__TextButton_8h</filename>
    <class kind="class">TextButton</class>
    <class kind="struct">TextButton::Ids</class>
  </compound>
  <compound kind="file">
    <name>juce_TextDragAndDropTarget.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__TextDragAndDropTarget_8h</filename>
    <class kind="class">TextDragAndDropTarget</class>
  </compound>
  <compound kind="file">
    <name>juce_TextEditor.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__TextEditor_8h</filename>
    <class kind="class">TextEditor</class>
    <class kind="class">TextEditor::Listener</class>
    <class kind="struct">TextEditor::Ids</class>
    <member kind="typedef">
      <type>TextEditor::Listener</type>
      <name>TextEditorListener</name>
      <anchorfile>juce__TextEditor_8h.html</anchorfile>
      <anchor>a5c863c0182e29eaf0ed83f2427572913</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_TextEditorKeyMapper.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>juce__TextEditorKeyMapper_8h</filename>
    <class kind="struct">TextEditorKeyMapper</class>
  </compound>
  <compound kind="file">
    <name>juce_TextInputTarget.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>juce__TextInputTarget_8h</filename>
    <class kind="class">TextInputTarget</class>
  </compound>
  <compound kind="file">
    <name>juce_TextLayout.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/fonts/</path>
    <filename>juce__TextLayout_8h</filename>
    <class kind="class">TextLayout</class>
    <class kind="class">TextLayout::Glyph</class>
    <class kind="class">TextLayout::Run</class>
    <class kind="class">TextLayout::Line</class>
  </compound>
  <compound kind="file">
    <name>juce_TextPropertyComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/properties/</path>
    <filename>juce__TextPropertyComponent_8h</filename>
    <class kind="class">TextPropertyComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_Thread.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/threads/</path>
    <filename>juce__Thread_8h</filename>
    <class kind="class">Thread</class>
  </compound>
  <compound kind="file">
    <name>juce_ThreadLocalValue.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/threads/</path>
    <filename>juce__ThreadLocalValue_8h</filename>
    <class kind="class">ThreadLocalValue</class>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_NO_COMPILER_THREAD_LOCAL</name>
      <anchorfile>juce__ThreadLocalValue_8h.html</anchorfile>
      <anchor>ace6df6344d7f87952a787d9c35dd159d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ThreadPool.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/threads/</path>
    <filename>juce__ThreadPool_8h</filename>
    <class kind="class">ThreadPoolJob</class>
    <class kind="class">ThreadPool</class>
    <class kind="class">ThreadPool::JobSelector</class>
  </compound>
  <compound kind="file">
    <name>juce_ThreadWithProgressWindow.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__ThreadWithProgressWindow_8h</filename>
    <class kind="class">ThreadWithProgressWindow</class>
  </compound>
  <compound kind="file">
    <name>juce_Time.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/time/</path>
    <filename>juce__Time_8h</filename>
    <class kind="class">Time</class>
    <member kind="function">
      <type>JUCE_API Time</type>
      <name>operator+</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>aa6dc2b6da5b49aeefbcd18a680e36654</anchor>
      <arglist>(const Time &amp;time, const RelativeTime &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API Time</type>
      <name>operator+</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>a2cb915d5f90de84f3e00fec98b9fc2ed</anchor>
      <arglist>(const RelativeTime &amp;delta, const Time &amp;time)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API Time</type>
      <name>operator-</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>aaf232a95ac6b124eb023301e6695b231</anchor>
      <arglist>(const Time &amp;time, const RelativeTime &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API const RelativeTime</type>
      <name>operator-</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>a10bd7d7d436c636d68475365dec0270f</anchor>
      <arglist>(const Time &amp;time1, const Time &amp;time2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator==</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>a0e07796262575f125c1a4181bd471d10</anchor>
      <arglist>(const Time &amp;time1, const Time &amp;time2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator!=</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>ab4ca4798ae1c2bf4395b2aa5d70ef92a</anchor>
      <arglist>(const Time &amp;time1, const Time &amp;time2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>ab36999e26bab1f4bac5b62ad8a39e233</anchor>
      <arglist>(const Time &amp;time1, const Time &amp;time2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator&lt;=</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>a4ae0ccc7855759b15c7fcbbde5fd23b3</anchor>
      <arglist>(const Time &amp;time1, const Time &amp;time2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator&gt;</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>af41a28b0ba7a5ac0bb56cd00151d1f7f</anchor>
      <arglist>(const Time &amp;time1, const Time &amp;time2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator&gt;=</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>a311df6fca67060b0b1832db3cc2cb12e</anchor>
      <arglist>(const Time &amp;time1, const Time &amp;time2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Timer.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_events/timers/</path>
    <filename>juce__Timer_8h</filename>
    <class kind="class">Timer</class>
  </compound>
  <compound kind="file">
    <name>juce_TimeSliceThread.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/threads/</path>
    <filename>juce__TimeSliceThread_8h</filename>
    <class kind="class">TimeSliceClient</class>
    <class kind="class">TimeSliceThread</class>
  </compound>
  <compound kind="file">
    <name>juce_ToggleButton.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__ToggleButton_8h</filename>
    <class kind="class">ToggleButton</class>
    <class kind="struct">ToggleButton::Ids</class>
  </compound>
  <compound kind="file">
    <name>juce_ToneGeneratorAudioSource.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__ToneGeneratorAudioSource_8h</filename>
    <class kind="class">ToneGeneratorAudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_Toolbar.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__Toolbar_8h</filename>
    <class kind="class">Toolbar</class>
  </compound>
  <compound kind="file">
    <name>juce_ToolbarButton.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__ToolbarButton_8h</filename>
    <class kind="class">ToolbarButton</class>
  </compound>
  <compound kind="file">
    <name>juce_ToolbarItemComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__ToolbarItemComponent_8h</filename>
    <class kind="class">ToolbarItemComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_ToolbarItemFactory.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__ToolbarItemFactory_8h</filename>
    <class kind="class">ToolbarItemFactory</class>
  </compound>
  <compound kind="file">
    <name>juce_ToolbarItemPalette.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__ToolbarItemPalette_8h</filename>
    <class kind="class">ToolbarItemPalette</class>
  </compound>
  <compound kind="file">
    <name>juce_TooltipClient.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__TooltipClient_8h</filename>
    <class kind="class">TooltipClient</class>
    <class kind="class">SettableTooltipClient</class>
  </compound>
  <compound kind="file">
    <name>juce_TooltipWindow.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__TooltipWindow_8h</filename>
    <class kind="class">TooltipWindow</class>
  </compound>
  <compound kind="file">
    <name>juce_TopLevelWindow.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__TopLevelWindow_8h</filename>
    <class kind="class">TopLevelWindow</class>
  </compound>
  <compound kind="file">
    <name>juce_TreeView.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__TreeView_8h</filename>
    <class kind="class">TreeViewItem</class>
    <class kind="class">TreeViewItem::OpennessRestorer</class>
    <class kind="class">TreeView</class>
  </compound>
  <compound kind="file">
    <name>juce_Typeface.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_graphics/fonts/</path>
    <filename>juce__Typeface_8h</filename>
    <class kind="class">Typeface</class>
  </compound>
  <compound kind="file">
    <name>juce_UIViewComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/embedding/</path>
    <filename>juce__UIViewComponent_8h</filename>
    <class kind="class">UIViewComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_UndoableAction.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_data_structures/undomanager/</path>
    <filename>juce__UndoableAction_8h</filename>
    <class kind="class">UndoableAction</class>
  </compound>
  <compound kind="file">
    <name>juce_UndoManager.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_data_structures/undomanager/</path>
    <filename>juce__UndoManager_8h</filename>
    <class kind="class">UndoManager</class>
  </compound>
  <compound kind="file">
    <name>juce_UnitTest.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/unit_tests/</path>
    <filename>juce__UnitTest_8h</filename>
    <class kind="class">UnitTest</class>
    <class kind="class">UnitTestRunner</class>
    <class kind="struct">UnitTestRunner::TestResult</class>
  </compound>
  <compound kind="file">
    <name>juce_URL.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/network/</path>
    <filename>juce__URL_8h</filename>
    <class kind="class">URL</class>
  </compound>
  <compound kind="file">
    <name>juce_Uuid.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/misc/</path>
    <filename>juce__Uuid_8h</filename>
    <class kind="class">Uuid</class>
  </compound>
  <compound kind="file">
    <name>juce_Value.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_data_structures/values/</path>
    <filename>juce__Value_8h</filename>
    <class kind="class">Value</class>
    <class kind="class">Value::Listener</class>
    <class kind="class">Value::ValueSource</class>
    <member kind="typedef">
      <type>Value::Listener</type>
      <name>ValueListener</name>
      <anchorfile>juce__Value_8h.html</anchorfile>
      <anchor>a2cfaae906f9f1deed5ed703d8e63d613</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__Value_8h.html</anchorfile>
      <anchor>a71902c21a1f95e3f42b045302be1fa6d</anchor>
      <arglist>(OutputStream &amp;, const Value &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ValueTree.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_data_structures/values/</path>
    <filename>juce__ValueTree_8h</filename>
    <class kind="class">ValueTree</class>
    <class kind="class">ValueTree::Listener</class>
  </compound>
  <compound kind="file">
    <name>juce_Variant.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/containers/</path>
    <filename>juce__Variant_8h</filename>
    <class kind="class">var</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>juce__Variant_8h.html</anchorfile>
      <anchor>a18d76bd2e63e42af5cfbc689cee69e16</anchor>
      <arglist>(const var &amp;v1, const var &amp;v2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>juce__Variant_8h.html</anchorfile>
      <anchor>a6e5b99e8efa7ddad49987e207443455f</anchor>
      <arglist>(const var &amp;v1, const var &amp;v2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>juce__Variant_8h.html</anchorfile>
      <anchor>ad2293ef6dd355e7fe5c7abc4f5122f90</anchor>
      <arglist>(const var &amp;v1, const String &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>juce__Variant_8h.html</anchorfile>
      <anchor>afb4dcbae8a3d012bdd8ffd0ec9ffab38</anchor>
      <arglist>(const var &amp;v1, const String &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>juce__Variant_8h.html</anchorfile>
      <anchor>a78e8723b16de1a11a8296a6bdb80e4be</anchor>
      <arglist>(const var &amp;v1, const char *v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>juce__Variant_8h.html</anchorfile>
      <anchor>a001b389e1b7ff081ad4db1dfbd6163cd</anchor>
      <arglist>(const var &amp;v1, const char *v2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Vector3D.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__Vector3D_8h</filename>
    <class kind="class">Vector3D</class>
  </compound>
  <compound kind="file">
    <name>juce_Viewport.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__Viewport_8h</filename>
    <class kind="class">Viewport</class>
    <class kind="struct">Viewport::Ids</class>
  </compound>
  <compound kind="file">
    <name>juce_VSTMidiEventList.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/format_types/</path>
    <filename>juce__VSTMidiEventList_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_VSTPluginFormat.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_processors/format_types/</path>
    <filename>juce__VSTPluginFormat_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_WaitableEvent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/threads/</path>
    <filename>juce__WaitableEvent_8h</filename>
    <class kind="class">WaitableEvent</class>
  </compound>
  <compound kind="file">
    <name>juce_WavAudioFormat.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__WavAudioFormat_8h</filename>
    <class kind="class">WavAudioFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_WeakReference.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/memory/</path>
    <filename>juce__WeakReference_8h</filename>
    <class kind="class">WeakReference</class>
    <class kind="class">WeakReference::SharedPointer</class>
    <class kind="class">WeakReference::Master</class>
  </compound>
  <compound kind="file">
    <name>juce_WebBrowserComponent.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__WebBrowserComponent_8h</filename>
    <class kind="class">WebBrowserComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_WildcardFileFilter.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__WildcardFileFilter_8h</filename>
    <class kind="class">WildcardFileFilter</class>
  </compound>
  <compound kind="file">
    <name>juce_WindowsMediaAudioFormat.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__WindowsMediaAudioFormat_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_WindowsRegistry.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/misc/</path>
    <filename>juce__WindowsRegistry_8h</filename>
    <class kind="class">WindowsRegistry</class>
  </compound>
  <compound kind="file">
    <name>juce_XmlDocument.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/xml/</path>
    <filename>juce__XmlDocument_8h</filename>
    <class kind="class">XmlDocument</class>
  </compound>
  <compound kind="file">
    <name>juce_XmlElement.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/xml/</path>
    <filename>juce__XmlElement_8h</filename>
    <class kind="class">XmlElement</class>
    <member kind="define">
      <type>#define</type>
      <name>forEachXmlChildElement</name>
      <anchorfile>juce__XmlElement_8h.html</anchorfile>
      <anchor>ace692e5be62f7ab58363d91b52eb839e</anchor>
      <arglist>(parentXmlElement, childElementVariableName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forEachXmlChildElementWithTagName</name>
      <anchorfile>juce__XmlElement_8h.html</anchorfile>
      <anchor>a6cf39e14a10e2e46f753b0c79c66f2f9</anchor>
      <arglist>(parentXmlElement, childElementVariableName, requiredTagName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ZipFile.h</name>
    <path>/Volumes/CODE/code/juce/modules/juce_core/zip/</path>
    <filename>juce__ZipFile_8h</filename>
    <class kind="class">ZipFile</class>
    <class kind="struct">ZipFile::ZipEntry</class>
    <class kind="class">ZipFile::Builder</class>
  </compound>
  <compound kind="class">
    <name>AbstractFifo</name>
    <filename>classAbstractFifo.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractFifo</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>accd680c366b4b8ca4f30ee8fb2b37b75</anchor>
      <arglist>(int capacity) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AbstractFifo</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a81ff19ff8eed394e9f7aca08ae1e8e8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalSize</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a7724b664c3aae6cbaad1a3821ccaf654</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFreeSpace</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>aeb68b5aec74f6511c76df390eda588ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumReady</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a39ab3206298a1aabb4412a6993b4023b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a33ba0f93c22c9cc182f8fa78af07862f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalSize</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a5ece35129a957c8783411de69b2542ec</anchor>
      <arglist>(int newSize) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToWrite</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a9f32996a86817773a7165be823f80c87</anchor>
      <arglist>(int numToWrite, int &amp;startIndex1, int &amp;blockSize1, int &amp;startIndex2, int &amp;blockSize2) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishedWrite</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a0daf6067beb737a4136e7e9d8f26bab0</anchor>
      <arglist>(int numWritten) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToRead</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a880ae9f1e0a08f3c0cfe95f03b279f96</anchor>
      <arglist>(int numWanted, int &amp;startIndex1, int &amp;blockSize1, int &amp;startIndex2, int &amp;blockSize2) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishedRead</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a651019308fd148a1d1a84947d57e1679</anchor>
      <arglist>(int numRead) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ActionBroadcaster</name>
    <filename>classActionBroadcaster.html</filename>
    <member kind="function">
      <type></type>
      <name>ActionBroadcaster</name>
      <anchorfile>classActionBroadcaster.html</anchorfile>
      <anchor>a195c0587f0d2751b9cf5c36ec8d50d50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActionBroadcaster</name>
      <anchorfile>classActionBroadcaster.html</anchorfile>
      <anchor>a13ffb78c0475303fad4c9e8f61e91c16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addActionListener</name>
      <anchorfile>classActionBroadcaster.html</anchorfile>
      <anchor>a6bda58522778ad1458cd5d9baaffd9b5</anchor>
      <arglist>(ActionListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeActionListener</name>
      <anchorfile>classActionBroadcaster.html</anchorfile>
      <anchor>ae8c41195cffd093782d4450e209f2420</anchor>
      <arglist>(ActionListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllActionListeners</name>
      <anchorfile>classActionBroadcaster.html</anchorfile>
      <anchor>ae8f8b1a360c780f0acb538c97200a7cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendActionMessage</name>
      <anchorfile>classActionBroadcaster.html</anchorfile>
      <anchor>a317709b0f409bf00a5834a3aca06fe09</anchor>
      <arglist>(const String &amp;message) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ActionListener</name>
    <filename>classActionListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActionListener</name>
      <anchorfile>classActionListener.html</anchorfile>
      <anchor>a11e316dbd4e2b404eb9946c8543b094e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>actionListenerCallback</name>
      <anchorfile>classActionListener.html</anchorfile>
      <anchor>af8171cbe6bea29143ec411a77cec9683</anchor>
      <arglist>(const String &amp;message)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ActiveXControlComponent</name>
    <filename>classActiveXControlComponent.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>ActiveXControlComponent</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>af7b5ac27646fe23cb28c7aa5d22a3529</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ActiveXControlComponent</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>a75ba2e2a8034c56afccbe27e5be43cde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createControl</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>ae54c9bc9f943e8cd566d88fd777febdb</anchor>
      <arglist>(const void *controlIID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteControl</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>ac2d524d7b6a6c17611e9aaff213f3443</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isControlOpen</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>a867c83a3cd08dcea5c94ac0fd25abc6e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>queryInterface</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>aec74d476e939d707b578c32cdd5cebd3</anchor>
      <arglist>(const void *iid) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseEventsAllowed</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>a1fe356a2de0bc7713efbe25c4f7a1066</anchor>
      <arglist>(bool eventsCanReachControl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areMouseEventsAllowed</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>a763464ac5f6a4fa71dd81c738659dd95</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>a704849697066ca9d0ba033506aa8759b</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AffineTransform</name>
    <filename>classAffineTransform.html</filename>
    <member kind="function">
      <type></type>
      <name>AffineTransform</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>af920ca0af025f2c337ce6342dc127c12</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AffineTransform</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a1a35a2dab8547478314c2a3fcfa27efd</anchor>
      <arglist>(const AffineTransform &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AffineTransform</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a22e8e27cf365cbd18474863a840b5f0e</anchor>
      <arglist>(float mat00, float mat01, float mat02, float mat10, float mat11, float mat12) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform &amp;</type>
      <name>operator=</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a8c962516af566d6ea031b3164d69597e</anchor>
      <arglist>(const AffineTransform &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a85a6a611c89f82b6300d05c400d153a6</anchor>
      <arglist>(const AffineTransform &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>aa974d8c3291d4d6aada4dbe20f429e32</anchor>
      <arglist>(const AffineTransform &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformPoint</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ade9df23412c79acaf89f5dbdf7da6add</anchor>
      <arglist>(ValueType &amp;x, ValueType &amp;y) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformPoints</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a991a8c5f94062033d7a5e75dff84ff72</anchor>
      <arglist>(ValueType &amp;x1, ValueType &amp;y1, ValueType &amp;x2, ValueType &amp;y2) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformPoints</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>aa4083c3ff6cab1119de654554cade3b0</anchor>
      <arglist>(ValueType &amp;x1, ValueType &amp;y1, ValueType &amp;x2, ValueType &amp;y2, ValueType &amp;x3, ValueType &amp;y3) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>translated</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a6b046d2b195ae6b35277abbfae06521c</anchor>
      <arglist>(float deltaX, float deltaY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>rotated</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a0dcf19186a3e5964e1bbf39843f644dd</anchor>
      <arglist>(float angleInRadians) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>rotated</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a46df67778a846c4ca39e43bd474e68a0</anchor>
      <arglist>(float angleInRadians, float pivotX, float pivotY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>scaled</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a3a690b15420df18b0b704ab03999f298</anchor>
      <arglist>(float factorX, float factorY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>scaled</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ae9d7861c32dd8db2e8d9fd03fd059083</anchor>
      <arglist>(float factorX, float factorY, float pivotX, float pivotY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>sheared</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>acda096f1cb0e290d6c0b1f70712c4414</anchor>
      <arglist>(float shearX, float shearY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>inverted</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ab6a5ffe9dc093892f906f99f3c931ec3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>followedBy</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a28befc816c47e965b59eec938f9380b3</anchor>
      <arglist>(const AffineTransform &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a0763b5aa59da4d6ec25875baea87cc18</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSingularity</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a6a5398b6aef3c585ae13c84434d6d498</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnlyTranslation</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a20078c305f476e1387fa81dae43782db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTranslationX</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ad765fcfb02f47bd95b44735b8ca3280c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTranslationY</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>af249bc3a5c385cdc193723cc709bc23d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getScaleFactor</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a7092c4d86f1fdbcf41dfad2660381072</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>translation</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a3bfac94ec99d54ee375d6e1326477271</anchor>
      <arglist>(float deltaX, float deltaY) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>rotation</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a4428d9a178f059264fdd7e8034f8d1c3</anchor>
      <arglist>(float angleInRadians) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>rotation</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>aa8cbff1ba0c430acf5294cab160585a2</anchor>
      <arglist>(float angleInRadians, float pivotX, float pivotY) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>scale</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a43665170b0ec3ef0d1afef4053e77a24</anchor>
      <arglist>(float factorX, float factorY) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>scale</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a506816953bd50e1f45ba27abb14f6be9</anchor>
      <arglist>(float factorX, float factorY, float pivotX, float pivotY) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>shear</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a5395b927f7ae3513aaf81b2f6f351c9d</anchor>
      <arglist>(float shearX, float shearY) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>verticalFlip</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ad38b69840d4b176c50d7b5ffa77eca85</anchor>
      <arglist>(float height) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>fromTargetPoints</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ae2cabd0be7385641d01c871744055876</anchor>
      <arglist>(float x00, float y00, float x10, float y10, float x01, float y01) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>fromTargetPoints</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ababada136d963b70272d0792d2bbff70</anchor>
      <arglist>(float sourceX1, float sourceY1, float targetX1, float targetY1, float sourceX2, float sourceY2, float targetX2, float targetY2, float sourceX3, float sourceY3, float targetX3, float targetY3) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mat00</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a1e675f5137df72253566699cd385c7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mat01</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ac253c675d087474d5fcb83d5b6025496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mat02</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ae85f09ed42c7e82da72a11f9fe0a838a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mat10</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>af75941aa8f1180b3b324732613780740</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mat11</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a808a65da0b88a09f0e2ac752fd2648ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mat12</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ae26718eb62e1240ad8f800f7e7ce3a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const AffineTransform</type>
      <name>identity</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a2173017e6300f667a23467505ca36276</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AiffAudioFormat</name>
    <filename>classAiffAudioFormat.html</filename>
    <base>AudioFormat</base>
    <member kind="function">
      <type></type>
      <name>AiffAudioFormat</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>a3673ab24fc35a3960be374bbff6a0d80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AiffAudioFormat</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>ac9dc64077a6e590b299e15c0896f4fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleSampleRates</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>ab96b2b05dea1939f69e6355d364434e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleBitDepths</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>ae8346fe9306b881f81d6e7b2248e1555</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoStereo</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>a98ebba1e0b20ef6a7f1a1154d11d1813</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoMono</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>a380f333576b6363eef9146bce960238b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canHandleFile</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>aa1529ddfcedc64c049e942c0287acf16</anchor>
      <arglist>(const File &amp;fileToTest)</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>abd541b1de13da60cfbd65959e45c0c74</anchor>
      <arglist>(InputStream *sourceStream, bool deleteStreamIfOpeningFails)</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatWriter *</type>
      <name>createWriterFor</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>a09862b7e1ada5906805f4b6f0d56a1c8</anchor>
      <arglist>(OutputStream *streamToWriteTo, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AlertWindow</name>
    <filename>classAlertWindow.html</filename>
    <base>TopLevelWindow</base>
    <member kind="enumeration">
      <name>AlertIconType</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a2582d1f79937cb47a6a3764c7d9bdba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoIcon</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a2582d1f79937cb47a6a3764c7d9bdba3a6b6648ee3f02f6832d897a214c647421</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QuestionIcon</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a2582d1f79937cb47a6a3764c7d9bdba3a63d1a179c412afc32f7f3c8061b238be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WarningIcon</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a2582d1f79937cb47a6a3764c7d9bdba3a8af24c68ddba14cc97687e2b2b75f373</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InfoIcon</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a2582d1f79937cb47a6a3764c7d9bdba3a3a24dd7ddec3b6ec31d320aaa525e43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>ad2f8b8ba50ce8a744e37e05e9a40dce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>ad2f8b8ba50ce8a744e37e05e9a40dce1ad8174d9e6fb186697dba3b380b1195c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textColourId</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>ad2f8b8ba50ce8a744e37e05e9a40dce1ae52947cad55bc25fee88e0e2a97d02c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>outlineColourId</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>ad2f8b8ba50ce8a744e37e05e9a40dce1a4ca5b0e9de7b0838cf1358a85b551d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlertWindow</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a881fc5e753335f28fad5144eca5c1a3b</anchor>
      <arglist>(const String &amp;title, const String &amp;message, AlertIconType iconType, Component *associatedComponent=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AlertWindow</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a3c76e1a1ce702a161064eebb134f1adc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AlertIconType</type>
      <name>getAlertType</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a55f336d14f2e388a01c958334bd382fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMessage</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a726f6cb55274959235efa16a0d18f794</anchor>
      <arglist>(const String &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addButton</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a783bbf81186dc21addde7e0fdb6f8001</anchor>
      <arglist>(const String &amp;name, int returnValue, const KeyPress &amp;shortcutKey1=KeyPress(), const KeyPress &amp;shortcutKey2=KeyPress())</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumButtons</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a4a13402031851ad78b07909d41ae5c4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triggerButtonClick</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>abc59507f5e2ad04933736a8643ba7ef7</anchor>
      <arglist>(const String &amp;buttonName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEscapeKeyCancels</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a3b03c4f645e3f847a3226ac36ac1678b</anchor>
      <arglist>(bool shouldEscapeKeyCancel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTextEditor</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a7d2c472d75eaa3a7a2876a48a2c2f884</anchor>
      <arglist>(const String &amp;name, const String &amp;initialContents, const String &amp;onScreenLabel=String::empty, bool isPasswordBox=false)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextEditorContents</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a01c80c81a97a0deacce7205a401a967d</anchor>
      <arglist>(const String &amp;nameOfTextEditor) const </arglist>
    </member>
    <member kind="function">
      <type>TextEditor *</type>
      <name>getTextEditor</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a2210fe75191fb10657f64095cb274436</anchor>
      <arglist>(const String &amp;nameOfTextEditor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addComboBox</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a29a5cd68a7ae8e7ffbf1e59b638a248d</anchor>
      <arglist>(const String &amp;name, const StringArray &amp;items, const String &amp;onScreenLabel=String::empty)</arglist>
    </member>
    <member kind="function">
      <type>ComboBox *</type>
      <name>getComboBoxComponent</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>aea82c357eb43eb15a6857452a579d838</anchor>
      <arglist>(const String &amp;nameOfList) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTextBlock</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a06c68ddf379fcd3247182d0fee87a7f4</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addProgressBarComponent</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a9b7ccfa6a4b4d3e871d20b4690c35b34</anchor>
      <arglist>(double &amp;progressValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCustomComponent</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a18e5456aa067a106f8ecbb03dc01f032</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCustomComponents</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>af2526e588df3d21a77959e77ec97c4ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getCustomComponent</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a91b7ff614c484629c7c4033cc29acbf7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>removeCustomComponent</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a9ea24f9c13a13253c0c73b4d35fbdb82</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsAnyExtraComponents</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a905adfc09c6a05eebe538f4a789aa952</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>showMessageBoxAsync</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>ac5ef39056d6d47cdd1692adbdacfe1e0</anchor>
      <arglist>(AlertIconType iconType, const String &amp;title, const String &amp;message, const String &amp;buttonText=String::empty, Component *associatedComponent=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>showOkCancelBox</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a8fe99700fc3f02c437203a4db44cf323</anchor>
      <arglist>(AlertIconType iconType, const String &amp;title, const String &amp;message, const String &amp;button1Text, const String &amp;button2Text, Component *associatedComponent, ModalComponentManager::Callback *callback)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int JUCE_CALLTYPE</type>
      <name>showYesNoCancelBox</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>aea7dd81c0f8751835756d049998a324f</anchor>
      <arglist>(AlertIconType iconType, const String &amp;title, const String &amp;message, const String &amp;button1Text, const String &amp;button2Text, const String &amp;button3Text, Component *associatedComponent, ModalComponentManager::Callback *callback)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a5c12d4ff78b97a93eebf896fe28bbdf2</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a1e6f388afe7b4e04bbc548fe373b8e08</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a81962b75d87d7d1485f5ac9120770f3b</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>ab9c5a3635bcea4cb386e6bc59fd38ced</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buttonClicked</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a0b89d5f526b7caa7c703df4cedfc1a92</anchor>
      <arglist>(Button *button)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a9a41e270705311cab13bf727e4def68a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>userTriedToCloseWindow</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a8d1f8e4fadd01bdc6067d8a8f619b04f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getDesktopWindowStyleFlags</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a08de045df0dfe9246dae2fff50a5e28c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AppleRemoteDevice</name>
    <filename>classAppleRemoteDevice.html</filename>
    <member kind="enumeration">
      <name>ButtonType</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>menuButton</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a4763e099e23574fe8e7b649e3c964cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>playButton</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0ada64dfa4c77be0c1e9450efd26db7f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>plusButton</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a0a1a0de82c6d765607247bf97fb9f106</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>minusButton</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a9acc904c6686677ad3d8dc783d547f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rightButton</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a41364e422072e6231a74a487f63f08fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>leftButton</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a811f6391048193b13e401ca40d610713</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rightButton_Long</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0aebf3d7bc747ddd6b471d7a71a330432b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>leftButton_Long</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a9a8742b6148aca5e32dec97292781ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>menuButton_Long</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a0fc32b5afdcfca212c4003ea68bdbfaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>playButtonSleepMode</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a57f28e98dc961f444c7db15bbd2ee8eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>switched</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0ae278b856f84c176f8a1628c118e902fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AppleRemoteDevice</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>ac44938079806a0136950f95850e587f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AppleRemoteDevice</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>aa7ce0c2716f3a62e1eab5cbd23445ce0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>buttonPressed</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a6392fda8b943236427da2af0dc80b445</anchor>
      <arglist>(ButtonType buttonId, bool isDown)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a826fd7464bf27550c7f62cf17bc06189</anchor>
      <arglist>(bool inExclusiveMode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>af828962a01ccbbedf9cc8b086b3edb34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a0857b406b9e57efb90a12142d7c9ae40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemoteId</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a1df8dc96b957911ffce788aa5adb6405</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleCallbackInternal</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a016dfb4c500b9813c935f7387872d112</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ApplicationCommandInfo</name>
    <filename>structApplicationCommandInfo.html</filename>
    <member kind="enumeration">
      <name>CommandFlags</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>ab9633f0a25ad57236fde726c98b29d72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isDisabled</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>ab9633f0a25ad57236fde726c98b29d72a202cb5c15583e30f2f59b48e6c18c90b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isTicked</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>ab9633f0a25ad57236fde726c98b29d72af0c8f1c0103edb7a8e9ea852d3d3dee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>wantsKeyUpDownCallbacks</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>ab9633f0a25ad57236fde726c98b29d72ab8ea56bbed1d23f3df3cbd3c20f2a8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hiddenFromKeyEditor</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>ab9633f0a25ad57236fde726c98b29d72a626b4f9f1aa2bd0761b89b376063d254</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>readOnlyInKeyEditor</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>ab9633f0a25ad57236fde726c98b29d72a57e236658a383bd74c76fadfe6c49370</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dontTriggerVisualFeedback</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>ab9633f0a25ad57236fde726c98b29d72a362e5c4decffcd4c7ec6f508f672e443</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ApplicationCommandInfo</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>a79d1e190c9157fa3bb96f8981858ca8c</anchor>
      <arglist>(CommandID commandID) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInfo</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>a3e9cd7e72fbf617a0d70d6be3d513b82</anchor>
      <arglist>(const String &amp;shortName, const String &amp;description, const String &amp;categoryName, int flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActive</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>a68a043a95e058beeeddfba2441ee7306</anchor>
      <arglist>(bool isActive) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTicked</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>aac92e704735d8013bf8b17450858f3fb</anchor>
      <arglist>(bool isTicked) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDefaultKeypress</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>a881e809ef15becd0732afe0799ce25ad</anchor>
      <arglist>(int keyCode, const ModifierKeys &amp;modifiers) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>CommandID</type>
      <name>commandID</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>ac8265d08896874e8aad4f9bfee9e7e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>shortName</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>a2da18de634cf7794fcd0b26e4121e3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>description</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>a9d36981d292001925176c0be0d2e6b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>categoryName</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>a38af85def791bf7f344d18ddb6f65f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; KeyPress &gt;</type>
      <name>defaultKeypresses</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>acae1903bdfd8214162adb8326d1ee9da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>flags</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>a45fa351a09f7a6df3e76fe466c476905</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ApplicationCommandManager</name>
    <filename>classApplicationCommandManager.html</filename>
    <base protection="private">AsyncUpdater</base>
    <base protection="private">FocusChangeListener</base>
    <member kind="function">
      <type></type>
      <name>ApplicationCommandManager</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a71ba22aa70cc12a7ab52c4e531db32ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ApplicationCommandManager</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>affac02208039201c7e6a59599a1010df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearCommands</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a33f916c7f4ac00736958a83883057df0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCommand</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a151be8c30a8339675ad5dcba5a5c4e62</anchor>
      <arglist>(const ApplicationCommandInfo &amp;newCommand)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerAllCommandsForTarget</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>ac3f8c831583499556579848779e030cf</anchor>
      <arglist>(ApplicationCommandTarget *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCommand</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a910296ce97f93bc7fcd8a24085ac7ca6</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandStatusChanged</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a91fef61705d98da881276733e304e7af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCommands</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>afe00b76a2faa9b625765d8ceac961d96</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ApplicationCommandInfo *</type>
      <name>getCommandForIndex</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a343d3554ce94762e692d78b7d33d21da</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ApplicationCommandInfo *</type>
      <name>getCommandForID</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a9f0d71eba397a4c0fec0193c33fcc9c2</anchor>
      <arglist>(CommandID commandID) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getNameOfCommand</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>ac0d3a5fbd431c188c65ac708d245a2bf</anchor>
      <arglist>(CommandID commandID) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getDescriptionOfCommand</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>ab4d21d8f1543a222bde11ba3bc859d03</anchor>
      <arglist>(CommandID commandID) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getCommandCategories</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>af4b839c652fd9f6e551566bf491828b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Array&lt; CommandID &gt;</type>
      <name>getCommandsInCategory</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a479e635a4a520a6c827c4a998d2442f4</anchor>
      <arglist>(const String &amp;categoryName) const </arglist>
    </member>
    <member kind="function">
      <type>KeyPressMappingSet *</type>
      <name>getKeyMappings</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a5fea4f129e149062866c0313b29ba976</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invokeDirectly</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a55f04432929174c2de6d622cb2d23c67</anchor>
      <arglist>(CommandID commandID, bool asynchronously)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invoke</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a6b506331c1cfb3d07b2925ac16b8141e</anchor>
      <arglist>(const ApplicationCommandTarget::InvocationInfo &amp;invocationInfo, bool asynchronously)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ApplicationCommandTarget *</type>
      <name>getFirstCommandTarget</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a45f5c00e8bb2d670f0931c78dd166d4b</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFirstCommandTarget</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>abebbbdd281b83f02a94c909f93b5347f</anchor>
      <arglist>(ApplicationCommandTarget *newTarget) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ApplicationCommandTarget *</type>
      <name>getTargetForCommand</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>ab9fcbf2c2a3b58cf1a54babf906d9e84</anchor>
      <arglist>(CommandID commandID, ApplicationCommandInfo &amp;upToDateInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>ada313b4a4cdd787f5d3786b9102c483e</anchor>
      <arglist>(ApplicationCommandManagerListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a851148eb572ded776b1ba84a5de178fa</anchor>
      <arglist>(ApplicationCommandManagerListener *listener)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ApplicationCommandTarget *</type>
      <name>findDefaultComponentTarget</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>add1c985aacfb09c72d038e88ce91341a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ApplicationCommandTarget *</type>
      <name>findTargetForComponent</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a87ba6516153573f6f1a3e9888965adb6</anchor>
      <arglist>(Component *component)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ApplicationCommandManagerListener</name>
    <filename>classApplicationCommandManagerListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ApplicationCommandManagerListener</name>
      <anchorfile>classApplicationCommandManagerListener.html</anchorfile>
      <anchor>a9b2c9f6c718ad68306791c2aeb29f754</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applicationCommandInvoked</name>
      <anchorfile>classApplicationCommandManagerListener.html</anchorfile>
      <anchor>a127ded071ab7cf432aefe8a1f1b5a646</anchor>
      <arglist>(const ApplicationCommandTarget::InvocationInfo &amp;info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applicationCommandListChanged</name>
      <anchorfile>classApplicationCommandManagerListener.html</anchorfile>
      <anchor>a918fb2446acd367655fe88815d3be5fe</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ApplicationCommandTarget</name>
    <filename>classApplicationCommandTarget.html</filename>
    <class kind="struct">ApplicationCommandTarget::InvocationInfo</class>
    <member kind="function">
      <type></type>
      <name>ApplicationCommandTarget</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>a87a924f9667311234b74292dcd737a98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ApplicationCommandTarget</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>aedcfa2f5c7f9798eaa717579d3d6e12a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ApplicationCommandTarget *</type>
      <name>getNextCommandTarget</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>a540016056ca6fc19818e951359c710da</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getAllCommands</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>a12b1c7a6abe2e5a5f27fda4a292fe33d</anchor>
      <arglist>(Array&lt; CommandID &gt; &amp;commands)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getCommandInfo</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>a54171f3ee599f0b508fed08e647edf89</anchor>
      <arglist>(CommandID commandID, ApplicationCommandInfo &amp;result)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>perform</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>a0e8f962cda82e8aa1207d38361ff96f9</anchor>
      <arglist>(const InvocationInfo &amp;info)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invoke</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>aeffaac3af6c4922240e1e5e03ad0a1b5</anchor>
      <arglist>(const InvocationInfo &amp;invocationInfo, const bool asynchronously)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invokeDirectly</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>a93daac13c40f226ccab1e92a390ad61a</anchor>
      <arglist>(const CommandID commandID, const bool asynchronously)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationCommandTarget *</type>
      <name>getTargetForCommand</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>aee836277019ca8182636e32701d814d7</anchor>
      <arglist>(const CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCommandActive</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>ab5ee995932e10bd18dc6fff111f3835e</anchor>
      <arglist>(const CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationCommandTarget *</type>
      <name>findFirstTargetParentComponent</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>aa8fb128295bd2117cfdc982db022ef6a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ApplicationCommandTarget::InvocationInfo</name>
    <filename>structApplicationCommandTarget_1_1InvocationInfo.html</filename>
    <member kind="enumeration">
      <name>InvocationMethod</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a87e99a7b4b51787a40700bce2a7acc22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>direct</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a87e99a7b4b51787a40700bce2a7acc22a5da64d78c06aae22ea9c1315e99f9557</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fromKeyPress</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a87e99a7b4b51787a40700bce2a7acc22af89cceaaf6b2fbe277117d06f4c71cdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fromMenu</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a87e99a7b4b51787a40700bce2a7acc22aa026666fb6700a11ab0822ca15ee0a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fromButton</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a87e99a7b4b51787a40700bce2a7acc22ad4374a114c5dc22c1767e03274176f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvocationInfo</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>aa907354cb0e5c69320bf795bed2e13ef</anchor>
      <arglist>(const CommandID commandID)</arglist>
    </member>
    <member kind="variable">
      <type>CommandID</type>
      <name>commandID</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a4416781aae4ac0dd75477ddd98cb31d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>commandFlags</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a26fba7d10531e7613beb8e3ad0ffc239</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InvocationMethod</type>
      <name>invocationMethod</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a4e4ea7fee8feb65189634b26003e0fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Component *</type>
      <name>originatingComponent</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a829cd8dbab1753320b750727df99ba41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyPress</type>
      <name>keyPress</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a733ad27cfb5ad231add1b1c82cced236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isKeyDown</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a40f339e15279d78b003e3598f11c1424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>millisecsSinceKeyPressed</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a0c1817f71536452a5d69a8e28ecc8534</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ApplicationProperties</name>
    <filename>classApplicationProperties.html</filename>
    <member kind="function">
      <type></type>
      <name>ApplicationProperties</name>
      <anchorfile>classApplicationProperties.html</anchorfile>
      <anchor>aca8eb83646fdaf5fe87360738fb20bbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ApplicationProperties</name>
      <anchorfile>classApplicationProperties.html</anchorfile>
      <anchor>ad0b5bcee64fb881459536ae91f98df9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStorageParameters</name>
      <anchorfile>classApplicationProperties.html</anchorfile>
      <anchor>ab8f0b0ee2ece06a23d36996eaa1a7107</anchor>
      <arglist>(const PropertiesFile::Options &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>PropertiesFile *</type>
      <name>getUserSettings</name>
      <anchorfile>classApplicationProperties.html</anchorfile>
      <anchor>a5b7ea2bc0531fc2b5db6aed82d753905</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PropertiesFile *</type>
      <name>getCommonSettings</name>
      <anchorfile>classApplicationProperties.html</anchorfile>
      <anchor>a66aa5855d6c127e6ada14ad86a6926a5</anchor>
      <arglist>(bool returnUserPropsIfReadOnly)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveIfNeeded</name>
      <anchorfile>classApplicationProperties.html</anchorfile>
      <anchor>aff18ff76ec1447a771769fb3bd905623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeFiles</name>
      <anchorfile>classApplicationProperties.html</anchorfile>
      <anchor>a5f0c75ea625bf1cca3ef8fe9f66687af</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array</name>
    <filename>classArray.html</filename>
    <templarg>ElementType</templarg>
    <templarg>TypeOfCriticalSectionToUse</templarg>
    <member kind="typedef">
      <type>TypeOfCriticalSectionToUse::ScopedLockType</type>
      <name>ScopedLockType</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>aaee0afbd84038238c8cbda6378e665c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>aba7a7a37bb14ee10d6824ea75ded2afd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ae603294033a54425cb6533893c8ea51c</anchor>
      <arglist>(const Array&lt; ElementType, TypeOfCriticalSectionToUse &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a625d96690c21e31ce4ee1308fe1ffe81</anchor>
      <arglist>(const TypeToCreateFrom *values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ab13a2968fce8bb7414d1b9483f656546</anchor>
      <arglist>(const TypeToCreateFrom *values, int numValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Array</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a540323526557fec8347019aee786316a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a2bdf7874aec427a12c98073f14ca47a2</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a66b0bb233d3c2791c51a7652fd0bf2f2</anchor>
      <arglist>(const OtherArrayType &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>afd40348d976f1ccc43b6ecda614c787d</anchor>
      <arglist>(const OtherArrayType &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a6bd7485bde05c4218a26d4f98b3ffca2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuick</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ab7f0aefd80fc3a88310ac9931bafd8e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a7cd4d163e87549c04f99fd5dcc2ff835</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>operator[]</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a2b9999cb713e0c71f7dbb430a9361948</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>getUnchecked</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a35cf8b22e29926f5206f72ceb4c44a91</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>ElementType &amp;</type>
      <name>getReference</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>aa45cd743a3659e71331730efe9967fdc</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>getFirst</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>aa428610d7f1bd9dd2de313b39403bd4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>getLast</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>adef4469c2868dbf4b22dc352cd179e4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ElementType *</type>
      <name>getRawDataPointer</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a7e770ccbeaaa2cb7df437a36dd3e66d0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType *</type>
      <name>begin</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a4182e46c1d39d63998b75695adbe2dd7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType *</type>
      <name>end</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>af090405475e56a54d39f93a78e79ae19</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a797a78ba08e023c46813902f98f8bee8</anchor>
      <arglist>(ParameterType elementToLookFor) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a5fce70ec38c3d7c200cf35a73429f61b</anchor>
      <arglist>(ParameterType elementToLookFor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a561fa77f1c1b1333a0b0a4aa4bbe97e8</anchor>
      <arglist>(ParameterType newElement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a06ca3a23fb5cc785febb054ad806cd32</anchor>
      <arglist>(int indexToInsertAt, ParameterType newElement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertMultiple</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a214123e46743df1830c33de5ec1c16e7</anchor>
      <arglist>(int indexToInsertAt, ParameterType newElement, int numberOfTimesToInsertIt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertArray</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>afa66359a31f0c05315bf27e1819ace0f</anchor>
      <arglist>(int indexToInsertAt, const ElementType *newElements, int numberOfElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addIfNotAlreadyThere</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a66a7dd59118110a1fff8f346af478d4a</anchor>
      <arglist>(ParameterType newElement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a311e3be8a59826e972ec981e9d719ace</anchor>
      <arglist>(const int indexToChange, ParameterType newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnchecked</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a0a6a1de585acb2d4c63a5b3b18a6530e</anchor>
      <arglist>(const int indexToChange, ParameterType newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArray</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a2a08583b99a5d56cba633211ac46cc95</anchor>
      <arglist>(const ElementType *elementsToAdd, int numElementsToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWithArray</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a12532b278db4e9889d38d24f9d0f9720</anchor>
      <arglist>(Array &amp;otherArray) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArray</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ae19e18c1a5d710d0640ee2925a739f5f</anchor>
      <arglist>(const OtherArrayType &amp;arrayToAddFrom, int startIndex=0, int numElementsToAdd=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a9f74d12a28cc9ac953013242eb1fafe6</anchor>
      <arglist>(const int targetNumItems)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSorted</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ab827e9edc0da7c919fd0e49ff2e7af0e</anchor>
      <arglist>(ElementComparator &amp;comparator, ParameterType newElement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addUsingDefaultSort</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a98f0f3de328039fe3f9f194268805348</anchor>
      <arglist>(ParameterType newElement)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfSorted</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ab0981b8908f562462cd4e31590f10159</anchor>
      <arglist>(ElementComparator &amp;comparator, TargetValueType elementToLookFor) const </arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>remove</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ae4b625b7ef05f179b051845debaf8462</anchor>
      <arglist>(const int indexToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFirstMatchingValue</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ab86840694333856573dc2383175b5caa</anchor>
      <arglist>(ParameterType valueToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllInstancesOf</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ac00a09169231ebd084267105b7fc85e1</anchor>
      <arglist>(ParameterType valueToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRange</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a76aff614d2a99bbeffbc7234f61da108</anchor>
      <arglist>(int startIndex, int numberToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLast</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a6fa7c7c47f86781b474e222656fbb23a</anchor>
      <arglist>(int howManyToRemove=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeValuesIn</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ab1aac8e57e79c1426763bba43151dfb7</anchor>
      <arglist>(const OtherArrayType &amp;otherArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeValuesNotIn</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a8e32b0f434c970c4275f28c68d2b3f10</anchor>
      <arglist>(const OtherArrayType &amp;otherArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>aa719aa8439aab1cb265845002c8e3322</anchor>
      <arglist>(const int index1, const int index2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a7d9614d4db53e48145f63e099d608bcc</anchor>
      <arglist>(const int currentIndex, int newIndex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minimiseStorageOverheads</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a21753e1704c1a8a5028ce0fd5d166e6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureStorageAllocated</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a9ea4982f49ac5ec83e967c82de49edbf</anchor>
      <arglist>(const int minNumElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ac1dca4ab2895315dd85e25eaca2fcab1</anchor>
      <arglist>(ElementComparator &amp;comparator, const bool retainOrderOfEquivalentItems=false) const </arglist>
    </member>
    <member kind="function">
      <type>const TypeOfCriticalSectionToUse &amp;</type>
      <name>getLock</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a5bccac2768da58b06ce691cde2b52b88</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayAllocationBase</name>
    <filename>classArrayAllocationBase.html</filename>
    <templarg>ElementType</templarg>
    <templarg>TypeOfCriticalSectionToUse</templarg>
    <base>TypeOfCriticalSectionToUse</base>
    <member kind="function">
      <type></type>
      <name>ArrayAllocationBase</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>a11d8bab507f8c7bf1e6c9e536a9d8093</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayAllocationBase</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>a5f7a4fea116804113f59a6eebd3120cf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllocatedSize</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>a56354968cbfcf19977aae75b00768df6</anchor>
      <arglist>(const int numElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureAllocatedSize</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>af97c1591bed76fcc161d0a2ce2eda35c</anchor>
      <arglist>(const int minNumElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToNoMoreThan</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>ad7efe3596e7ed01cad96a559b96b592e</anchor>
      <arglist>(const int maxNumElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>a48910e0a2c0c3243c8fee9226d2d158a</anchor>
      <arglist>(ArrayAllocationBase&lt; ElementType, TypeOfCriticalSectionToUse &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>HeapBlock&lt; ElementType &gt;</type>
      <name>elements</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>a68e9e3954a47f3a9b0721c979d4d9fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numAllocated</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>a5afe5480fba4ad678e2496e0a5fc5d37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrowButton</name>
    <filename>classArrowButton.html</filename>
    <base>Button</base>
    <member kind="function">
      <type></type>
      <name>ArrowButton</name>
      <anchorfile>classArrowButton.html</anchorfile>
      <anchor>a82f6faeca8951e35dbbd6a3d2951fcc5</anchor>
      <arglist>(const String &amp;buttonName, float arrowDirection, const Colour &amp;arrowColour)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrowButton</name>
      <anchorfile>classArrowButton.html</anchorfile>
      <anchor>a9198279ce75060e66f9f4a52510bc76a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classArrowButton.html</anchorfile>
      <anchor>a3b06635408cb843e1e58a427a1eaf604</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buttonStateChanged</name>
      <anchorfile>classArrowButton.html</anchorfile>
      <anchor>a0840541f1d0964758ab2c663cbf51495</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AsyncUpdater</name>
    <filename>classAsyncUpdater.html</filename>
    <member kind="function">
      <type></type>
      <name>AsyncUpdater</name>
      <anchorfile>classAsyncUpdater.html</anchorfile>
      <anchor>a5cb530c31e68d13bbdf078ed54911e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AsyncUpdater</name>
      <anchorfile>classAsyncUpdater.html</anchorfile>
      <anchor>af28a6da5c2adf73e2c18286574939d4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triggerAsyncUpdate</name>
      <anchorfile>classAsyncUpdater.html</anchorfile>
      <anchor>a4eece806c6ba9f591382fed54c5983b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelPendingUpdate</name>
      <anchorfile>classAsyncUpdater.html</anchorfile>
      <anchor>a2e71a3b3172abca3567d2d2b75564323</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleUpdateNowIfNeeded</name>
      <anchorfile>classAsyncUpdater.html</anchorfile>
      <anchor>a5f65e2ad091e96ce4e3979d2b701bc85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpdatePending</name>
      <anchorfile>classAsyncUpdater.html</anchorfile>
      <anchor>a93c63f13659fc5acd41c3ec9b252bf01</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleAsyncUpdate</name>
      <anchorfile>classAsyncUpdater.html</anchorfile>
      <anchor>a446f3af793131f8772329f1f8b526578</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Atomic</name>
    <filename>classAtomic.html</filename>
    <templarg>Type</templarg>
    <member kind="function">
      <type></type>
      <name>Atomic</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a903ef283284109ee6bdaa43d9b477224</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Atomic</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>aa5bd78cad5b124a086688f112f2d24aa</anchor>
      <arglist>(const Type initialValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Atomic</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a482fb9fec9e47b18884a5d1f1ac4c815</anchor>
      <arglist>(const Atomic &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Atomic</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a25b0fe07fad7cfd1cf68bd02d7da2a3f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>get</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>ad39856229e8d4e3da9088d31bad55b9e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Atomic &amp;</type>
      <name>operator=</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>aee8b91de965363416796ee90ff84d0e2</anchor>
      <arglist>(const Atomic &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Atomic &amp;</type>
      <name>operator=</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>ac488f361f635427647ed56151d1a9591</anchor>
      <arglist>(const Type newValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a52abf7d407845b5ff44b46b1c96f00d1</anchor>
      <arglist>(Type newValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>exchange</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a98405cfea37d5635bdddf47e92da81ea</anchor>
      <arglist>(Type value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>operator+=</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>ab5c7b49a22075389a3edac358c83c92e</anchor>
      <arglist>(Type amountToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>operator-=</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>af9803bc3177c75dbaf00c3a34eb3556c</anchor>
      <arglist>(Type amountToSubtract) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>operator++</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a9cc5a6c2e1f07cc097317fe1685819dd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>operator--</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>adf3a3f87cb87e822d678dfb67f458895</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareAndSetBool</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a9c0966a21db3a9d4649f8c869bb38fa0</anchor>
      <arglist>(Type newValue, Type valueToCompare) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>compareAndSetValue</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a9d80abdbdf76b8afd9cbf9baf8851910</anchor>
      <arglist>(Type newValue, Type valueToCompare) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>memoryBarrier</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a33a7257fe866463a370c8e92a208be01</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>volatile Type</type>
      <name>value</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a4c042c01777b1efe30266a45b7df36f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AttributedString</name>
    <filename>classAttributedString.html</filename>
    <class kind="class">AttributedString::Attribute</class>
    <member kind="enumeration">
      <name>WordWrap</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>ad752f270294ec5b2cef0c80863ee3a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>none</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>ad752f270294ec5b2cef0c80863ee3a3cab41c5fa578ffbd8a4b8a5fbc013beae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>byWord</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>ad752f270294ec5b2cef0c80863ee3a3ca924856fd52e5a980cae23a0a35a7bad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>byChar</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>ad752f270294ec5b2cef0c80863ee3a3ca904d4c7342693028735ff39b6b6a01af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ReadingDirection</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a254fea6774b4e74f786cc5ad3abac400</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>natural</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a254fea6774b4e74f786cc5ad3abac400ab64fe4e1ad4457691eabf047b0b48c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>leftToRight</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a254fea6774b4e74f786cc5ad3abac400a0ea06be4944f880c21db20dd073a979e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rightToLeft</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a254fea6774b4e74f786cc5ad3abac400a455f62330ea6e3aca5353d09216fff72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AttributedString</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a24596825a1c8f87bbe4c9b3570078492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AttributedString</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a8ce2248c52eb21973432bdff993fcf8f</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AttributedString</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>ab37ff7db7a9607cc8c3eab38cf353152</anchor>
      <arglist>(const AttributedString &amp;)</arglist>
    </member>
    <member kind="function">
      <type>AttributedString &amp;</type>
      <name>operator=</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a12309a78f10f53a2c127fa7007f4d622</anchor>
      <arglist>(const AttributedString &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AttributedString</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a8035757cd0e6560169aac037b26567f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getText</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>aab56aed8c3543c0c2ea49aa5a020166e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a998c643b1311fa75b80e93d4d02a012b</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a1755f63ee5d540df2aa64d7697ff0ef8</anchor>
      <arglist>(const String &amp;textToAppend)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a1ebdcf2fc784b20ba80b30e3f973820f</anchor>
      <arglist>(const String &amp;textToAppend, const Font &amp;font)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a62e00c713dfe7619d7dfb05af14972f5</anchor>
      <arglist>(const String &amp;textToAppend, const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a0dcad2dccc3833cf94ae3425e98cad66</anchor>
      <arglist>(const String &amp;textToAppend, const Font &amp;font, const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>aff77725b28cb06f1ddb0b3b38ad7c076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a7b100c5427c311b0f8d8a426c96b24a3</anchor>
      <arglist>(Graphics &amp;g, const Rectangle&lt; float &gt; &amp;area) const </arglist>
    </member>
    <member kind="function">
      <type>Justification</type>
      <name>getJustification</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a1b0acb2b269ddbd80c90f61acf623838</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJustification</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>adb0c2c60ffc70c6dde11387e127f2368</anchor>
      <arglist>(const Justification &amp;newJustification) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WordWrap</type>
      <name>getWordWrap</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a23e8be5dbf974f725584726b30e0f615</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWordWrap</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>ab986ab6a8a0a0aff7d7701c5b6c25572</anchor>
      <arglist>(WordWrap newWordWrap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReadingDirection</type>
      <name>getReadingDirection</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>afb961e08dfe858d3a104fedf84922bb9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReadingDirection</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a96ba8ec9194f937c568bcaa990c1ca55</anchor>
      <arglist>(ReadingDirection newReadingDirection) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLineSpacing</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a96e27f2bd7835dc334776e595e515864</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineSpacing</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a0506d7b2000aaebd5873ea23eca6ae6a</anchor>
      <arglist>(float newLineSpacing) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAttributes</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>ac4df137b8bb82c878daeeba7d9a07182</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Attribute *</type>
      <name>getAttribute</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a655b7e48c4284fa5f6853172a256d127</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a7377ded2f018907a79e74cfe39a86a6a</anchor>
      <arglist>(const Range&lt; int &gt; &amp;range, const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>ad91fd536a55c4d43b35f776f106f042d</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a2b7e7c70df4276f0401a0c26bd53b4f0</anchor>
      <arglist>(const Range&lt; int &gt; &amp;range, const Font &amp;font)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a5731aaf784c8e48015c79574cd1a578e</anchor>
      <arglist>(const Font &amp;font)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AttributedString::Attribute</name>
    <filename>classAttributedString_1_1Attribute.html</filename>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>a942146821c9b9d8b70b1c01a08dfc451</anchor>
      <arglist>(const Range&lt; int &gt; &amp;range, const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>a0d6cc19a209e37b08b3bee3218d00214</anchor>
      <arglist>(const Range&lt; int &gt; &amp;range, const Font &amp;font)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>a67c8443a98b861d67ce2a9d6cafb111e</anchor>
      <arglist>(const Attribute &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Attribute</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>aea9ec1a9334405136d4151e3f63b3653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Font *</type>
      <name>getFont</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>ac2e844f9489d8d5c0bae624f786f12fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Colour *</type>
      <name>getColour</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>a7da1b191247cc48f12e3d9321365ec53</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const Range&lt; int &gt;</type>
      <name>range</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>aadd39f43e26b6c0a36dca6bf36537818</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioCDBurner</name>
    <filename>classAudioCDBurner.html</filename>
    <base>ChangeBroadcaster</base>
    <class kind="class">AudioCDBurner::BurnProgressListener</class>
    <member kind="enumeration">
      <name>DiskState</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a75c01de0b51d56d6f78a1b56ff4da846</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unknown</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a75c01de0b51d56d6f78a1b56ff4da846acfe4c1971599161b618335acaa202fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>trayOpen</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a75c01de0b51d56d6f78a1b56ff4da846ab8a44178fa9c27bf9b55a9c56de9b448</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>noDisc</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a75c01de0b51d56d6f78a1b56ff4da846ab4602a1c02a02d0110903869162ca325</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>writableDiskPresent</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a75c01de0b51d56d6f78a1b56ff4da846ab2074d30eb1882e6cfc92b6f4ff24c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>readOnlyDiskPresent</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a75c01de0b51d56d6f78a1b56ff4da846a5c5dd3ef71603fe3b53c41fda2690db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioCDBurner</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a8d38668744c2e8a6e24ee98caff61ce2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DiskState</type>
      <name>getDiskState</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a00a94ec3a760486bd4d10bc7ef978285</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiskPresent</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>ab7aaeb182922a1199ceeb670321ed5ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>openTray</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a4178950eabcb2788174542bb8b5bf7a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DiskState</type>
      <name>waitUntilStateChange</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>aad027c99aed40869ded438d730b8fa65</anchor>
      <arglist>(int timeOutMilliseconds)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getAvailableWriteSpeeds</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a185770c2b43aad2bc60e8e267f9923e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setBufferUnderrunProtection</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a74299a88ffe40c06d903f36c0bb84347</anchor>
      <arglist>(bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAvailableAudioBlocks</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a84fec33602b1dd674219ab1f68d51f95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addAudioTrack</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a57f09669a2517f3ec4634df041a965b7</anchor>
      <arglist>(AudioSource *source, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>burn</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a4e98ca1f950b1c56fc0d021e0d293769</anchor>
      <arglist>(BurnProgressListener *listener, bool ejectDiscAfterwards, bool performFakeBurnForTesting, int writeSpeed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abortBurn</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a085b0ceaf4cd982d6bb1e95dd18752f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>findAvailableDevices</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>aa91adde6eab8e134842597c331cc3afb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioCDBurner *</type>
      <name>openDevice</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a31c629a961f2b988c525ebc30f3f52fd</anchor>
      <arglist>(const int deviceIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioCDBurner::BurnProgressListener</name>
    <filename>classAudioCDBurner_1_1BurnProgressListener.html</filename>
    <member kind="function">
      <type></type>
      <name>BurnProgressListener</name>
      <anchorfile>classAudioCDBurner_1_1BurnProgressListener.html</anchorfile>
      <anchor>ac4f6a46602763793156bcaf13f74a468</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BurnProgressListener</name>
      <anchorfile>classAudioCDBurner_1_1BurnProgressListener.html</anchorfile>
      <anchor>a8e20fe9f41f22d07a0392e843834841b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>audioCDBurnProgress</name>
      <anchorfile>classAudioCDBurner_1_1BurnProgressListener.html</anchorfile>
      <anchor>a3a03f8f13d40a6ae0e30d3bb2323246c</anchor>
      <arglist>(float proportionComplete)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioCDReader</name>
    <filename>classAudioCDReader.html</filename>
    <base>AudioFormatReader</base>
    <member kind="enumvalue">
      <name>framesPerSecond</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a7be91730c3919f91a8ffce774120bf8babcf6b807bcb841f2ae1fb9c3f518aa61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>samplesPerFrame</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a7be91730c3919f91a8ffce774120bf8ba1db74900d5d80b397c1bbf11691cee93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioCDReader</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>aa22eb22de4ee9cd9c7463acd20cc8a2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readSamples</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a671c20d4451dd83881da17d995c10d5f</anchor>
      <arglist>(int **destSamples, int numDestChannels, int startOffsetInDestBuffer, int64 startSampleInFile, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCDStillPresent</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>ac3b788ba2730d9d51cf632204ff463aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTracks</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>ae2a64231913ddfb9691da391e7946f6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPositionOfTrackStart</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>aa132d0acf416907efc847770983a38db</anchor>
      <arglist>(int trackNum) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrackAudio</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a2446591a8b6e9c265d7ce286d55f57ed</anchor>
      <arglist>(int trackNum) const </arglist>
    </member>
    <member kind="function">
      <type>const Array&lt; int &gt; &amp;</type>
      <name>getTrackOffsets</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a3e3162c9023230744488cbd56fecaf8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshTrackLengths</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>af27f008d4c543eb171323ff8ab5b1ab4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableIndexScanning</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a7119f9f8fb88977c79ed5479b4f694ed</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastIndex</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a88a1359ce7a1f358ab736d0f52f9a8c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>findIndexesInTrack</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a7136e80e819d1132d755a56167f2b6b4</anchor>
      <arglist>(const int trackNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCDDBId</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a0b482f236fda316a47dbc661ceb59484</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ejectDisk</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a41f27ce866212984e7a657f316e63e24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>getAvailableCDNames</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a1d053104ebe5a09022389d849b5ab4e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioCDReader *</type>
      <name>createReaderForCD</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>ad7407fcef1ba2cffc8890ef2be212f2a</anchor>
      <arglist>(const int index)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioData</name>
    <filename>classAudioData.html</filename>
    <class kind="class">AudioData::Converter</class>
    <class kind="class">AudioData::ConverterInstance</class>
    <class kind="class">AudioData::Pointer</class>
  </compound>
  <compound kind="class">
    <name>AudioData::Converter</name>
    <filename>classAudioData_1_1Converter.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Converter</name>
      <anchorfile>classAudioData_1_1Converter.html</anchorfile>
      <anchor>a61cd524dfc4096c45f9594a188583ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>convertSamples</name>
      <anchorfile>classAudioData_1_1Converter.html</anchorfile>
      <anchor>af16d441acd5bf3cf8e26405fd5e54874</anchor>
      <arglist>(void *destSamples, const void *sourceSamples, int numSamples) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>convertSamples</name>
      <anchorfile>classAudioData_1_1Converter.html</anchorfile>
      <anchor>a8e36983e8f05b3496e9c9e407d7f3448</anchor>
      <arglist>(void *destSamples, int destSubChannel, const void *sourceSamples, int sourceSubChannel, int numSamples) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioData::ConverterInstance</name>
    <filename>classAudioData_1_1ConverterInstance.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>AudioData::Converter</base>
    <member kind="function">
      <type></type>
      <name>ConverterInstance</name>
      <anchorfile>classAudioData_1_1ConverterInstance.html</anchorfile>
      <anchor>ac2b8dd275f21a983a7df95d71a07c442</anchor>
      <arglist>(int numSourceChannels=1, int numDestChannels=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConverterInstance</name>
      <anchorfile>classAudioData_1_1ConverterInstance.html</anchorfile>
      <anchor>ae1feaf4a1f1d1707bd79f514cf47c214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertSamples</name>
      <anchorfile>classAudioData_1_1ConverterInstance.html</anchorfile>
      <anchor>aa4bcd65be3c7e4caab5e25310be06706</anchor>
      <arglist>(void *dest, const void *source, int numSamples) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertSamples</name>
      <anchorfile>classAudioData_1_1ConverterInstance.html</anchorfile>
      <anchor>a78734c9fbca2f0fa6e7820ec4ecfe89f</anchor>
      <arglist>(void *dest, int destSubChannel, const void *source, int sourceSubChannel, int numSamples) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioData::Pointer</name>
    <filename>classAudioData_1_1Pointer.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a373fea92c60a62a2e2fe31564928561c</anchor>
      <arglist>(typename Constness::VoidType *sourceData) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a62b369c3aa10f89652d2342eb5b92d70</anchor>
      <arglist>(typename Constness::VoidType *sourceData, int numInterleavedChannels) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>adcec246d71e35970a17acfe5a0808020</anchor>
      <arglist>(const Pointer &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Pointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>aff849e1609a9e95c469c3909e99fb71e</anchor>
      <arglist>(const Pointer &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAsFloat</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>aaffec0dba3ee56e9b53217d4ede7ab8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAsFloat</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a8fde1bbe33eee07dc6bb973e765ed9f5</anchor>
      <arglist>(float newValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>getAsInt32</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a9719e315da69912c0ab7c38d64cb2ca6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAsInt32</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>acd19b96f9d16adf4ff8ab6c9dc9b4b04</anchor>
      <arglist>(int32 newValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Pointer &amp;</type>
      <name>operator++</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a07bab94a896e94408e09309b6032f416</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Pointer &amp;</type>
      <name>operator--</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a8d960232b383ed9635a20122e54e1ecf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Pointer &amp;</type>
      <name>operator+=</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>ab37616faf2bd411a58e2615cdb360f68</anchor>
      <arglist>(int samplesToJump) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertSamples</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>aed75d8a75052aec8fb0ca7c9cb19dfd2</anchor>
      <arglist>(Pointer source, int numSamples) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertSamples</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a3ed79ca9ee8fd77785c83586a97a8ce0</anchor>
      <arglist>(OtherPointerType source, int numSamples) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearSamples</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a8b123e357446ef1faa6731790d421969</anchor>
      <arglist>(int numSamples) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumInterleavedChannels</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a0684a61827cea250a1e3009a6e505250</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBytesBetweenSamples</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>aa7a0811a9ec22b0fb98cbf83177f7ed4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getRawData</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>abe0944aaf90e47606b084c3a57d7ab03</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isFloatingPoint</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>ac4e7dd1bc1f4e8c3083711fe54822e79</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isBigEndian</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>ad5c297903cd9da5ad3b90328cd26e80e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getBytesPerSample</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>af24f267a250d5f62db7ed8850ae23f5a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get32BitResolution</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a66fc124ce9480c540c80c50cabdb9889</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioDataConverters</name>
    <filename>classAudioDataConverters.html</filename>
    <member kind="enumeration">
      <name>DataFormat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>int16LE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50a243339416b017cdc35a3cb5a6c0ce8b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>int16BE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50a5413345207dc9e22a532a3f71cb63ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>int24LE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50a86d4b3fbe4206a23135697b42801a72a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>int24BE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50a6d6c4e9b147146368a9e37573f7d3ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>int32LE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50a7dbfa7f347adba31c018c85f4e88e474</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>int32BE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50ae66e24664940104a48ec3fa5e9c73e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>float32LE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50ac0a9af131ea728266516d78d7ed60b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>float32BE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50a967b624b78df07208abf588c3c87636c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToInt16LE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a46e7783a14d3db370f99e2f4673eadb2</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToInt16BE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a2b70ce732f21f861c14ad05ff048d7f4</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToInt24LE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>aecc99da81c4759127156a9a0184a37f8</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToInt24BE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>aa463faa96b1f9b4936bc462dc3d10e69</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToInt32LE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab5e3b78350ff3ce6ec4cb309268f1914</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToInt32BE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a5558380ea1601f1e5adf0fad83ca9f2b</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToFloat32LE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a6cf904f30301cf523d984570f215891d</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToFloat32BE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ad8154a2931bde3ef70b1e610161c740f</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertInt16LEToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a34f59c881de48ff27c3f920f0833ce81</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertInt16BEToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab8ab2c663016bdd9d1867b516efdc1f8</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertInt24LEToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a3584b16537c9c652017928416f65be08</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertInt24BEToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a96a8c299845b4cc929cdc4f5ff3f5a4c</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertInt32LEToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ad37c86c3bde96edfc3f898f119c7bcb9</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertInt32BEToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a1dd2a4b22ed53b861c31f07c0ee052a7</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloat32LEToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a10cde5d94f2ea19f5425ac418d8dce4c</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloat32BEToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a9e9ad69c914a77be1048e9df6397edbc</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToFormat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a1b7c2abcb69f9d9cbdbf55166f84ef53</anchor>
      <arglist>(DataFormat destFormat, const float *source, void *dest, int numSamples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFormatToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a105215c8f851b10b7174228c85bd3a97</anchor>
      <arglist>(DataFormat sourceFormat, const void *source, float *dest, int numSamples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>interleaveSamples</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a8eb9899465d9f9a34f6b95037f04e020</anchor>
      <arglist>(const float **source, float *dest, int numSamples, int numChannels)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deinterleaveSamples</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>aac3f177b8617346f5cb1dd93cf09d152</anchor>
      <arglist>(const float *source, float **dest, int numSamples, int numChannels)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioDeviceManager</name>
    <filename>classAudioDeviceManager.html</filename>
    <base>ChangeBroadcaster</base>
    <class kind="struct">AudioDeviceManager::AudioDeviceSetup</class>
    <member kind="function">
      <type></type>
      <name>AudioDeviceManager</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>accab16a03e809121d56e8b272125f3ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioDeviceManager</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>aba2ff8bbc69b9434dfc90c3a7bc09d6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>initialise</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>ad5ae197084fe6b3a1d9777ee8f487621</anchor>
      <arglist>(int numInputChannelsNeeded, int numOutputChannelsNeeded, const XmlElement *savedState, bool selectDefaultDeviceOnFailure, const String &amp;preferredDefaultDeviceName=String::empty, const AudioDeviceSetup *preferredSetupOptions=0)</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>createStateXml</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>abb846b502125744f4ea04f06cde5d92c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAudioDeviceSetup</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a85c1d3c219a8a30caf09dbb9da4afe5a</anchor>
      <arglist>(AudioDeviceSetup &amp;setup)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>setAudioDeviceSetup</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>aef0249d178aa5448ad2e949ae059c461</anchor>
      <arglist>(const AudioDeviceSetup &amp;newSetup, bool treatAsChosenDevice)</arglist>
    </member>
    <member kind="function">
      <type>AudioIODevice *</type>
      <name>getCurrentAudioDevice</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>ad7ab4d5ba626a08098bb77a6164321a1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getCurrentAudioDeviceType</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a2d89901b67119f512b036345bd3d092c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AudioIODeviceType *</type>
      <name>getCurrentDeviceTypeObject</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a01438e7795abd52342d2cc845c1e74c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentAudioDeviceType</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a49e34c1ed60dafcebefc55d12f9175ad</anchor>
      <arglist>(const String &amp;type, bool treatAsChosenDevice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeAudioDevice</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>af9829fcacafb4a395d084b34cdb8391c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restartLastAudioDevice</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>ac46693f5b78c06357b16bf5e95560605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAudioCallback</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>acf3977dcc83f22b7f51091d7ff7b8aff</anchor>
      <arglist>(AudioIODeviceCallback *newCallback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAudioCallback</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>af6d672043bfc5ca423ea0ca41b5ad2d1</anchor>
      <arglist>(AudioIODeviceCallback *callback)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCpuUsage</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>ab7d067e2864f399a471b35cc83bf9a57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMidiInputEnabled</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a5c16cde5d7c4c49dd9b6d00cc17ba481</anchor>
      <arglist>(const String &amp;midiInputDeviceName, bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMidiInputEnabled</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a68824aadea468bbe6cd338c333fff715</anchor>
      <arglist>(const String &amp;midiInputDeviceName) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMidiInputCallback</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a31e11b7a8596530a87cfcf8e48b978d2</anchor>
      <arglist>(const String &amp;midiInputDeviceName, MidiInputCallback *callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMidiInputCallback</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a1338a65adb3849560847f99252adcbd2</anchor>
      <arglist>(const String &amp;midiInputDeviceName, MidiInputCallback *callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultMidiOutput</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a02d957a7dfc854c2de56278db62a171f</anchor>
      <arglist>(const String &amp;deviceName)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getDefaultMidiOutputName</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a85627df952e2b07a440f63850b6ec3d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MidiOutput *</type>
      <name>getDefaultMidiOutput</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a4c3518c6e06fc752d065ff8dd4c9e4f1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const OwnedArray&lt; AudioIODeviceType &gt; &amp;</type>
      <name>getAvailableDeviceTypes</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a577475b3171c4d2cf8dbd7a6a48a02ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createAudioDeviceTypes</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>ad7d7e0e64926665b12b62a53082caecc</anchor>
      <arglist>(OwnedArray&lt; AudioIODeviceType &gt; &amp;types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>playTestSound</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>ab32b74d9dda550d70d47c0cca76fdd25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableInputLevelMeasurement</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a6a351316f351119fc2a75b69913b4a69</anchor>
      <arglist>(bool enableMeasurement)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentInputLevel</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a350c5ba19ff07a66cc17caf01f191d89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CriticalSection &amp;</type>
      <name>getAudioCallbackLock</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a1e92ccc57a94f20639bcdfa68b628dc5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CriticalSection &amp;</type>
      <name>getMidiCallbackLock</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a2bdc27c676c875645d4d77b1146dad24</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioDeviceManager::AudioDeviceSetup</name>
    <filename>structAudioDeviceManager_1_1AudioDeviceSetup.html</filename>
    <member kind="function">
      <type></type>
      <name>AudioDeviceSetup</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>a0386acffa5672ff88151c4d998363e95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>a006af4c030d43a833b002f0c6bc87e62</anchor>
      <arglist>(const AudioDeviceSetup &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>outputDeviceName</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>a5112cd247e403671a6977344c6764e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>inputDeviceName</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>af1c134f5280bec722facace7c9fa0f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sampleRate</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>afa56530d7a661131d8891f7b9874fcd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bufferSize</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>a2b6b158660e8f9381be469ce87232b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BigInteger</type>
      <name>inputChannels</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>a9365767334c0819bb45754100c743fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useDefaultInputChannels</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>af4ee7e75cc152be926202c6a7a822d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BigInteger</type>
      <name>outputChannels</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>ab95916f70e697107288dc0c44af25aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useDefaultOutputChannels</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>a0506caa1460f630b207e1dcf1093f791</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioDeviceSelectorComponent</name>
    <filename>classAudioDeviceSelectorComponent.html</filename>
    <base>Component</base>
    <base>ComboBox::Listener</base>
    <base>ChangeListener</base>
    <member kind="function">
      <type></type>
      <name>AudioDeviceSelectorComponent</name>
      <anchorfile>classAudioDeviceSelectorComponent.html</anchorfile>
      <anchor>aa30a0ebbfb7504abc5479a87d4dcad1f</anchor>
      <arglist>(AudioDeviceManager &amp;deviceManager, const int minAudioInputChannels, const int maxAudioInputChannels, const int minAudioOutputChannels, const int maxAudioOutputChannels, const bool showMidiInputOptions, const bool showMidiOutputSelector, const bool showChannelsAsStereoPairs, const bool hideAdvancedOptionsWithButton)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioDeviceSelectorComponent</name>
      <anchorfile>classAudioDeviceSelectorComponent.html</anchorfile>
      <anchor>a4d8df94ada78d63f0114b0633a6b1024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classAudioDeviceSelectorComponent.html</anchorfile>
      <anchor>af1520a5a4ecbdf773b8e48a5d8c8755e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comboBoxChanged</name>
      <anchorfile>classAudioDeviceSelectorComponent.html</anchorfile>
      <anchor>a2da65a07b27350be0aed9b6d7a3e3ce5</anchor>
      <arglist>(ComboBox *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeListenerCallback</name>
      <anchorfile>classAudioDeviceSelectorComponent.html</anchorfile>
      <anchor>ad88026598422045cc8492769684e745a</anchor>
      <arglist>(ChangeBroadcaster *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>childBoundsChanged</name>
      <anchorfile>classAudioDeviceSelectorComponent.html</anchorfile>
      <anchor>a2fc15473fd8832a825d81ba34b5615ca</anchor>
      <arglist>(Component *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormat</name>
    <filename>classAudioFormat.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioFormat</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>aa8d7789f75b2d9640eadb0262abd1fc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getFormatName</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a8b33099d624ef043f53e4b0082800abf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getFileExtensions</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a1efaa8ebdc8c026fdaad727e766b311c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canHandleFile</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a1bb639929ca98b8e34183d568c380c79</anchor>
      <arglist>(const File &amp;fileToTest)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Array&lt; int &gt;</type>
      <name>getPossibleSampleRates</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a2ed8c044df0018c8efea32798c244354</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Array&lt; int &gt;</type>
      <name>getPossibleBitDepths</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a6dc00e2fac5bdff1ae391b03d8be302c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canDoStereo</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a9ad5466caa8ccba6005ffad301e294a9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canDoMono</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a40fc3d0b8ce9fe7b3dd87dfd1c57e72d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCompressed</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a507f233bee0df2059b74d032460de870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringArray</type>
      <name>getQualityOptions</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>af5140c58d4c58d5949a0792604a976c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a18536136744af7eeaf69800ccb98a9a9</anchor>
      <arglist>(InputStream *sourceStream, bool deleteStreamIfOpeningFails)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AudioFormatWriter *</type>
      <name>createWriterFor</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>ae93a8144520e5bd2902a5daa97cc443b</anchor>
      <arglist>(OutputStream *streamToWriteTo, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioFormat</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a16c818c7c44f16274a7d48f14fef8a6e</anchor>
      <arglist>(const String &amp;formatName, const StringArray &amp;fileExtensions)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormatManager</name>
    <filename>classAudioFormatManager.html</filename>
    <member kind="function">
      <type></type>
      <name>AudioFormatManager</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>ab6f17392bd6758b6ee2c544cfc377850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioFormatManager</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>ae5e43f96f3854585e116637732c798d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerFormat</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>aa9527a11651cbf1f34c4942f44ea5bf4</anchor>
      <arglist>(AudioFormat *newFormat, bool makeThisTheDefaultFormat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerBasicFormats</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>a1a8510b3078662358013ad78239d688e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearFormats</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>aa321a315fd1fdb294779832386092450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumKnownFormats</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>aef8170d93782573c9a2970430ac64f5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AudioFormat *</type>
      <name>getKnownFormat</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>a7f8c19e9820a10264371c2097ce3bfee</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>AudioFormat *</type>
      <name>findFormatForFileExtension</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>a36344f4d5c1820133a430572a0cbf6d6</anchor>
      <arglist>(const String &amp;fileExtension) const </arglist>
    </member>
    <member kind="function">
      <type>AudioFormat *</type>
      <name>getDefaultFormat</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>a19c093d4ddead5c031c50d37a61bc9b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getWildcardForAllFormats</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>a9d8aa57c760eae655ad0016a0ef931d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>ab78bd5aa0ff2b9b667b5156b3bac5e83</anchor>
      <arglist>(const File &amp;audioFile)</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>a8b691e67fef322c482262635fcfd3fee</anchor>
      <arglist>(InputStream *audioFileStream)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormatReader</name>
    <filename>classAudioFormatReader.html</filename>
    <class kind="struct">AudioFormatReader::ReadHelper</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioFormatReader</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>aa5c4a7c0715e60d829a03b8aa67a8c49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getFormatName</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>ae90256289d171f649fd83d2070b4ae32</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>afe581e23098c90f1fb187fdff68d3481</anchor>
      <arglist>(int *const *destSamples, int numDestChannels, int64 startSampleInSource, int numSamplesToRead, bool fillLeftoverChannelsWithCopies)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>a76b621162d046224e14943782c42e090</anchor>
      <arglist>(AudioSampleBuffer *buffer, int startSampleInDestBuffer, int numSamples, int64 readerStartSample, bool useReaderLeftChan, bool useReaderRightChan)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readMaxLevels</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>aa6393d5cb57b6a03cb7544df495d86b6</anchor>
      <arglist>(int64 startSample, int64 numSamples, float &amp;lowestLeft, float &amp;highestLeft, float &amp;lowestRight, float &amp;highestRight)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>searchForLevel</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>a088e8f4f625a23a4fd0234eec16ec53a</anchor>
      <arglist>(int64 startSample, int64 numSamplesToSearch, double magnitudeRangeMinimum, double magnitudeRangeMaximum, int minimumConsecutiveSamples)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>readSamples</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>a8447eed7f81e0b931248a8eb98ed106f</anchor>
      <arglist>(int **destSamples, int numDestChannels, int startOffsetInDestBuffer, int64 startSampleInFile, int numSamples)=0</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sampleRate</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>aafcd07b3ac08e83c019621cd8cd0c7c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>bitsPerSample</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>aa450170dd89d247be8eb1f657b8b47d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>lengthInSamples</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>af7373fd7e45ed1f026647fc8671e997f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numChannels</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>a2a7c577b4ececb03d3658fd0625c5b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usesFloatingPointData</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>aed5e9ba760d519f110c18053d6adba7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StringPairArray</type>
      <name>metadataValues</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>a8dfe48ed0e171928185c716811f5ecdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InputStream *</type>
      <name>input</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>a81797ede6915ec762408d8ed23ec4d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioFormatReader</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>a2dfb6080eb01440fa8e8dde6b7baf5c6</anchor>
      <arglist>(InputStream *sourceStream, const String &amp;formatName)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioFormatReader::ReadHelper</name>
    <filename>structAudioFormatReader_1_1ReadHelper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>AudioData::Pointer&lt; DestSampleType, AudioData::NativeEndian, AudioData::NonInterleaved, AudioData::NonConst &gt;</type>
      <name>DestType</name>
      <anchorfile>structAudioFormatReader_1_1ReadHelper.html</anchorfile>
      <anchor>a0084d44db12183607466fe09e4829f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AudioData::Pointer&lt; SourceSampleType, SourceEndianness, AudioData::Interleaved, AudioData::Const &gt;</type>
      <name>SourceType</name>
      <anchorfile>structAudioFormatReader_1_1ReadHelper.html</anchorfile>
      <anchor>a8a24767200ed43a8317fb20d84c2ad17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>read</name>
      <anchorfile>structAudioFormatReader_1_1ReadHelper.html</anchorfile>
      <anchor>a8d3def6acef71b6a1430935fa0dd7804</anchor>
      <arglist>(int **destData, int destOffset, int numDestChannels, const void *sourceData, int numSourceChannels, int numSamples) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormatReaderSource</name>
    <filename>classAudioFormatReaderSource.html</filename>
    <base>PositionableAudioSource</base>
    <member kind="function">
      <type></type>
      <name>AudioFormatReaderSource</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>a33b9036a7a64c0ae8b741550d70ec52d</anchor>
      <arglist>(AudioFormatReader *sourceReader, bool deleteReaderWhenThisIsDeleted)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioFormatReaderSource</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>a6efb3ee10a5980d3830c4f2272040779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLooping</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>aa67d51fea7c7abf35e04470638bf186c</anchor>
      <arglist>(bool shouldLoop)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLooping</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>a2599bffcdcd9eed30705e866e27a1889</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>getAudioFormatReader</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>a8cf967923624f7b75acafa3c397873da</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>a73fe788334483f5829ad96d6a14db007</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>acb26c6dec539a6badd7197f72a7e5865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>ae6f4c17dedb24e7e35abb45a41cc9aa9</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextReadPosition</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>aca1273037cfb3b7a6b80abad01ad7e41</anchor>
      <arglist>(int64 newPosition)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getNextReadPosition</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>a068c1a297c96831f95f4a4fbd05aa1cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>aeeb5516293f4420ae540ed6460f64658</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormatWriter</name>
    <filename>classAudioFormatWriter.html</filename>
    <class kind="class">AudioFormatWriter::ThreadedWriter</class>
    <class kind="struct">AudioFormatWriter::WriteHelper</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioFormatWriter</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>ad3e3c4a5e1ba629c0d1aaa47827389f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getFormatName</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>aea144b105a5d45fb91acfb484b0ff303</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>a60dc79a5cd9ed0307ea04637ed25ea8b</anchor>
      <arglist>(const int **samplesToWrite, int numSamples)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeFromAudioReader</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>a3a691c94e9609383c915af71cbf760db</anchor>
      <arglist>(AudioFormatReader &amp;reader, int64 startSample, int64 numSamplesToRead)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeFromAudioSource</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>a4d09d96836ebe2779d2e82a090d0b29f</anchor>
      <arglist>(AudioSource &amp;source, int numSamplesToRead, int samplesPerBlock=2048)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeFromAudioSampleBuffer</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>a62f00db8e716c1d253d70be4c9d753a1</anchor>
      <arglist>(const AudioSampleBuffer &amp;source, int startSample, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSampleRate</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>ae31a1427413b3ac45c7f02d7384e156e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChannels</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>a436de23247a535b447ed8ddf6100c496</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBitsPerSample</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>a893f8254a9d1978511806ee414cce929</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFloatingPoint</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>ac51a620bf86a2e501eaae93e2e2c331c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioFormatWriter</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>ad13516434d025d9427fab9ac9b208a77</anchor>
      <arglist>(OutputStream *destStream, const String &amp;formatName, double sampleRate, unsigned int numberOfChannels, unsigned int bitsPerSample)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sampleRate</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>aafefbda90e2a58cb057e89e995decfd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numChannels</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>af33e6836e6dbbcd774ac166453c5446c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>bitsPerSample</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>aa1c1c0accbc262067e2f9ad75d70d155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>usesFloatingPointData</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>a876800b982bbe25e583633d3876a9a02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OutputStream *</type>
      <name>output</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>aeef1f96e051a7f40b69664636393bf5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormatWriter::ThreadedWriter</name>
    <filename>classAudioFormatWriter_1_1ThreadedWriter.html</filename>
    <class kind="class">AudioFormatWriter::ThreadedWriter::IncomingDataReceiver</class>
    <member kind="function">
      <type></type>
      <name>ThreadedWriter</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter.html</anchorfile>
      <anchor>a8efb067cf742fdac8b2bc6e21a084531</anchor>
      <arglist>(AudioFormatWriter *writer, TimeSliceThread &amp;backgroundThread, int numSamplesToBuffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreadedWriter</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter.html</anchorfile>
      <anchor>acb40f07ce4ffd0bdff82533d61ca79f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter.html</anchorfile>
      <anchor>a8f7fd51f38d723ece04adf0ff5591bbb</anchor>
      <arglist>(const float **data, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataReceiver</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter.html</anchorfile>
      <anchor>ad3dcbed2e259510fe5bdab35fff9d891</anchor>
      <arglist>(IncomingDataReceiver *receiver)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormatWriter::ThreadedWriter::IncomingDataReceiver</name>
    <filename>classAudioFormatWriter_1_1ThreadedWriter_1_1IncomingDataReceiver.html</filename>
    <member kind="function">
      <type></type>
      <name>IncomingDataReceiver</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter_1_1IncomingDataReceiver.html</anchorfile>
      <anchor>a27d5ea6fc6910944fc7351e058af4450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IncomingDataReceiver</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter_1_1IncomingDataReceiver.html</anchorfile>
      <anchor>a0728c19886518197e280cc5318197295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter_1_1IncomingDataReceiver.html</anchorfile>
      <anchor>a48e39e836142669e489b04389123536a</anchor>
      <arglist>(int numChannels, double sampleRate, int64 totalSamplesInSource)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addBlock</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter_1_1IncomingDataReceiver.html</anchorfile>
      <anchor>aa4fbc037fadc84e796c5840fdf920063</anchor>
      <arglist>(int64 sampleNumberInSource, const AudioSampleBuffer &amp;newData, int startOffsetInBuffer, int numSamples)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioFormatWriter::WriteHelper</name>
    <filename>structAudioFormatWriter_1_1WriteHelper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>AudioData::Pointer&lt; DestSampleType, DestEndianness, AudioData::Interleaved, AudioData::NonConst &gt;</type>
      <name>DestType</name>
      <anchorfile>structAudioFormatWriter_1_1WriteHelper.html</anchorfile>
      <anchor>a5b7c59617fd96d69dee0062368e7f3e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AudioData::Pointer&lt; SourceSampleType, AudioData::NativeEndian, AudioData::NonInterleaved, AudioData::Const &gt;</type>
      <name>SourceType</name>
      <anchorfile>structAudioFormatWriter_1_1WriteHelper.html</anchorfile>
      <anchor>a783e948eebc1915c108e97bef8a2698b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write</name>
      <anchorfile>structAudioFormatWriter_1_1WriteHelper.html</anchorfile>
      <anchor>ac94423abb88f2c1d10c3493c8891a2c5</anchor>
      <arglist>(void *destData, int numDestChannels, const int **source, int numSamples, const int sourceOffset=0) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioIODevice</name>
    <filename>classAudioIODevice.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioIODevice</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a0af67fc5598fb5fd9b033d3938968a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>abb1c4b56c8aa943f0507ed1776369a80</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getTypeName</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>acb989e3b415936f70fb68e8a37bdb813</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StringArray</type>
      <name>getOutputChannelNames</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a49d09c50d23685dfeb881594c6e8a621</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StringArray</type>
      <name>getInputChannelNames</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>aabb8e29146abb9aeb60dea604288c8a7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumSampleRates</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a2da113c18b9c090d07a0f8bb586f1cdd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSampleRate</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a89da96e465e0ea4a3029c90f77081df8</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumBufferSizesAvailable</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>ae0e9207ed5fdcbd753cc51674f5c28e8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getBufferSizeSamples</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>adb66b7d42aed9babc19406a295c8a8c2</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getDefaultBufferSize</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a71384f0310a9f6850cd826d0fd91f8f4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>open</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a519b91efd6bf7bf88fbe85eb5510629f</anchor>
      <arglist>(const BigInteger &amp;inputChannels, const BigInteger &amp;outputChannels, double sampleRate, int bufferSizeSamples)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a7ca9104dc82d77961b3dfcc005810004</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isOpen</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>aebfdd9a70545dd500041cd7e5cd736c1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>aa3a17cf757a6297aab23a1327579347f</anchor>
      <arglist>(AudioIODeviceCallback *callback)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>aca2e8897d904bc36b5faa647cfa8d20a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isPlaying</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>af8b5c71cb2512bcdf477267e3fc4faf7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getLastError</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a4cfb59b5782efabcb31b225a69bd9b12</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCurrentBufferSizeSamples</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>af7636fe06f58b58c41bc8575184f518f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getCurrentSampleRate</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>afba31b6d244b7cc257e925a04c5c383c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCurrentBitDepth</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>abab889e2e9ff5dd49626faa15bfbac37</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BigInteger</type>
      <name>getActiveOutputChannels</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a4f8af9affa191545e0722d07c3157cd2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BigInteger</type>
      <name>getActiveInputChannels</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a8020f07359040702d9339dff1628f940</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getOutputLatencyInSamples</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a693804fbf5a7cceb31ece10a9f03bd11</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getInputLatencyInSamples</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a3998b9256b8f5056e5e1cbf17c3e520d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasControlPanel</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a61f6654ab66f66e60e30bc7e5b08647b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>showControlPanel</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>ab8871c0f3b0639e0408582b354b28247</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioIODevice</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>aa380a49e49176fb883d89b094bf2448c</anchor>
      <arglist>(const String &amp;deviceName, const String &amp;typeName)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>String</type>
      <name>name</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a8f0fcd3c3672601cfd44749221452ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>String</type>
      <name>typeName</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a0f3aec64dbabccdd7a9a688def70cf45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioIODeviceCallback</name>
    <filename>classAudioIODeviceCallback.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioIODeviceCallback</name>
      <anchorfile>classAudioIODeviceCallback.html</anchorfile>
      <anchor>a922abd58862d1bc04c067683a6a8e59a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>audioDeviceIOCallback</name>
      <anchorfile>classAudioIODeviceCallback.html</anchorfile>
      <anchor>a9ba147cd10fe995c3016dbf35132f995</anchor>
      <arglist>(const float **inputChannelData, int numInputChannels, float **outputChannelData, int numOutputChannels, int numSamples)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>audioDeviceAboutToStart</name>
      <anchorfile>classAudioIODeviceCallback.html</anchorfile>
      <anchor>a1bec2ae89543a93e31461991f7404aec</anchor>
      <arglist>(AudioIODevice *device)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>audioDeviceStopped</name>
      <anchorfile>classAudioIODeviceCallback.html</anchorfile>
      <anchor>a7b3e3c479e4e0b3b19ea992960ef46f5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioDeviceError</name>
      <anchorfile>classAudioIODeviceCallback.html</anchorfile>
      <anchor>a7768d640daf7d5d56399ced8188b2b75</anchor>
      <arglist>(const String &amp;errorMessage)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioIODeviceType</name>
    <filename>classAudioIODeviceType.html</filename>
    <class kind="class">AudioIODeviceType::Listener</class>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getTypeName</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>aa3c52a84433f7b0aa2958ad8939fe64c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scanForDevices</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a9215b39e523934ac648d4f85f1e1bdf5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StringArray</type>
      <name>getDeviceNames</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>ade867e4e10fb4ba6c91bc1bcba8573cb</anchor>
      <arglist>(bool wantInputNames=false) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getDefaultDeviceIndex</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>af12cc963a4d445c2665452c3173bac67</anchor>
      <arglist>(bool forInput) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getIndexOfDevice</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a76d7d6b6c3f600dce0594be7bab24bc8</anchor>
      <arglist>(AudioIODevice *device, bool asInput) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasSeparateInputsAndOutputs</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>ac87c3129c8e55018e968225b4a47dc74</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AudioIODevice *</type>
      <name>createDevice</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a71099710a2d23a76ccba190882635f76</anchor>
      <arglist>(const String &amp;outputDeviceName, const String &amp;inputDeviceName)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>aba66d5fc04bb8162ad082bbc5a46df37</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a9f900be754924e8a269064c37671e92c</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioIODeviceType</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>adc7de51c8ca7633ace84e982b13272d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_CoreAudio</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a6ca7fa4634cf402d84eb747abe29c897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_iOSAudio</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>ac58ef81494ae91347abce612447f93df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_WASAPI</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a3313d41737285d0c28e1c13679b040b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_DirectSound</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a1630530b154ab8eeb0458d156d9f07cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_ASIO</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>aee6faebf37f99124203b401c3bc6dfcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_ALSA</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>ab6f7e9cd0b51436fabf706e8ca8a602f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_JACK</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a2b3643c9616a0f6b1c216b43576966bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_Android</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a6be31ae8ce32ecae93f6fce86477e859</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_OpenSLES</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a9e2c88b78be45c3dd3cda93f6c2dd30a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioIODeviceType</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a4750d3af810f03d74d9a73584f2bf1d0</anchor>
      <arglist>(const String &amp;typeName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>callDeviceChangeListeners</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a256b0adb6c00e875e9d52e2c79ecdb85</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioIODeviceType::Listener</name>
    <filename>classAudioIODeviceType_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classAudioIODeviceType_1_1Listener.html</anchorfile>
      <anchor>a2728ca3ef4754c977a2125fd2e7d9f38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>audioDeviceListChanged</name>
      <anchorfile>classAudioIODeviceType_1_1Listener.html</anchorfile>
      <anchor>a1738204697daecf0f2619c3525656eae</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioPlayHead</name>
    <filename>classAudioPlayHead.html</filename>
    <class kind="struct">AudioPlayHead::CurrentPositionInfo</class>
    <member kind="enumeration">
      <name>FrameRateType</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9afad1749c8002945b2a6921eef92b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fps24</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9afad1749c8002945b2a6921eef92b25a0a9a4305317d85cf1975f6be3569e9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fps25</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9afad1749c8002945b2a6921eef92b25a8deb0cfa8182f6be90cb4d91b4b68456</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fps2997</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9afad1749c8002945b2a6921eef92b25a7c5eadafb62a8be03ab5690d34fb7460</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fps30</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9afad1749c8002945b2a6921eef92b25a77c3bd70c42f416f663c83036bff401d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fps2997drop</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9afad1749c8002945b2a6921eef92b25ac03944a2bba5e61cabcca112edfd1efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fps30drop</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9afad1749c8002945b2a6921eef92b25a2263e006dec6f9cf53adbbcecdc9e287</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fpsUnknown</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9afad1749c8002945b2a6921eef92b25a7e58343767d199b598a16ea25c09b062</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioPlayHead</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9c32cae9ee0bb7442a2c465a73aca6bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getCurrentPosition</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>ae8ff79b6ec79fbecb1e8276ad9867cd2</anchor>
      <arglist>(CurrentPositionInfo &amp;result)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioPlayHead</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9e78c0595510555a3d816a54bffeb610</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioPlayHead::CurrentPositionInfo</name>
    <filename>structAudioPlayHead_1_1CurrentPositionInfo.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a927d8dc1a9acc71fff0656b0d2128afe</anchor>
      <arglist>(const CurrentPositionInfo &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>aa97bb9f02a577b9e53ef575d17ac1c46</anchor>
      <arglist>(const CurrentPositionInfo &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetToDefault</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a4eb2e1834c4f9e932ef43301c0cd99ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>bpm</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a70442777df0b88595ac6865acd936722</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>timeSigNumerator</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>aaf8ad36ef3b2d39d401542ae5ca0100c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>timeSigDenominator</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a953c3ad29ef6e0ced883e15f901b0a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>timeInSeconds</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a9da5cfbe320a2e6bf67c3a064ab34fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>editOriginTime</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a5a8c7375646228f378c4eb673f49a9e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ppqPosition</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>aae819730a8f2918f97b9869970ff8c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ppqPositionOfLastBarStart</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>ad7967e1315115628cb35f93f389a3448</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FrameRateType</type>
      <name>frameRate</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>aca5544d9204e4fedfdf6088dcdf339aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isPlaying</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a84105c58665f2daae7a18809c964b397</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isRecording</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a26d4f8779d4f64ba6c3a0a0df5607a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ppqLoopStart</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>ae56173fb2fdc1bf77094d5a507ad247c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ppqLoopEnd</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>af3f8a3e1105700c28b2197635a64c9f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isLooping</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a69d7734277c893a624b2ea7392cb96e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioPluginFormat</name>
    <filename>classAudioPluginFormat.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioPluginFormat</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a13029b260e822e954d6b33229db75d50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getName</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>aad966eb47be8b72b34f8f317ea89b4a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>findAllTypesForFile</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a9d23e71b2c2429cad9775a14e021abd6</anchor>
      <arglist>(OwnedArray&lt; PluginDescription &gt; &amp;results, const String &amp;fileOrIdentifier)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AudioPluginInstance *</type>
      <name>createInstanceFromDescription</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a8efba8d029ae6b22a88cc6d7c84e5ec0</anchor>
      <arglist>(const PluginDescription &amp;desc)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>fileMightContainThisPluginType</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a89c2413dae86f4b9ea8fb29ed205edc5</anchor>
      <arglist>(const String &amp;fileOrIdentifier)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getNameOfPluginFromIdentifier</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a8e8251e287c4829606dda2f1730a1c32</anchor>
      <arglist>(const String &amp;fileOrIdentifier)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>doesPluginStillExist</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>aa75ed0f5726f88ca1276208f0c42da41</anchor>
      <arglist>(const PluginDescription &amp;desc)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StringArray</type>
      <name>searchPathsForPlugins</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a73d972820a0b8c1c487a939089153199</anchor>
      <arglist>(const FileSearchPath &amp;directoriesToSearch, bool recursive)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FileSearchPath</type>
      <name>getDefaultLocationsToSearch</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>aa7d194ad3abdad8da5e37d2557579430</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioPluginFormat</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a1cba190b88451cc41cae664a72bce7d5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>afde3dc53e078e236bfb3269b28467287</anchor>
      <arglist>(AudioPluginFormat)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioPluginFormatManager</name>
    <filename>classAudioPluginFormatManager.html</filename>
    <base>DeletedAtShutdown</base>
    <member kind="function">
      <type></type>
      <name>AudioPluginFormatManager</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>ac2781ab5b9b81784a1041edb16c3bdd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioPluginFormatManager</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>af665e2e901d438a93a75282df73dd1b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>juce_DeclareSingleton_SingleThreaded</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>a6d325582d6292ade88c91b0a9b915c6a</anchor>
      <arglist>(AudioPluginFormatManager, false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDefaultFormats</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>a43c3c16e48f1c50069573c8aede0b776</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFormats</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>a3c93f8d5747cf2c9f1aa6967e19b5dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AudioPluginFormat *</type>
      <name>getFormat</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>a2b402a4797089f016b68a1e6afdf51ae</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFormat</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>ac243852bbebb30d33264457579005875</anchor>
      <arglist>(AudioPluginFormat *format)</arglist>
    </member>
    <member kind="function">
      <type>AudioPluginInstance *</type>
      <name>createPluginInstance</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>a246abfba112f90b88b0e537ee5b97e0a</anchor>
      <arglist>(const PluginDescription &amp;description, String &amp;errorMessage) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doesPluginStillExist</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>aa72ffaa8d7fa00a3b510a75064bcb913</anchor>
      <arglist>(const PluginDescription &amp;description) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioPluginInstance</name>
    <filename>classAudioPluginInstance.html</filename>
    <base>AudioProcessor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioPluginInstance</name>
      <anchorfile>classAudioPluginInstance.html</anchorfile>
      <anchor>adfede30a4e4f8debd321785322a472b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fillInPluginDescription</name>
      <anchorfile>classAudioPluginInstance.html</anchorfile>
      <anchor>addcf6a53ee6ac9d21e1e4ad1ba0bcc5d</anchor>
      <arglist>(PluginDescription &amp;description) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>getPlatformSpecificData</name>
      <anchorfile>classAudioPluginInstance.html</anchorfile>
      <anchor>a49f7214074ad74ca108f3f770e8c749e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioPluginInstance</name>
      <anchorfile>classAudioPluginInstance.html</anchorfile>
      <anchor>a728172a1e902b7ab16c5d2b580a93e79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</name>
      <anchorfile>classAudioPluginInstance.html</anchorfile>
      <anchor>af0198150c81938c474f03bd50adfb813</anchor>
      <arglist>(AudioPluginInstance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessor</name>
    <filename>classAudioProcessor.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioProcessor</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ac36ca53f3b198e097e38b8e830890878</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const String</type>
      <name>getName</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a71affad7782adb55b183d6d4d0853253</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>prepareToPlay</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ac7ebd6fb3dd06bd023159c590e3a7d2a</anchor>
      <arglist>(double sampleRate, int estimatedSamplesPerBlock)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseResources</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a49e88e7d6c7c40899624beb9e3508f3a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processBlock</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a7d8c56f45dfd03b507e120eeca7435dd</anchor>
      <arglist>(AudioSampleBuffer &amp;buffer, MidiBuffer &amp;midiMessages)=0</arglist>
    </member>
    <member kind="function">
      <type>AudioPlayHead *</type>
      <name>getPlayHead</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a3000c867da8b04866a4f91c8103956ac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSampleRate</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a99b216c491ed4896424a9a075858ca03</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockSize</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a3b59606e6e85f262d465c7f779ca0c4a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumInputChannels</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ae8fda9da6062e47181544a9ac25baaea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumOutputChannels</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ad628a9699d9b6c9859c8240e21ec9d90</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getInputSpeakerArrangement</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a8c85a22f6dac9e1aac8aafd97fad10f5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getOutputSpeakerArrangement</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a70d827af48e2eeef7df1ab233d031a04</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const String</type>
      <name>getInputChannelName</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a7b08160f29557954c03fd27c07a7380c</anchor>
      <arglist>(int channelIndex) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const String</type>
      <name>getOutputChannelName</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a13811b9a738bd6e807e186b1f9af7c2c</anchor>
      <arglist>(int channelIndex) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInputChannelStereoPair</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a1de55114a91badc007d1e389a81a14eb</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isOutputChannelStereoPair</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>aa429d156af1caf829627043615b5ede7</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLatencySamples</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>abae54a8c1bcfd88bcba9d42b752e006d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLatencySamples</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ac902e27eb0950adac57bb69680b6e709</anchor>
      <arglist>(int newLatency)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>acceptsMidi</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ae482a0c2928bfe77de821e6824ffaee6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>producesMidi</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a719715472b12c40e8144109561c04e65</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>const CriticalSection &amp;</type>
      <name>getCallbackLock</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a71ae245e3ea15035f0648ddd34a492c1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendProcessing</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a584d01c1c009c1ce49a45cd6e49d2dc5</anchor>
      <arglist>(bool shouldBeSuspended)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSuspended</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>aab07ed8e72817efe0e12b70890950e3e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ab10c4739ceb56e5cd70dbce8aa8c4f61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNonRealtime</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ac61949900870c9f6dca63d53ee68f7a0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonRealtime</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a989baaa3a9a6863d651c956ce1e5a680</anchor>
      <arglist>(bool isNonRealtime) noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AudioProcessorEditor *</type>
      <name>createEditor</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a103fc8a8666b7d31b472e017262be84d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasEditor</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a00be8f595da09ba01d74cb7c52b8fb81</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>AudioProcessorEditor *</type>
      <name>getActiveEditor</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a0f1386123ab008b42a82c7d121b2ff13</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioProcessorEditor *</type>
      <name>createEditorIfNeeded</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a0e06519ec925a8da3180df1a7a34f3eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumParameters</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ad6b6bab11612f3af64dbace66c8990f8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const String</type>
      <name>getParameterName</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ab25b03cba4e0ec2f6eac32e7341960c7</anchor>
      <arglist>(int parameterIndex)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getParameter</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a27473b6db976c8ee59f570870ea5fde3</anchor>
      <arglist>(int parameterIndex)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const String</type>
      <name>getParameterText</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a97bb7a26a396cc437fcecde38a70d6b9</anchor>
      <arglist>(int parameterIndex)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a4e4d173766f679763fe9484ba733ca38</anchor>
      <arglist>(int parameterIndex, float newValue)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterNotifyingHost</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ab09a26934acb4d7fe3f71448aeb80f18</anchor>
      <arglist>(int parameterIndex, float newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isParameterAutomatable</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a854a99d8216288d7518024828398f74b</anchor>
      <arglist>(int parameterIndex) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMetaParameter</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a525c28ae5c579beaf0008cbf09d490c7</anchor>
      <arglist>(int parameterIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginParameterChangeGesture</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ad082383dc1b0e4f648bb4edaf61cf385</anchor>
      <arglist>(int parameterIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endParameterChangeGesture</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a4205962ffb34852cfc1ef1476050dd68</anchor>
      <arglist>(int parameterIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateHostDisplay</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ab53b860c69380cb34e466b60a3bce3f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumPrograms</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a510123768a99f32ff4a23d0458e15e13</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCurrentProgram</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ac111282810f1e9ddb057e1267fa0bd79</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCurrentProgram</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>aafe9fab0a94b6bb23cecdbb67851f206</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const String</type>
      <name>getProgramName</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>af0facfc9ed31fb3d2948ceac7ae89d87</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>changeProgramName</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>accd5bd7b594fbc1a385f7a8b31c7b3f3</anchor>
      <arglist>(int index, const String &amp;newName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getStateInformation</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a5d79591b367a7c0516e4ef4d1d6c32b2</anchor>
      <arglist>(juce::MemoryBlock &amp;destData)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getCurrentProgramStateInformation</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>aa8f9774ef205e4b19174f2de7664928f</anchor>
      <arglist>(juce::MemoryBlock &amp;destData)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setStateInformation</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a6154837fea67c594a9b35c487894df27</anchor>
      <arglist>(const void *data, int sizeInBytes)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentProgramStateInformation</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ade2c2df3606218b0f9fa1a3a376440a5</anchor>
      <arglist>(const void *data, int sizeInBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a5097ea15d27fd9fe1248e824bc54ce89</anchor>
      <arglist>(AudioProcessorListener *newListener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a91515992e746561e526f5326a783f59e</anchor>
      <arglist>(AudioProcessorListener *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlayHead</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a9ccda997b638bf11d73a290944f6be17</anchor>
      <arglist>(AudioPlayHead *newPlayHead) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>editorBeingDeleted</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a78f4b83d4f5c8625cf1df93288142642</anchor>
      <arglist>(AudioProcessorEditor *) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlayConfigDetails</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a8648014377dc6ee0476ceb45da113346</anchor>
      <arglist>(int numIns, int numOuts, double sampleRate, int blockSize) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeakerArrangement</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a32373cce07683bdd38cf3b01eb1c4bdc</anchor>
      <arglist>(const String &amp;inputs, const String &amp;outputs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioProcessor</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a8602919358f1bf8799abd0c179c5e03b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendParamChangeMessageToListeners</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a2e0e6efdce297e7ae7a9a23152c55165</anchor>
      <arglist>(int parameterIndex, float newValue)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>copyXmlToBinary</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a6d0c1c945bebbc967d187c0f08b42c4b</anchor>
      <arglist>(const XmlElement &amp;xml, juce::MemoryBlock &amp;destData)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static XmlElement *</type>
      <name>getXmlFromBinary</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>af314980ac708cb8802b48317037e5b5b</anchor>
      <arglist>(const void *data, int sizeInBytes)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AudioPlayHead *</type>
      <name>playHead</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a78d1c3e1cabecff818b93de44891d973</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorEditor</name>
    <filename>classAudioProcessorEditor.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>~AudioProcessorEditor</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>a097320aae2fae460cfd0c01fc8e9ccb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AudioProcessor *</type>
      <name>getAudioProcessor</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>a4673c0d44d3c88bb0e8d1460a2224e3f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioProcessorEditor</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>a41b85015301423c716bb96e703b3e688</anchor>
      <arglist>(AudioProcessor *owner)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorGraph</name>
    <filename>classAudioProcessorGraph.html</filename>
    <base>AudioProcessor</base>
    <base>AsyncUpdater</base>
    <class kind="class">AudioProcessorGraph::AudioGraphIOProcessor</class>
    <class kind="struct">AudioProcessorGraph::Connection</class>
    <class kind="class">AudioProcessorGraph::Node</class>
    <member kind="function">
      <type></type>
      <name>AudioProcessorGraph</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a8d33e2e949c97a1a37b47e39bbe43f7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioProcessorGraph</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>acd8a5defb48ec3344ad412e489aa58fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a13486fcb6b0a740331b0cecb3d22109f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNodes</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>afe70efc0108fa9f1e6c1ff18d66d1a6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getNode</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a40d3499471e7f1901fc8503a3aa90cd3</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getNodeForId</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>ab2cf79e6540bb6a95df2c6e8fbe14b2f</anchor>
      <arglist>(const uint32 nodeId) const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>addNode</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a6a75a45b9daea9e424ea327b924e4bf9</anchor>
      <arglist>(AudioProcessor *newProcessor, uint32 nodeId=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeNode</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a35e6dcbafebe8ac84db3dad6983aad6c</anchor>
      <arglist>(uint32 nodeId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConnections</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a5ec854f3964347bcc429bed74b1c0143</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Connection *</type>
      <name>getConnection</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>abb71ccd0af51ad8c64df980836f53856</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>const Connection *</type>
      <name>getConnectionBetween</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>aecf825019c1bf0256105fc6c8ef130e7</anchor>
      <arglist>(uint32 sourceNodeId, int sourceChannelIndex, uint32 destNodeId, int destChannelIndex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a9f52ec181d8aabf723170d69b4bf4d7d</anchor>
      <arglist>(uint32 possibleSourceNodeId, uint32 possibleDestNodeId) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canConnect</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a1e196b127080aa6cb3f3f395c2a9366f</anchor>
      <arglist>(uint32 sourceNodeId, int sourceChannelIndex, uint32 destNodeId, int destChannelIndex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConnection</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>adde28972b8d725a3c9c7af43bbe0b569</anchor>
      <arglist>(uint32 sourceNodeId, int sourceChannelIndex, uint32 destNodeId, int destChannelIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeConnection</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a59e7b99abf5a7a515e9659e2fbfd3cb5</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeConnection</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a24cb1c816cb611f1a22978976f50aed0</anchor>
      <arglist>(uint32 sourceNodeId, int sourceChannelIndex, uint32 destNodeId, int destChannelIndex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>disconnectNode</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a8fb912ad3add171eb08c6e58a66e1687</anchor>
      <arglist>(uint32 nodeId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectionLegal</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a29eb5ea53c60de51a5ac7134804ed8b6</anchor>
      <arglist>(const Connection *connection) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeIllegalConnections</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a3d025471473ded56797653edd4669220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getName</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a925407bb5f02f3af5215c47abf35e3b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a4fd25bbb34e5d3e0896e40cad0423a50</anchor>
      <arglist>(double sampleRate, int estimatedSamplesPerBlock)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a2354cf962164a7ad9d7fbd965848d8d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processBlock</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a65b1119b439500471cc77b295a00bace</anchor>
      <arglist>(AudioSampleBuffer &amp;, MidiBuffer &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getInputChannelName</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a2c02079e4f67b24200632c7f105b94d6</anchor>
      <arglist>(int channelIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getOutputChannelName</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a195f691636bd7978f71dfea5125297f2</anchor>
      <arglist>(int channelIndex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInputChannelStereoPair</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>ab182318b40d53198ea261e6418e66eea</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutputChannelStereoPair</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>ac58be7ec9eb1daa64b7ab22dcf16496b</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>acceptsMidi</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a0ba15590303932887b009a65f547aeeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>producesMidi</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>adcb61b28a2bd7057d1b7eca0d7750d80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasEditor</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>ad3c9a39ef15c3b0fd0b5ebb02b937060</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AudioProcessorEditor *</type>
      <name>createEditor</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>af4f0ec32540bd6185f5f93491bd498c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParameters</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a689c7a0e16af432e240db298cd8fcc6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getParameterName</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a2a8460a9ca99c57b70a1ef88586b654a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getParameter</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a59a500045c3465fd77b1e760d8611070</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getParameterText</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a52665f29438df941eb74d2a490a801c4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a8b97fd964424095327b5f8f4ab70d6a6</anchor>
      <arglist>(int, float)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPrograms</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>ad1a8e7d33cee0ea6e313cc36d562e565</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentProgram</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a08135dc8dd9281001eb2f2e3eb372c0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentProgram</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a8b87ed5854da307847298cc5cc09af78</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getProgramName</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a7dc237ff7cfc72a142ee29762fd87019</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeProgramName</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a4e95629fc3af742a6e92a8d8801900d4</anchor>
      <arglist>(int, const String &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getStateInformation</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>aa6ffc34ecd21f653b04663a479eb1ba0</anchor>
      <arglist>(juce::MemoryBlock &amp;destData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateInformation</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>ad1953b78a5b717d234ba953c016ce26c</anchor>
      <arglist>(const void *data, int sizeInBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleAsyncUpdate</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a13aae03ced87afaca564ac27dd35f2a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>midiChannelIndex</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>acde235cdad97d2bba6dd828ceeb7c4e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorGraph::AudioGraphIOProcessor</name>
    <filename>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</filename>
    <base>AudioPluginInstance</base>
    <member kind="enumeration">
      <name>IODeviceType</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a612fff538a6a57529626b4121934761a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>audioInputNode</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a612fff538a6a57529626b4121934761aa002564f5df42036b1b8a791d8c3a760d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>audioOutputNode</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a612fff538a6a57529626b4121934761aac004122d6a09fdb5bce7fdb2221340f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>midiInputNode</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a612fff538a6a57529626b4121934761aa6ba4fa6ffb1f9ca1025fca01a222e000</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>midiOutputNode</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a612fff538a6a57529626b4121934761aac88e470585a2a9265dda58a0911b1c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IODeviceType</type>
      <name>getType</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a98d60fe2efb9fa3b0d3654e7d62818ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AudioProcessorGraph *</type>
      <name>getParentGraph</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a35e2317cf69e6147f1eadc9e7f1a1979</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInput</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a8e5cb11fe8779e395a712cb9c8631f70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutput</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a3f9d57d4c945db5bb5494c784f3cf934</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioGraphIOProcessor</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a8eb56847dc607a88b1872e3f36b53722</anchor>
      <arglist>(const IODeviceType type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioGraphIOProcessor</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a75d863be80c6fbec07b67cdaf4def49e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getName</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a481d6ac7318053cea329664114e35605</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillInPluginDescription</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a9498b7769c91b076e34302426c4e361d</anchor>
      <arglist>(PluginDescription &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a43927c92dce9c1e862ca4d1b5c0ba668</anchor>
      <arglist>(double sampleRate, int estimatedSamplesPerBlock)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>ac18368bb954b2c8365c9d5397c53f430</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processBlock</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a30fb712f9a7b9eb1ecf2cf3afdec76a2</anchor>
      <arglist>(AudioSampleBuffer &amp;, MidiBuffer &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getInputChannelName</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a1301212a850f07ef76cb1d4357817855</anchor>
      <arglist>(int channelIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getOutputChannelName</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a4dd5e6f2cff8268e2680f86a6ea20546</anchor>
      <arglist>(int channelIndex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInputChannelStereoPair</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>afe93b338e5adf5cebc16351f31bf6e55</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutputChannelStereoPair</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>ada482674d1ce15134d760bfc465e4859</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>acceptsMidi</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a19d60e1066eb20ae47e5c5ce5b738895</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>producesMidi</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>aa349c8420bd6f5a3e3608b1413a07468</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasEditor</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>aed5e34e0b53a47788d99aee989f3d412</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AudioProcessorEditor *</type>
      <name>createEditor</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>af6861e82318e75b06f45a53fa2c2d8b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParameters</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a7cf2796c833f2faec48f347a0f0ac470</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getParameterName</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>adff96858f5729d7a7ffad377b0bc62a4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getParameter</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>aa7cc15b92ec1e9719fd558f767dfa487</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getParameterText</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a09bf3652ad6969b553814446b7c14b4a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a66e83c73c358c6180c3e732961225cd4</anchor>
      <arglist>(int, float)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPrograms</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>aab191dc5e7d73349211164a38a84dc3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentProgram</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>aa8227ca23876adf8a1883e0591481f50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentProgram</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a5e9680d72ff565a017660078f56aa263</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getProgramName</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a0dee0c0ee8c581a1a23a2271a89068df</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeProgramName</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>ad98756fb9c09d19de71394c9ab62e2f3</anchor>
      <arglist>(int, const String &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getStateInformation</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a31eb871c51e9fdc84470605f01e4dee4</anchor>
      <arglist>(juce::MemoryBlock &amp;destData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateInformation</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a06926974db8fe8d6d73acb239742e4e6</anchor>
      <arglist>(const void *data, int sizeInBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParentGraph</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a8900c014ee04b186deaa45f809e33d40</anchor>
      <arglist>(AudioProcessorGraph *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioProcessorGraph::Connection</name>
    <filename>structAudioProcessorGraph_1_1Connection.html</filename>
    <member kind="function">
      <type></type>
      <name>Connection</name>
      <anchorfile>structAudioProcessorGraph_1_1Connection.html</anchorfile>
      <anchor>a44bfc7a094c31cfc8d6016c62ac781f4</anchor>
      <arglist>(uint32 sourceNodeId, int sourceChannelIndex, uint32 destNodeId, int destChannelIndex) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>sourceNodeId</name>
      <anchorfile>structAudioProcessorGraph_1_1Connection.html</anchorfile>
      <anchor>aeffe3c3426cd49761f8dbf0e01b8be97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sourceChannelIndex</name>
      <anchorfile>structAudioProcessorGraph_1_1Connection.html</anchorfile>
      <anchor>ab65e13dc0013dabb4700e89c4820b179</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>destNodeId</name>
      <anchorfile>structAudioProcessorGraph_1_1Connection.html</anchorfile>
      <anchor>a7f1b8d717bcb7f30c1ebc45e553ba20a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>destChannelIndex</name>
      <anchorfile>structAudioProcessorGraph_1_1Connection.html</anchorfile>
      <anchor>a542e23f5e9b746d2b13485545cce791e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorGraph::Node</name>
    <filename>classAudioProcessorGraph_1_1Node.html</filename>
    <base>ReferenceCountedObject</base>
    <member kind="typedef">
      <type>ReferenceCountedObjectPtr&lt; Node &gt;</type>
      <name>Ptr</name>
      <anchorfile>classAudioProcessorGraph_1_1Node.html</anchorfile>
      <anchor>a1cd4fece57dfbe4994e6a52ab7fca74c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AudioProcessor *</type>
      <name>getProcessor</name>
      <anchorfile>classAudioProcessorGraph_1_1Node.html</anchorfile>
      <anchor>a31cbb08af2e5e2602e2b488194d707f3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const uint32</type>
      <name>nodeId</name>
      <anchorfile>classAudioProcessorGraph_1_1Node.html</anchorfile>
      <anchor>a48f9b1360b965f9d0c124b690a50b0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NamedValueSet</type>
      <name>properties</name>
      <anchorfile>classAudioProcessorGraph_1_1Node.html</anchorfile>
      <anchor>afc706ebfb3beddad1c5bc16bc7fa2a2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorListener</name>
    <filename>classAudioProcessorListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioProcessorListener</name>
      <anchorfile>classAudioProcessorListener.html</anchorfile>
      <anchor>a255083443e5612f75ae3ab98bde7deb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>audioProcessorParameterChanged</name>
      <anchorfile>classAudioProcessorListener.html</anchorfile>
      <anchor>aa08a28d958759256aecd0f4af8a826f4</anchor>
      <arglist>(AudioProcessor *processor, int parameterIndex, float newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>audioProcessorChanged</name>
      <anchorfile>classAudioProcessorListener.html</anchorfile>
      <anchor>aa639a646573153b1ecf666506318abd4</anchor>
      <arglist>(AudioProcessor *processor)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioProcessorParameterChangeGestureBegin</name>
      <anchorfile>classAudioProcessorListener.html</anchorfile>
      <anchor>a38075b5e4654a8c50e135eee40c74f2e</anchor>
      <arglist>(AudioProcessor *processor, int parameterIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioProcessorParameterChangeGestureEnd</name>
      <anchorfile>classAudioProcessorListener.html</anchorfile>
      <anchor>a3d78c8d30a546bcccf98827c1b6effb4</anchor>
      <arglist>(AudioProcessor *processor, int parameterIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorPlayer</name>
    <filename>classAudioProcessorPlayer.html</filename>
    <base>AudioIODeviceCallback</base>
    <base>MidiInputCallback</base>
    <member kind="function">
      <type></type>
      <name>AudioProcessorPlayer</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>a79e9ec05a63015aceae92bc023368876</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioProcessorPlayer</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>ad029b9ad85fd3aac440cdc019d190498</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProcessor</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>a1a0491edbdbcb7e64375c42b8b48ed64</anchor>
      <arglist>(AudioProcessor *processorToPlay)</arglist>
    </member>
    <member kind="function">
      <type>AudioProcessor *</type>
      <name>getCurrentProcessor</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>a7caf364ce349cc39c5385ebe8ccbcd9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MidiMessageCollector &amp;</type>
      <name>getMidiMessageCollector</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>adc788f1fdedc0e774633777de68254c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioDeviceIOCallback</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>abb955b974380c462a3d2ac0b34c46260</anchor>
      <arglist>(const float **inputChannelData, int totalNumInputChannels, float **outputChannelData, int totalNumOutputChannels, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioDeviceAboutToStart</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>a8ffc4da36281435806538b0a607f894c</anchor>
      <arglist>(AudioIODevice *device)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioDeviceStopped</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>a6aa3b4fc87b99ddd046f82f387124954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleIncomingMidiMessage</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>aeb216987cd6273e8f8ce32ced93b1719</anchor>
      <arglist>(MidiInput *source, const MidiMessage &amp;message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioSampleBuffer</name>
    <filename>classAudioSampleBuffer.html</filename>
    <member kind="function">
      <type></type>
      <name>AudioSampleBuffer</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a1901bdbbf14172dfbf0c1f3740a1c7f3</anchor>
      <arglist>(int numChannels, int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioSampleBuffer</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>af7f3359c37dd17cd421dcb2d6816dff8</anchor>
      <arglist>(float *const *dataToReferTo, int numChannels, int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioSampleBuffer</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a0191943275c61ee0e06f8242a0338d25</anchor>
      <arglist>(float *const *dataToReferTo, int numChannels, int startSample, int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioSampleBuffer</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a630b6327409dc0310511aee0df287de5</anchor>
      <arglist>(const AudioSampleBuffer &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioSampleBuffer &amp;</type>
      <name>operator=</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a4b76d7ef7e8ff1c3b5c432b51e247fae</anchor>
      <arglist>(const AudioSampleBuffer &amp;other) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioSampleBuffer</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a5c4d5b9269bce65803a9dece9c24731d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChannels</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a9ca619848ad4a981449ed92d7ba8bf71</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSamples</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a088de80118f6107423317ae8842df80f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>getSampleData</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a3d24f9689a2d2c5731fa8cb5b1b71799</anchor>
      <arglist>(const int channelNumber) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>getSampleData</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>ab4ac8c89207c658426c511258959dccd</anchor>
      <arglist>(const int channelNumber, const int sampleOffset) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float **</type>
      <name>getArrayOfChannels</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a5517bf7c927e36d412515b8982dc6e26</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a7f915a98cbf1ebd177eeec995263a081</anchor>
      <arglist>(int newNumChannels, int newNumSamples, bool keepExistingContent=false, bool clearExtraSpace=false, bool avoidReallocating=false) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataToReferTo</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a7ae014d3b5f22bee1d0f24506ee00619</anchor>
      <arglist>(float **dataToReferTo, int numChannels, int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a327771026de9ef6f92a0b213d0322e4e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>abc5c588894e93a502647a6877a86ac0c</anchor>
      <arglist>(int startSample, int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a2f387024724b383ed277b5a137a236be</anchor>
      <arglist>(int channel, int startSample, int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyGain</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a6b7d95cdb58d77184329c9d51f0f4a08</anchor>
      <arglist>(int channel, int startSample, int numSamples, float gain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyGain</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>aaa5fff32e66e2d40e4200c023c0336a1</anchor>
      <arglist>(int startSample, int numSamples, float gain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyGainRamp</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>ab48050b2a3f5068723c16025392e72d5</anchor>
      <arglist>(int channel, int startSample, int numSamples, float startGain, float endGain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFrom</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a613b252e78c775969bcce8a68a0f2dc7</anchor>
      <arglist>(int destChannel, int destStartSample, const AudioSampleBuffer &amp;source, int sourceChannel, int sourceStartSample, int numSamples, float gainToApplyToSource=1.0f) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFrom</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a1e737b64ed243037df4e25afa694cf43</anchor>
      <arglist>(int destChannel, int destStartSample, const float *source, int numSamples, float gainToApplyToSource=1.0f) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFromWithRamp</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a46de1862456aad2aa4cdcd4648dc0f3b</anchor>
      <arglist>(int destChannel, int destStartSample, const float *source, int numSamples, float startGain, float endGain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>ab95cb8645dd3d1746126f039d82f82d9</anchor>
      <arglist>(int destChannel, int destStartSample, const AudioSampleBuffer &amp;source, int sourceChannel, int sourceStartSample, int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a8ab19fa30f924ec33f0adf1aefa7dc98</anchor>
      <arglist>(int destChannel, int destStartSample, const float *source, int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>aa78379643aa7ebca353d8eed05ca01e6</anchor>
      <arglist>(int destChannel, int destStartSample, const float *source, int numSamples, float gain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromWithRamp</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a8f959a32929508ffe32febfd6b23b067</anchor>
      <arglist>(int destChannel, int destStartSample, const float *source, int numSamples, float startGain, float endGain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findMinMax</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a8437ba95ed483c8a9de8be252e9869fe</anchor>
      <arglist>(int channel, int startSample, int numSamples, float &amp;minVal, float &amp;maxVal) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMagnitude</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a480f1b14860eae3e0643db5f2330587d</anchor>
      <arglist>(int channel, int startSample, int numSamples) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMagnitude</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a7b63b51bd867e94213f9cad7ba650aa3</anchor>
      <arglist>(int startSample, int numSamples) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRMSLevel</name>
      <anchorfile>classAudioSampleBuffer.html</anchorfile>
      <anchor>a7dd01f3ecdd4c861784fd5a57c44b4de</anchor>
      <arglist>(int channel, int startSample, int numSamples) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioSource</name>
    <filename>classAudioSource.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioSource</name>
      <anchorfile>classAudioSource.html</anchorfile>
      <anchor>a38b04f6bf7ea63b6cf465213c164623b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>prepareToPlay</name>
      <anchorfile>classAudioSource.html</anchorfile>
      <anchor>a653279dbd167f70e318fd280681dbddf</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseResources</name>
      <anchorfile>classAudioSource.html</anchorfile>
      <anchor>a7823bf0f1c43333eed41664c7994f290</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classAudioSource.html</anchorfile>
      <anchor>a36fc2484ead8fb8dc03be57d09dd5735</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioSource</name>
      <anchorfile>classAudioSource.html</anchorfile>
      <anchor>a5b8ec7dc3b76d7f219d8f77d5ccfbcef</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioSourceChannelInfo</name>
    <filename>structAudioSourceChannelInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>AudioSourceChannelInfo</name>
      <anchorfile>structAudioSourceChannelInfo.html</anchorfile>
      <anchor>ab6cb8323683ddb2e9170c96aedfb4e6f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioSourceChannelInfo</name>
      <anchorfile>structAudioSourceChannelInfo.html</anchorfile>
      <anchor>a0076062656d54e026c971aafc6051d50</anchor>
      <arglist>(AudioSampleBuffer *bufferToUse, int startSampleOffset, int numSamplesToUse) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioSourceChannelInfo</name>
      <anchorfile>structAudioSourceChannelInfo.html</anchorfile>
      <anchor>ae486e3eb8d0b4e53b279793d5d03dc19</anchor>
      <arglist>(AudioSampleBuffer &amp;bufferToUse) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearActiveBufferRegion</name>
      <anchorfile>structAudioSourceChannelInfo.html</anchorfile>
      <anchor>a988b6665c085bf47b1b5fd4f1e6b7f8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>AudioSampleBuffer *</type>
      <name>buffer</name>
      <anchorfile>structAudioSourceChannelInfo.html</anchorfile>
      <anchor>abed0807b4447de67b8ffd29ef2f2d2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>startSample</name>
      <anchorfile>structAudioSourceChannelInfo.html</anchorfile>
      <anchor>a42e88ccc05d4893015e2415785390259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numSamples</name>
      <anchorfile>structAudioSourceChannelInfo.html</anchorfile>
      <anchor>a6669c809cf3b47afa94af63d4fa48101</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioSourcePlayer</name>
    <filename>classAudioSourcePlayer.html</filename>
    <base>AudioIODeviceCallback</base>
    <member kind="function">
      <type></type>
      <name>AudioSourcePlayer</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>a708828c1d38dc7d003f79bd98f577a94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioSourcePlayer</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>a7cf30ef2b4616108e95a133fced197bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSource</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>a27acf0932a719dd1cd6d730af0c232fa</anchor>
      <arglist>(AudioSource *newSource)</arglist>
    </member>
    <member kind="function">
      <type>AudioSource *</type>
      <name>getCurrentSource</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>ab70c9acf32f6e0e50467e4b24172464c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGain</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>a6750b0c4ed1258abe4c108c80dfeff4d</anchor>
      <arglist>(float newGain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getGain</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>aa705d1a6ee51b4bc1f25bddf8a912d69</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioDeviceIOCallback</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>a071312c273e76742c08a2640ca337ba1</anchor>
      <arglist>(const float **inputChannelData, int totalNumInputChannels, float **outputChannelData, int totalNumOutputChannels, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioDeviceAboutToStart</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>a6e7f0d7e27cc5e98458f0b6e1df6a48e</anchor>
      <arglist>(AudioIODevice *device)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioDeviceStopped</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>a5e60c05676f9afeacd9ada6533cacea9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioSubsectionReader</name>
    <filename>classAudioSubsectionReader.html</filename>
    <base>AudioFormatReader</base>
    <member kind="function">
      <type></type>
      <name>AudioSubsectionReader</name>
      <anchorfile>classAudioSubsectionReader.html</anchorfile>
      <anchor>a534254f7895a750d6e02863f0b1f72de</anchor>
      <arglist>(AudioFormatReader *sourceReader, int64 subsectionStartSample, int64 subsectionLength, bool deleteSourceWhenDeleted)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioSubsectionReader</name>
      <anchorfile>classAudioSubsectionReader.html</anchorfile>
      <anchor>a6ea56901d6a179240bbb18e8ade97c90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readSamples</name>
      <anchorfile>classAudioSubsectionReader.html</anchorfile>
      <anchor>acae9f55a1e41fdbd9e4697603f7e7586</anchor>
      <arglist>(int **destSamples, int numDestChannels, int startOffsetInDestBuffer, int64 startSampleInFile, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMaxLevels</name>
      <anchorfile>classAudioSubsectionReader.html</anchorfile>
      <anchor>aff14d305baadb5227eba020b071a2a75</anchor>
      <arglist>(int64 startSample, int64 numSamples, float &amp;lowestLeft, float &amp;highestLeft, float &amp;lowestRight, float &amp;highestRight)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioThumbnail</name>
    <filename>classAudioThumbnail.html</filename>
    <base>AudioThumbnailBase</base>
    <member kind="function">
      <type></type>
      <name>AudioThumbnail</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>abfa7516538eb0518cddeec4c71cf329d</anchor>
      <arglist>(int sourceSamplesPerThumbnailSample, AudioFormatManager &amp;formatManagerToUse, AudioThumbnailCache &amp;cacheToUse)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioThumbnail</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>ac4e25d85982477ec205c5e968f16a56c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>ac7bd10908fcaa78a9983e3946e711d3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setSource</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>ae64db3922a07a85201dfac0c65725957</anchor>
      <arglist>(InputSource *newSource)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReader</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a1ddcdc952b6f5a8d488511541effc258</anchor>
      <arglist>(AudioFormatReader *newReader, int64 hashCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>ab60422fa9ae9f951de8bb1dbb999d81f</anchor>
      <arglist>(int numChannels, double sampleRate, int64 totalSamplesInSource=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBlock</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>aa7045231cdc1bf6d5ec2f9b47dd257d2</anchor>
      <arglist>(int64 sampleNumberInSource, const AudioSampleBuffer &amp;newData, int startOffsetInBuffer, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadFrom</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a59680950d18da52b3342f65cd44d9ecd</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveTo</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>adeb15dd8aa79320eccc122ed07488e9b</anchor>
      <arglist>(OutputStream &amp;output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChannels</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a284472a69afc960e970ad75b2e3cfa08</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalLength</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>aba82b9821fecfbb7efc88172f9c5a0c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawChannel</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>ac461e6c816b5261ed3b519a9355220b5</anchor>
      <arglist>(Graphics &amp;g, const Rectangle&lt; int &gt; &amp;area, double startTimeSeconds, double endTimeSeconds, int channelNum, float verticalZoomFactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawChannels</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>ab11c7e0733a98b65bf0516815e007971</anchor>
      <arglist>(Graphics &amp;g, const Rectangle&lt; int &gt; &amp;area, double startTimeSeconds, double endTimeSeconds, float verticalZoomFactor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullyLoaded</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a79cf1d2730f78d59307c3aadba1ab047</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getNumSamplesFinished</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a09e6d388d7aee2e403a8aec5a1077a43</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getApproximatePeak</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a0381d43718a754be2546d9a7dfcaac32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getApproximateMinMax</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a17fcf3708965029fffba682dfdfa8e1d</anchor>
      <arglist>(double startTime, double endTime, int channelIndex, float &amp;minValue, float &amp;maxValue) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getHashCode</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>af2f69ffd83e1591fa026ac6dc6caa5e7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioThumbnailBase</name>
    <filename>classAudioThumbnailBase.html</filename>
    <base>ChangeBroadcaster</base>
    <base>AudioFormatWriter::ThreadedWriter::IncomingDataReceiver</base>
    <member kind="function">
      <type></type>
      <name>AudioThumbnailBase</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>af7b4ebde2996de4bed6e1cf048b11467</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioThumbnailBase</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a2ef25f2c29e6363e346c2cb819e7a5b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a53a5be624c9de79a672777d3697cfd48</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setSource</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a8fd77ac3757e9eca141ab1cbc4e7d269</anchor>
      <arglist>(InputSource *newSource)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setReader</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>ad6960274ea876808fd2e6df6f0761e9c</anchor>
      <arglist>(AudioFormatReader *newReader, int64 hashCode)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>loadFrom</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a270f1fe9c27fda1953c9e1ea30fd9486</anchor>
      <arglist>(InputStream &amp;input)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveTo</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a9cb4b72aa47359c671f89fc25eae0a72</anchor>
      <arglist>(OutputStream &amp;output) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumChannels</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a6677b1ec042a69aa14ceec756d292671</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getTotalLength</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>aa668e0939708049e4ee3b203860037c9</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawChannel</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>ab7e4df6d6c5e96943f3f6ca184235a57</anchor>
      <arglist>(Graphics &amp;g, const Rectangle&lt; int &gt; &amp;area, double startTimeSeconds, double endTimeSeconds, int channelNum, float verticalZoomFactor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawChannels</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a7779a08868bbb6581acb904f200c7877</anchor>
      <arglist>(Graphics &amp;g, const Rectangle&lt; int &gt; &amp;area, double startTimeSeconds, double endTimeSeconds, float verticalZoomFactor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isFullyLoaded</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>aacffa9ccff66765ea16fad7aca98323e</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>getNumSamplesFinished</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>ad04c3c2c5a003df0296faab4f017081f</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getApproximatePeak</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a8efca4beb3d0f32b65be53be933a8e81</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getApproximateMinMax</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>ab3abc860ff8e4fda8234b54cbec3d137</anchor>
      <arglist>(double startTime, double endTime, int channelIndex, float &amp;minValue, float &amp;maxValue) const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>getHashCode</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a9a16ffaf872861903fdf2e97fcfe958f</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioThumbnailCache</name>
    <filename>classAudioThumbnailCache.html</filename>
    <base>TimeSliceThread</base>
    <member kind="function">
      <type></type>
      <name>AudioThumbnailCache</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>a8b337276f3ec8979475e1884e9dde170</anchor>
      <arglist>(int maxNumThumbsToStore)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioThumbnailCache</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>a4fd600ae0247a18e13c9922d318799cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>a52c8490b5df7c750822d9c15ca829dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadThumb</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>a0c02c3ed2e7868c20e9d77c16915d818</anchor>
      <arglist>(AudioThumbnailBase &amp;thumb, int64 hashCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeThumb</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>a04e1fc8084a07fb926e22bbc62bfe4c4</anchor>
      <arglist>(const AudioThumbnailBase &amp;thumb, int64 hashCode)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFromStream</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>a4964efe9a66ded88c1224e2c0946c5e9</anchor>
      <arglist>(InputStream &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToStream</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>ae752aabe2829fb344c4e619d2819a3d7</anchor>
      <arglist>(OutputStream &amp;stream)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioTransportSource</name>
    <filename>classAudioTransportSource.html</filename>
    <base>PositionableAudioSource</base>
    <base>ChangeBroadcaster</base>
    <member kind="function">
      <type></type>
      <name>AudioTransportSource</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>ace4826902928ee0bb94026d29eebe419</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioTransportSource</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a8a47ae2093d1c04f53a13a014530419f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSource</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a20a6a91c4505e77207cadef7ddc4dc5c</anchor>
      <arglist>(PositionableAudioSource *newSource, int readAheadBufferSize=0, TimeSliceThread *readAheadThread=nullptr, double sourceSampleRateToCorrectFor=0.0, int maxNumChannels=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>aab002d853ed9e9389fcaa25014c1fc72</anchor>
      <arglist>(double newPosition)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentPosition</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>ac7fe93e119dc374f5acdef19649314b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLengthInSeconds</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a13844dfcbedab586bc5ba382bd0e6386</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStreamFinished</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a4914381d34ed8bff499ca878c2be83fb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a1cfd309ab61fb226bc03e5774c6ce65f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a8c29c458d172bf51712f318de69d50db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPlaying</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>aa730c63d2cff661d8bfcb5c002ec0bce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGain</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a694930a9778a641b71d006a07cd7a5df</anchor>
      <arglist>(float newGain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getGain</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a723be769b44f4334b947e3568e2b2d4a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>aac6c4daaa9344005f74ed22e168f6840</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>ae30e372b920717ecc008e377a891e65b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a986e8df85340079d34194ffcaa1b1389</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextReadPosition</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>ae872b54fd7c2ba721bf47b46cf93b8b7</anchor>
      <arglist>(int64 newPosition)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getNextReadPosition</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>af48fa52084bfccee3525ded4a85bf4d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>ae627c71975a9f85bf42d92cc6ecd5e1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLooping</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a8a6e63b835a94c995139ec36f44257c6</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BigInteger</name>
    <filename>classBigInteger.html</filename>
    <member kind="function">
      <type></type>
      <name>BigInteger</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a67a108dbe651911a21b3fc4310a505dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BigInteger</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a7383d0c28c57ed4ed3e7fa9edb30d31b</anchor>
      <arglist>(uint32 value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BigInteger</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>aee6b45535891b6b29f416be59bbe2287</anchor>
      <arglist>(int32 value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BigInteger</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a60dbec51bf8fcc775cf40aef3d49ae55</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BigInteger</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ad40dd27e6670acf98ffb62a190ace292</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BigInteger</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a987e3a4e9c4405404719be08caaa3146</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a480b91a54b0faa0b6114c386c988d26e</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a5567e0bbdf3f55cbb1ee326576b36878</anchor>
      <arglist>(BigInteger &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator[]</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>abf24792b7ed8b86b3ae25aea147ff99e</anchor>
      <arglist>(int bit) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ade36d99bf6219959eb9266c30c72c2e5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOne</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>aed8f27aadd82224339e2af19d73494d3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>toInteger</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a67b4e436a4d9e7f51bc73b1d53c19eff</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ad09deac0bc58011e211a59cd80c134f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearBit</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a84b70003be75f5c9465087828b3b8e3b</anchor>
      <arglist>(int bitNumber) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBit</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ad75e08bf5ec6959b99b1971fd858459d</anchor>
      <arglist>(int bitNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBit</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ab062a5ac87d3b389e420e7a26b35629b</anchor>
      <arglist>(int bitNumber, bool shouldBeSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a1bc23c87d83558c4556b76a4c3b60972</anchor>
      <arglist>(int startBit, int numBits, bool shouldBeSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertBit</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a90fc29cee61181cff82a70f5307186e8</anchor>
      <arglist>(int bitNumber, bool shouldBeSet)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>getBitRange</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ab0bc80e65664a854c7b7500f8735e798</anchor>
      <arglist>(int startBit, int numBits) const </arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getBitRangeAsInt</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ac5d0166b81201203051986fee96eb227</anchor>
      <arglist>(int startBit, int numBits) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBitRangeAsInt</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ade91afb8c2681dd4cba363fa51c3eb04</anchor>
      <arglist>(int startBit, int numBits, uint32 valueToSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shiftBits</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ac78d23b9c93713430758df01c0a68f48</anchor>
      <arglist>(int howManyBitsLeft, int startBit)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countNumberOfSetBits</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a0db5dd578089614b40127b093a7cac7f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findNextSetBit</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a1e7ddb846639744c2e5c0881e749ff1e</anchor>
      <arglist>(int startIndex=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findNextClearBit</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a2f82159907a1b7db80d161b36537810a</anchor>
      <arglist>(int startIndex=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHighestBit</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a42579f711d8dcd205a87cf5b32a2b9d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator+=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ac15ac09922b91bdb8ae4d5b50e20eaa1</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator-=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>aa92b52f95550ecaca55142bfb420c167</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator*=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a501bf8c285feb29c98a5ac886aa49282</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator/=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a54c4fb0932b40f591f16f964f60f98a8</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator|=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a9614be62eebe4f5242f92d03ae2f62d8</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>aa5db7c429c0a5bec4841b8389232c3ed</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator^=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a37a495ddc4105bc9d89289920ca21824</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator%=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a10935bcb59d354af8d819a9f6307dccc</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ae0fc34611974febbef389fe009f3281e</anchor>
      <arglist>(int numBitsToShift)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a76aace76cfea3cd498606fed2fafa0cf</anchor>
      <arglist>(int numBitsToShift)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator++</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a9a3d2c5b1447311c814f60f6b096ac59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator--</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a461022c98269d400f19ba718efcbbdb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator++</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a586b4d3400cf283a04eb646531f53fc2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator--</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>af350c94f378084883a5e670b37bf0195</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator-</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a1fea890d567aedb7548da280ca75079c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator+</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a84eb2c008749725fdbd0ff91cd1f9411</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator-</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ae9999d46f6c8afd9fccef0e4924dcdee</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator*</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ad9d1072f08529f90f4430daf64b239b7</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator/</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ac46a495b6fab534b1666bbfbc0724d84</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator|</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>afbe49f62df20a712d8ad6dd203839ffb</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator&amp;</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a91e902179fdb6502b9da6cc15c3a895d</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator^</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a2a64667761d566b1a5610ebed0969f21</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator%</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ac97ead8ac0869fc95913f7005ab5311f</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>abe44149daf6a6bf480d4ad72364373c0</anchor>
      <arglist>(int numBitsToShift) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a6ff2d2aefbfcb788f61407825f27d29c</anchor>
      <arglist>(int numBitsToShift) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a77d445bc11bf5d46975f7d592f4d0047</anchor>
      <arglist>(const BigInteger &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a8a50cfb7df5a5873e97f66de644c549f</anchor>
      <arglist>(const BigInteger &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a61daae451fb946a3ebff61385b88cf22</anchor>
      <arglist>(const BigInteger &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>abd31a5b90b00eb7aae64a46e4d9ce5b9</anchor>
      <arglist>(const BigInteger &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a89215362d1b55d3e180051d1d1e70c36</anchor>
      <arglist>(const BigInteger &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a101395c1f07f47a0bdd89715139fdc5b</anchor>
      <arglist>(const BigInteger &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a50c1da841a87ee9f901447d71bae656c</anchor>
      <arglist>(const BigInteger &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareAbsolute</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a06654fb2a0f67e13700cb32ddb1ad253</anchor>
      <arglist>(const BigInteger &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divideBy</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a9c0bd824652adc58adec98eafa452963</anchor>
      <arglist>(const BigInteger &amp;divisor, BigInteger &amp;remainder)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>findGreatestCommonDivisor</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a824c6a3e29985ce675474137d6b26b1c</anchor>
      <arglist>(BigInteger other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exponentModulo</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a6ff2a42d364b1f36c7e51d63cba5a882</anchor>
      <arglist>(const BigInteger &amp;exponent, const BigInteger &amp;modulus)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inverseModulo</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ae071b9b24f05d8e50d8f3d640a225304</anchor>
      <arglist>(const BigInteger &amp;modulus)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNegative</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ae3188c5cf254ae3328b8e87227d41e00</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNegative</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a6397641af659abb9fc60e04b42b7c240</anchor>
      <arglist>(bool shouldBeNegative) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a2f597f0f63ffc2410423626c5a850e60</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a26a951d7f23736579d4a41d5fe037c41</anchor>
      <arglist>(int base, int minimumNumCharacters=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseString</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>abf36aea51fbe0db4bffeef6772139cfe</anchor>
      <arglist>(const String &amp;text, int base)</arglist>
    </member>
    <member kind="function">
      <type>MemoryBlock</type>
      <name>toMemoryBlock</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a94ee80a851a3ae80a2c755715ca4a519</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadFromMemoryBlock</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>af1ad0e8dcaaa34c7d14d01dca224a668</anchor>
      <arglist>(const MemoryBlock &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BlowFish</name>
    <filename>classBlowFish.html</filename>
    <member kind="function">
      <type></type>
      <name>BlowFish</name>
      <anchorfile>classBlowFish.html</anchorfile>
      <anchor>a7a90652859afaf45194281939e881270</anchor>
      <arglist>(const void *keyData, int keyBytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlowFish</name>
      <anchorfile>classBlowFish.html</anchorfile>
      <anchor>a71e471baddd2aab5108ed1aaf962f680</anchor>
      <arglist>(const BlowFish &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BlowFish &amp;</type>
      <name>operator=</name>
      <anchorfile>classBlowFish.html</anchorfile>
      <anchor>a23a2c7b7276e46872b3d8ea942bf26d1</anchor>
      <arglist>(const BlowFish &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BlowFish</name>
      <anchorfile>classBlowFish.html</anchorfile>
      <anchor>a69c3837d2fea4786d294442536d4d6d3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encrypt</name>
      <anchorfile>classBlowFish.html</anchorfile>
      <anchor>a76dbc9a108227a581f9e79ff83396aba</anchor>
      <arglist>(uint32 &amp;data1, uint32 &amp;data2) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrypt</name>
      <anchorfile>classBlowFish.html</anchorfile>
      <anchor>aa43faa09ee4018a615ed81b30607ed2d</anchor>
      <arglist>(uint32 &amp;data1, uint32 &amp;data2) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BooleanPropertyComponent</name>
    <filename>classBooleanPropertyComponent.html</filename>
    <base>PropertyComponent</base>
    <member kind="function">
      <type></type>
      <name>BooleanPropertyComponent</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>a9bdf7035a16fadfeaffd4c37ad56969d</anchor>
      <arglist>(const Value &amp;valueToControl, const String &amp;propertyName, const String &amp;buttonText)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BooleanPropertyComponent</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>afde82e86dafa0ce21c07f018ab7f049a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setState</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>a6e2b7a6d257e7c9b6d7ff9373c9a98c7</anchor>
      <arglist>(bool newState)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getState</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>a873145d733afe272da3ea2950c0fd7eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>ac4c9af0bff4b847f5a81264287337280</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>ab6754ee52f6ea1f64f721f59a06aaf2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonClicked</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>a8b953e76e05013749aa4f2ef5ee7cea9</anchor>
      <arglist>(Button *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BooleanPropertyComponent</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>a866e6decfd615cbdefe91da904bde660</anchor>
      <arglist>(const String &amp;propertyName, const String &amp;buttonTextWhenTrue, const String &amp;buttonTextWhenFalse)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BorderSize</name>
    <filename>classBorderSize.html</filename>
    <templarg>ValueType</templarg>
    <member kind="function">
      <type></type>
      <name>BorderSize</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>af27d39b618c5ec86f5eafc38a044e9af</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BorderSize</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a5471c56eb3c2bf1eedc5fa84cfb31155</anchor>
      <arglist>(const BorderSize &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BorderSize</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>ad089c00ba251def844b0dfb79d9da95f</anchor>
      <arglist>(ValueType topGap, ValueType leftGap, ValueType bottomGap, ValueType rightGap) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BorderSize</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>aa678d15b6acb3bcfc2c97e2fd49be57a</anchor>
      <arglist>(ValueType allGaps) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getTop</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>ac0bc5ff4e31f6955f8d83dfede7986a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getLeft</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a83c7bc89d97447a9d275e54d6236599c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getBottom</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a4b757391273b60fb2b5c047c6d37c36b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getRight</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a853a83e49056433cb25f6189954eb7eb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getTopAndBottom</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a60a3974f3ae9ead86e7e752c251f87f4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getLeftAndRight</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>adb885e18f92582eec88e36ce0954111b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>aacf6e4e81a579e7440484a5886e91c68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTop</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>abaf52266cecbdf53621d1833e13bd130</anchor>
      <arglist>(ValueType newTopGap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLeft</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>ac17aba0420116785bf1e8fb687ab01e7</anchor>
      <arglist>(ValueType newLeftGap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBottom</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a2f3dc09168142824865d8e2b191d535f</anchor>
      <arglist>(ValueType newBottomGap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRight</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a5f54de3869e7efff78e8429a81bd38bb</anchor>
      <arglist>(ValueType newRightGap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; ValueType &gt;</type>
      <name>subtractedFrom</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>addb07fd003bbf5cfd57433b26a8890fa</anchor>
      <arglist>(const Rectangle&lt; ValueType &gt; &amp;original) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtractFrom</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a05a0b857fc434cc89718d2404373df85</anchor>
      <arglist>(Rectangle&lt; ValueType &gt; &amp;rectangle) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; ValueType &gt;</type>
      <name>addedTo</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a17696eaf86dcf3115724d8aac530b3dd</anchor>
      <arglist>(const Rectangle&lt; ValueType &gt; &amp;original) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTo</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a58e8866ce59503a31f71574fb1799065</anchor>
      <arglist>(Rectangle&lt; ValueType &gt; &amp;rectangle) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a70117c6c8528fe571c8d91b282a541e6</anchor>
      <arglist>(const BorderSize &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a9aa153628e58a1e32fb11df0477dc13c</anchor>
      <arglist>(const BorderSize &amp;other) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BrowserPluginComponent</name>
    <filename>classBrowserPluginComponent.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>BrowserPluginComponent</name>
      <anchorfile>classBrowserPluginComponent.html</anchorfile>
      <anchor>a02d7d592f5cb2dfdd4769997094f3b2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BrowserPluginComponent</name>
      <anchorfile>classBrowserPluginComponent.html</anchorfile>
      <anchor>a14272b2c55baf267a85ac76a7f892708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getBrowserVersion</name>
      <anchorfile>classBrowserPluginComponent.html</anchorfile>
      <anchor>a72bf3149a98a6b816e0499460f04c249</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getBrowserURL</name>
      <anchorfile>classBrowserPluginComponent.html</anchorfile>
      <anchor>ae45e8a9a8169e838adb5a3e307d51b72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual var</type>
      <name>getJavascriptObject</name>
      <anchorfile>classBrowserPluginComponent.html</anchorfile>
      <anchor>a7a62108592a57caa0655c31c80cd4bf3</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BubbleComponent</name>
    <filename>classBubbleComponent.html</filename>
    <base>Component</base>
    <member kind="enumeration">
      <name>BubblePlacement</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>aba96d481d723fd2549f497ccd7ed41a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>above</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>aba96d481d723fd2549f497ccd7ed41a3a46398aeabcf45a9b397beca92dcf85b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>below</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>aba96d481d723fd2549f497ccd7ed41a3a971b484b6fd9e0e0f97ec4ef2c64de50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>left</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>aba96d481d723fd2549f497ccd7ed41a3a55e0c30c9b033af546bc8ffd96c0534c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>right</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>aba96d481d723fd2549f497ccd7ed41a3a2dee448ac06c9b0186287c5f7e071b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BubbleComponent</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>a11f1e39d0be20493c46477fe59e30685</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllowedPlacement</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>a7c0081674149dc2a8380a0b20cf6f6ae</anchor>
      <arglist>(int newPlacement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>a9dce0f241c8f14de8ca2a60cdc83e537</anchor>
      <arglist>(Component *componentToPointTo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>a633757fa514e96a8a5b2f6eb5d56925f</anchor>
      <arglist>(const Point&lt; int &gt; &amp;arrowTipPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>abf3cc8be633ef5fde16533fece6edebf</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rectangleToPointTo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>a535cd0c80a4d38d15fdc878e118165fd</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BubbleComponent</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>a7cce909ece8964165fdcfc173940b74b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>getContentSize</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>a0763d0b281eaea28861f8a3d3e7b6dbe</anchor>
      <arglist>(int &amp;width, int &amp;height)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>paintContent</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>a30f7ac74c7ce0452d0a85c72db2309f1</anchor>
      <arglist>(Graphics &amp;g, int width, int height)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BubbleMessageComponent</name>
    <filename>classBubbleMessageComponent.html</filename>
    <base>BubbleComponent</base>
    <base protection="private">Timer</base>
    <member kind="function">
      <type></type>
      <name>BubbleMessageComponent</name>
      <anchorfile>classBubbleMessageComponent.html</anchorfile>
      <anchor>a17b34a71669df21e5632440d1a43b844</anchor>
      <arglist>(int fadeOutLengthMs=150)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BubbleMessageComponent</name>
      <anchorfile>classBubbleMessageComponent.html</anchorfile>
      <anchor>aae5d8029a52bbb1d677adbfda80a978e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showAt</name>
      <anchorfile>classBubbleMessageComponent.html</anchorfile>
      <anchor>accf152caac1319d8a05d145a94fc7022</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;position, const AttributedString &amp;message, int numMillisecondsBeforeRemoving, bool removeWhenMouseClicked=true, bool deleteSelfAfterUse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showAt</name>
      <anchorfile>classBubbleMessageComponent.html</anchorfile>
      <anchor>a578aec6fc92df2b9a70f29250b4ea243</anchor>
      <arglist>(Component *component, const AttributedString &amp;message, int numMillisecondsBeforeRemoving, bool removeWhenMouseClicked=true, bool deleteSelfAfterUse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContentSize</name>
      <anchorfile>classBubbleMessageComponent.html</anchorfile>
      <anchor>a68991e5ad34d560640b5de73e740ac47</anchor>
      <arglist>(int &amp;w, int &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintContent</name>
      <anchorfile>classBubbleMessageComponent.html</anchorfile>
      <anchor>a6a7f7977a122d92d0ad9729db6e4b3c6</anchor>
      <arglist>(Graphics &amp;g, int w, int h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timerCallback</name>
      <anchorfile>classBubbleMessageComponent.html</anchorfile>
      <anchor>a8847ef165716b306d142907d03c6a916</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BufferedInputStream</name>
    <filename>classBufferedInputStream.html</filename>
    <base>InputStream</base>
    <member kind="function">
      <type></type>
      <name>BufferedInputStream</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>a28fb830b98e3134853083fdcdaaacb2d</anchor>
      <arglist>(InputStream *sourceStream, int bufferSize, bool deleteSourceWhenDestroyed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferedInputStream</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>ae4ba1382a422e4b4049284ab18f69b05</anchor>
      <arglist>(InputStream &amp;sourceStream, int bufferSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BufferedInputStream</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>ab353c2eacfa486206f3e155619162c3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>af64a5954ae853c10b1987ed72054dbec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>abaecef9974ce3454a4da41dedbaf7585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>a1c44fae209948c7752e06f126089f718</anchor>
      <arglist>(int64 newPosition)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>a5e925c6427dbcafe77199fb45bd35c54</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>readString</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>a461344690c07cf3bb08ef4965da05d03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExhausted</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>a1d78eb47ed6c235bdbd04d7c97c12cb7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BufferingAudioSource</name>
    <filename>classBufferingAudioSource.html</filename>
    <base>PositionableAudioSource</base>
    <base protection="private">TimeSliceClient</base>
    <member kind="function">
      <type></type>
      <name>BufferingAudioSource</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>a721422b1a291907632b765e4771a983f</anchor>
      <arglist>(PositionableAudioSource *source, TimeSliceThread &amp;backgroundThread, bool deleteSourceWhenDeleted, int numberOfSamplesToBuffer, int numberOfChannels=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BufferingAudioSource</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>a2633cef1b35b4d435db60374d7b2859f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>a784d02cc766c7fef5635347f5a1291b8</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>a03c599c8e21f52462430ac1adbd0528e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>af1d906e18e7d845463e9b9f2f4e80fda</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextReadPosition</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>acd6685a0fbfabc02b5c4f09d11bce833</anchor>
      <arglist>(int64 newPosition)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getNextReadPosition</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>a1b921b7e87ca98a4e6dcc408aff2a14a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>a311f783f684af4b330ee9ba09234de2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLooping</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>a5a39b87de2a6ac0aac802293bc9fd5d2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Button</name>
    <filename>classButton.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>ApplicationCommandManagerListener</base>
    <base>Value::Listener</base>
    <base protection="private">KeyListener</base>
    <class kind="struct">Button::Ids</class>
    <class kind="class">Button::Listener</class>
    <member kind="enumeration">
      <name>ConnectedEdgeFlags</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aebb14d53173b13f0e98d01a02aee8e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConnectedOnLeft</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aebb14d53173b13f0e98d01a02aee8e82aa1dd81c8737a08302b5b0ddb6414d9d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConnectedOnRight</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aebb14d53173b13f0e98d01a02aee8e82aaeedde6687fd468865bfa2e8a1deee68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConnectedOnTop</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aebb14d53173b13f0e98d01a02aee8e82a856730f0a48a5b785df067d42110d009</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConnectedOnBottom</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aebb14d53173b13f0e98d01a02aee8e82a680ea807983e767189afaa48f24e4ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ButtonState</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ad8312db93093c21df8b1d2be74ae1957</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>buttonNormal</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ad8312db93093c21df8b1d2be74ae1957a09756d7da1b944c70299dbce2d4d85c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>buttonOver</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ad8312db93093c21df8b1d2be74ae1957ab1bafc26d8c989fe21ad1289d0ce11f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>buttonDown</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ad8312db93093c21df8b1d2be74ae1957a2510a242cf6f7e93eb33245a03268d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Button</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a6d35cf666b119be6153a717427f9b5e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setButtonText</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a96f4185a0a716d10309f1081f0af2f91</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getButtonText</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aad4288f0231f8b342967516277c42f30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDown</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a88a0adf236ac93613a8b2b36d7a74f9d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOver</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ad4e53dd7b2f91e23293b6bcf3d9b50fb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToggleState</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ab1413e8056b7ad53f1ca1502e6c660ed</anchor>
      <arglist>(bool shouldBeOn, bool sendChangeNotification)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getToggleState</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ae1723837340c174f0f212855d247b626</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getToggleStateValue</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a30d3104699bb64de1b6c2b78d20158a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClickingTogglesState</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ab27f9e7a7fb11f90f531778ce26d9842</anchor>
      <arglist>(bool shouldToggle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getClickingTogglesState</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a8cf8327c247a9c1fa1c82c20ce69bded</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadioGroupId</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a94f39a6f954ab585bda4281c965d73e0</anchor>
      <arglist>(int newGroupId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRadioGroupId</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aa20cdb24410a07136dd2ec603179972c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a346e474a41d9ac4a9ccabeb13e974b47</anchor>
      <arglist>(Listener *newListener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aa7016d2e4b8ab37a12c2736057eb28de</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>triggerClick</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a8a6488055955fede16492a90a8967168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommandToTrigger</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a1e925690da1e48ceae6f233fc6cfe4bb</anchor>
      <arglist>(ApplicationCommandManager *commandManagerToUse, int commandID, bool generateTooltip)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCommandID</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a8b01e62fd4d486ef68fc3e660adb3516</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addShortcut</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ae22ef00ae147738f4556570424b0a091</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearShortcuts</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aa8d27148fe4dc88ffa06eecabca9bed6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRegisteredForShortcut</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a59b7d2d3e78abf96d180a4e2b4605046</anchor>
      <arglist>(const KeyPress &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepeatSpeed</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a6110b12e2f6167dd9ac731285bad825d</anchor>
      <arglist>(int initialDelayInMillisecs, int repeatDelayInMillisecs, int minimumDelayInMillisecs=-1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTriggeredOnMouseDown</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a727e042a6bf3b5f342c7fb5c5c4ce47e</anchor>
      <arglist>(bool isTriggeredOnMouseDown) noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getMillisecondsSinceButtonDown</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a9f0bee0b0f3999472e144c926884dda9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTooltip</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a4ad526e165b01957b01eba2c648ee6a7</anchor>
      <arglist>(const String &amp;newTooltip)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTooltip</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aa16aca37a93182dc3cee9ef386a522cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectedEdges</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a17ae41254e2d68b1570ef5027d796ac3</anchor>
      <arglist>(int connectedEdgeFlags)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConnectedEdgeFlags</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a4971174bb22bb4a4172d84695fd9986e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedOnLeft</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a925cf41750a30bbd39d052af8ae37e20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedOnRight</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a90f0727a44b87224d521e3c051fc2723</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedOnTop</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a35e58c011b632a56cd37b36c0ae10285</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedOnBottom</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a802fe07b98ca56f1e2138f306c596aa6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aa53d62ecda7a4658968b41e3f6a57f2a</anchor>
      <arglist>(const ButtonState newState)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a6e32e64b920671d54e845b6a6718f73b</anchor>
      <arglist>(const ValueTree &amp;, ComponentBuilder &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a4608a4116088533a72c0a9ae56f151ca</anchor>
      <arglist>(void addButtonListener(Listener *))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a1e549fee63e10617d44c8fb17bd15166</anchor>
      <arglist>(void removeButtonListener(Listener *))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getConnectedFlags</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a3c7661c9f612617e4be693983302ad17</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Button</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a37f37f35bbcb27d88fc508be94dba87e</anchor>
      <arglist>(const String &amp;buttonName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>clicked</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a149ef29188b0519c3e39624c7b4d9400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>clicked</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>af57cd4eec484491dc536e05d75e556dd</anchor>
      <arglist>(const ModifierKeys &amp;modifiers)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>paintButton</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a42622e1dc165f718a9835c0ef94aacca</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>buttonStateChanged</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aa0e5a9bb6117baa8b6df29a47db861c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>internalClickCallback</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aed53c392941728d6b4260db5e9271a19</anchor>
      <arglist>(const ModifierKeys &amp;modifiers)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleCommandMessage</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aae12ae7871c6ea88c0175fba8b529a3b</anchor>
      <arglist>(int commandId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseEnter</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a4a07ef59b58090533833db50a649fa4f</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseExit</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a196f0a247504184f8dc7b5a2760be089</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a9c09ad0c8badc0a12948fe4cb6da7aac</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ade84ede3c9600a2a769035a9219b1d15</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a608ab51113d3f59ca5e5e989211f8622</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a6721a97f1c1640999806f4049fc8bd2b</anchor>
      <arglist>(const KeyPress &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a6111d9ccde5c94bc89feb280362493ed</anchor>
      <arglist>(const KeyPress &amp;, Component *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>keyStateChanged</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aa729e40a60e7cd4fb342f0c887eb2cbe</anchor>
      <arglist>(bool isKeyDown, Component *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a9fb46c037556e374d0ee9a4155a58898</anchor>
      <arglist>(Graphics &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a036213dc05dbee4d357f1b1a96bc6ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>visibilityChanged</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ad93d1612350c389d5407fbae3efb5ace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>focusGained</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>af701543a99c941f98ab45e381be4af63</anchor>
      <arglist>(FocusChangeType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>focusLost</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a31520896c3ca020f3e6b3c2e3f1b79e6</anchor>
      <arglist>(FocusChangeType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a521509e4561e750d65385601be52396b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>applicationCommandInvoked</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ac210d9dc7c756cc1fc0ebd07fc6cfdaf</anchor>
      <arglist>(const ApplicationCommandTarget::InvocationInfo &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>applicationCommandListChanged</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a0ddde695dda3817d251f8dd3f2afffb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>valueChanged</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a19df6760ab31f16c4e82c8e6102f7b70</anchor>
      <arglist>(Value &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Button::Ids</name>
    <filename>structButton_1_1Ids.html</filename>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>text</name>
      <anchorfile>structButton_1_1Ids.html</anchorfile>
      <anchor>a3e7c3ecc54a7cd5cb561ad0c63ce2e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>radioGroup</name>
      <anchorfile>structButton_1_1Ids.html</anchorfile>
      <anchor>a24ecfdec627dc53a81d9104936447075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>connectedLeft</name>
      <anchorfile>structButton_1_1Ids.html</anchorfile>
      <anchor>a08f7e097666940ba88396e7d9527cc3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>connectedRight</name>
      <anchorfile>structButton_1_1Ids.html</anchorfile>
      <anchor>a9c1d84d2d786f68cdb7adab4b1546589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>connectedTop</name>
      <anchorfile>structButton_1_1Ids.html</anchorfile>
      <anchor>a5756654411e5ad90a404ff074cbb69e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>connectedBottom</name>
      <anchorfile>structButton_1_1Ids.html</anchorfile>
      <anchor>a457bc71d601be70319df558317c6f383</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Button::Listener</name>
    <filename>classButton_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classButton_1_1Listener.html</anchorfile>
      <anchor>a30e17290ff1936e89331ae556bed1826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>buttonClicked</name>
      <anchorfile>classButton_1_1Listener.html</anchorfile>
      <anchor>a9f183776e7c3316e906be98373d25172</anchor>
      <arglist>(Button *button)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>buttonStateChanged</name>
      <anchorfile>classButton_1_1Listener.html</anchorfile>
      <anchor>a6a83cb9405ff7e4cc0b775a5b65ce305</anchor>
      <arglist>(Button *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ButtonPropertyComponent</name>
    <filename>classButtonPropertyComponent.html</filename>
    <base>PropertyComponent</base>
    <member kind="function">
      <type></type>
      <name>ButtonPropertyComponent</name>
      <anchorfile>classButtonPropertyComponent.html</anchorfile>
      <anchor>a25eeae4339791fc2d87045f1dd521d4d</anchor>
      <arglist>(const String &amp;propertyName, bool triggerOnMouseDown)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ButtonPropertyComponent</name>
      <anchorfile>classButtonPropertyComponent.html</anchorfile>
      <anchor>ad4532aa811fe1025cb47b6fa848172cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>buttonClicked</name>
      <anchorfile>classButtonPropertyComponent.html</anchorfile>
      <anchor>ae38c05546f045db1e40a06112bc2f546</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getButtonText</name>
      <anchorfile>classButtonPropertyComponent.html</anchorfile>
      <anchor>af08e57b77bcbae7c6301d748e764a08c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classButtonPropertyComponent.html</anchorfile>
      <anchor>a526375fb6a25fda38df91aa22ee65067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonClicked</name>
      <anchorfile>classButtonPropertyComponent.html</anchorfile>
      <anchor>afa718766db01628e12b736a6640bdcb4</anchor>
      <arglist>(Button *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ByteOrder</name>
    <filename>classByteOrder.html</filename>
    <member kind="function" static="yes">
      <type>static uint16</type>
      <name>swap</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>ad7f27038bd5a2454a2737c747da005c0</anchor>
      <arglist>(uint16 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>swap</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a1e8c8283251256fc5ee507d6832b5f6e</anchor>
      <arglist>(uint32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint64</type>
      <name>swap</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>ab8ccdd097d3afa83b7664d6db337fc2f</anchor>
      <arglist>(uint64 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16</type>
      <name>swapIfBigEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>aaa5098c1fe0e8ef9a1b84504df560b1f</anchor>
      <arglist>(uint16 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>swapIfBigEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a14c5f1662a389b2f33729ef41aa6bbd3</anchor>
      <arglist>(uint32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint64</type>
      <name>swapIfBigEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a73bc9ac7015e4b43d780ac556dfdc93f</anchor>
      <arglist>(uint64 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16</type>
      <name>swapIfLittleEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a1103519b49f0e4cc7b0fb711288da632</anchor>
      <arglist>(uint16 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>swapIfLittleEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a20d29ea3aaa4bf73c0552e2dc78da29c</anchor>
      <arglist>(uint32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint64</type>
      <name>swapIfLittleEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a2eb0203392d0b832448de74233220420</anchor>
      <arglist>(uint64 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>littleEndianInt</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>abe147f36b014922497a6c0b322cf2be6</anchor>
      <arglist>(const void *bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16</type>
      <name>littleEndianShort</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a6a9ba604abff4f9a13c83c8630042d7f</anchor>
      <arglist>(const void *bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>bigEndianInt</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>ab56f5bb7f972b3727c4dce5e9988e11f</anchor>
      <arglist>(const void *bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16</type>
      <name>bigEndianShort</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a2c28f1597c0d539b60df1fffb2004124</anchor>
      <arglist>(const void *bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>littleEndian24Bit</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a8e0a93af21e6d1b5ec1299d6db465b99</anchor>
      <arglist>(const char *bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>bigEndian24Bit</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>aeaa8651018c78f620f26b4772ff315c0</anchor>
      <arglist>(const char *bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>littleEndian24BitToChars</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a8efdab6e96d009859e80eb7897e9891c</anchor>
      <arglist>(int value, char *destBytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bigEndian24BitToChars</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a69368ae641ae20d4019b86b3cbc26043</anchor>
      <arglist>(int value, char *destBytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isBigEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a3f1fa53d69bcbb29fb4de11eb1de63fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CachedComponentImage</name>
    <filename>classCachedComponentImage.html</filename>
    <member kind="function">
      <type></type>
      <name>CachedComponentImage</name>
      <anchorfile>classCachedComponentImage.html</anchorfile>
      <anchor>a73b6556a146ea166ee9e3fa5ffe9f780</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CachedComponentImage</name>
      <anchorfile>classCachedComponentImage.html</anchorfile>
      <anchor>ac2e9de7eaa6ecf3a018ceafb0440c704</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>paint</name>
      <anchorfile>classCachedComponentImage.html</anchorfile>
      <anchor>ae25f61ece3f331280d0ac989d41ac2c1</anchor>
      <arglist>(Graphics &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invalidateAll</name>
      <anchorfile>classCachedComponentImage.html</anchorfile>
      <anchor>a6fcece8d8f2e104172ddac2b95d13d14</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>classCachedComponentImage.html</anchorfile>
      <anchor>a528f5be0a25936f771cf5e38c4332d75</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;area)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseResources</name>
      <anchorfile>classCachedComponentImage.html</anchorfile>
      <anchor>a3e36fc5255badec7885a1d5484cb78f6</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CallbackMessage</name>
    <filename>classCallbackMessage.html</filename>
    <base>MessageManager::MessageBase</base>
    <member kind="function">
      <type></type>
      <name>CallbackMessage</name>
      <anchorfile>classCallbackMessage.html</anchorfile>
      <anchor>a670d5e9feb62e19814b1dfc25c00e9f7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CallbackMessage</name>
      <anchorfile>classCallbackMessage.html</anchorfile>
      <anchor>afa4bb7bd8f5962edcc53c5df37cd8b25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCallback</name>
      <anchorfile>classCallbackMessage.html</anchorfile>
      <anchor>a1f72c1e680e26f44780ac9437f3450de</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CallOutBox</name>
    <filename>classCallOutBox.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>CallOutBox</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a3be6d06c04eb0a820b239c83c34a97c0</anchor>
      <arglist>(Component &amp;contentComponent, Component &amp;componentToPointTo, Component *parentComponent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CallOutBox</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>acef7ecf52e34515d5edb30213ecd47dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArrowSize</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a83090d1fbfb1dad89d90e6c269ca0911</anchor>
      <arglist>(float newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePosition</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a19e7a01bb331faba5196e3aa3df07e40</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newAreaToPointTo, const Rectangle&lt; int &gt; &amp;newAreaToFitIn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a7d6782cab62048876228584f0667eb51</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>aba7201529024381ec0b712f7b7a1b70c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moved</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a1c3c0115da976f2b8e5082e21b3fd8ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>childBoundsChanged</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a2b9dd1be925cc843313f99df8340cc72</anchor>
      <arglist>(Component *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>ab5006ce71e02f77675aa38f5b1ef029c</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inputAttemptWhenModal</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a76f7ef8ceb74d8c5bacfa674eb12c5b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>ae9112142c41bb4a32a77f3403522513e</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleCommandMessage</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a89c6d582f95613f306a3cd20a3522740</anchor>
      <arglist>(int commandId)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CameraDevice</name>
    <filename>classCameraDevice.html</filename>
    <class kind="class">CameraDevice::Listener</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CameraDevice</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>ac885198479887e5a3779a818e07e9917</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getName</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>a738aba3ea45e63ed63c18a263dca9fa1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>createViewerComponent</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>a17948f7b0ba629b0958bd0638bdb112a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startRecordingToFile</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>a14cf9ed22ac491e949d05ac44071fbee</anchor>
      <arglist>(const File &amp;file, int quality=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopRecording</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>a8f4e51fb9d4a77a5bb479749e65e8d8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getTimeOfFirstRecordedFrame</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>a55af5a493ae628304fa11aec1ad70a92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>a37d6fce26ed8f3814eb90c6acefb2244</anchor>
      <arglist>(Listener *listenerToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>ab91e1f572ebcee77ffeccd17017c43dd</anchor>
      <arglist>(Listener *listenerToRemove)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>getAvailableDevices</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>acf99196e8620c39638cb014044012b72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CameraDevice *</type>
      <name>openDevice</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>a2f8b8a9815fb66b59e1622e5c19d4f6c</anchor>
      <arglist>(int deviceIndex, int minWidth=128, int minHeight=64, int maxWidth=1024, int maxHeight=768)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getFileExtension</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>ac720c6cdc6a67685a0472c5fc8566f37</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CameraDevice::Listener</name>
    <filename>classCameraDevice_1_1Listener.html</filename>
    <member kind="function">
      <type></type>
      <name>Listener</name>
      <anchorfile>classCameraDevice_1_1Listener.html</anchorfile>
      <anchor>a9a04f445b39617bffd2739c453245c37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classCameraDevice_1_1Listener.html</anchorfile>
      <anchor>a4c14aed9e0393ddf8cd541ce102703cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>imageReceived</name>
      <anchorfile>classCameraDevice_1_1Listener.html</anchorfile>
      <anchor>aae8ddc9fa3fea24ae48826a5c4232aeb</anchor>
      <arglist>(const Image &amp;image)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaretComponent</name>
    <filename>classCaretComponent.html</filename>
    <base>Component</base>
    <base>Timer</base>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classCaretComponent.html</anchorfile>
      <anchor>aee2f8dbdf274b7691a1fe3b704831f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>caretColourId</name>
      <anchorfile>classCaretComponent.html</anchorfile>
      <anchor>aee2f8dbdf274b7691a1fe3b704831f81a17c813c8e63c43ff1339f864387a007e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CaretComponent</name>
      <anchorfile>classCaretComponent.html</anchorfile>
      <anchor>a4d0d34bc6f55b6aa99c5c7f05f39b711</anchor>
      <arglist>(Component *keyFocusOwner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CaretComponent</name>
      <anchorfile>classCaretComponent.html</anchorfile>
      <anchor>a20871c2e074ec0e94a026fbbe34b8857</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCaretPosition</name>
      <anchorfile>classCaretComponent.html</anchorfile>
      <anchor>aa69c32be5ca9921ed5590bbfdc5bcb03</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;characterArea)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classCaretComponent.html</anchorfile>
      <anchor>a42c4c45c695b137a43095606972b98b4</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timerCallback</name>
      <anchorfile>classCaretComponent.html</anchorfile>
      <anchor>a681d7f30bb08e0d128a4bb1872862827</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChangeBroadcaster</name>
    <filename>classChangeBroadcaster.html</filename>
    <member kind="function">
      <type></type>
      <name>ChangeBroadcaster</name>
      <anchorfile>classChangeBroadcaster.html</anchorfile>
      <anchor>a1c8ccfa186a47d58a05e7f1f1576c038</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChangeBroadcaster</name>
      <anchorfile>classChangeBroadcaster.html</anchorfile>
      <anchor>a3b2f8465cc6c09c0583c8bdf56319742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChangeListener</name>
      <anchorfile>classChangeBroadcaster.html</anchorfile>
      <anchor>ad68416fe79a94cd5c99519bdea6c2a06</anchor>
      <arglist>(ChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChangeListener</name>
      <anchorfile>classChangeBroadcaster.html</anchorfile>
      <anchor>ae558a26c795278549a63e342bd5f1650</anchor>
      <arglist>(ChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllChangeListeners</name>
      <anchorfile>classChangeBroadcaster.html</anchorfile>
      <anchor>a6b9c150078318d419debc82e6f22ce58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendChangeMessage</name>
      <anchorfile>classChangeBroadcaster.html</anchorfile>
      <anchor>a10f01d1c0a7fde85355321985a682cbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendSynchronousChangeMessage</name>
      <anchorfile>classChangeBroadcaster.html</anchorfile>
      <anchor>a5d16cd01b9af4bacb1716530af17f77b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispatchPendingMessages</name>
      <anchorfile>classChangeBroadcaster.html</anchorfile>
      <anchor>a78f62ecd57a016f8ba7a6ce55454947d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChangeListener</name>
    <filename>classChangeListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChangeListener</name>
      <anchorfile>classChangeListener.html</anchorfile>
      <anchor>a0498f9374464e4b59fada8b4445c0e98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>changeListenerCallback</name>
      <anchorfile>classChangeListener.html</anchorfile>
      <anchor>a027420041071315201df11e19a36ea18</anchor>
      <arglist>(ChangeBroadcaster *source)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelRemappingAudioSource</name>
    <filename>classChannelRemappingAudioSource.html</filename>
    <base>AudioSource</base>
    <member kind="function">
      <type></type>
      <name>ChannelRemappingAudioSource</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>ad6cfa532e77dc3993a0516cae1623b2b</anchor>
      <arglist>(AudioSource *source, bool deleteSourceWhenDeleted)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChannelRemappingAudioSource</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>ac95f5a646e2c8ad1fb90a69c1f251a65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfChannelsToProduce</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>a8af553519941d35644aa5373fde05acb</anchor>
      <arglist>(int requiredNumberOfChannels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllMappings</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>a373b386b0873abccac53601fa0760f2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputChannelMapping</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>a6d2601cc888b1c4d19ed4bcd4877cc53</anchor>
      <arglist>(int destChannelIndex, int sourceChannelIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputChannelMapping</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>a319830bf0ca0a05bf60d070cf3d2ab3a</anchor>
      <arglist>(int sourceChannelIndex, int destChannelIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemappedInputChannel</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>aa6253a294f5df832746290aace819066</anchor>
      <arglist>(int inputChannelIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemappedOutputChannel</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>a2e3d5c199038069c4510d9fc62226e24</anchor>
      <arglist>(int outputChannelIndex) const </arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>createXml</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>a1230528d1eb1ca7a1b0f7a46fa97802a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreFromXml</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>a176d063fc2c378756e26d6aa9bf911a6</anchor>
      <arglist>(const XmlElement &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>ae6a5a79fabbc59bdc1d22776b459b8d6</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>a09b7bdd2bfd44ca9195d19d1cde93fad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>abb35d36480f9ddae2438721061aa5da5</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CharacterFunctions</name>
    <filename>classCharacterFunctions.html</filename>
    <member kind="function" static="yes">
      <type>static juce_wchar</type>
      <name>toUpperCase</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a23ce171684182080563cb2829e0e15e0</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static juce_wchar</type>
      <name>toLowerCase</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>ad24ab7b19d00b0ea570b31d8cce4a33e</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isUpperCase</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a6533e82213f7bc97d84f5509cfe21225</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isLowerCase</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>aa5b13d045a9ddb2e56e3acd7cef23b41</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isWhitespace</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>ab98a1ddf024746a50e471f003a35ff2e</anchor>
      <arglist>(char character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isWhitespace</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a913c5ce360aee241ff77a7d7b6604e1c</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDigit</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a47701af97c7c496659a0bd87b2e207a3</anchor>
      <arglist>(char character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDigit</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a6d70f7f3e1c90086cb98e26b50ed26c8</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isLetter</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>aab334019d831b58969596ebc2030cdd5</anchor>
      <arglist>(char character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isLetter</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>ace469a8d0ef2cfe250160adee5a085ce</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isLetterOrDigit</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a4d9adb0a8f3bb9c7acf3bcaa2799cbdd</anchor>
      <arglist>(char character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isLetterOrDigit</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a8339c9641b58e16a400d8ce653b0a1fa</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getHexDigitValue</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a3f97549ff81aee8415076f99b4adb310</anchor>
      <arglist>(juce_wchar digit) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>readDoubleValue</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a8743d3c374a36a0fb0596ac0e259b9ed</anchor>
      <arglist>(CharPointerType &amp;text) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getDoubleValue</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>ae58bda3f52f99ffe9d331a07ee0e60d9</anchor>
      <arglist>(CharPointerType text) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntType</type>
      <name>getIntValue</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a2f054849255f5b7b6332b6f225bdc708</anchor>
      <arglist>(const CharPointerType &amp;text) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>ad464ebf48f8195b54b889e697dc1d5b7</anchor>
      <arglist>(CharPointerType text, const size_t maxCharsToCount) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a6613b6616f6007864304de59e86d1d25</anchor>
      <arglist>(CharPointerType start, const CharPointerType &amp;end) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copyAll</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>aeb4fe8347d3df6ac1a09e3342517041c</anchor>
      <arglist>(DestCharPointerType &amp;dest, SrcCharPointerType src) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyWithDestByteLimit</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a62e42ef534d11e641cdf909e3dc5ded6</anchor>
      <arglist>(DestCharPointerType &amp;dest, SrcCharPointerType src, int maxBytes) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copyWithCharLimit</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a6926024e6276580b38d81b432a2261a2</anchor>
      <arglist>(DestCharPointerType &amp;dest, SrcCharPointerType src, int maxChars) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compare</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a1833e4d42a9fc8e3333e57e4786641d2</anchor>
      <arglist>(CharPointerType1 s1, CharPointerType2 s2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compareUpTo</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a121f7e5a6d496a95894c5f3e2bcc6cd0</anchor>
      <arglist>(CharPointerType1 s1, CharPointerType2 s2, int maxChars) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a58b4b783a7181c4a0ae90bb9c430d735</anchor>
      <arglist>(CharPointerType1 s1, CharPointerType2 s2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compareIgnoreCaseUpTo</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a88c1a470b8d453d8fd790c99406b1828</anchor>
      <arglist>(CharPointerType1 s1, CharPointerType2 s2, int maxChars) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>indexOf</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>aa02f3a3ce7945430026ccdb78d591be3</anchor>
      <arglist>(CharPointerType1 textToSearch, const CharPointerType2 &amp;substringToLookFor) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CharPointerType1</type>
      <name>find</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>aba55f95c614a4dd34238f0a18a274e48</anchor>
      <arglist>(CharPointerType1 textToSearch, const CharPointerType2 &amp;substringToLookFor) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>indexOfIgnoreCase</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a26cda5a0f1d5ee2a254de5e56d394bd3</anchor>
      <arglist>(CharPointerType1 haystack, const CharPointerType2 &amp;needle) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>indexOfChar</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a6f53c649e6aae9e9f15b3a45fd7679a2</anchor>
      <arglist>(Type text, const juce_wchar charToFind) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>indexOfCharIgnoreCase</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a0390d13daac405225657a7237022778c</anchor>
      <arglist>(Type text, juce_wchar charToFind) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>findEndOfWhitespace</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>aa2945fb70b58a4ae1c308c308b897367</anchor>
      <arglist>(const Type &amp;text) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>findEndOfToken</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a60422d8a456255ed5fba21edfc99529f</anchor>
      <arglist>(const Type &amp;text, const Type &amp;breakCharacters, const Type &amp;quoteCharacters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CharPointer_ASCII</name>
    <filename>classCharPointer__ASCII.html</filename>
    <member kind="typedef">
      <type>char</type>
      <name>CharType</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>add860ee0ed357926cb0cb5f0f8707283</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharPointer_ASCII</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a5f3a9f5183fc777f6d48814bcbbcce71</anchor>
      <arglist>(const CharType *const rawPointer) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharPointer_ASCII</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a9de29da955a20e66c3b867de345bf629</anchor>
      <arglist>(const CharPointer_ASCII &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII &amp;</type>
      <name>operator=</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>abd20dba6455f14ef42d00b3d3b78075b</anchor>
      <arglist>(const CharPointer_ASCII &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII &amp;</type>
      <name>operator=</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a85137a4d378ab9b03c404637d7fbcf7c</anchor>
      <arglist>(const CharType *text) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>aa2a9a75b1a825ef1fc556dd090454443</anchor>
      <arglist>(const CharPointer_ASCII &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>ac2f310199b1f01af2a19c6c3bfd4c117</anchor>
      <arglist>(const CharPointer_ASCII &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a94ccc1944f7c852b6d09542d93e8dfee</anchor>
      <arglist>(const CharPointer_ASCII &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a430ea184b1f6d6c67bbbe2a929e0723d</anchor>
      <arglist>(const CharPointer_ASCII &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>af55edccfee50407b907263095b37c4bc</anchor>
      <arglist>(const CharPointer_ASCII &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>ab5a02f72850f66445828fb6cf9c795d4</anchor>
      <arglist>(const CharPointer_ASCII &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharType *</type>
      <name>getAddress</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a1e686d89f0358c21941b2302d950e29d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CharType *</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>ad18bd5f249b831ae6e218a587c010fbe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>ab1c9259029e592aa64823f196779bfe3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>operator*</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a86513f6fa77d4bf8cfeadf1496252745</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII &amp;</type>
      <name>operator++</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>af43130addbae159b070a077aea4ba526</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII &amp;</type>
      <name>operator--</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a054771f429a759d330c2ee0efdeb9318</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getAndAdvance</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a7de52fb2870310c2b6c3283cc9e4f451</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII</type>
      <name>operator++</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a8769743cd65a51886e812dd317378f60</anchor>
      <arglist>(int) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>aa3d12bc7c3175b546151f8bc5d855989</anchor>
      <arglist>(const int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a132bc266a7be528fbd6c03e467bda144</anchor>
      <arglist>(const int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>operator[]</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>ac42226d999daf75013cafe27f2f8e729</anchor>
      <arglist>(const int characterIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII</type>
      <name>operator+</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a092155496ca4029e82d339495fb3d931</anchor>
      <arglist>(const int numToSkip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII</type>
      <name>operator-</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>adaba36dfc9690f08ff6b7a3dc6b1e5cd</anchor>
      <arglist>(const int numToSkip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>af4720cdda5d3fbd633105b733fc7f21b</anchor>
      <arglist>(const juce_wchar charToWrite) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceChar</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a054bda19b12a24917cb206135d28abd4</anchor>
      <arglist>(const juce_wchar newChar) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNull</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a58bcb2eac1020c73bf66c50b57ba1843</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a0337abc21ab3c3bf9a86fa1082f0b314</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a446e66e8ec874258e5aece82dfe1343c</anchor>
      <arglist>(const size_t maxCharsToCount) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a828218c32b125bb9d15c19fcf4de1533</anchor>
      <arglist>(const CharPointer_ASCII &amp;end) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>sizeInBytes</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a5d9b8f6799c81f41b17ada06f341663b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII</type>
      <name>findTerminatingNull</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a0876ef6e480b2bb87f39c0b2eb12f6c2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a16fe0667bae2695129f50390f4067a6f</anchor>
      <arglist>(const CharPointer &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>acf7241643d1bd33832cd27cfea43a636</anchor>
      <arglist>(const CharPointer_ASCII &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeWithDestByteLimit</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>ae837a30ba1f5eace601a4210be1296f8</anchor>
      <arglist>(const CharPointer &amp;src, const int maxDestBytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeWithCharLimit</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a2ae9d092197be5922460080aaa70abc6</anchor>
      <arglist>(const CharPointer &amp;src, const int maxChars) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a39bc8703d6125b03e51655348867e076</anchor>
      <arglist>(const CharPointer &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>aa7cc5173a5403c1c8c40de797a2914ec</anchor>
      <arglist>(const CharPointer_ASCII &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareUpTo</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a44667fe05152abdb5a436d64cbbbfa27</anchor>
      <arglist>(const CharPointer &amp;other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareUpTo</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a6dc622ecaaa0d25c9c2ff99e7a26ba03</anchor>
      <arglist>(const CharPointer_ASCII &amp;other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>aec660f6c090cc2efdea6457c6dd24d1b</anchor>
      <arglist>(const CharPointer &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a7a694ea15222fe09f5093d6384a7270c</anchor>
      <arglist>(const CharPointer_ASCII &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCaseUpTo</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a43f1f4ca34f158d0f864f8b19c6683c2</anchor>
      <arglist>(const CharPointer &amp;other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a5d10fa58059a781768c81b879150e213</anchor>
      <arglist>(const CharPointer &amp;stringToFind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a5eaab616b6560069baaadade7fd18ec0</anchor>
      <arglist>(const juce_wchar charToFind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>aa9d771060a8f44b24a76f9388f88107d</anchor>
      <arglist>(const juce_wchar charToFind, const bool ignoreCase) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWhitespace</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a41883c550ab553dabb8890176b7133e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDigit</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a32250190b49ea4fa0c7053be3873ee06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLetter</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>ad3859d62210809d7e52140e9f3e8e631</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLetterOrDigit</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a96e0007e4e36e6b4f23411d1c847568e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperCase</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a8ca8fe31c732a98f4d8d1e71e308ce2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerCase</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>abd12c4494348cbaa7c464089623cc5d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>toUpperCase</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>acd439c5e2ffbb749960fab419bf48fc2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>toLowerCase</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a345ba7273fc3288bcd656786ae390bae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntValue32</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>adcb32591a31db3d4ce6f62fae2eacf45</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getIntValue64</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a309286b2fa217c4fae667f64ebf97286</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleValue</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a477aaad22ed57ff0c6893ba90e7e8be7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII</type>
      <name>findEndOfWhitespace</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a46e66abf5a596aaf031ee70699ab5ab9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getBytesRequiredFor</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a46b20d6375eab74f5646eb007a257d09</anchor>
      <arglist>(const juce_wchar) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getBytesRequiredFor</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>ade70e42140d9c57843f9aa465c595088</anchor>
      <arglist>(const CharPointer &amp;text) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRepresent</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>afe5960ae735cf778e29264ff2f21a0d2</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidString</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a2f6778c511b05729cc81e8f3b7bca132</anchor>
      <arglist>(const CharType *dataToTest, int maxBytesToRead)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CharPointer_UTF16</name>
    <filename>classCharPointer__UTF16.html</filename>
    <member kind="enumvalue">
      <name>byteOrderMarkBE1</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a7048cdbb9ebcb89333c8656a30c4bed9aec96c813c427ded95e8d412690c08c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>byteOrderMarkBE2</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a7048cdbb9ebcb89333c8656a30c4bed9a0e9e3e062cd6caa2ddbd9861763a5aef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>byteOrderMarkLE1</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a7048cdbb9ebcb89333c8656a30c4bed9ae1379594854299323a3c64115026d288</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>byteOrderMarkLE2</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a7048cdbb9ebcb89333c8656a30c4bed9ae603365b2895acc018233efeb0da3d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int16</type>
      <name>CharType</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a28977ea8b479d3b2f3a8459594f88c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharPointer_UTF16</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a3b8f36f58c2899ba6e620965473397ab</anchor>
      <arglist>(const CharType *const rawPointer) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharPointer_UTF16</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>ae8a672d80bd54445f2c32038b1e3d89e</anchor>
      <arglist>(const CharPointer_UTF16 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16 &amp;</type>
      <name>operator=</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>ab636b7190254f8750647847d2d6967ae</anchor>
      <arglist>(const CharPointer_UTF16 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16 &amp;</type>
      <name>operator=</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9dac86a44abe22dba6a15c939af4b3d8</anchor>
      <arglist>(const CharType *text) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9b3b164eb73ffaac3db4c1c26384aabe</anchor>
      <arglist>(const CharPointer_UTF16 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a79cfb7b1649a14234d95c1b68b16ba1a</anchor>
      <arglist>(const CharPointer_UTF16 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a911a0c2cc80202cddcd2e193da1c6e1a</anchor>
      <arglist>(const CharPointer_UTF16 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a3639f6fab7acd52ff2f782f21e5566fe</anchor>
      <arglist>(const CharPointer_UTF16 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>ac536416a183064c0edd5f1f74f754f20</anchor>
      <arglist>(const CharPointer_UTF16 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>af8e9b1ae23efabee08e135d1ea939f21</anchor>
      <arglist>(const CharPointer_UTF16 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharType *</type>
      <name>getAddress</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a1e5dda82cc30d2889f65c4e8698426d4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CharType *</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a0fd172e6338963799ec29f50bceefb8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a13ad3aa1ffb8cf9b09d35619f93c0551</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>operator*</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a7c11c03b28b25d3a5914c36b3850c39a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16 &amp;</type>
      <name>operator++</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a7fd372aca78c7d772330298b365455eb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16 &amp;</type>
      <name>operator--</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9294875d7694a88af6e521123e8c9a5f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getAndAdvance</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a41df61ed062db96f0792ce7f54da49d7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>operator++</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a58369a120186a6f73258852330acb428</anchor>
      <arglist>(int) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a76a792edf85b22acc6ad2e7d7f3d796e</anchor>
      <arglist>(int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a0587ca2c785aa7b426e1d005c603405d</anchor>
      <arglist>(int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>operator[]</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a5e59116f71c716371e991344b047101e</anchor>
      <arglist>(const int characterIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>operator+</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a2ee5d01bc02e2a22bf4765823d95608b</anchor>
      <arglist>(const int numToSkip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>operator-</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a319e3ff5ce3e87ec79bbaa19fafd5f04</anchor>
      <arglist>(const int numToSkip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a515757c960c3baad17b9e73a3e82cc11</anchor>
      <arglist>(juce_wchar charToWrite) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNull</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a8de95eb2a7116acd346c4ed3d3fd3515</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a6e376bba43fa82d73197d04895bdf126</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a18b7fd72a75236159029a595afcdc32e</anchor>
      <arglist>(const size_t maxCharsToCount) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a06d431159acc1a025d6c846553bfe5aa</anchor>
      <arglist>(const CharPointer_UTF16 &amp;end) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>sizeInBytes</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>ad0f7058d9e9f68d81c1f847b8b76f27c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>findTerminatingNull</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9321c084d9ecd18da24cff1a368f29cd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>ad613b46565511b608b10010293059fdb</anchor>
      <arglist>(const CharPointer &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>ae04a4043a0e93d261c9f25f69dbab13d</anchor>
      <arglist>(const CharPointer_UTF16 &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeWithDestByteLimit</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a631fd1fadbacdcece60db164d90e71dd</anchor>
      <arglist>(const CharPointer &amp;src, const int maxDestBytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeWithCharLimit</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a3d6acbfe12433fc6232099d188794173</anchor>
      <arglist>(const CharPointer &amp;src, const int maxChars) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>aec227b74194127b5c6ce77d2b1c643dc</anchor>
      <arglist>(const CharPointer &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareUpTo</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a69b0138b401a141b69723dcc86eb8082</anchor>
      <arglist>(const CharPointer &amp;other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>afd0ab6c0bd13e906be0ba3453b00935e</anchor>
      <arglist>(const CharPointer &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCaseUpTo</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>acd997743f5f28ab09632abc6d3587e31</anchor>
      <arglist>(const CharPointer &amp;other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>ae28155c32e403f2d4ba83d7b8f2bd7c8</anchor>
      <arglist>(const CharPointer &amp;stringToFind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9898fcd1d82b488162fdeb469320a5e5</anchor>
      <arglist>(const juce_wchar charToFind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a6f2bff8fe087a58422205c20b5108105</anchor>
      <arglist>(const juce_wchar charToFind, const bool ignoreCase) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWhitespace</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9985663b80f83e80caf9b9ce1d1e7ee7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDigit</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>aa85407ed241a73b49991cf6414c58238</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLetter</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a3fb032db114d5574404a2a937f6d5b22</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLetterOrDigit</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a6f12dad08e0deaad5ad56f39cadc9891</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperCase</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a0010de47cf9f0c4fe7d0f33931c666af</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerCase</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a96740237e7b24401880c9ff5114e1b08</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>toUpperCase</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9f4679d73f4135ce332eb6db2b53b67c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>toLowerCase</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a2f23f33e815df394df305b10a4d8a372</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntValue32</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a5793f67991416a245becaf79c7ab387f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getIntValue64</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>aa80bcbf2f7632513a62b59282103b1ab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleValue</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a8c8fa1d45d916c5cb685dc6e5a72736d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>findEndOfWhitespace</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a390416da21c0599f732fe6c7815f67cd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>atomicSwap</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>acdba999962e78be7f525e6280a14f035</anchor>
      <arglist>(const CharPointer_UTF16 &amp;newValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getBytesRequiredFor</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a2c7e013dd52871e441d013342ce4d82f</anchor>
      <arglist>(const juce_wchar charToWrite) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getBytesRequiredFor</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9236e8a0b5ec5a1acfb25cee0b4395c2</anchor>
      <arglist>(CharPointer text) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRepresent</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a85971fe7d9b82ad95daf137af02976f6</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidString</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9cb146266c89a9abecb848011bd0382c</anchor>
      <arglist>(const CharType *dataToTest, int maxBytesToRead)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CharPointer_UTF32</name>
    <filename>classCharPointer__UTF32.html</filename>
    <member kind="typedef">
      <type>juce_wchar</type>
      <name>CharType</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>aec00e72e5c5324d92e97f17ff7cd70f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharPointer_UTF32</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a8af5362ad32f31575d76998d70e1ce2a</anchor>
      <arglist>(const CharType *const rawPointer) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharPointer_UTF32</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>abb743befaaa4aabd6ae57cd4b0c4e2d0</anchor>
      <arglist>(const CharPointer_UTF32 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32 &amp;</type>
      <name>operator=</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a9a035bca3672a2886e76e4cd9d35ddc1</anchor>
      <arglist>(const CharPointer_UTF32 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32 &amp;</type>
      <name>operator=</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a0b6ff7594d21261c44ca6e8da5d586a8</anchor>
      <arglist>(const CharType *text) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a337c206eebb0b1c5b7f525e4ce0b4612</anchor>
      <arglist>(const CharPointer_UTF32 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a7ff5b9f46e3ab0dc603713c2a83d650b</anchor>
      <arglist>(const CharPointer_UTF32 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a07d5f1afd104e1083133dfdd7c0a3c8a</anchor>
      <arglist>(const CharPointer_UTF32 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>af02bcc107d38ff84b34afcf5d2a71c2d</anchor>
      <arglist>(const CharPointer_UTF32 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a27ac0cb40a1dfac9e9bf0c628680ce23</anchor>
      <arglist>(const CharPointer_UTF32 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>af9c721f82517249dbc1a8fd822eb576f</anchor>
      <arglist>(const CharPointer_UTF32 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharType *</type>
      <name>getAddress</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>ad07ae8c5d561e107d67264399fa07b6c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CharType *</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a00d42ba06ea2ce18df6f2bad11d0b63d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>afeb22ca18bf5130341bf3dfc5dd63f62</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>operator*</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a47ce448fd1f52d5e0c8911e83eb8d378</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32 &amp;</type>
      <name>operator++</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a27dee350d2d3a9ad96876640d943041a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32 &amp;</type>
      <name>operator--</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>aa7ddeeec0eed897f7cea8228033f0267</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getAndAdvance</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a17395f87dd554c1983aa4bdf49a2292c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>operator++</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>aef7aab932a9ad8b07c6efb908c0767f4</anchor>
      <arglist>(int) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>abb35aa950c3d29d99596ebd0f438ddb6</anchor>
      <arglist>(const int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a0fb27a5c1c1c85fcee28f5df6c1cd720</anchor>
      <arglist>(const int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>ac88fe872f66b05f840380d5e26d50005</anchor>
      <arglist>(const int characterIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>operator+</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>af6f7099f07fd5946acc38f7266655f89</anchor>
      <arglist>(const int numToSkip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>operator-</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>ae137213e4c83554c724c299f68cc91d4</anchor>
      <arglist>(const int numToSkip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a4d5d291f1afe51b6930b5ffbe52f0de4</anchor>
      <arglist>(const juce_wchar charToWrite) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceChar</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>affdec15df0e21e4985da83f3df64f263</anchor>
      <arglist>(const juce_wchar newChar) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNull</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>aa990904698eefcae216fd1a0324c3fb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a17ae1bf956ba06132575fd396516fb6f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>ab5af051053dc120126f3f04a9c88871b</anchor>
      <arglist>(const size_t maxCharsToCount) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>ae9ec810951ebf4f285c02c7e05b5b7c6</anchor>
      <arglist>(const CharPointer_UTF32 &amp;end) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>sizeInBytes</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a68aa1761ab4b0bd01dd9cb12c7512f36</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>findTerminatingNull</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>abd7b2bd51355a8a467f664ece48bdde5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a8feec296ad741bb45806394c38dbd812</anchor>
      <arglist>(const CharPointer &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>abe8d466d181a0e08d1b4f9cc1b719108</anchor>
      <arglist>(const CharPointer_UTF32 &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeWithDestByteLimit</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a07cfcbae857f8c97def7fdcaf1c3ace3</anchor>
      <arglist>(const CharPointer &amp;src, const int maxDestBytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeWithCharLimit</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>aa289cda8f588a2b13469227f9b4a863e</anchor>
      <arglist>(const CharPointer &amp;src, const int maxChars) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>aaecb85781a602ffdca55a9e81ba126fc</anchor>
      <arglist>(const CharPointer &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareUpTo</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>aef9a98abfbba3a5cd78f724fc1ed3eb9</anchor>
      <arglist>(const CharPointer &amp;other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>aeacab53c78cc7fa0282b8fa9bc848b7e</anchor>
      <arglist>(const CharPointer &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCaseUpTo</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a83cec010af7ed13a24af6985be258c99</anchor>
      <arglist>(const CharPointer &amp;other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a0dbdd9164eb0d288d1a4f4fb53554d58</anchor>
      <arglist>(const CharPointer &amp;stringToFind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a21049d77a1723e3baae318728d300bda</anchor>
      <arglist>(const juce_wchar charToFind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a9fa2ac897c0e6d978ff12907f61892b0</anchor>
      <arglist>(const juce_wchar charToFind, const bool ignoreCase) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWhitespace</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>ad7178b3b784f737ef422ed8e2ab9230e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDigit</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a9f07809894a45ae036a245389f638529</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLetter</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a29941ef95624b8c308640b8e9172b6a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLetterOrDigit</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a6a9dba9f1050db8daab6560b12b213ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperCase</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>acb9c7c6eb40147ba6e6159baea2877b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerCase</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>afc452c7113e22fca699f8744dcac8a59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>toUpperCase</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>abc8f84ecbede295debe097ba50754061</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>toLowerCase</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a1f444f71abb18ea75989f4630e77badd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntValue32</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a1f7171176d8f0d77f4275e5698397535</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getIntValue64</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a3cb59485dac27fbd64fa7667880c9f0c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleValue</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a64fc0ce7ef9331d755ab1847618d2eb4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>findEndOfWhitespace</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a609babf8df00758db3e44c676d61d457</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>atomicSwap</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a09ccd5ccd07e092d083b5759d6f802df</anchor>
      <arglist>(const CharPointer_UTF32 &amp;newValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getBytesRequiredFor</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a8132e312b73ab73df7b990336b002b6d</anchor>
      <arglist>(const juce_wchar) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getBytesRequiredFor</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>ad50898355a24b5fefc83be3d2891a769</anchor>
      <arglist>(const CharPointer &amp;text) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRepresent</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>ad350d6d84f72f876d0fdb4257edae6f0</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidString</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>aff3cbc01e31f577c294d82d26dca0340</anchor>
      <arglist>(const CharType *dataToTest, int maxBytesToRead)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CharPointer_UTF8</name>
    <filename>classCharPointer__UTF8.html</filename>
    <member kind="enumvalue">
      <name>byteOrderMark1</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a4382bf4437d56e7aa7a15a56b787e5a8a8085c34bfa20125556249baba7268ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>byteOrderMark2</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a4382bf4437d56e7aa7a15a56b787e5a8a2e5a169828d5d53f24d89f12ea14d308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>byteOrderMark3</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a4382bf4437d56e7aa7a15a56b787e5a8aa535790ae396383e305fbf9af74624f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>CharType</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ac410c2e8043cffd3cf0ae00e04c6e630</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharPointer_UTF8</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>aef82dd41c193bbffec176c7b2a0dd810</anchor>
      <arglist>(const CharType *const rawPointer) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharPointer_UTF8</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a2d8b82ec16af6c4101b95dcc72ab6883</anchor>
      <arglist>(const CharPointer_UTF8 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8 &amp;</type>
      <name>operator=</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a3a62d6c6171c1162db758aaa52bc8be4</anchor>
      <arglist>(const CharPointer_UTF8 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8 &amp;</type>
      <name>operator=</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>aad5479a26f4e93f1dc18005bca5b4c0f</anchor>
      <arglist>(const CharType *text) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ac6fae66dd563b141425ab19ea5dadd76</anchor>
      <arglist>(const CharPointer_UTF8 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a05c70d1edbe3cd176735a8a2a19415a2</anchor>
      <arglist>(const CharPointer_UTF8 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a290fc91f9f210ac4c5f5941837e41697</anchor>
      <arglist>(const CharPointer_UTF8 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a3ec24fc33cde2b8c56634ae05342762c</anchor>
      <arglist>(const CharPointer_UTF8 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ad74d0b0e91754780b1556a9c99c8ebf5</anchor>
      <arglist>(const CharPointer_UTF8 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ac883bc866f02612cd53b6c3ad0b70bd1</anchor>
      <arglist>(const CharPointer_UTF8 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharType *</type>
      <name>getAddress</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a2cc5261e5aff03fba78a712a79779300</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CharType *</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a17e9bb3a69e75f92034d2dae676f7180</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a452c936eef0f27624b4fcecf3988e861</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>operator*</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a5b19c2009d8f8b0dc95c066395faa0b5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8 &amp;</type>
      <name>operator++</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ab4a4967be0c1973db2e1faed09c1150e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8 &amp;</type>
      <name>operator--</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a511218507aaf28289af4ac66ac88a40b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getAndAdvance</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>aa04226d2270f693aacdfc242e3409cf9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>operator++</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a00580758ed092347f1f6231cfaf7bc8a</anchor>
      <arglist>(int) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>aa4cc9b4ed06e2bd8074e5515dde212a0</anchor>
      <arglist>(int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>aafcbd7d7f23270f413a39a03608c62b0</anchor>
      <arglist>(int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>operator[]</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a72bb9d58f70b5d8886d0b7a324a7e955</anchor>
      <arglist>(int characterIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>operator+</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>acfd5a69b9692e933f2b3991cbd8911e0</anchor>
      <arglist>(int numToSkip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>operator-</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a3768795b09fa735a26e07c91999f7650</anchor>
      <arglist>(int numToSkip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ab6a19ddff694e7e52f0063c6d298c778</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ade7a61fe136d8c65032f5bcab7a4bbfc</anchor>
      <arglist>(const size_t maxCharsToCount) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ab6f243d75dc22aeffb328ed71a878266</anchor>
      <arglist>(const CharPointer_UTF8 &amp;end) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>sizeInBytes</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a46b0aabf7dd39aefdc1f0b2afcac8eca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>findTerminatingNull</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ae24e5043e6c78c0750b697d85eea05f2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>af477c8305e8299286dca56a9ca75d433</anchor>
      <arglist>(const juce_wchar charToWrite) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNull</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ac794a16057eb9bc642a21c73568e02e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a8b1dafb9da1b2a3a5b1ac3b824c0200d</anchor>
      <arglist>(const CharPointer &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a1c3ff7cfa14a78f82bc24d56cb91cccd</anchor>
      <arglist>(const CharPointer_UTF8 &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeWithDestByteLimit</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a1f4d93c44d3edf2f6ad9210bdbae053e</anchor>
      <arglist>(const CharPointer &amp;src, const int maxDestBytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeWithCharLimit</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a34c93cbd610706882dcd781750384bd1</anchor>
      <arglist>(const CharPointer &amp;src, const int maxChars) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a655761ef4be04c4ea226cdd72a243be7</anchor>
      <arglist>(const CharPointer &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareUpTo</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ad5c26d7b98fb27443124080d356e813a</anchor>
      <arglist>(const CharPointer &amp;other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a8a2b9d9f7aa7c42c9425b2b9299e1020</anchor>
      <arglist>(const CharPointer &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>af48c6fd90bad1810e4b00f47f05ae4b9</anchor>
      <arglist>(const CharPointer_UTF8 &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCaseUpTo</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a5ea3fed355775aa2588279af544db927</anchor>
      <arglist>(const CharPointer &amp;other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a95acc3708bd0c505557041b9a417be97</anchor>
      <arglist>(const CharPointer &amp;stringToFind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a8f96063c08b82528519d34768c03d715</anchor>
      <arglist>(const juce_wchar charToFind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>aeb907245068a92ecd70990e5cd75b767</anchor>
      <arglist>(const juce_wchar charToFind, const bool ignoreCase) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWhitespace</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>acde7478e0bd4f72ba80c37391fde3c30</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDigit</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>add4e53cc313384bd3d3346f30677bc7c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLetter</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a29dd4e419bd59fcde8217b48ba85923d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLetterOrDigit</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a1bbf1d6235491ff7614913945ed74272</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperCase</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a7c04fb1ce2e2a69d88f458787b53991b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerCase</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ad2d69913724d7d1ae82c328f47823a11</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>toUpperCase</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a89f8a6b510bbda4b95e5b8917d23f35c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>toLowerCase</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ad9d5948877132712f57ecc2094479444</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntValue32</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>acbc5e116260ff6357a9f5b7ffe8300ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getIntValue64</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a1cd0d2c43a3df347467ec05a3a8b5339</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleValue</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>aceae335150864e9a0804748b3af8ce8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>findEndOfWhitespace</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a955fb7d8289c3b1e61f1bd70b74df117</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>atomicSwap</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a2a46edee4dc4f4b71575fbcd318f7a48</anchor>
      <arglist>(const CharPointer_UTF8 &amp;newValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getBytesRequiredFor</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>af70d66750ea1b8be02f613592319059e</anchor>
      <arglist>(const juce_wchar charToWrite) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getBytesRequiredFor</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a0039e385e2e3b77edf984dc3d5e811b0</anchor>
      <arglist>(CharPointer text) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRepresent</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ab1e225fa4b54c0c647209eb092ff4c0a</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidString</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a5ff9c244b3c7615345e0c3dc59dc7289</anchor>
      <arglist>(const CharType *dataToTest, int maxBytesToRead)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChildProcess</name>
    <filename>classChildProcess.html</filename>
    <member kind="function">
      <type></type>
      <name>ChildProcess</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>a7a3ac50868578dc8b65203e4ccfb8038</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChildProcess</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>a3749642d15c9fce912f9e7f9daaf52f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>a378b6caac6a40c84f35c3dc5d254a68b</anchor>
      <arglist>(const String &amp;command)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>a1a187cc5d299c331798a7b46c3971ccd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readProcessOutput</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>af6f8f31a8c86fadeba06b8be21e94e30</anchor>
      <arglist>(void *destBuffer, int numBytesToRead)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>readAllProcessOutput</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>ae91e215618cd1861c2e2ca13e5f4166e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>waitForProcessToFinish</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>a170898d07e43e68fbca86cd5f2ecca15</anchor>
      <arglist>(int timeoutMs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>kill</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>a524fd75e18a0aa94a8518ce49432413c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChoicePropertyComponent</name>
    <filename>classChoicePropertyComponent.html</filename>
    <base>PropertyComponent</base>
    <base protection="private">ComboBox::Listener</base>
    <member kind="function">
      <type></type>
      <name>ChoicePropertyComponent</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>afa42d754b1427b60c7aa922ff14ebb7c</anchor>
      <arglist>(const Value &amp;valueToControl, const String &amp;propertyName, const StringArray &amp;choices, const Array&lt; var &gt; &amp;correspondingValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChoicePropertyComponent</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>a1f4ed698110aba123058d1d03e19f50c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndex</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>a96cc058a27b803f9fe954040c57951ec</anchor>
      <arglist>(int newIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getIndex</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>ad274393dd06733afced8d81225b515c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getChoices</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>a6a02cfe8ec2dd563d623e527bba414be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>a596cfdff4aacee564c686e0910b011e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comboBoxChanged</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>a99290b7e8969cc3dea7ad5440464db6b</anchor>
      <arglist>(ComboBox *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ChoicePropertyComponent</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>a2c81bdfd97932a807b7f055dd9ef145b</anchor>
      <arglist>(const String &amp;propertyName)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringArray</type>
      <name>choices</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>a9e1e134a3393008eaed61c31667b78fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeDocument</name>
    <filename>classCodeDocument.html</filename>
    <class kind="class">CodeDocument::Iterator</class>
    <class kind="class">CodeDocument::Listener</class>
    <class kind="class">CodeDocument::Position</class>
    <member kind="function">
      <type></type>
      <name>CodeDocument</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a9b4bff1cc4d65445d0563fb286d3799d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CodeDocument</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>aa42ffd824e93061e613f7a0f941d51ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getAllContent</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>aaed217186ceab7101ed1cbdc611d1f63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextBetween</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>ab8ebc3cdc2eefef56824427356237650</anchor>
      <arglist>(const Position &amp;start, const Position &amp;end) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getLine</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>abc15eea21b2690c442a610277157dc4a</anchor>
      <arglist>(int lineIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCharacters</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>acf647cc02035fdbee025201442550841</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLines</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>ac1f426f1238d6960b725cb79399e27d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaximumLineLength</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>acdf7d662f21054059b8180f124e7ef85</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteSection</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a8618046d22c26326da18c0f372c330d8</anchor>
      <arglist>(const Position &amp;startPosition, const Position &amp;endPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertText</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a52039d2d208e30688478dbe2f31640e4</anchor>
      <arglist>(const Position &amp;position, const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceAllContent</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a621939da95a3a245a9474c003b59f65e</anchor>
      <arglist>(const String &amp;newContent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadFromStream</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a666ae3cea6e96721b22176624bfa3881</anchor>
      <arglist>(InputStream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeToStream</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>ae31f276f6445c5a6dc32cc12c4589b98</anchor>
      <arglist>(OutputStream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getNewLineCharacters</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a8f2c371735dd2630329f114d040634de</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNewLineCharacters</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a3cc7a9416ea069c83797621b92f55e09</anchor>
      <arglist>(const String &amp;newLine) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newTransaction</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a507bca2d6747323276b938670584f354</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>undo</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a47208d3029a44c1e9970f41ab5d87c5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redo</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a65238c6b6e038074051ace9393c779c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearUndoHistory</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a14e3cfa2635a240eb8f5f378caab00f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UndoManager &amp;</type>
      <name>getUndoManager</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a5420dec1f4f8ca9034e7d93ff538f1cf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSavePoint</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>ad76824d16b674adf90193e8286ad0a89</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChangedSinceSavePoint</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a4c3047eee0dad38555cf546c3ea3c15f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Position</type>
      <name>findWordBreakAfter</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a0045b9d756666e02c7b290576444c2c6</anchor>
      <arglist>(const Position &amp;position) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Position</type>
      <name>findWordBreakBefore</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a437ab93e6d2a23a08f8222043d05442e</anchor>
      <arglist>(const Position &amp;position) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a449f7459c2784ac56c24ddb0e5bb9d41</anchor>
      <arglist>(Listener *listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>acaf96503a0445a145f50667ce33d6cad</anchor>
      <arglist>(Listener *listener) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeDocument::Iterator</name>
    <filename>classCodeDocument_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>a3ee6a4135b4581b9b3d72a08f6bcb491</anchor>
      <arglist>(CodeDocument *document)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>a0d520b10dde056899742b1fe24084f02</anchor>
      <arglist>(const Iterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>ac761d3fb1b86a09802ae1c9e3f6c113a</anchor>
      <arglist>(const Iterator &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Iterator</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>ab7213db89a00d17eae0f3434dedae0ee</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>nextChar</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>aac4e6ccbc3ce08f7c05315713edda5b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>peekNextChar</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>ac20737d780e9bc7d9c5666d618b54785</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skip</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>ae29beec45949ba2279e0097f5514c376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPosition</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>a8a841561cb183954fbcf7816b140e094</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skipWhitespace</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>a36292d34f318f2bd778759e85dbb1adb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skipToEndOfLine</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>af022bef3ac374a43f3b88776f2131036</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLine</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>a8ce8da0d5c4c14b74c3ad751b97b6581</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEOF</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>a5ab0309f0ca7a87e2231b0c240330fe9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeDocument::Listener</name>
    <filename>classCodeDocument_1_1Listener.html</filename>
    <member kind="function">
      <type></type>
      <name>Listener</name>
      <anchorfile>classCodeDocument_1_1Listener.html</anchorfile>
      <anchor>a13e5b679bd0f71d05debd7d450228460</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classCodeDocument_1_1Listener.html</anchorfile>
      <anchor>aff508f04d66863de7bfabcfff8dd4ab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>codeDocumentChanged</name>
      <anchorfile>classCodeDocument_1_1Listener.html</anchorfile>
      <anchor>aa97b98fcfa06712471b0724d2c20c11c</anchor>
      <arglist>(const Position &amp;affectedTextStart, const Position &amp;affectedTextEnd)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeDocument::Position</name>
    <filename>classCodeDocument_1_1Position.html</filename>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a9884a2a1c00b008cd47fddd81ec6cbc2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>ac3bdb106a542a8452ff051588c994c17</anchor>
      <arglist>(const CodeDocument *ownerDocument, int line, int indexInLine) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a86f88233eb2babd78f3ffa79c80e1cb4</anchor>
      <arglist>(const CodeDocument *ownerDocument, int charactersFromStartOfDocument) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>abaf0e4e6aca2669ce80668e21a3817d6</anchor>
      <arglist>(const Position &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Position</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>aaffd03d4e5545fb6f65ec9c02fadb99b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Position &amp;</type>
      <name>operator=</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>ab64c2cdecf2d6ea90dfad9cbc5c3ccbd</anchor>
      <arglist>(const Position &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a696e593ed18806463f4470dabb97dc34</anchor>
      <arglist>(const Position &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>ac117028c95719569859e683cfb4dd9fb</anchor>
      <arglist>(const Position &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>aabaa322c141c2aa1c4f51689372dac70</anchor>
      <arglist>(int charactersFromStartOfDocument)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPosition</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a33d5895feefd36e5a9727e680a22f266</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineAndIndex</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a48c6c1c1aaa694cf8a791c2c21a5b0ed</anchor>
      <arglist>(int newLine, int newIndexInLine)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLineNumber</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>ab63027008380f4c8646b9b750bef49e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexInLine</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a6e33162e697f7ecc8f4a35a63ee67bb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositionMaintained</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a6137825e7845bb6d5ee203a7d42c8d6a</anchor>
      <arglist>(bool isMaintained)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveBy</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a064a37e5128a3b31570dd09eef48c8f9</anchor>
      <arglist>(int characterDelta)</arglist>
    </member>
    <member kind="function">
      <type>const Position</type>
      <name>movedBy</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>ad52afbee85589364a2543aab4c06c233</anchor>
      <arglist>(int characterDelta) const </arglist>
    </member>
    <member kind="function">
      <type>const Position</type>
      <name>movedByLines</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a9bca63b5c8b56a5b9c59222eea3d0313</anchor>
      <arglist>(int deltaLines) const </arglist>
    </member>
    <member kind="function">
      <type>const juce_wchar</type>
      <name>getCharacter</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a47a11d7d78ad657d5716a22491a01583</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getLineText</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a75e87660115ed51326cae062cb405980</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeEditorComponent</name>
    <filename>classCodeEditorComponent.html</filename>
    <base>Component</base>
    <base>TextInputTarget</base>
    <base protection="private">Timer</base>
    <base protection="private">ScrollBar::Listener</base>
    <base protection="private">CodeDocument::Listener</base>
    <base protection="private">AsyncUpdater</base>
    <class kind="struct">CodeEditorComponent::ColourScheme</class>
    <class kind="struct">CodeEditorComponent::State</class>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a452d8416080619c9b4984bc97e85a596</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a452d8416080619c9b4984bc97e85a596aab761a6dbaa4bf78a14e346dc2d416c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>highlightColourId</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a452d8416080619c9b4984bc97e85a596ae30c71457d23fcf0ff18ce56195107cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>defaultTextColourId</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a452d8416080619c9b4984bc97e85a596aebfaf17bcdaf7960adf28fc44355a51d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lineNumberBackgroundId</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a452d8416080619c9b4984bc97e85a596ae61ab632da4a17cbbf39b5ca0c8d38eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lineNumberTextId</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a452d8416080619c9b4984bc97e85a596a09a47043a26cf39eb7f56e3f9596c8c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CodeEditorComponent</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a88a12161694167080d375325019b984a</anchor>
      <arglist>(CodeDocument &amp;document, CodeTokeniser *codeTokeniser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CodeEditorComponent</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>af36172ba8ba2275cbec5c365e1ef964c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CodeDocument &amp;</type>
      <name>getDocument</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>abfcc393868114fb38d970859fab4ad04</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadContent</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ad4c04d9757379b8205559c155f979ebd</anchor>
      <arglist>(const String &amp;newContent)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getCharWidth</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a592bd5f1cd779df278df5af660a17e13</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLineHeight</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a046f4031bd9d396e0e5f93f19c732aac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLinesOnScreen</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a5e0e2e440c0e05f5eb37aec7f5cc3ce7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLineOnScreen</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>aefb5a9e2729d0f20db537861d7f451b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumColumnsOnScreen</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a6dfa7f7cf2eabb1b58594bc37c640750</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CodeDocument::Position</type>
      <name>getCaretPos</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ad342ae37f8bf6093f46b2e9faccba948</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getCaretRectangle</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a731d74526cff4b12fb516255ae9a709d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveCaretTo</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a875d87419bd0dfc748b77257b14fc67a</anchor>
      <arglist>(const CodeDocument::Position &amp;newPos, bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getCharacterBounds</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a50ab6c77be869ef29afc004a64f55a32</anchor>
      <arglist>(const CodeDocument::Position &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>CodeDocument::Position</type>
      <name>getPositionAt</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a05dedcb7ec163913bc7f907949306c17</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineNumbersShown</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a3408b92d61eac5cab4d14badf4b866d7</anchor>
      <arglist>(bool shouldBeShown)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretLeft</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a632a51806070135fc19b2587d217f5db</anchor>
      <arglist>(bool moveInWholeWordSteps, bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretRight</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>abf7742e22a76538a728efb1037f18338</anchor>
      <arglist>(bool moveInWholeWordSteps, bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretUp</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>afb9d164bf55a9332feb3f9cfeac9344a</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretDown</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a9f8bfa47772c11e0b6a8802c83f7f33b</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scrollDown</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ab89db38f2bc6faa4e19358f5cc95df43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scrollUp</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ad91a3ad9bb309b40676eee994365f873</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pageUp</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a2f3d175b823eb0e3fed980aad52ca6b0</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pageDown</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>aa17e6e7ff54e046051f7183dfe5b8291</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretToTop</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a3daae1c3d07f768a16b7409fede6d3ae</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretToStartOfLine</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>aeb144ed9459372399cc5533a2793ff07</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretToEnd</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a2b5b1f3e5e767d03069153ff758a59be</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretToEndOfLine</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>aac7f4faab383c6cf1179081055aaea6f</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteBackwards</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ae867bf29668d137a9d4edb3632dd01c4</anchor>
      <arglist>(bool moveInWholeWordSteps)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteForwards</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a2fbd2473cca409c0faa16ad5d7493878</anchor>
      <arglist>(bool moveInWholeWordSteps)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteWhitespaceBackwardsToTabStop</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ac283e6cf9449007138c21a84f07eaf0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copyToClipboard</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a5402fb1564c7681df6c2f8e16e0d4a99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cutToClipboard</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ad5d2d2bdd8a8d6afa11f64472d1ab2db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pasteFromClipboard</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a27d07e635b848cebdca7dfe388245a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>undo</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>af9a84573dbbe88fe4c1cf0691e4246ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>redo</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>af21b33268573e1f76ef4edd07f8c9163</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>selectAll</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ae6e04934e2a725465dc7c60928650c3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselectAll</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a17ed61aa9155a012f96dd6ff5c7c6b1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToLine</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>aa334176d889fd98af33c7c8aa08f6ee2</anchor>
      <arglist>(int newFirstLineOnScreen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollBy</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a16136821d3e53e18175eceb1158b14c5</anchor>
      <arglist>(int deltaLines)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToColumn</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a0bfb4492d67572224018afebc02ee555</anchor>
      <arglist>(int newFirstColumnOnScreen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToKeepCaretOnScreen</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a2039755404663d74a9ff7164306a75a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertTextAtCaret</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a81419ae52c4ce4af175a4c9d330d584f</anchor>
      <arglist>(const String &amp;textToInsert)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertTabAtCaret</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a870a061b7ce31960f9c53b3214c25cf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>indentSelection</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a0989f9ae06b61b843b4c5be9c9ce1a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unindentSelection</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ad96b0eadd14eee69dbbc4a691918d803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; int &gt;</type>
      <name>getHighlightedRegion</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ad3b3054c274533d3517f9d8772c8a965</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHighlightedRegion</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ac1f57ebd5104fac38f599a4ebbabe04a</anchor>
      <arglist>(const Range&lt; int &gt; &amp;newRange)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextInRange</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a50a1ddcc0312b86c43a075f3c8ba184d</anchor>
      <arglist>(const Range&lt; int &gt; &amp;range) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabSize</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a8ceedaaa27d8da25da6a8941d4a2db4e</anchor>
      <arglist>(int numSpacesPerTab, bool insertSpacesInsteadOfTabCharacters)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTabSize</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ac61310345a03af1dbb4b2c57d05a391b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areSpacesInsertedForTabs</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a79befaff281e3c097f5586889ec7014c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a9804e73700fc3d18c178d7138510f32d</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <type>const Font &amp;</type>
      <name>getFont</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a23600a4b29aa908c5e9d19a39a3f1c99</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColourScheme</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a4faca1aad5f908a0e35a71ca25e784b1</anchor>
      <arglist>(const ColourScheme &amp;scheme)</arglist>
    </member>
    <member kind="function">
      <type>const ColourScheme &amp;</type>
      <name>getColourScheme</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a29d1b0b3ae5ebaa7a46bac9d912ec220</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getColourForTokenType</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a4eaf749ef56d7e73aa829d8abf41b49a</anchor>
      <arglist>(const int tokenType) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollbarThickness</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a75ac5d9c886a72d925d62417d1171c65</anchor>
      <arglist>(int thickness)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getScrollbarThickness</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ade6e0f9d0aabef8392e2bb9b41b64e92</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReturnKey</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ae9512581845c99d157e793af6db9e08f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTabKey</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a7efe69631b0e73a50d42c117fa35c7b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEscapeKey</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a873ae3e9eb99f551754adc85ae738acb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPopupMenuItems</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ad53b2fb7fb3f1af076fc280d30df0785</anchor>
      <arglist>(PopupMenu &amp;menuToAddTo, const MouseEvent *mouseClickEvent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>performPopupMenuAction</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a8472c804d4666a0c1988362895a47f22</anchor>
      <arglist>(int menuItemID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a72992760cb3666b61a54ad85ae78d2a6</anchor>
      <arglist>(Graphics &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>aa74c48e652e498b6b889b90a6ecf9c89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>aafb2585d224d04a6299546eb7496ed74</anchor>
      <arglist>(const KeyPress &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>abb729a23459459f38b568304d5dfa7be</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a4bbe997c399f20916e128cc22353438d</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a22b51f31ae25fdab38e9a3d3a1acfa7e</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDoubleClick</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a179e23dd0061ef4cb4076f335b5e4ea3</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>afbe7a92f8c33b0a6d9905688831b7aab</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>focusGained</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a5efe269e3dd97cc615bc395d5f1bf9d2</anchor>
      <arglist>(FocusChangeType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>focusLost</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a57e63827ef9db2f4021a17b66452b72f</anchor>
      <arglist>(FocusChangeType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextInputActive</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a266e95c35849726666a70242556f9222</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemporaryUnderlining</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a8b2b35a1abddc3b6b7a84ef6e930fea0</anchor>
      <arglist>(const Array&lt; Range&lt; int &gt; &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CodeEditorComponent::ColourScheme</name>
    <filename>structCodeEditorComponent_1_1ColourScheme.html</filename>
    <class kind="struct">CodeEditorComponent::ColourScheme::TokenType</class>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structCodeEditorComponent_1_1ColourScheme.html</anchorfile>
      <anchor>aeeca83f006d48500bc9f8d77390efd37</anchor>
      <arglist>(const String &amp;name, const Colour &amp;colour)</arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; TokenType &gt;</type>
      <name>types</name>
      <anchorfile>structCodeEditorComponent_1_1ColourScheme.html</anchorfile>
      <anchor>ab62bd258568a2060a3c7c61364af27fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CodeEditorComponent::ColourScheme::TokenType</name>
    <filename>structCodeEditorComponent_1_1ColourScheme_1_1TokenType.html</filename>
    <member kind="variable">
      <type>String</type>
      <name>name</name>
      <anchorfile>structCodeEditorComponent_1_1ColourScheme_1_1TokenType.html</anchorfile>
      <anchor>ac12c92870f85aa19da82f6ae2e75ea6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Colour</type>
      <name>colour</name>
      <anchorfile>structCodeEditorComponent_1_1ColourScheme_1_1TokenType.html</anchorfile>
      <anchor>ad64a0ec08892eba127e52ae798813780</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CodeEditorComponent::State</name>
    <filename>structCodeEditorComponent_1_1State.html</filename>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>structCodeEditorComponent_1_1State.html</anchorfile>
      <anchor>ad885782ed8f60ee21eecb8c72aa11cfc</anchor>
      <arglist>(const CodeEditorComponent &amp;editor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>structCodeEditorComponent_1_1State.html</anchorfile>
      <anchor>a23abe2809ec64addd39a3047031adbc5</anchor>
      <arglist>(const String &amp;stringifiedVersion)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>structCodeEditorComponent_1_1State.html</anchorfile>
      <anchor>a55278c03cc486504c3980ff5d5ca2c63</anchor>
      <arglist>(const State &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreState</name>
      <anchorfile>structCodeEditorComponent_1_1State.html</anchorfile>
      <anchor>af0b74cda0c04304ff3114370a5ecf539</anchor>
      <arglist>(CodeEditorComponent &amp;editor) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>structCodeEditorComponent_1_1State.html</anchorfile>
      <anchor>a7332657530e408b765e159048a4b164b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeTokeniser</name>
    <filename>classCodeTokeniser.html</filename>
    <member kind="function">
      <type></type>
      <name>CodeTokeniser</name>
      <anchorfile>classCodeTokeniser.html</anchorfile>
      <anchor>a03586fac70e7e14fdd091e87497112bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CodeTokeniser</name>
      <anchorfile>classCodeTokeniser.html</anchorfile>
      <anchor>ac0509831c5e621abc5d1e8cc792f563d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>readNextToken</name>
      <anchorfile>classCodeTokeniser.html</anchorfile>
      <anchor>aeb723b767eed0ce44ae995c99ebc1c2f</anchor>
      <arglist>(CodeDocument::Iterator &amp;source)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CodeEditorComponent::ColourScheme</type>
      <name>getDefaultColourScheme</name>
      <anchorfile>classCodeTokeniser.html</anchorfile>
      <anchor>a240c3d9ca2a5e7f4da5d895143b52b78</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Colour</name>
    <filename>classColour.html</filename>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>aa009fc40e04a728a6ed8c8ef3bd4de8b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>ab36014ff4d156a80d4092480a3c9acad</anchor>
      <arglist>(const Colour &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>aa85da4a12766e70d809a3331945daa86</anchor>
      <arglist>(uint32 argb) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>ac67a899c0ce2d8b8e45436c1b51647c5</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a9af7bfa12d5149f917b0c2852022ef84</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue, uint8 alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>acfdcf34d0d45bc43531d60f1f4f03c71</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue, float alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a55e06082b4daee5e42a8647bccd514e6</anchor>
      <arglist>(float hue, float saturation, float brightness, uint8 alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>af84197c2cc0f45f4dffb253075346f2a</anchor>
      <arglist>(float hue, float saturation, float brightness, float alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a90c3026fa2ac4380844686720caa3f48</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour &amp;</type>
      <name>operator=</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a306f2803d0af244bd446feeb4b1c2067</anchor>
      <arglist>(const Colour &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a80b0a8ecec773ec3ce0cb6956460ffa2</anchor>
      <arglist>(const Colour &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a243e67f935798a277d4729e91f1d3593</anchor>
      <arglist>(const Colour &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getRed</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a05872730d5a284f07c4bfb8dd81db79a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getGreen</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a1c02651acff9d94975fb337114eb5d97</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getBlue</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a487ce0a8e467fdceb45fd851317ae496</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloatRed</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>ad5dfb34a664a5900fb554c993310caeb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloatGreen</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a6a8ae0289d06af2e6552bec965da515d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloatBlue</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>ab6f50dfc4850d0970c8ac2334e8b96bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const PixelARGB</type>
      <name>getPixelARGB</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>adf6de35bcbcae267c1f34791f52415a6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getARGB</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a11798d929e8c7e8f57efc5ad588f1464</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getAlpha</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a5550ecfb401fd08e87761b2ad79d6c9c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloatAlpha</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a340325739e15cdb61995258ee9fbe291</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpaque</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a0ea77f44712e52ad17b313b305650ec0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparent</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a30c68aad96d0a126d68b410089ae9993</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withAlpha</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a0cd650ce4ce07bd594f3abb0c3fec5e6</anchor>
      <arglist>(uint8 newAlpha) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withAlpha</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a9d38dac3c093152c0c465116e99f2f93</anchor>
      <arglist>(float newAlpha) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withMultipliedAlpha</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>ab7b9e09718eab166f4f7ebd5202163a4</anchor>
      <arglist>(float alphaMultiplier) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>overlaidWith</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a4c16c6066f5956da1c036c848cf16113</anchor>
      <arglist>(const Colour &amp;foregroundColour) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>interpolatedWith</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a68e8ace8996beeb4b8656ee5f5c9fe6e</anchor>
      <arglist>(const Colour &amp;other, float proportionOfOther) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getHue</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>adbc8c5118f647a77780fec0187d6b499</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getSaturation</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a2d6cf1e67613d761dc699eb10281344a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getBrightness</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>aeff939e673b49a4ea4a22c607d851e4d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHSB</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a8f59eb28e10446aefd7b7b504641195d</anchor>
      <arglist>(float &amp;hue, float &amp;saturation, float &amp;brightness) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withHue</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a8006b38ceee7d4259ed74af40a1affc6</anchor>
      <arglist>(float newHue) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withSaturation</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a51801c014c2abe3fe87ee59604bdb993</anchor>
      <arglist>(float newSaturation) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withBrightness</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a3854dde3b298ff71d7c1a5b93393ca29</anchor>
      <arglist>(float newBrightness) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withRotatedHue</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a8708ccf6e53671d1b26c6b8682950fd7</anchor>
      <arglist>(float amountToRotate) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withMultipliedSaturation</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a2f7f499a42a9f69d9b9956957fc6e288</anchor>
      <arglist>(float multiplier) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withMultipliedBrightness</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a807b51f53791e9cac5bcc3786d4398eb</anchor>
      <arglist>(float amount) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>brighter</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a614c7699a1b47dcf324106d548238bac</anchor>
      <arglist>(float amountBrighter=0.4f) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>darker</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a9910d9b8385825a87ea0d62d96115872</anchor>
      <arglist>(float amountDarker=0.4f) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>contrasting</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a50e8a45cda60f6853cb74ed1ff1fb7d7</anchor>
      <arglist>(float amount=1.0f) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>contrasting</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>ab16f40fd5c82c7ad9ff6df8ffe71ffc4</anchor>
      <arglist>(const Colour &amp;targetColour, float minLuminosityDiff) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a76b64c58ab48c2655c5632eb3e17d269</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toDisplayString</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>af67d6e061dcf0429339fe6b8b999ece6</anchor>
      <arglist>(bool includeAlphaValue) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colour</type>
      <name>fromRGB</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a8229c3afbbab454c718ee2b08b56df8c</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colour</type>
      <name>fromRGBA</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a0611ddee8a4c8414645d6975f290a750</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue, uint8 alpha) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colour</type>
      <name>fromFloatRGBA</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a3992d5ea9bdaf0471bd6caa0595b0185</anchor>
      <arglist>(float red, float green, float blue, float alpha) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colour</type>
      <name>fromHSV</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a34cee4195baff72c95a9c99148acf6c2</anchor>
      <arglist>(float hue, float saturation, float brightness, float alpha) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colour</type>
      <name>contrasting</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a20014d32c528b4eeaaacf6c36973a845</anchor>
      <arglist>(const Colour &amp;colour1, const Colour &amp;colour2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colour</type>
      <name>greyLevel</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>aa471422198e711e4d05aa1a90b160301</anchor>
      <arglist>(float brightness) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colour</type>
      <name>fromString</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a60d3298bbaebc4eee790876ed99aed5c</anchor>
      <arglist>(const String &amp;encodedColourString)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ColourGradient</name>
    <filename>classColourGradient.html</filename>
    <member kind="function">
      <type></type>
      <name>ColourGradient</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a8d8bf4b464aba25b11d0a6231df95b37</anchor>
      <arglist>(const Colour &amp;colour1, float x1, float y1, const Colour &amp;colour2, float x2, float y2, bool isRadial)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColourGradient</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a73556e9dd8b02b0d10e4f5ec9e0edec1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ColourGradient</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a0ab7aff1c3f8b6faf82bebf3ff9b4a5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearColours</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a634055607de82695189730cf409e3ecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addColour</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>ac0f2cdd96990eb2116aceeeb93aefd7d</anchor>
      <arglist>(double proportionAlongGradient, const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeColour</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a55bbee0ea470af294d36d19256e7d419</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyOpacity</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a7c5cef5beaeca40e429f5a3b661983cb</anchor>
      <arglist>(float multiplier) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumColours</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a5520e46c4cee46a10e4c4f63e3cb3e46</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getColourPosition</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>ab43972e13c701166d7cd268251ddbe67</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getColour</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a9c9bbbf99f789034a7f527a381389042</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a0106002d071a82de56028c43559710ce</anchor>
      <arglist>(int index, const Colour &amp;newColour) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getColourAtPosition</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a679196f0e731d1306ca484909a6fccdb</anchor>
      <arglist>(double position) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>createLookupTable</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a6670038ecde1f98034ae4231c30d9298</anchor>
      <arglist>(const AffineTransform &amp;transform, HeapBlock&lt; PixelARGB &gt; &amp;resultLookupTable) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createLookupTable</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a95b9ca19c7d38e65b9525b1fa05d20ed</anchor>
      <arglist>(PixelARGB *resultLookupTable, int numEntries) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpaque</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>ab2aa475450033278b052126609416303</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvisible</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>af335e4b881ef05022440d15a16f681da</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a2f921a187b0b62a64547194ba9fc1c9a</anchor>
      <arglist>(const ColourGradient &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a66c25183b4380bc3fa022418b7e04eb9</anchor>
      <arglist>(const ColourGradient &amp;other) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Point&lt; float &gt;</type>
      <name>point1</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>ac016d8472f6ce47c16d1df1e49c39dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point&lt; float &gt;</type>
      <name>point2</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a218351e8768cb2f956d2186d85710787</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isRadial</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a42c5382b7e7bda2b7efdb7b1a9258a44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Colours</name>
    <filename>classColours.html</filename>
    <member kind="function" static="yes">
      <type>static JUCE_API Colour</type>
      <name>findColourForName</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a758b0d011e73b88d1ac7ea00115ed9b8</anchor>
      <arglist>(const String &amp;colourName, const Colour &amp;defaultColour)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>transparentBlack</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a0ce54d7a6cbbce207c29165102d3a35f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>transparentWhite</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a9188c880171c8f146d40801c304c25b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>black</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aad3910013bf00a80305c082284cd5ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>white</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a9e57055bbdf8261e776d2ea8bb44514a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>blue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a6a834cffeaa15537e4781d8d24968a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>grey</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a631686f2c072d2bf0988f418dea3c27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>green</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a9a561532a8aa26019e40aa0460a40646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>red</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a5056e7857f2bc211569dfc89512244dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>yellow</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a2a39e71272c998b9244bd633d0c80a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>aliceblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aa90d486409e9c3634ec3f9abbaeb14d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>antiquewhite</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a2b7b4df4c8de5448bbb9b0e675d5ba71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>aqua</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a8e8c52db61e74dde6972c2f9c727796f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>aquamarine</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aa16a1a5bd7d1e56f3d36ce7bf7706cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>azure</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a5171f883b75e70b30df3b3b1746a8521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>beige</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a3dfd5f795dbfe57bd3d2b856455b68ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>bisque</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ae6dbea8a5a7948d1b7e9189dce936e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>blanchedalmond</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ade76144d43cca657dac89e21b9a4ff43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>blueviolet</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a1720311a325df81523fac5513a1253a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>brown</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a4c9ecea4fcd6707c997848245cdb1aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>burlywood</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a44803d0e7de49815d43c88d9b6042718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>cadetblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>af5bca16acd0235fa3c63859465d53f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>chartreuse</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aadcaa70cc7028fee7c6dba0a04926b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>chocolate</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a0c018189a4e1c0810a8838abb1763135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>coral</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a194cea1670d8b5588dc0acb40c7e93d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>cornflowerblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a4186f54cc951c1482c317b8729eb47a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>cornsilk</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a21bbe016b258787d6754d6227efa3c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>crimson</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>abd804b3fa30e3aea3908bfaef84ff7ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>cyan</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a0f35bbd00d593e18a4e980100e77373c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a444aff0fcfa17bb58a4e5fbc55fdd2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkcyan</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ae05956920f811ce4b5747ed19b219bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkgoldenrod</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a3684379c9ead0aafa8e35640c21b1e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkgrey</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a69d1600ff4246b36704d9cf972575bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkgreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ad2cc4c51c26edb7697352b22ecc090cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkkhaki</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a054e8a1bb8b99049217e9e8c78b6a1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkmagenta</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>afb2749e7f077c0424a3f9ee45093a9d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkolivegreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>acd779b0d1d755516274066e96ffa3f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkorange</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a4e47895b9516b78a951233d176553ada</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkorchid</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>adb030640ac52d88eac194db4e3221107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkred</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a708ef7df00517dda5693ac3576f300e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darksalmon</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>abd3a046bb36d67f85a6dc9b36d9ddc69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkseagreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a9bbe7f34e6ca7dc1f1bf28c47aed4101</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkslateblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>acf7161f16736b24346901341aa4e2132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkslategrey</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a5d110e28508d1b6b94d1c6a2ca2ce0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkturquoise</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a3cab3c29a15b8f727b4915512c7f0c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkviolet</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a157085bc9d4d0bc75966b238b51a7ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>deeppink</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a28f6cc1ccf53cef009f33f982100453f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>deepskyblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ae7932af011b21184ce06f33c30396d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>dimgrey</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a737012c7670ba25ccc7bee5ba96c3d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>dodgerblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a1a07cae34389d93d4b3817a14ef6efda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>firebrick</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a42927144796d42794fb69b30dce33e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>floralwhite</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a7b14b831624be80b4520225559ba5253</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>forestgreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a34c336f65b06cb988f89bddc14a5041e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>fuchsia</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a612e521b7168865f48fc7d1612658a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>gainsboro</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aafd6fddf3e1dc29dadc28574d814b341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>gold</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>afa34ba9e11dffb794fb740f4e57da7cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>goldenrod</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a7b4ffbc83bda6d20b537415f49327ce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>greenyellow</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a9d690d0eb0194caa2c91dfba4afbff4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>honeydew</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a5f2fec9693dfbde24317fa3fe3d29528</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>hotpink</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a7f61d3865bb38cd0eecdc7c46ae0e603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>indianred</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a5a356968d2d4f49b369afa56c0ec3f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>indigo</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a087ca459fcd267cdda383c5bf5ab0f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>ivory</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a97ea5f64838c6c2d1301c32108e830d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>khaki</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a3dbd6496fffe6448949acef248ddb3f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lavender</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a42bdd3828e3e453f1aacd8e129d7ba4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lavenderblush</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a189b1d3e8c5a8f324de759efc8325496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lemonchiffon</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aac8ef45b16855e5990afa7efca9a19cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a7c6d7f45d8e84964320b3c510b15ac29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightcoral</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ac7ec898bf0d0e640c2272479e4e83262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightcyan</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a126f9d070fa806c9159a7df2fa0b29c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightgoldenrodyellow</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aa211fa75f0d31dd157551a340df3035f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightgreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a0b5d566aeaf7d6ee3a6decb9766eb984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightgrey</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a1fa2b00bb140b113d57b6de66c0c8e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightpink</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a8067259612bf052798aa6a9f4ac562db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightsalmon</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aa994fb73c8ea9b95188fbf9fee1ad6b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightseagreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a31d871ea1084f5e497c01e276dd251cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightskyblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a088bec932f10162da5fd40c3e407884c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightslategrey</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a86dd7443cbd2e6f1f68b489e284980e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightsteelblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a7cb8ffd18a182fa76df45b0888af429b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightyellow</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a8614458932a2ff1907db0c672a74c1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lime</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aaf9a5609e0358dec5bf3d424bf6961d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>limegreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a864d371bf2a2f6aa17f08c34e30fa750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>linen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ae78b2b6dd2b4f69df9653603310ebf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>magenta</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a9a33de3ccb10690341256154909b390e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>maroon</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a4790622961dd6a1eff7179d89cc78617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumaquamarine</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a059c8c5ab845ec21bba2a86cd8240fc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a50c8a8350bbc20cc32167ab8719a68a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumorchid</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>afb4edaddffe337e9b8a98a3945c1b0f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumpurple</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ad7b9364df25c2a9cab57edf5754c1700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumseagreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a22521dd30cf5cae36214214e1f5e6a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumslateblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a3714678ce4c2fc1d82258a3ac8dc1c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumspringgreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a1eed924e1912712c790ec6e9733f30e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumturquoise</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a108a3b570a3e24157b157445502e0c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumvioletred</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aca989bc73fc042848610a8d841a817cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>midnightblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ae2b84b4de769da6c75cc947dcf8a066a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mintcream</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ae73a01a9deca54c8f004320a2d24edfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mistyrose</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a6f6db5e9de7a3d438ebe01a6a6c28baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>navajowhite</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a3aae0d537d9c4103f0be6e84443bae6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>navy</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a2f4e6cbbf218f698b25a8e08c787068f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>oldlace</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a8854bc208ff4c18d1359d48061801eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>olive</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>afa863de7d2e3c645092e981ef4b47349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>olivedrab</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a470482f79ccbabc1cfe7c44e4123acfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>orange</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a8c31c34f70dbdc0cad0f7cddf6cdb59a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>orangered</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a9a18c3a1066dd40816a1847450b7df1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>orchid</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a713c49555dcbf132b3f147f4a66e2cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>palegoldenrod</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a3bbc454c6b84c80fb0d664cfb2b01657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>palegreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a6518cb2353fd89ad7d463ef6675f30c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>paleturquoise</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a2b17126a05b24d3e936527e260cd9f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>palevioletred</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aff1ccf8323d8231e42e1342a7d7b293a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>papayawhip</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a8b6fb5bd196ba71f78c2d0a17c712783</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>peachpuff</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aa83a3ec486288727ffa82d9e8e4a82b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>peru</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a8417b7053caaf567a98eb61eccf57838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>pink</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aa959194b957e4113dcdc9ec488464229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>plum</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ac02c6bea8fac05b5c050a3ec6b4fd924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>powderblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aa913febd5348f64f92af7c4dac0b667c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>purple</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ae3a4c80eb100c23650cec3d19320b40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>rosybrown</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ac80422785f2552e8738a6b450f335dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>royalblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a2f85b97be33e07c1ca9a0187c4883df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>saddlebrown</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a753a5e165485d3bb8e27db7296627a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>salmon</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>af378ac76e1537fce6687df4ba4cdf02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>sandybrown</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aeaae32c502a189cef0bfbbc1251cdb1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>seagreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>adc17fb0b93d2db209de3e4f54857f2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>seashell</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a59caf9dbbe04dd428b7253273ec14ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>sienna</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aef8c3caf18a816ecc8180ca9d639ab3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>silver</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ac171c2c4d749ed079e56de4fe35ba2a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>skyblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a1c4ad4071850e2f41643f5754052769b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>slateblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>acfce5d955cbea8e623306c40608e4157</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>slategrey</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a6be50813f9d395a79a006cad9164f2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>snow</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a526bf1d183bff07c8984d7221cfd33ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>springgreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a3e179fc221c9922880646454e451562b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>steelblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a5b38585d24f85fd84b1aea940d0970db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>tan</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ae8816a5fc45532eff9ba5884de8902f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>teal</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a8b36ca8736b9a5f54d04687b702d2407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>thistle</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ab84edf5bce8e53629326721524ce3b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>tomato</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a52d1f22f0d92d67cdb05c0d083dc109a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>turquoise</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a18ee88829e56e1e141d0291d0c540b1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>violet</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a47d1f14979982a28936c5ec4f90e82aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>wheat</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ad1fd92baa1ca57d2e51995df721bb326</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>whitesmoke</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a0ef54946314ce5243c7cc6aa7d04fbb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>yellowgreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ad83bd255e0db333a7e66f23ab02eb492</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ColourSelector</name>
    <filename>classColourSelector.html</filename>
    <base>Component</base>
    <base>ChangeBroadcaster</base>
    <base protection="protected">Slider::Listener</base>
    <member kind="enumeration">
      <name>ColourSelectorOptions</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a42bcef80614375bb812096797d7439f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>showAlphaChannel</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a42bcef80614375bb812096797d7439f4a532b65a28bec85b05e7a1af509d537b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>showColourAtTop</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a42bcef80614375bb812096797d7439f4ad6696687d1305adef49791cb79f44ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>showSliders</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a42bcef80614375bb812096797d7439f4acb7837c2bed5ec3fe11c19408b9d8f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>showColourspace</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a42bcef80614375bb812096797d7439f4ab4838306154c4cb269920a01c2a6495b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a65fa6c43362eb075049881086dc3ffca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a65fa6c43362eb075049881086dc3ffcaa8b8cebff8127c562a7253f04c06fc521</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>labelTextColourId</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a65fa6c43362eb075049881086dc3ffcaaaa24cca7ebcab0317445ff12196e0362</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColourSelector</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a0860f187f7d79b1ef3e7698cfa185b87</anchor>
      <arglist>(int sectionsToShow=(showAlphaChannel|showColourAtTop|showSliders|showColourspace), int edgeGap=4, int gapAroundColourSpaceComponent=7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ColourSelector</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>ab1ea0383b709b67127afd17c8b912df3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCurrentColour</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a17a850280d960de60704a1df2d6b608c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentColour</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>af0d0dddde1bd3f4cef02da005e8a62c6</anchor>
      <arglist>(const Colour &amp;newColour)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumSwatches</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a66475288c0a7b9325e73af07421490db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Colour</type>
      <name>getSwatchColour</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a095caf66bb8711f7c971c113cffc701b</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSwatchColour</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a6004e7dd347d157a9f80b4d79207f526</anchor>
      <arglist>(int index, const Colour &amp;newColour) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComboBox</name>
    <filename>classComboBox.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>Label::Listener</base>
    <base>Value::Listener</base>
    <base protection="private">AsyncUpdater</base>
    <class kind="struct">ComboBox::Ids</class>
    <class kind="class">ComboBox::Listener</class>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa2eff88125f77f8e278374e716202e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa2eff88125f77f8e278374e716202e6ea6273f60ffa0214d402ebca64c7a5db6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textColourId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa2eff88125f77f8e278374e716202e6ea9dadb9138921557c1f5cb21f6b9ce861</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>outlineColourId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa2eff88125f77f8e278374e716202e6ea647eb96fb5883a2fa7807c53daeb9eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>buttonColourId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa2eff88125f77f8e278374e716202e6ea7266326d0ef0fe7fe4df8519ce695022</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>arrowColourId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa2eff88125f77f8e278374e716202e6ea784b5c333839f9cfc0b6e890f1c2ef66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComboBox</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a79ae4d20279abf3d0af72d55c6e384d8</anchor>
      <arglist>(const String &amp;componentName=String::empty)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ComboBox</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ad8cf2a05b0649c54dd9dd9b6577112a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEditableText</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>af11edea3da851e2e0cb231f2cffa57aa</anchor>
      <arglist>(bool isEditable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextEditable</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a782bd99dc000c2ec442c3fb8ebd969e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJustificationType</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a7cdd4e03906d87482127980a682c49ad</anchor>
      <arglist>(const Justification &amp;justification)</arglist>
    </member>
    <member kind="function">
      <type>Justification</type>
      <name>getJustificationType</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>adf5b2bad0b6e879295259d18866f3541</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a37491da45f1cbb74e47f145e5664d8bf</anchor>
      <arglist>(const String &amp;newItemText, int newItemId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItemList</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a220fdfd4c252990583bfde360e0b2431</anchor>
      <arglist>(const StringArray &amp;items, int firstItemIdOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSeparator</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>af53bb419bb136f11f6f0342702d8d902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSectionHeading</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ad376928ef517800c42628399e1a80990</anchor>
      <arglist>(const String &amp;headingName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setItemEnabled</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ad2a408f7f2a4318f66b7a6ae566dfab2</anchor>
      <arglist>(int itemId, bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isItemEnabled</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a3eb9bb4e4cf8a650a21ad23e7694ef13</anchor>
      <arglist>(int itemId) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeItemText</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a760da2c5b9d0113fb040666cc92ccace</anchor>
      <arglist>(int itemId, const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a912a207572dd7dd68314041999345d48</anchor>
      <arglist>(bool dontSendChangeMessage=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumItems</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a2e889e4a22cf97bfea2ed0bb26b62922</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getItemText</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ab84f9beba948c52d0954f9d3b5a2a468</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getItemId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a667151e2d4add6c825fcda153e0668cb</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfItemId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aeac0efaa026d2b6372b6abff93366466</anchor>
      <arglist>(int itemId) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSelectedId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ab6232527104faad901ba0fa1380cd8ec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getSelectedIdAsValue</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a6b2df5f3b5615e5b0f5af969f44c2e19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a9bde594c2f233813ac0ffd881f9ad00d</anchor>
      <arglist>(int newItemId, bool dontSendChangeMessage=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSelectedItemIndex</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a832bec23316a888a0739a7fe2584b254</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedItemIndex</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a75623842f7dba08749074e3665f807f1</anchor>
      <arglist>(int newItemIndex, bool dontSendChangeMessage=false)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getText</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a49371a2fbc471f2f067cd1bad53d91e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a6d0aa74f0160c082e753216e5e81974d</anchor>
      <arglist>(const String &amp;newText, bool dontSendChangeMessage=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showEditor</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a4076d1c2a333f66e380e8614ea95000a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showPopup</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a2c56ce641656961804d6020b1cf22d1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a750af2fdf946a248d661fa4d2ca72e37</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a5cabafb0691a2ad0819343f0e2aa1ca5</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextWhenNothingSelected</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa06d9e5b0437bc1717c761e0b9df8be5</anchor>
      <arglist>(const String &amp;newMessage)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextWhenNothingSelected</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa35fe371e6b4da8d65cf28abbbb01d18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextWhenNoChoicesAvailable</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aac6093916748d66bb8e83373105c0e85</anchor>
      <arglist>(const String &amp;newMessage)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextWhenNoChoicesAvailable</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ada4598044ace79d63bb1ed529c3f7ac8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTooltip</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a7263a32f5aecc5c8235fe8c1829bf3ed</anchor>
      <arglist>(const String &amp;newTooltip)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ad4be3486938aebb90b0b107e2a16d32f</anchor>
      <arglist>(const ValueTree &amp;, ComponentBuilder &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>labelTextChanged</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a35f467619dc12110c32fb90f3e7b76ab</anchor>
      <arglist>(Label *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a9a028e1b4b7b12a4a0f4bd23aa70f820</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a28a433a8ca53b77f62dc78827de6454e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>focusGained</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>af1960aba8722335e59f9cd8474c608ad</anchor>
      <arglist>(Component::FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>focusLost</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>acb069ee685e14066553ccc664fb82476</anchor>
      <arglist>(Component::FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleAsyncUpdate</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aef03be73c77fbf8ab124069e5b1eea29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTooltip</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aad07717383f3ff623281b0d42078f13a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a4c198646757835ff0aafd164677924ed</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aae36cf377d6049026484cc054522592f</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a4383c5323875b1cefca69add629a0ce7</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a7f9f0b0d925524d54f1365fb0264a25e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a2fe015cfca2fb1248475512607e8e2a9</anchor>
      <arglist>(Graphics &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aea60650357ca3c2ab29cda5b72441f3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyStateChanged</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a370f087c80517c4d6dc00af2c0958db6</anchor>
      <arglist>(bool isKeyDown)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a5bb86e17318c9afbe687603b7727d158</anchor>
      <arglist>(const KeyPress &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>valueChanged</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a76c62167633c14047c0f60f1ac8dd310</anchor>
      <arglist>(Value &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ComboBox::Ids</name>
    <filename>structComboBox_1_1Ids.html</filename>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>tagType</name>
      <anchorfile>structComboBox_1_1Ids.html</anchorfile>
      <anchor>a14b24e18d54d442b24fadf0accc204d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>items</name>
      <anchorfile>structComboBox_1_1Ids.html</anchorfile>
      <anchor>a43c9313232e8b55cb29e0b96be57f837</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>editable</name>
      <anchorfile>structComboBox_1_1Ids.html</anchorfile>
      <anchor>a41f865535cb29a470ee49b506539cc11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>textJustification</name>
      <anchorfile>structComboBox_1_1Ids.html</anchorfile>
      <anchor>a8a472975e345f7a1b57acd27df314d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>unselectedText</name>
      <anchorfile>structComboBox_1_1Ids.html</anchorfile>
      <anchor>a70b129e37cdd17d5a662a9ff7e60e7d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>noItemsText</name>
      <anchorfile>structComboBox_1_1Ids.html</anchorfile>
      <anchor>a59e2f9b87b5ec4cdd8f3b96d9f354139</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComboBox::Listener</name>
    <filename>classComboBox_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classComboBox_1_1Listener.html</anchorfile>
      <anchor>aef7ca29a8e74043802db262a9b7adfed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>comboBoxChanged</name>
      <anchorfile>classComboBox_1_1Listener.html</anchorfile>
      <anchor>a9ed3676ad921acde0414966fc41f1000</anchor>
      <arglist>(ComboBox *comboBoxThatHasChanged)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Component</name>
    <filename>classComponent.html</filename>
    <base>MouseListener</base>
    <class kind="class">Component::BailOutChecker</class>
    <class kind="class">Component::Positioner</class>
    <class kind="class">Component::SafePointer</class>
    <member kind="enumeration">
      <name>FocusChangeType</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7fd775ea6b1190d5d694fdffa539dfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>focusChangedByMouseClick</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7fd775ea6b1190d5d694fdffa539dfaca350527c976c183a1543958e0698572df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>focusChangedByTabKey</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7fd775ea6b1190d5d694fdffa539dfaca1a14be78d7c4bdf7cdd9a08100bb6a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>focusChangedDirectly</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7fd775ea6b1190d5d694fdffa539dfacad71927268411a4afe7f75bf6034add04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Component</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a8775db6d1a2c1afc2e77cd3c8f39da6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Component</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a2e9aa4348314d981f05f67397ad2f872</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Component</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aa1c066ca71a5798ad08e93048eae295e</anchor>
      <arglist>(const String &amp;componentName)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9d410bec5641d596bb8dbcf95d8b46a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a64d1ad9a0f8f0d1757e62ac738b36b35</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getComponentID</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a93a0bfdc298b93992166b081b122665b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComponentID</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ac41c215031a087064add6d3a180abd1d</anchor>
      <arglist>(const String &amp;newID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVisible</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ac8483af6fe4dc3254e7176df0d8e9f7a</anchor>
      <arglist>(bool shouldBeVisible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7ffb3de137ac4028e430a445c62a2d01</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visibilityChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a3859d7aacb18fd51b2fc3e0c51680d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isShowing</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>acbbdd1274a2d0e9447e42c7ee7753dfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToDesktop</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad717da76012d971197fd8cf943f3e721</anchor>
      <arglist>(int windowStyleFlags, void *nativeWindowToAttachTo=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromDesktop</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a3eb22f7e39f71fdad3e84a8700807a82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnDesktop</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a854420c3141bb90e440af6c7bc1bd360</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ComponentPeer *</type>
      <name>getPeer</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af425f521cbdf82b13afb9f13ca0ced05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>userTriedToCloseWindow</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a543e70d5a3ff75cc3facb476f4cdb131</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>minimisationStateChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aafbf3cf52e606a66da16ffc85acdd383</anchor>
      <arglist>(bool isNowMinimised)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toFront</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ace6d99879585ba31a4212431d01d00f5</anchor>
      <arglist>(bool shouldAlsoGainFocus)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toBack</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ae9cd68d901dd4426b27c6c40f4759d4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toBehind</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a1b0cca8b9a9fea673aefc84a42602bcd</anchor>
      <arglist>(Component *other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlwaysOnTop</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9ec074c0a1a25014c235a5ebafdbaaf7</anchor>
      <arglist>(bool shouldStayOnTop)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAlwaysOnTop</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad3c16a8cd68a73f9765da3e48db86801</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getX</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a882733448ca364ba8f493c6301800572</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getY</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a62b2b824feafc399c8360876a43eb18d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWidth</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a146a947eb5d4b2e08f8e91b2e3f706c1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeight</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a42c61c2d914e55b2395f6a84cf8e8aa2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRight</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9f0b1e0ff5dfe85d0c4f611a93f2b78c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Point&lt; int &gt; &amp;</type>
      <name>getPosition</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7bb27e734f511576f8d0295a7dc4d7f9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBottom</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af8ace323af75859a134ae82ab589c9d7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Rectangle&lt; int &gt; &amp;</type>
      <name>getBounds</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad01eb84d8a989eb238bbf69aaf09e7ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getLocalBounds</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aecc40b8a244527fcb142213151b6d00d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getBoundsInParent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7bec78144c5f28eb78ce1550b1c58614</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVisibleArea</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aa37c12fd9df7c9ba83f70008726acb72</anchor>
      <arglist>(RectangleList &amp;result, bool includeSiblings) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getScreenX</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a0a6907c2907bab645de49c096c00fd50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getScreenY</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9d3bf0e97527b4fcdb6d0593b191c9d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getScreenPosition</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a27d728d223948282634429c3ad6f0a6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getScreenBounds</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af31d8d231a508755a6afaa2656eb66cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getLocalPoint</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a4796fb55d14afd2b10a2d43e06d53cea</anchor>
      <arglist>(const Component *sourceComponent, const Point&lt; int &gt; &amp;pointRelativeToSourceComponent) const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getLocalArea</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad430b1614d5cca921dc344641b584675</anchor>
      <arglist>(const Component *sourceComponent, const Rectangle&lt; int &gt; &amp;areaRelativeToSourceComponent) const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>localPointToGlobal</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a08a271abbc7c2cfb3c66a1cab1a715eb</anchor>
      <arglist>(const Point&lt; int &gt; &amp;localPoint) const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>localAreaToGlobal</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9ad906ec22da2091eed7b65b21dc4ee9</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;localArea) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTopLeftPosition</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a46f3b243e2ff2d000285c8642be7ea0a</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTopLeftPosition</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a1398c7c0b2734b057f3e61235acb9077</anchor>
      <arglist>(const Point&lt; int &gt; &amp;newTopLeftPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTopRightPosition</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a28d61a4aea9791ab0b4d3cc4bed17650</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af7e0443344448fcbbefc2b3dd985e43f</anchor>
      <arglist>(int newWidth, int newHeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a64cbeee83a441e20ed5e7acb600ae107</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aaddf6f72515109d53cb671d5292bea3f</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newBounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>afff8d34ac49e7303e60cd6cfcd68e8f6</anchor>
      <arglist>(const RelativeRectangle &amp;newBounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a821833808f451753df397802d9d6160a</anchor>
      <arglist>(const String &amp;newBoundsExpression)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsRelative</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a8752a76d1d0b2b27af1da1169ed5c534</anchor>
      <arglist>(float proportionalX, float proportionalY, float proportionalWidth, float proportionalHeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsInset</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a0bdbe4ff05b03ddde7d87be82d5b0d15</anchor>
      <arglist>(const BorderSize&lt; int &gt; &amp;borders)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsToFit</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a6567edeb944fb61372d6ddd039707997</anchor>
      <arglist>(int x, int y, int width, int height, const Justification &amp;justification, bool onlyReduceInSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCentrePosition</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ada48e2fac4a8bd49ee8fe567309e41b0</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCentreRelative</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad2d539dc4d5a43cf828e03ab46f0db58</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>centreWithSize</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>abb58dc5a1f89822e4a5dcae2a538a8a7</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a42d13229962acb1cdf4328c4a490ffef</anchor>
      <arglist>(const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>getTransform</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aff26a3fbb1469a6a8a8844daf8806060</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransformed</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a50a4de1bca6c487a8fa899f1b721e1d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>proportionOfWidth</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ab2def9de34b650c5384f6bc040daa6a5</anchor>
      <arglist>(float proportion) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>proportionOfHeight</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a5d5356b8ad166fa48273dd90980ab3aa</anchor>
      <arglist>(float proportion) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParentWidth</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9ac83033387393ae0f8b85d8fc8d6dcb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParentHeight</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a39186f5a14d80f75e279d40846221b16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getParentMonitorArea</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a1597e347c09716ce608257e4a3e08bdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChildComponents</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>afa33580cab86ac3b80c9c1f9d85ad81d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getChildComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9a86caea9a03be32d7a6b6dfbd09d09f</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexOfChildComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a00c1dcf8a0a926da17daef178ca63426</anchor>
      <arglist>(const Component *child) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>findChildWithID</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a4570dabf8089f3b70ea37e4c992ce204</anchor>
      <arglist>(const String &amp;componentID) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChildComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a3340a63ebd9f3a9df41bc0e8fbe3bf0c</anchor>
      <arglist>(Component *child, int zOrder=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAndMakeVisible</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a909c90277e8e95db68001a94e06b83bc</anchor>
      <arglist>(Component *child, int zOrder=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChildAndSetID</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a29a541ea49fafdb29fb17ebc4cddd584</anchor>
      <arglist>(Component *child, const String &amp;componentID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChildComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a221324c67c9fb048895b8730dbf1b642</anchor>
      <arglist>(Component *childToRemove)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>removeChildComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9f27c66bb660ca98e1713878db39bdfd</anchor>
      <arglist>(int childIndexToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllChildren</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a72ee4d44ce3b3954e8a00e5225201b6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAllChildren</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>abc8f8338a400c20d5e941ea3a1f67f7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getParentComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ac4d430194f6637607b1af8631d7166e7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TargetClass *</type>
      <name>findParentComponentOfClass</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a015b46a3de96f2de006437c04fec7378</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getTopLevelComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a64415a8c5911f94475b5c624598adfa8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParentOf</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a2fc08a04c79abc21d65c70855b792ab9</anchor>
      <arglist>(const Component *possibleChild) const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a83f298a05d7f26a6e50e45dd37eb6313</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>childrenChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a2bbc6da3479a1c3f6e711f4caf9edafb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hitTest</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a2da9631236e1cbf1b340454209a6c9e0</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterceptsMouseClicks</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ac9fdcb595c1878201a641de2e1159aec</anchor>
      <arglist>(bool allowClicksOnThisComponent, bool allowClicksOnChildComponents) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInterceptsMouseClicks</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a219f9c96e896dfbbe3fb967a57297f14</anchor>
      <arglist>(bool &amp;allowsClicksOnThisComponent, bool &amp;allowsClicksOnChildComponents) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7a0546b6b7d02e518985a7aefc34328a</anchor>
      <arglist>(const Point&lt; int &gt; &amp;localPoint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reallyContains</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a885b5316a36ac7123bf0b5fd3032ad28</anchor>
      <arglist>(const Point&lt; int &gt; &amp;localPoint, bool returnTrueIfWithinAChild)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getComponentAt</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a29245735a161cee86ee0df0ccde9512a</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getComponentAt</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af79544a2eac9483587fe98202af450ea</anchor>
      <arglist>(const Point&lt; int &gt; &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repaint</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af3ab3eabec93dd60faf983370f3a1206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repaint</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af2a079621367cdf3755d708b4dbbc820</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repaint</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a756adec76560d1ae66b1448814828531</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBufferedToImage</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af19bbc2186e3297ddd55c328e46c014b</anchor>
      <arglist>(bool shouldBeBuffered)</arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>createComponentSnapshot</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a8cfccf9f2598b6af0f5481e982049fa6</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;areaToGrab, bool clipImageToComponentBounds=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintEntireComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a2c960bd5ec5ac76d18e82b6883096714</anchor>
      <arglist>(Graphics &amp;context, bool ignoreAlphaLevel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPaintingIsUnclipped</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>afd2216ecd5029923097d6baabab400ec</anchor>
      <arglist>(bool shouldPaintWithoutClipping) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComponentEffect</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a06800d0a55016e738c55078d82ef49fd</anchor>
      <arglist>(ImageEffectFilter *newEffect)</arglist>
    </member>
    <member kind="function">
      <type>ImageEffectFilter *</type>
      <name>getComponentEffect</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af92051347bc323176011c16f8a53bf4c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>LookAndFeel &amp;</type>
      <name>getLookAndFeel</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>adf9083590923e021b195985a562d458e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLookAndFeel</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a6f2c10cd9840844a5be16e5deeef6f50</anchor>
      <arglist>(LookAndFeel *newLookAndFeel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a74af5830b815f6f985768a5673d01cf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendLookAndFeelChange</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ac314d2449213d7942eca083addfcd097</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpaque</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7320d543cba40183c894474ab78798ea</anchor>
      <arglist>(bool shouldBeOpaque)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpaque</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a6ef077ace37bcd13d033305e8875d4e7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBroughtToFrontOnMouseClick</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a2e31d54832bfa8b916fef77c4d9eb649</anchor>
      <arglist>(bool shouldBeBroughtToFront) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBroughtToFrontOnMouseClick</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aa8f9bdf4bef08d89b75b173421fae668</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWantsKeyboardFocus</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a6a1f21a76b971d54870cb5c32c041055</anchor>
      <arglist>(bool wantsFocus) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getWantsKeyboardFocus</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af3618b8c0d0583705db9918f23784833</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseClickGrabsKeyboardFocus</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a5e27530ab343f52b524c1c3f1a1d98eb</anchor>
      <arglist>(bool shouldGrabFocus)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getMouseClickGrabsKeyboardFocus</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9efe458e504e68d52637f969900158b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grabKeyboardFocus</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a91886a0e276d27719fa8866a95306571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasKeyboardFocus</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af4f079e1c0e0140ac364561cbe458a20</anchor>
      <arglist>(bool trueIfChildIsFocused) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveKeyboardFocusToSibling</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a2be625dadff73d1ec003cb06749ba6d6</anchor>
      <arglist>(bool moveToNext)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KeyboardFocusTraverser *</type>
      <name>createFocusTraverser</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7826c4e247eb6a6901211741a3e1dca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getExplicitFocusOrder</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af86bf43fd37ca2592cf8b482cd65f901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExplicitFocusOrder</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>acea5b1758143ff5815fd13ae57f2172e</anchor>
      <arglist>(int newFocusOrderIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusContainer</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a35b455090a35a07ab832582a635425a3</anchor>
      <arglist>(bool shouldBeFocusContainer) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFocusContainer</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a31a41d721888e3ac78659e4815294ed1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a0e12726e34fdd284f036922597914bb3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a6f956f690d72256838146c7dfe99bc0e</anchor>
      <arglist>(bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enablementChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a8e5e39d3d7e2b8be4e78454ec4a5f584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a1b9329a87c71ed01319071e0fedac128</anchor>
      <arglist>(float newAlpha)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAlpha</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7a3ef8f2080e8310a7b4851d9e8298b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ab8c631fc3fb881ca94a9b7edcf58636f</anchor>
      <arglist>(const MouseCursor &amp;cursorType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MouseCursor</type>
      <name>getMouseCursor</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a712ed320619d48542de733c086f4fd3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMouseCursor</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a03057aba4ac79272f105e8839582309c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>paint</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7cf1862f4af5909ea72827898114a182</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>paintOverChildren</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aa15dc77c06b5a0a4192090b4a323f79c</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseMove</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a947aa82747bada13e2ce1629cc046702</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseEnter</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>afadc17a045c2a8440d0b7df24c501754</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseExit</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a0d03c818d74aac6c34f78ff49fcceabe</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseDown</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a26b61c6a353109dd3d445ef5d54a2238</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseDrag</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aa5543364d5fcf87e0db7f9aba3c0e26d</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseUp</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a6b5306e64f955194cbcff52b7e4b4fcb</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseDoubleClick</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a8d7c63f3509e6c4cef9e2e003c16d731</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a05cb3d0faaa97273799540b67d0929f3</anchor>
      <arglist>(const MouseEvent &amp;event, const MouseWheelDetails &amp;wheel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepaintsOnMouseActivity</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7845e402a21d2b86d8c4ec48bc7c93b1</anchor>
      <arglist>(bool shouldRepaint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMouseListener</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ae45db6bb7d7826eb7e936c21fec105ce</anchor>
      <arglist>(MouseListener *newListener, bool wantsEventsForAllNestedChildComponents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMouseListener</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a423c89ca5c8622712202c30cb7a5a69c</anchor>
      <arglist>(MouseListener *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addKeyListener</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a4ec1b609c39c54434f746cefffa6ce3f</anchor>
      <arglist>(KeyListener *newListener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeKeyListener</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a5287496e233768c197ad8d74484a85fc</anchor>
      <arglist>(KeyListener *listenerToRemove)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>keyPressed</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ab063a5c631854864da09106abec78a86</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>keyStateChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aeff4d2fdbae4d5974e43b62ab3c304f9</anchor>
      <arglist>(bool isKeyDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>modifierKeysChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a4145c1c28dd2ae42b19c9c3e0a6aba7b</anchor>
      <arglist>(const ModifierKeys &amp;modifiers)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>focusGained</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a408d41f1499a2ebdd4bbc8d4004c7727</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>focusLost</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a36456ea9d5a14172d6e96527ec1f59c8</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>focusOfChildComponentChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a67ef76b8080b9abb7efa0df358598a01</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMouseOver</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a23db151357ed4a783c224f210d036e63</anchor>
      <arglist>(bool includeChildren=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMouseButtonDown</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a0944e1751f32260afd5bd2a9fcd1a5b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMouseOverOrDragging</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a5cedb030a2bfae99dece95d8a10d0dcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getMouseXYRelative</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>afe14919a4a06747a9b7c98e2cff0ef3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resized</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad896183a68d71daf5816982d1fefd960</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moved</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a1b94f2816dc8bc20473620e0db0e8246</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>childBoundsChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a081b2618e5169d656167614bee91defe</anchor>
      <arglist>(Component *child)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parentSizeChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aefdce73a764c48363e82b22c32b0812e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>broughtToFront</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a4bf084bcf5b0e4398ee3a0007f803865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addComponentListener</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a51cb09159299964cef7b975185cf400d</anchor>
      <arglist>(ComponentListener *newListener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeComponentListener</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7a74ad0359e05321223f1d09bcfddddd</anchor>
      <arglist>(ComponentListener *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postCommandMessage</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a005628ba100dc23d179bff98bd419eb5</anchor>
      <arglist>(int commandId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommandMessage</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9ba6fa31d1397c7e90050b2cd4f2089b</anchor>
      <arglist>(int commandId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enterModalState</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a0e7be8c456a663615eb389ecd10b2c04</anchor>
      <arglist>(bool takeKeyboardFocus=true, ModalComponentManager::Callback *callback=nullptr, bool deleteWhenDismissed=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exitModalState</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a686e2440370ff4a97c7a7851907be650</anchor>
      <arglist>(int returnValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCurrentlyModal</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a92d58bf2eca02d409e9b095af066edf7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCurrentlyBlockedByAnotherModalComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad18ec802aa575cf016a7c62f12e0edf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canModalEventBeSentToComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>abec1d60cfacf16eab602dff06932fbca</anchor>
      <arglist>(const Component *targetComponent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>inputAttemptWhenModal</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a260e46fb72d4b3210bc46a658a21fbb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NamedValueSet &amp;</type>
      <name>getProperties</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a23985453622396b6037eb5ec38dbd398</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const NamedValueSet &amp;</type>
      <name>getProperties</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>adf32701df78ef2dd10793b11a979a696</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>findColour</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a5e4c30e25faebe1d0854f96623d6d890</anchor>
      <arglist>(int colourId, bool inheritFromParent=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>afab36809574d5a4d17f1b9da3d804a3b</anchor>
      <arglist>(int colourId, const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeColour</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7c3179a6a241477c590ea23ff99e867d</anchor>
      <arglist>(int colourId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isColourSpecified</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a499f4e75a4c8b7fcc2aded220ca68769</anchor>
      <arglist>(int colourId) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyAllExplicitColoursTo</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad359c5a74a8f05c37418d169beae95ce</anchor>
      <arglist>(Component &amp;target) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>colourChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>adfab11b32c622b327a823c6565f637f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MarkerList *</type>
      <name>getMarkers</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a2c2b7f738ccfcf541b72a6ce8283fce0</anchor>
      <arglist>(bool xAxis)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getWindowHandle</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a0d340d822e9a91fc665d73bbe1e91d72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Positioner *</type>
      <name>getPositioner</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a4fb6cbf8dc543319c42a37590e0d0bd8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositioner</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a27359d626e9ab896af71cd57c1ff0915</anchor>
      <arglist>(Positioner *newPositioner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCachedComponentImage</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9a19c5cf59573243d77a94bb3abea722</anchor>
      <arglist>(CachedComponentImage *newCachedImage)</arglist>
    </member>
    <member kind="function">
      <type>CachedComponentImage *</type>
      <name>getCachedComponentImage</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9338014ab407f6b41c14495ab2a7fc4d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component *JUCE_CALLTYPE</type>
      <name>getCurrentlyFocusedComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7030de7a58ec40e43ec902d6bb8aaf7a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>beginDragAutoRepeat</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a54a125231707956e740b295f2622787b</anchor>
      <arglist>(int millisecondsBetweenCallbacks)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>isMouseButtonDownAnywhere</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ac3184a52027ad9106185d594c522d9d0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int JUCE_CALLTYPE</type>
      <name>getNumCurrentlyModalComponents</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ae58129a62eda13ca8987072cd9c62359</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component *JUCE_CALLTYPE</type>
      <name>getCurrentlyModalComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af281d9bc711b70c43ae5891a35165cb3</anchor>
      <arglist>(int index=0) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Component::BailOutChecker</name>
    <filename>classComponent_1_1BailOutChecker.html</filename>
    <member kind="function">
      <type></type>
      <name>BailOutChecker</name>
      <anchorfile>classComponent_1_1BailOutChecker.html</anchorfile>
      <anchor>a81634845f2a6f4c10572038f57420fd6</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shouldBailOut</name>
      <anchorfile>classComponent_1_1BailOutChecker.html</anchorfile>
      <anchor>a2c09b014548960f6792f62f7b8ec50bd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Component::Positioner</name>
    <filename>classComponent_1_1Positioner.html</filename>
    <member kind="function">
      <type></type>
      <name>Positioner</name>
      <anchorfile>classComponent_1_1Positioner.html</anchorfile>
      <anchor>a5aca4975618f87c6f92d42eab4ca93bb</anchor>
      <arglist>(Component &amp;component) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Positioner</name>
      <anchorfile>classComponent_1_1Positioner.html</anchorfile>
      <anchor>a95313fb4c0288de5082e6aca3dbcbf11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Component &amp;</type>
      <name>getComponent</name>
      <anchorfile>classComponent_1_1Positioner.html</anchorfile>
      <anchor>aeeef98ad50aa4e6a5ca66b2a4cf011fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyNewBounds</name>
      <anchorfile>classComponent_1_1Positioner.html</anchorfile>
      <anchor>a3e88d32210f26978c182b4dfc376658f</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newBounds)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Component::SafePointer</name>
    <filename>classComponent_1_1SafePointer.html</filename>
    <templarg>ComponentType</templarg>
    <member kind="function">
      <type></type>
      <name>SafePointer</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>ad6a7f801bacd0a414469ca82db229488</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SafePointer</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a59adeff87298df1cff664b308d5143de</anchor>
      <arglist>(ComponentType *const component)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SafePointer</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a96bcb2f2303c429243030be224244f36</anchor>
      <arglist>(const SafePointer &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SafePointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a24d69c4ba84c89d69ed272f85b748989</anchor>
      <arglist>(const SafePointer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SafePointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>ab2c0a96de8f795edc4c390f98e597723</anchor>
      <arglist>(ComponentType *const newComponent)</arglist>
    </member>
    <member kind="function">
      <type>ComponentType *</type>
      <name>getComponent</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a46a3d55ceff890abeb7db2e1ce17cab4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ComponentType *</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a3a230def2f3e8c2695d45843ba248a79</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ComponentType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>ae2e22efbfb34148e0cddbea5d6c97402</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ComponentType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a7d9ae035538065773e2866dc0ec6e606</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAndZero</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a2da79cce74d3d7b0ab1a248fcb2ca8a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a4503da7852a9758c8efc840716125813</anchor>
      <arglist>(ComponentType *component) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a68f77044cc7808450e120e28beb07f34</anchor>
      <arglist>(ComponentType *component) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentAnimator</name>
    <filename>classComponentAnimator.html</filename>
    <base>ChangeBroadcaster</base>
    <base protection="private">Timer</base>
    <member kind="function">
      <type></type>
      <name>ComponentAnimator</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>a2252fed7a4a6de4df683912ef2786d4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ComponentAnimator</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>a03ba19fcba41474d165889cb8f04bd85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>animateComponent</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>ac4606415aa267cdb0be7e8f17abd8435</anchor>
      <arglist>(Component *component, const Rectangle&lt; int &gt; &amp;finalBounds, float finalAlpha, int animationDurationMilliseconds, bool useProxyComponent, double startSpeed, double endSpeed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fadeOut</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>ad89563171f4a80402380cf1c7873fe6e</anchor>
      <arglist>(Component *component, int millisecondsToTake)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fadeIn</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>a7ccf95ec264eb19e0b33833fbef80aaa</anchor>
      <arglist>(Component *component, int millisecondsToTake)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelAnimation</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>a7ded366b9b6dc3c6351b716c60e7f390</anchor>
      <arglist>(Component *component, bool moveComponentToItsFinalPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelAllAnimations</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>a1a6fab0501e0e4db7ad22a57780951e5</anchor>
      <arglist>(bool moveComponentsToTheirFinalPositions)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getComponentDestination</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>a8dc0196560be6463265493bf2f545ea3</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimating</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>a1de237b6e0ec05ede35683a7a24e6e7d</anchor>
      <arglist>(Component *component) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimating</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>a9372429cc9a6a3865dcc322488cebf6a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentBoundsConstrainer</name>
    <filename>classComponentBoundsConstrainer.html</filename>
    <member kind="function">
      <type></type>
      <name>ComponentBoundsConstrainer</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>af45eadfc4f8fd8a33578ea00f49a1c0e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ComponentBoundsConstrainer</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>ae4a71b7679b7a8a97365b4756f1be737</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumWidth</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a74e8916739dc8782adc0cca2eb95bef3</anchor>
      <arglist>(int minimumWidth) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinimumWidth</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a39e4ef743733614cd1cd2b2949e8d5f3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumWidth</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a925ec5da22e0a6e6266b2428705d5d6d</anchor>
      <arglist>(int maximumWidth) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaximumWidth</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a953f95835e414252d900a72d3d5a9e76</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumHeight</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a0b46cbd472fe7f925732ce92f4dcdfb3</anchor>
      <arglist>(int minimumHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinimumHeight</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a12a419edbb224adc7033ba8289f7da51</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumHeight</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>af2a07dca0015ea0955ed0ff1856e78ff</anchor>
      <arglist>(int maximumHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaximumHeight</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a63b8def753269b32bab577eb0cf84e98</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumSize</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>aea5a0319cabade466756b4f031b9329d</anchor>
      <arglist>(int minimumWidth, int minimumHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumSize</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a0e2b30774ced1284700b5abf361847d0</anchor>
      <arglist>(int maximumWidth, int maximumHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSizeLimits</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a1a4b9c98a27720bf23bb5621af00d6a3</anchor>
      <arglist>(int minimumWidth, int minimumHeight, int maximumWidth, int maximumHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumOnscreenAmounts</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>aff1abf331d36ac67df318f999beccc0a</anchor>
      <arglist>(int minimumWhenOffTheTop, int minimumWhenOffTheLeft, int minimumWhenOffTheBottom, int minimumWhenOffTheRight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinimumWhenOffTheTop</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a44c52db11cf8a141c9e8c562db59fad5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinimumWhenOffTheLeft</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a2115c6e6732ac8d22a681126feaa0692</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinimumWhenOffTheBottom</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>aadafebd97fcd42ae595973abcd164244</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinimumWhenOffTheRight</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>acc3d3e62dd2e533d86c38fb311287db0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFixedAspectRatio</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>ad2dc5063fde4f7eec915c29eb9a78d46</anchor>
      <arglist>(double widthOverHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFixedAspectRatio</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>aef5a96ab24d00c21a5d350b2b242b8a8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkBounds</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>ae5de4ca69f5f0a595ca51d9354a217ab</anchor>
      <arglist>(Rectangle&lt; int &gt; &amp;bounds, const Rectangle&lt; int &gt; &amp;previousBounds, const Rectangle&lt; int &gt; &amp;limits, bool isStretchingTop, bool isStretchingLeft, bool isStretchingBottom, bool isStretchingRight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resizeStart</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a93469c13206cd1f1a8662a4d031f6efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resizeEnd</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a8e97270a714a8e9df0bbe1359388c599</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsForComponent</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>afaf4fe2f6d2002463fce84ebdefc8db1</anchor>
      <arglist>(Component *component, const Rectangle&lt; int &gt; &amp;bounds, bool isStretchingTop, bool isStretchingLeft, bool isStretchingBottom, bool isStretchingRight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkComponentBounds</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a1f799af496b1658715dd34381043841b</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyBoundsToComponent</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a064cdd9798ea6a06c774fc9c554a8214</anchor>
      <arglist>(Component *component, const Rectangle&lt; int &gt; &amp;bounds)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentBuilder</name>
    <filename>classComponentBuilder.html</filename>
    <base protection="private">ValueTree::Listener</base>
    <class kind="class">ComponentBuilder::ImageProvider</class>
    <class kind="class">ComponentBuilder::TypeHandler</class>
    <member kind="function">
      <type></type>
      <name>ComponentBuilder</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a129bcaf6b54dba4b8ffd87a3a69db5dc</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComponentBuilder</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a0f565ba5e93bab1e079db4714e7169ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ComponentBuilder</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a49cd066bf7fe3cb4711c3d68c6087fa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getManagedComponent</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a6d22c2e9d567af9e140ae4200b9dc493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>createComponent</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a8758d00b4832dfe9447b0cfa352e8270</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerTypeHandler</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a97053a0ddf882ea7c6178ad06985865c</anchor>
      <arglist>(TypeHandler *type)</arglist>
    </member>
    <member kind="function">
      <type>TypeHandler *</type>
      <name>getHandlerForState</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a2a8a311fbe14f3f2be37a4c67bfbae08</anchor>
      <arglist>(const ValueTree &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumHandlers</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a31c6a85cefbac6a0647c8c62d730bc90</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeHandler *</type>
      <name>getHandler</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a386ce324816c401a08344991a90adc9b</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerStandardComponentTypes</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a94f0dd79ea5bc434bce91e1139e8ccc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImageProvider</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a4eac18667dc404ad636bb72d8e836667</anchor>
      <arglist>(ImageProvider *newImageProvider) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ImageProvider *</type>
      <name>getImageProvider</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a52784294955a92a505ecdff6347d46e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateChildComponents</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>ada58c44d9f924f56b43f9552c537f30a</anchor>
      <arglist>(Component &amp;parent, const ValueTree &amp;children)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialiseFromValueTree</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>ab0e78c5c3a22a2545709ab9d26a36348</anchor>
      <arglist>(Component &amp;component, const ValueTree &amp;state, ImageProvider *imageProvider)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>refreshBasicComponentProperties</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>adc01e5add6366479a2bf01b96e8eca48</anchor>
      <arglist>(Component &amp;, const ValueTree &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeRectangle</type>
      <name>getComponentBounds</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>af8a294f4d159c48c820b7085508045ed</anchor>
      <arglist>(const ValueTree &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>ValueTree</type>
      <name>state</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>af09fdfb8bb0edf0a6c2f19d5d54563f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>idProperty</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>aded44aa66f9f06a544e758dc6391664e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentBuilder::ImageProvider</name>
    <filename>classComponentBuilder_1_1ImageProvider.html</filename>
    <member kind="function">
      <type></type>
      <name>ImageProvider</name>
      <anchorfile>classComponentBuilder_1_1ImageProvider.html</anchorfile>
      <anchor>acdb88d7ecc51ec8e9dc1a57e0268a115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageProvider</name>
      <anchorfile>classComponentBuilder_1_1ImageProvider.html</anchorfile>
      <anchor>a9589cd277ddb9c7d544550a135b025ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Image</type>
      <name>getImageForIdentifier</name>
      <anchorfile>classComponentBuilder_1_1ImageProvider.html</anchorfile>
      <anchor>acd32b5882422f627f179b8b560dff043</anchor>
      <arglist>(const var &amp;imageIdentifier)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual var</type>
      <name>getIdentifierForImage</name>
      <anchorfile>classComponentBuilder_1_1ImageProvider.html</anchorfile>
      <anchor>a3bf6e1d1fa78bc1749a623ab4e849339</anchor>
      <arglist>(const Image &amp;image)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentBuilder::TypeHandler</name>
    <filename>classComponentBuilder_1_1TypeHandler.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeHandler</name>
      <anchorfile>classComponentBuilder_1_1TypeHandler.html</anchorfile>
      <anchor>a17ef9f010b9beeb0d4161500fbe1e424</anchor>
      <arglist>(const Identifier &amp;valueTreeType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TypeHandler</name>
      <anchorfile>classComponentBuilder_1_1TypeHandler.html</anchorfile>
      <anchor>a8f9404ae33ce0f03498f483a61e4183d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComponentBuilder *</type>
      <name>getBuilder</name>
      <anchorfile>classComponentBuilder_1_1TypeHandler.html</anchorfile>
      <anchor>a783b84cad6d710bdb6fdbdb788be4b0a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Component *</type>
      <name>addNewComponentFromState</name>
      <anchorfile>classComponentBuilder_1_1TypeHandler.html</anchorfile>
      <anchor>a3472d533654b88bfffa387d51f51d779</anchor>
      <arglist>(const ValueTree &amp;state, Component *parent)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateComponentFromState</name>
      <anchorfile>classComponentBuilder_1_1TypeHandler.html</anchorfile>
      <anchor>a8ca3a127f43eef2849300856a2a0017a</anchor>
      <arglist>(Component *component, const ValueTree &amp;state)=0</arglist>
    </member>
    <member kind="variable">
      <type>const Identifier</type>
      <name>type</name>
      <anchorfile>classComponentBuilder_1_1TypeHandler.html</anchorfile>
      <anchor>a16f363c68f0e40e262d15a86b022476c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentDragger</name>
    <filename>classComponentDragger.html</filename>
    <member kind="function">
      <type></type>
      <name>ComponentDragger</name>
      <anchorfile>classComponentDragger.html</anchorfile>
      <anchor>ac702fc282b4d5c9c059b1d5fe73a266d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ComponentDragger</name>
      <anchorfile>classComponentDragger.html</anchorfile>
      <anchor>a6e2b9b526ddff35060fecdbdca4ade30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startDraggingComponent</name>
      <anchorfile>classComponentDragger.html</anchorfile>
      <anchor>a3a6ae550729873ec7fa31a48bc79a352</anchor>
      <arglist>(Component *componentToDrag, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dragComponent</name>
      <anchorfile>classComponentDragger.html</anchorfile>
      <anchor>af2ebcd662f3279b373bfaf035f2c269e</anchor>
      <arglist>(Component *componentToDrag, const MouseEvent &amp;e, ComponentBoundsConstrainer *constrainer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentListener</name>
    <filename>classComponentListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ComponentListener</name>
      <anchorfile>classComponentListener.html</anchorfile>
      <anchor>ab4df3c2c42d7fdb762cef175b2e0ebe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentMovedOrResized</name>
      <anchorfile>classComponentListener.html</anchorfile>
      <anchor>ac5d2c3c7290cbde571403fd5d3112978</anchor>
      <arglist>(Component &amp;component, bool wasMoved, bool wasResized)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentBroughtToFront</name>
      <anchorfile>classComponentListener.html</anchorfile>
      <anchor>a68fd2e94bbac54a480ada6b0fdd3c3d4</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentVisibilityChanged</name>
      <anchorfile>classComponentListener.html</anchorfile>
      <anchor>aaacf63f35f26733d615be2258e57fd69</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentChildrenChanged</name>
      <anchorfile>classComponentListener.html</anchorfile>
      <anchor>ae03a3583fa9999dc868a2e2c5825bbc2</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentParentHierarchyChanged</name>
      <anchorfile>classComponentListener.html</anchorfile>
      <anchor>a84b23253fe18f447472652452b1858e6</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentNameChanged</name>
      <anchorfile>classComponentListener.html</anchorfile>
      <anchor>ae58c494e8e9319d18d552c82f1936336</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentBeingDeleted</name>
      <anchorfile>classComponentListener.html</anchorfile>
      <anchor>a948f7c07d7dabde3b6cc7a7ceac29cec</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentMovementWatcher</name>
    <filename>classComponentMovementWatcher.html</filename>
    <base>ComponentListener</base>
    <member kind="function">
      <type></type>
      <name>ComponentMovementWatcher</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>a1855ca8c74573719a4049d7b8f8033a0</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ComponentMovementWatcher</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>ac330cfdf207f4d5d69abb6c1bed3b1e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>componentMovedOrResized</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>a8aa7d93c182f7d8d0fd07019868da887</anchor>
      <arglist>(bool wasMoved, bool wasResized)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>componentPeerChanged</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>a572c2e568b9df20f1ee51f4f5d8d819f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>componentVisibilityChanged</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>ab890075a6625aff818080f601f8bec37</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getComponent</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>a493a44fe352767269a5d92ea0a1bb902</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentParentHierarchyChanged</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>a079cd35920ae78f4dd862f9ebe75bcb8</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentMovedOrResized</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>aea8ad8423caa9fe293c5cca2792bae1f</anchor>
      <arglist>(Component &amp;component, bool wasMoved, bool wasResized)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentBeingDeleted</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>a20ac9cdb8b7e0e0d93414e7326dff0a3</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentVisibilityChanged</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>aa2f8bbadfdf525ceebffec868f827523</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentPeer</name>
    <filename>classComponentPeer.html</filename>
    <class kind="struct">ComponentPeer::DragInfo</class>
    <member kind="enumeration">
      <name>StyleFlags</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>windowAppearsOnTaskbar</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca99981bc182b3f9f1534008c6be93de80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>windowIsTemporary</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca8bb0cadf1232d3e8c8ff531c58946087</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>windowIgnoresMouseClicks</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddcab8553607b9b28ba46dad559294b7db60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>windowHasTitleBar</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca071514cf5386f9ed5c544460e94737e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>windowIsResizable</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca3b12da2010eca8a92f6c97fad9a21a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>windowHasMinimiseButton</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca01571bf1cfc4e3bc17198b593e64750a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>windowHasMaximiseButton</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddcab56ba75cd98f8e630a907c3a8a4836c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>windowHasCloseButton</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca71f089a2bb2af56ccc7bb3eaf0ce46a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>windowHasDropShadow</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddcaada172d23a2b21e8c364feb52e39464b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>windowRepaintedExplictly</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddcad4f6500107e752f57986bad17e681c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>windowIgnoresKeyPresses</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca348f19f81e1e8e929e0bb9932f7007c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>windowIsSemiTransparent</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddcaedab89c85c7fe9b5d4c1310b34a9f792</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComponentPeer</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a81ea849fd12c79f7cc12409fb6de1820</anchor>
      <arglist>(Component *component, int styleFlags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ComponentPeer</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a582ed1de9b220645c16c67e0124e18e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getComponent</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>afc8cc843ea17e10c7472c0f359856faf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStyleFlags</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a47edec896c72e39f36e1be2bc03659cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getUniqueID</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>af7797e064a137afcb3f72a35b95da7f6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>getNativeHandle</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>ab873eaa1294b49c6739a04e1edc5e85e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVisible</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a45cdae32b498158f5a353f0382b3afa5</anchor>
      <arglist>(bool shouldBeVisible)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTitle</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a040f5c7bf60ea0081232888d0296fc77</anchor>
      <arglist>(const String &amp;title)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a3231325f3a9952c78db5cc1d7e585363</anchor>
      <arglist>(int x, int y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a4fffaf4a8352a9c1f675e18df3ac8010</anchor>
      <arglist>(int w, int h)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBounds</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>af34cd9dd16f149ef6b2270a017882998</anchor>
      <arglist>(int x, int y, int w, int h, bool isNowFullScreen)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rectangle&lt; int &gt;</type>
      <name>getBounds</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a6438873cdc43bf3ccbf9e2b1c3bac4b4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Point&lt; int &gt;</type>
      <name>getScreenPosition</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a01bc5574309052bb75696b5b23287016</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Point&lt; int &gt;</type>
      <name>localToGlobal</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a0e949ffb0588cdb3949402d51b9e8a8b</anchor>
      <arglist>(const Point&lt; int &gt; &amp;relativePosition)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rectangle&lt; int &gt;</type>
      <name>localToGlobal</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a74ee249417ab026d71be6cdbaf01716f</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;relativePosition)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Point&lt; int &gt;</type>
      <name>globalToLocal</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a5b898871666079b5b3b7220ed889ec9e</anchor>
      <arglist>(const Point&lt; int &gt; &amp;screenPosition)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rectangle&lt; int &gt;</type>
      <name>globalToLocal</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a1236ece6db4e0363761aa0a1e2e282d9</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;screenPosition)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMinimised</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>aa9732a41b884d1e8021c69908ed72fdb</anchor>
      <arglist>(bool shouldBeMinimised)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isMinimised</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a89063a1ab796e670d56ff660c3de60ed</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setFullScreen</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>ae14a735045acf686a945392d29cb1b2b</anchor>
      <arglist>(bool shouldBeFullScreen)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isFullScreen</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a0f649966fb18d9eb06e63ce0bcddf10d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonFullScreenBounds</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a4e32802a7398d27abea90057523d5d50</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newBounds) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Rectangle&lt; int &gt; &amp;</type>
      <name>getNonFullScreenBounds</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a665efc4abb9c6c1a4ba71a55d10ee436</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setIcon</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>aea319e975bcb86e3727d3b5026ad376c</anchor>
      <arglist>(const Image &amp;newIcon)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstrainer</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a650879e0f1cca550ddb2006ef30d73c7</anchor>
      <arglist>(ComponentBoundsConstrainer *newConstrainer) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ComponentBoundsConstrainer *</type>
      <name>getConstrainer</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a235e5515db305347dbee4483c4ececd5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>aa3245452d070f7dd7158e75058c2f638</anchor>
      <arglist>(const Point&lt; int &gt; &amp;position, bool trueIfInAChildWindow) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BorderSize&lt; int &gt;</type>
      <name>getFrameSize</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a36afe1e3902e2c112f004d4c4380ceb4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMovedOrResized</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a8fb507144ba1144b75b63da1075807b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleScreenSizeChange</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a4766990f50ee01cdc401a4dd4202a940</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handlePaint</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a360713977c8a8d38657247b16ff4e836</anchor>
      <arglist>(LowLevelGraphicsContext &amp;contextToPaintTo)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setAlwaysOnTop</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a0ddc8883fd6b5ece98fb422730bc3fe7</anchor>
      <arglist>(bool alwaysOnTop)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>toFront</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a4e96a24cccbd4f86da8d988d9901615f</anchor>
      <arglist>(bool makeActive)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>toBehind</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>afd04fab397a9c85cb7251582d9c6b461</anchor>
      <arglist>(ComponentPeer *other)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleBroughtToFront</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a8f451c2a22a1696443ab724fa62b9708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isFocused</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a86c19e5dcdc7fbeb932351af522512dd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>grabFocus</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a2a90a97e43c8ac0b98ea1151f8fde316</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleFocusGain</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a7f0f1bf14f3ad8df8372352804d1c54d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleFocusLoss</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a9d14cc3ce5afb95b4d8b62b90dbca46e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getLastFocusedSubcomponent</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>ab57f08253f973580a2eae92e859aa345</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleKeyPress</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>ac03f1b3bf45aebeca5f45799b1647d59</anchor>
      <arglist>(int keyCode, juce_wchar textCharacter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleKeyUpOrDown</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a100869544b69c072622bee3015202368</anchor>
      <arglist>(bool isKeyDown)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleModifierKeysChange</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>af53ee9f555184174fcbdacafa07588fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>textInputRequired</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a82515329f9fa90587531439e4d481abd</anchor>
      <arglist>(const Point&lt; int &gt; &amp;position)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dismissPendingTextInput</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a279443ef9e2343320577655775e2e827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TextInputTarget *</type>
      <name>findCurrentTextInputTarget</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a85355b1df4c5e7fa8692c7a3ede22d9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>repaint</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a33bcb7a98fd047bd0cae67f0196cb710</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;area)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>performAnyPendingRepaintsNow</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>af6d87781bea23f08e8f413a2fd772506</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setAlpha</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a1394fc9e9e2c0d059709d55c557c18c3</anchor>
      <arglist>(float newAlpha)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMouseEvent</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a523ce64402f640acad96c4db22fee84c</anchor>
      <arglist>(int touchIndex, const Point&lt; int &gt; &amp;positionWithinPeer, const ModifierKeys &amp;newMods, int64 time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMouseWheel</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a07d0bfaef2741c481211b4e8745cab88</anchor>
      <arglist>(int touchIndex, const Point&lt; int &gt; &amp;positionWithinPeer, int64 time, const MouseWheelDetails &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleUserClosingWindow</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a13b9987266c93f3e73148c7c3e83da64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleDragMove</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a6e44b78f7f2d4f813baffc7577a376f6</anchor>
      <arglist>(const DragInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleDragExit</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a531d190202f98b79786f2b2b9885931a</anchor>
      <arglist>(const DragInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleDragDrop</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a351c6a2ba20b0dfb55b3c11b7e5bfa9c</anchor>
      <arglist>(const DragInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearMaskedRegion</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>acf449581016f67b01b9cb5c152e7a2ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMaskedRegion</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a8dc34e44261b7829f4d0b34f9ec28076</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;area)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringArray</type>
      <name>getAvailableRenderingEngines</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a630c872277f467920cc5d04a26686669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCurrentRenderingEngine</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>ac864060ffdd62e78ae65cde6740467f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentRenderingEngine</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a44614a1572c6c8860821f3ab5db12ea5</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumPeers</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a33de09ced4025faaaa016af050a67c12</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ComponentPeer *</type>
      <name>getPeer</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>af6e6601976f567bc8208cd7e90915ff9</anchor>
      <arglist>(int index) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidPeer</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>ae8e06f4b14b73e562da0b47783a7210e</anchor>
      <arglist>(const ComponentPeer *peer) noexcept</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>updateCurrentModifiers</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>abcfdbb05801c08b01c1bc8fad2cdc215</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Component *const</type>
      <name>component</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a964794337b7b639b52be0827f74394c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>styleFlags</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a8322b7cdb134bc52f443cd587ffc3f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RectangleList</type>
      <name>maskedRegion</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a3395d1d6b50bff458d288d6bab251859</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Rectangle&lt; int &gt;</type>
      <name>lastNonFullscreenBounds</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a2aee1a16331876b88555838cd75caeda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>lastPaintTime</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>ad6426137107729ca4ef5bb9532929922</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ComponentBoundsConstrainer *</type>
      <name>constrainer</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a75216f7f562c5bbf8b7758a1198d2744</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ComponentPeer::DragInfo</name>
    <filename>structComponentPeer_1_1DragInfo.html</filename>
    <member kind="variable">
      <type>StringArray</type>
      <name>files</name>
      <anchorfile>structComponentPeer_1_1DragInfo.html</anchorfile>
      <anchor>addae08e58daceff162d5003254f393ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>text</name>
      <anchorfile>structComponentPeer_1_1DragInfo.html</anchorfile>
      <anchor>a9ef783609b4ae2ca44735a734759ccab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point&lt; int &gt;</type>
      <name>position</name>
      <anchorfile>structComponentPeer_1_1DragInfo.html</anchorfile>
      <anchor>ac83d9a513bd9e691d6b8afb1d33f9a3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoreAudioFormat</name>
    <filename>classCoreAudioFormat.html</filename>
    <base>AudioFormat</base>
    <member kind="function">
      <type></type>
      <name>CoreAudioFormat</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>ad59f427b0fbe2381bb1361933192dcf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoreAudioFormat</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>abd1d707bd707ae31f786662dc4091c4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleSampleRates</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>a957551780135e59e5e85e74777e6cc78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleBitDepths</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>a5f5fea3df7791c07bfb00754718f219e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoStereo</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>a78e1f33c82d114dfe974e23bf5608930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoMono</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>aee7556e366806d749c9b03bd87bcb87a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>a86fbeb5aeb2d76ed2405bd921d36c16e</anchor>
      <arglist>(InputStream *sourceStream, bool deleteStreamIfOpeningFails)</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatWriter *</type>
      <name>createWriterFor</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>a0d5e6ebf867337bd923a624c82f49780</anchor>
      <arglist>(OutputStream *streamToWriteTo, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CPlusPlusCodeTokeniser</name>
    <filename>classCPlusPlusCodeTokeniser.html</filename>
    <base>CodeTokeniser</base>
    <member kind="function">
      <type></type>
      <name>CPlusPlusCodeTokeniser</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a469ad5768ee42ef25442571d4b6ab5e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CPlusPlusCodeTokeniser</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>ab8ea32248dbb8039233da1006a9cd6f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readNextToken</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a3206c4de8f2e12109fbdc474c4d858b7</anchor>
      <arglist>(CodeDocument::Iterator &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>CodeEditorComponent::ColourScheme</type>
      <name>getDefaultColourScheme</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a1c73177b3e41a4babf4b2cfb89287fb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isReservedKeyword</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>aaeae35807604c0f8941f4ed821e07642</anchor>
      <arglist>(const String &amp;token) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CriticalSection</name>
    <filename>classCriticalSection.html</filename>
    <member kind="typedef">
      <type>GenericScopedLock&lt; CriticalSection &gt;</type>
      <name>ScopedLockType</name>
      <anchorfile>classCriticalSection.html</anchorfile>
      <anchor>a586568fcce3a9c6a0f1547518fd6ddb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericScopedUnlock&lt; CriticalSection &gt;</type>
      <name>ScopedUnlockType</name>
      <anchorfile>classCriticalSection.html</anchorfile>
      <anchor>a69d6b613f2638fbae341cfd06df478c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericScopedTryLock&lt; CriticalSection &gt;</type>
      <name>ScopedTryLockType</name>
      <anchorfile>classCriticalSection.html</anchorfile>
      <anchor>a745e5e36d8c6a33ea1fcbbfa2fff00a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CriticalSection</name>
      <anchorfile>classCriticalSection.html</anchorfile>
      <anchor>aaa4d9ea166cd7ce8ef369a7934e26b97</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CriticalSection</name>
      <anchorfile>classCriticalSection.html</anchorfile>
      <anchor>ae1ed672427d129fb5102459354d33422</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enter</name>
      <anchorfile>classCriticalSection.html</anchorfile>
      <anchor>a20c4b0714061cc488d220b1b5a77aa1c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryEnter</name>
      <anchorfile>classCriticalSection.html</anchorfile>
      <anchor>a2c12101da7ebf8455de49652f377d313</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exit</name>
      <anchorfile>classCriticalSection.html</anchorfile>
      <anchor>a856bbcc18f0367ae231f7277d9cb33f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CustomTypeface</name>
    <filename>classCustomTypeface.html</filename>
    <base>Typeface</base>
    <member kind="function">
      <type></type>
      <name>CustomTypeface</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>ab55fd08f0ab46d6121f7a3947c69440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CustomTypeface</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>aa08aa5740c635671d23b4005387dd073</anchor>
      <arglist>(InputStream &amp;serialisedTypefaceStream)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomTypeface</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a7de69e6a3862d73f61061d10c5996255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>aae23b3b2c7f54b633376361462363ece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCharacteristics</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a7da2c0383a43ca73649aae749c3acc4f</anchor>
      <arglist>(const String &amp;fontFamily, float ascent, bool isBold, bool isItalic, juce_wchar defaultCharacter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCharacteristics</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a0d2c31c8caaaec95299512e05988ed0a</anchor>
      <arglist>(const String &amp;fontFamily, const String &amp;fontStyle, float ascent, juce_wchar defaultCharacter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGlyph</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a09d793a31978d29a3b274014d5787754</anchor>
      <arglist>(juce_wchar character, const Path &amp;path, float width) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addKerningPair</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>ababca5dbbddb414180c1ebae0e639992</anchor>
      <arglist>(juce_wchar char1, juce_wchar char2, float extraAmount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGlyphsFromOtherTypeface</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a94de59c3b010a1f68ce3681174a6a173</anchor>
      <arglist>(Typeface &amp;typefaceToCopy, juce_wchar characterStartIndex, int numCharacters) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeToStream</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>ab5f4f1bed4814397104d57cab666ca1a</anchor>
      <arglist>(OutputStream &amp;outputStream)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAscent</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>aa631246877e796217d7e485fef1bd6c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDescent</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>af21d687e897566097870d048d45db86a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStringWidth</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a8bce0d61aab0ab6ffb8cfed27c20de40</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlyphPositions</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a60167813f5a8cb3e0fe94c490099cb9c</anchor>
      <arglist>(const String &amp;text, Array&lt; int &gt; &amp;glyphs, Array&lt; float &gt; &amp;xOffsets)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getOutlineForGlyph</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a849b0cacf1b6aab9b30347c975301ac0</anchor>
      <arglist>(int glyphNumber, Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>EdgeTable *</type>
      <name>getEdgeTableForGlyph</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>aec394bc814a9c35a241c021c442c7ef3</anchor>
      <arglist>(int glyphNumber, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>loadGlyphIfPossible</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a3d46ee607d4e0e1a7eb2a67f670fd9e5</anchor>
      <arglist>(juce_wchar characterNeeded)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>juce_wchar</type>
      <name>defaultCharacter</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a253a2ab299747b043f623ddbdd354e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>ascent</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>ab5c74224ec102b6990481b658d189ac4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DatagramSocket</name>
    <filename>classDatagramSocket.html</filename>
    <member kind="function">
      <type></type>
      <name>DatagramSocket</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>ac150b23e3a6be740ae9c3281cff23b73</anchor>
      <arglist>(int localPortNumber, bool enableBroadcasting=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DatagramSocket</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>a67749ad62429e5a9aac2b2d9faaff89e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bindToPort</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>a94c29fad4912e3dfc17cb8824de3d548</anchor>
      <arglist>(int localPortNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>aa4072d239f36f6540b5edca56520eb8e</anchor>
      <arglist>(const String &amp;remoteHostname, int remotePortNumber, int timeOutMillisecs=3000)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>a965b875f8b0e97485a374d75349eccb6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>a9d0a9582b3a2a72bf62f182dbc33c352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getHostName</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>a4e48aa7a584d15aacdf2b8465f7cb9c9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPort</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>af7d1bab592aacf651fa6ad24e85277e0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocal</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>a2ab0436c0c97c338a2b517dc5f5abe8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>waitUntilReady</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>a773fbe9241d1c57e4ced45317f876b58</anchor>
      <arglist>(bool readyForReading, int timeoutMsecs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>aa6d0fb81186112263c99e88b498f58ed</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead, bool blockUntilSpecifiedAmountHasArrived)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>write</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>ae3b8aced314e792eb0b9205c9edb83cf</anchor>
      <arglist>(const void *sourceBuffer, int numBytesToWrite)</arglist>
    </member>
    <member kind="function">
      <type>DatagramSocket *</type>
      <name>waitForNextConnection</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>a3ce5d9539e940b5d249a7876325dc69b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decibels</name>
    <filename>classDecibels.html</filename>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>decibelsToGain</name>
      <anchorfile>classDecibels.html</anchorfile>
      <anchor>a4bc3a6fd3f361e9c64bd055ba8fa1238</anchor>
      <arglist>(const Type decibels, const Type minusInfinityDb=(Type) defaultMinusInfinitydB)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>gainToDecibels</name>
      <anchorfile>classDecibels.html</anchorfile>
      <anchor>afa3f66fd6a7e63c04b2d0f7b956e1fba</anchor>
      <arglist>(const Type gain, const Type minusInfinityDb=(Type) defaultMinusInfinitydB)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>toString</name>
      <anchorfile>classDecibels.html</anchorfile>
      <anchor>af054ac41adc5abc38c3bb536ac33b292</anchor>
      <arglist>(const Type decibels, const int decimalPlaces=2, const Type minusInfinityDb=(Type) defaultMinusInfinitydB)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DefaultElementComparator</name>
    <filename>classDefaultElementComparator.html</filename>
    <templarg>ElementType</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compareElements</name>
      <anchorfile>classDefaultElementComparator.html</anchorfile>
      <anchor>a271d017e79a70c56794e516871ab5c87</anchor>
      <arglist>(ParameterType first, ParameterType second)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DefaultHashFunctions</name>
    <filename>classDefaultHashFunctions.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>generateHash</name>
      <anchorfile>classDefaultHashFunctions.html</anchorfile>
      <anchor>a414f797d0ea0605b5b5e4bc06070e101</anchor>
      <arglist>(const int key, const int upperLimit) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>generateHash</name>
      <anchorfile>classDefaultHashFunctions.html</anchorfile>
      <anchor>a58d33926ac82bb90c4678212593951f7</anchor>
      <arglist>(const String &amp;key, const int upperLimit) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>generateHash</name>
      <anchorfile>classDefaultHashFunctions.html</anchorfile>
      <anchor>a961678c7baadc585cd75adf7b5fc9000</anchor>
      <arglist>(const var &amp;key, const int upperLimit) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeletedAtShutdown</name>
    <filename>classDeletedAtShutdown.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteAll</name>
      <anchorfile>classDeletedAtShutdown.html</anchorfile>
      <anchor>a72ea5ccbe21f14172dbcfdcb0f3fe4e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DeletedAtShutdown</name>
      <anchorfile>classDeletedAtShutdown.html</anchorfile>
      <anchor>ad03334a429dfa1c465dd8ad52fb94190</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~DeletedAtShutdown</name>
      <anchorfile>classDeletedAtShutdown.html</anchorfile>
      <anchor>af9065f0567544fbbb8966a8bef264873</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Desktop</name>
    <filename>classDesktop.html</filename>
    <base protection="private">DeletedAtShutdown</base>
    <base protection="private">Timer</base>
    <base protection="private">AsyncUpdater</base>
    <class kind="class">Desktop::Displays</class>
    <member kind="enumeration">
      <name>DisplayOrientation</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a5e06947d2d1295bdb6f5c4fab7beb98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>upright</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a5e06947d2d1295bdb6f5c4fab7beb98aaced7253546b0f2e73e4dd08bcb60c9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>upsideDown</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a5e06947d2d1295bdb6f5c4fab7beb98aa5820a6ffe2f7f012a16a1bd57e304b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rotatedClockwise</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a5e06947d2d1295bdb6f5c4fab7beb98aae1e0629de1668ef16f700b7278fd0f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rotatedAntiClockwise</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a5e06947d2d1295bdb6f5c4fab7beb98aab48176789b5764aae6aae6a393916712</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>allOrientations</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a5e06947d2d1295bdb6f5c4fab7beb98aacb260a5600c352a166edd836a2305a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGlobalMouseListener</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>add528b1597a432f2e4cb9b10314fc210</anchor>
      <arglist>(MouseListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeGlobalMouseListener</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a6051a5203c21377974a1f65c0acd4acc</anchor>
      <arglist>(MouseListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFocusChangeListener</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a0db6055049b8268af05e51e55f377586</anchor>
      <arglist>(FocusChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFocusChangeListener</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>af428140675315bed1cec0494ec70007a</anchor>
      <arglist>(FocusChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKioskModeComponent</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a8fa4033714b5a9cd0714c9b9633b3366</anchor>
      <arglist>(Component *componentToUse, bool allowMenusAndBars=true)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getKioskModeComponent</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a3f09558177477a50a1fa092871f4aab1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumComponents</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a74081737d1c862fdcce6bb2eb24901f3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getComponent</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a1ad83bce07a7197742d334e204c4c194</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>findComponentAt</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a19eea06e8b8348ea224b50401369b96a</anchor>
      <arglist>(const Point&lt; int &gt; &amp;screenPosition) const </arglist>
    </member>
    <member kind="function">
      <type>ComponentAnimator &amp;</type>
      <name>getAnimator</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a80aea7a339408d22a84d447d3cd95755</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>LookAndFeel &amp;</type>
      <name>getDefaultLookAndFeel</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>ad88ac93bb8d5b101d6cb63c268d66e1b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultLookAndFeel</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a726a6fd8120c6b64a85ca382a9208c67</anchor>
      <arglist>(LookAndFeel *newDefaultLookAndFeel)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMouseSources</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a7dc6e7f8c3c94ffa20584305d51133d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MouseInputSource *</type>
      <name>getMouseSource</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>acab109fe14b5337c5a3129c746ba17e5</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MouseInputSource &amp;</type>
      <name>getMainMouseSource</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>affa7ffcdc37a01f1a3e183b4721cd699</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDraggingMouseSources</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>ab58864358ece4bdfea451efc7a308379</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MouseInputSource *</type>
      <name>getDraggingMouseSource</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>ac2c86b073c213abc4380a8abbbf33379</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginDragAutoRepeat</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a484c8460c95255150aef4dbe1909ae9f</anchor>
      <arglist>(int millisecondsBetweenCallbacks)</arglist>
    </member>
    <member kind="function">
      <type>DisplayOrientation</type>
      <name>getCurrentOrientation</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a14dd6704af2eb6b6e374509e4ba5a33e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientationsEnabled</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a4c4e91683ca8ffef6724650b90b17293</anchor>
      <arglist>(int allowedOrientations)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrientationEnabled</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a501649988905cfa81e1a5798b2bc5572</anchor>
      <arglist>(DisplayOrientation orientation) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Displays &amp;</type>
      <name>getDisplays</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>aaf44cad873d28c06e2d22c9ee05387c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Desktop &amp;JUCE_CALLTYPE</type>
      <name>getInstance</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a15ebe474aab368cff35578b8f7bec6c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point&lt; int &gt;</type>
      <name>getMousePosition</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a3a0aecaa5e9ec284dbe1f7108f51eb0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setMousePosition</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a98b408caefc7291f540f9c56dee7ff97</anchor>
      <arglist>(const Point&lt; int &gt; &amp;newPosition)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point&lt; int &gt;</type>
      <name>getLastMouseDownPosition</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a876e731f99d9a6646c7fc5722e421baf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getMouseButtonClickCounter</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a4d94b8b70d2342a4eb966d6ef0ed069d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setScreenSaverEnabled</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a12b63736985b72fc78bebe7bf9903597</anchor>
      <arglist>(bool isEnabled)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isScreenSaverEnabled</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>ac49ada613f5989b8fe36c22cf19bf517</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canUseSemiTransparentWindows</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>af15bdf2abd33c022d88f9335a5b5d098</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Desktop::Displays</name>
    <filename>classDesktop_1_1Displays.html</filename>
    <class kind="struct">Desktop::Displays::Display</class>
    <member kind="function">
      <type>const Display &amp;</type>
      <name>getMainDisplay</name>
      <anchorfile>classDesktop_1_1Displays.html</anchorfile>
      <anchor>ab330cfff5471512312e7017472276c8d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Display &amp;</type>
      <name>getDisplayContaining</name>
      <anchorfile>classDesktop_1_1Displays.html</anchorfile>
      <anchor>a25cc9545f04050f2f66428535ca3f4e8</anchor>
      <arglist>(const Point&lt; int &gt; &amp;position) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>RectangleList</type>
      <name>getRectangleList</name>
      <anchorfile>classDesktop_1_1Displays.html</anchorfile>
      <anchor>a89a45e8f84b41899944faa0cef7cb4ce</anchor>
      <arglist>(bool userAreasOnly) const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getTotalBounds</name>
      <anchorfile>classDesktop_1_1Displays.html</anchorfile>
      <anchor>a14668006cd63864b5ef4328cfa222f77</anchor>
      <arglist>(bool userAreasOnly) const </arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; Display &gt;</type>
      <name>displays</name>
      <anchorfile>classDesktop_1_1Displays.html</anchorfile>
      <anchor>af3bca6783a93f00366a068ea04c661b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Desktop::Displays::Display</name>
    <filename>structDesktop_1_1Displays_1_1Display.html</filename>
    <member kind="variable">
      <type>Rectangle&lt; int &gt;</type>
      <name>userArea</name>
      <anchorfile>structDesktop_1_1Displays_1_1Display.html</anchorfile>
      <anchor>a7b9601b6a4c7de297099ff4e3b8651ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Rectangle&lt; int &gt;</type>
      <name>totalArea</name>
      <anchorfile>structDesktop_1_1Displays_1_1Display.html</anchorfile>
      <anchor>a90732ffebb1b91769b95400dec70f74f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scale</name>
      <anchorfile>structDesktop_1_1Displays_1_1Display.html</anchorfile>
      <anchor>a1fa73b56829f21284aaf3ba95d64c227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isMain</name>
      <anchorfile>structDesktop_1_1Displays_1_1Display.html</anchorfile>
      <anchor>a392d751b64069c4b4a212e2f07f1766a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DialogWindow</name>
    <filename>classDialogWindow.html</filename>
    <base>DocumentWindow</base>
    <member kind="function">
      <type></type>
      <name>DialogWindow</name>
      <anchorfile>classDialogWindow.html</anchorfile>
      <anchor>ad73dba9ea7a57b5b9f8bb0d3ffd8c0a0</anchor>
      <arglist>(const String &amp;name, const Colour &amp;backgroundColour, bool escapeKeyTriggersCloseButton, bool addToDesktop=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DialogWindow</name>
      <anchorfile>classDialogWindow.html</anchorfile>
      <anchor>a59d3601f7622f31ef928377fc1789eda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>showDialog</name>
      <anchorfile>classDialogWindow.html</anchorfile>
      <anchor>ae7b5ac929330b46d23e5d915c2f9ccc7</anchor>
      <arglist>(const String &amp;dialogTitle, Component *contentComponent, Component *componentToCentreAround, const Colour &amp;backgroundColour, bool escapeKeyTriggersCloseButton, bool shouldBeResizable=false, bool useBottomRightCornerResizer=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>showModalDialog</name>
      <anchorfile>classDialogWindow.html</anchorfile>
      <anchor>a1391bb79781bfeac27944931dd91673b</anchor>
      <arglist>(const String &amp;dialogTitle, Component *contentComponent, Component *componentToCentreAround, const Colour &amp;backgroundColour, bool escapeKeyTriggersCloseButton, bool shouldBeResizable=false, bool useBottomRightCornerResizer=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classDialogWindow.html</anchorfile>
      <anchor>ad898e97178b1df5687f01d51655f5aa3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirectoryContentsDisplayComponent</name>
    <filename>classDirectoryContentsDisplayComponent.html</filename>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>ab57cde73f0efaaa4b3d8a1d6c2af358b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>highlightColourId</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>ab57cde73f0efaaa4b3d8a1d6c2af358bac53e42ed088fe6d66eb46b51f458f8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textColourId</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>ab57cde73f0efaaa4b3d8a1d6c2af358bac9c2c1e7103616f5665dfc53e27cc0e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DirectoryContentsDisplayComponent</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a77753970a52f8b388bb7142f662d82c0</anchor>
      <arglist>(DirectoryContentsList &amp;listToShow)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DirectoryContentsDisplayComponent</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a1aa97c3b2cb8cea18a072867070e749d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumSelectedFiles</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a17067d141e43635f80942d7a2d527563</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual File</type>
      <name>getSelectedFile</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a90137f0e012e2e2d40d0ce1e5cc3711c</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deselectAllFiles</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a3441ee30eddf973d2bb57dddf7ca0c0b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scrollToTop</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>aa87b6c665ef3c4cd54f6bcfafe601aa4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setSelectedFile</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a5e9eff1e74d231bcff622f09d80265d2</anchor>
      <arglist>(const File &amp;)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>af2f2fe91f39fdc58d08be4d7537045f7</anchor>
      <arglist>(FileBrowserListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a1bde76a3657c81bedb923ed5b1e1a290</anchor>
      <arglist>(FileBrowserListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendSelectionChangeMessage</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a258a4d5cc97370c927a04dcfd1f16e7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendDoubleClickMessage</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>ad07df8fccc59a5e38bb6a8604eacb8a7</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendMouseClickMessage</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>ade19bf62883c81f828eaac675fe6d6e3</anchor>
      <arglist>(const File &amp;file, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DirectoryContentsList &amp;</type>
      <name>fileList</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a5107067c830054515cd287dc3db2bc45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ListenerList&lt; FileBrowserListener &gt;</type>
      <name>listeners</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a5f7300e0d637b48e8a2f3abd067a7144</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirectoryContentsList</name>
    <filename>classDirectoryContentsList.html</filename>
    <base>ChangeBroadcaster</base>
    <base>TimeSliceClient</base>
    <class kind="struct">DirectoryContentsList::FileInfo</class>
    <member kind="function">
      <type></type>
      <name>DirectoryContentsList</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>ae36fae5fbad4ae302ffed71120a554fc</anchor>
      <arglist>(const FileFilter *fileFilter, TimeSliceThread &amp;threadToUse)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirectoryContentsList</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>aac2f7424bab5834eda64fcd9f63af9c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectory</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a8bbc33107fede1f3925b40c73b43fe72</anchor>
      <arglist>(const File &amp;directory, bool includeDirectories, bool includeFiles)</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getDirectory</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a2e90e52826669effbcc3fde5dac0f7d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a1155dd82a0abcaeae948869aea6834d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>ac7c096640fd74adbd9b20b38892fee48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStillLoading</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>affdbc37bd9593dbabbd29814edcfde19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnoresHiddenFiles</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>ab143c4681db9f409c204d9a21ae3bced</anchor>
      <arglist>(bool shouldIgnoreHiddenFiles)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ignoresHiddenFiles</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a13805762d1b90055cdb363bd010225b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFiles</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a3fa64c14744c5256c92af717e5afc253</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFileInfo</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a74b2f00f25fa733aba8ff1294a913d56</anchor>
      <arglist>(int index, FileInfo &amp;resultInfo) const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getFile</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>ab264bb3a17d76ba5fcff9ca351545a0b</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>const FileFilter *</type>
      <name>getFilter</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a0adca687d551dc03939427cb59b4e3ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>adfaf512db80b808d00a6c14b70e1fe51</anchor>
      <arglist>(const File &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>useTimeSlice</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>ad0b5149f13969cb3f5eef3a704a67645</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TimeSliceThread &amp;</type>
      <name>getTimeSliceThread</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>ae33e3f023f20fa4ef7970858517bea1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compareElements</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a8b4639964a75c4f7cf00b89f503e9092</anchor>
      <arglist>(const DirectoryContentsList::FileInfo *first, const DirectoryContentsList::FileInfo *second)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DirectoryContentsList::FileInfo</name>
    <filename>structDirectoryContentsList_1_1FileInfo.html</filename>
    <member kind="variable">
      <type>String</type>
      <name>filename</name>
      <anchorfile>structDirectoryContentsList_1_1FileInfo.html</anchorfile>
      <anchor>a14b9647b7281512bbedddb25ebeee1b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>fileSize</name>
      <anchorfile>structDirectoryContentsList_1_1FileInfo.html</anchorfile>
      <anchor>a0ef892081704ac1b7d4de84854b60a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>modificationTime</name>
      <anchorfile>structDirectoryContentsList_1_1FileInfo.html</anchorfile>
      <anchor>a35f194ff92e35671d7616d1d9e1524b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>creationTime</name>
      <anchorfile>structDirectoryContentsList_1_1FileInfo.html</anchorfile>
      <anchor>a903e1211fd14c33fe7af486e4e91b9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isDirectory</name>
      <anchorfile>structDirectoryContentsList_1_1FileInfo.html</anchorfile>
      <anchor>a493b51197cd6cc4042d9c8b13a0dbdab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isReadOnly</name>
      <anchorfile>structDirectoryContentsList_1_1FileInfo.html</anchorfile>
      <anchor>a73e256209bd193d238465977d4493114</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirectoryIterator</name>
    <filename>classDirectoryIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>DirectoryIterator</name>
      <anchorfile>classDirectoryIterator.html</anchorfile>
      <anchor>a524ffc16900daf13217680423458b328</anchor>
      <arglist>(const File &amp;directory, bool isRecursive, const String &amp;wildCard=&quot;*&quot;, int whatToLookFor=File::findFiles)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirectoryIterator</name>
      <anchorfile>classDirectoryIterator.html</anchorfile>
      <anchor>aa72fbf8139eb6b2446565cf89249071e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classDirectoryIterator.html</anchorfile>
      <anchor>a4d38dc126a3b4855dbbef96d8b31ae76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classDirectoryIterator.html</anchorfile>
      <anchor>a544868520b233c98d4ecc8322aec8333</anchor>
      <arglist>(bool *isDirectory, bool *isHidden, int64 *fileSize, Time *modTime, Time *creationTime, bool *isReadOnly)</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getFile</name>
      <anchorfile>classDirectoryIterator.html</anchorfile>
      <anchor>a52d9bf42bc4208beaf708acefbb3d855</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getEstimatedProgress</name>
      <anchorfile>classDirectoryIterator.html</anchorfile>
      <anchor>a32667fc239e42f3db031ae2cc2646b3c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirectShowComponent</name>
    <filename>classDirectShowComponent.html</filename>
    <base>Component</base>
    <member kind="enumeration">
      <name>VideoRendererType</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>aa3d9ec3787a0af2478c59ff11a830f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dshowDefault</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>aa3d9ec3787a0af2478c59ff11a830f75a620a1e36deb4388aadeb49be5097867a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dshowVMR7</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>aa3d9ec3787a0af2478c59ff11a830f75a5108392f04c0124e700030eb9b284830</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dshowEVR</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>aa3d9ec3787a0af2478c59ff11a830f75a4bd766a5f5a12e8a4a0f07a8f41e6a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DirectShowComponent</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>af377e8270137e9905e93963acc49c2ea</anchor>
      <arglist>(VideoRendererType type=dshowDefault)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirectShowComponent</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a3a031b3db994fcd730cc6a5899f76462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadMovie</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a0507e6218c2e5b3989cb1ecb7d8de6e5</anchor>
      <arglist>(const String &amp;fileOrURLPath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadMovie</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a2fa45b9cc38e2bb703993751a08f2ca4</anchor>
      <arglist>(const File &amp;videoFile)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadMovie</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a38f8befa6cdbc6cfcd2cb90b8eb0a787</anchor>
      <arglist>(const URL &amp;videoURL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeMovie</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>aa67b15760af62bd603c21755875ede6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getCurrentMoviePath</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>ad8d9681483157f588821bf46548e506f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMovieOpen</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a91155448dda4da76e0aa43d7edc7a273</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMovieDuration</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a703329107a31c9dcb9abf0e557f335e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMovieNormalSize</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a480353733e58cf0c058fc9ea1c8389c6</anchor>
      <arglist>(int &amp;width, int &amp;height) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsWithCorrectAspectRatio</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>ada3465daface84617e2cfda247ca314b</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;spaceToFitWithin, const RectanglePlacement &amp;placement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a3dc4bbafdac3d59bbc315acb702b5d5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>aadf35a6d2c19a56daf048bb0b35fbdbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPlaying</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a1a7a6acb5d1023b9d1a98c32a2d68f7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>goToStart</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a4085f670398f80f9fe1c9239031b6f2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>abb6c7953230480059531079f1b4d85e3</anchor>
      <arglist>(double seconds)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPosition</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a1fec1718a781ad2dc1a928c3de6e24b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a288657f65e80827b7bdfe66fe3e36f2e</anchor>
      <arglist>(float newSpeed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMovieVolume</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>aed7c40f62febda7379a324426785fa55</anchor>
      <arglist>(float newVolume)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMovieVolume</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>ad907cc2dd51b8cbc8190978e4dd70f97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLooping</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>ae41e98c70c7054ff829f55804e577315</anchor>
      <arglist>(bool shouldLoop)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLooping</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a2d893091757b5af3d7ca22304a8e96dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a82a07fa1b500a2661d2bc47471f19d4d</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDirectShowAvailable</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a00bd500520826772c092c9c66db1440f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DocumentWindow</name>
    <filename>classDocumentWindow.html</filename>
    <base>ResizableWindow</base>
    <member kind="enumeration">
      <name>TitleBarButtons</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a104d68bc145157c6ce79169a36fc3c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>minimiseButton</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a104d68bc145157c6ce79169a36fc3c31a4200920dc08e7ecfe1c8b90444d99098</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>maximiseButton</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a104d68bc145157c6ce79169a36fc3c31a84fe4bbe25739fe241f2e6128e7a51c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>closeButton</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a104d68bc145157c6ce79169a36fc3c31a80e87a70beeecc78adc89517fa1df978</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>allButtons</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a104d68bc145157c6ce79169a36fc3c31af4a9b49869cebf7e8cecaf7f6dd93420</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a227c6ab86245d481d4dbe21893cb028c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textColourId</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a227c6ab86245d481d4dbe21893cb028ca7d2f8fdfae3820cd074ebd598cf220ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DocumentWindow</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a79d8474b5d0d8e1bfe2713dc1841063d</anchor>
      <arglist>(const String &amp;name, const Colour &amp;backgroundColour, int requiredButtons, bool addToDesktop=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DocumentWindow</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a2a142203d2559ee92d5cac99dfa1c265</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a0419b64dbdccbbf2538c1ff7b5aa3c23</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIcon</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>ae2270940d36586af89359045bdd9c844</anchor>
      <arglist>(const Image &amp;imageToUse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleBarHeight</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a02567fc3120d918ac5d7929813c1a56b</anchor>
      <arglist>(int newHeight)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTitleBarHeight</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>abac134f2107fabc94ed2751a158c1a9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleBarButtonsRequired</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>af9549ecc64c2b7e91161a49c44b6ae17</anchor>
      <arglist>(int requiredButtons, bool positionTitleBarButtonsOnLeft)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleBarTextCentred</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>af85b7ce283221be0bc17015b8c1bc1aa</anchor>
      <arglist>(bool textShouldBeCentred)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMenuBar</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a4a808defbae48839786354a350eaf7ea</anchor>
      <arglist>(MenuBarModel *menuBarModel, int menuBarHeight=0)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getMenuBarComponent</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a5c89d66d32f7487b5ec556318030b918</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMenuBarComponent</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>adcb1654739565bad5aec52c143d2cd52</anchor>
      <arglist>(Component *newMenuBarComponent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>closeButtonPressed</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a71c46283a6fe63f2cad49d01997e16d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>minimiseButtonPressed</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a939d52f9986f46aa8929c69e02258acc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>maximiseButtonPressed</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a1d2ce7145c2e6da062e22589543ea037</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Button *</type>
      <name>getCloseButton</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a9bf5e16ce71e573dbd8d06641db4c221</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Button *</type>
      <name>getMinimiseButton</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>af94690223f336bd56361c64210a15149</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Button *</type>
      <name>getMaximiseButton</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a9441c9bc7085750342b70faa7df0a229</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DragAndDropContainer</name>
    <filename>classDragAndDropContainer.html</filename>
    <member kind="function">
      <type></type>
      <name>DragAndDropContainer</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>af5236c188d64a8ac0103754ee676f339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DragAndDropContainer</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>ade6447a100fab338176980f99fa04e8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startDragging</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>ad1a4517773d3276e59ba6d2f098b0742</anchor>
      <arglist>(const var &amp;sourceDescription, Component *sourceComponent, const Image &amp;dragImage=Image::null, bool allowDraggingToOtherJuceWindows=false, const Point&lt; int &gt; *imageOffsetFromMouse=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDragAndDropActive</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>aa1929c259d62aac44d866abd3e52ef1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getCurrentDragDescription</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>af106a4c35c7ff449e45a1e7490641171</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DragAndDropContainer *</type>
      <name>findParentDragContainerFor</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>ab2862f4fe5815a2089c886ab96193949</anchor>
      <arglist>(Component *childComponent)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>performExternalDragDropOfFiles</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>ae9e29e4a49717401e4631fc5864f0a04</anchor>
      <arglist>(const StringArray &amp;files, bool canMoveFiles)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>performExternalDragDropOfText</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>a42446d76aa9b798d56936f6de6c270a5</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>shouldDropFilesWhenDraggedExternally</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>a69b389d34bc9748eb5f82a8995aae28d</anchor>
      <arglist>(const DragAndDropTarget::SourceDetails &amp;sourceDetails, StringArray &amp;files, bool &amp;canMoveFiles)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DragAndDropTarget</name>
    <filename>classDragAndDropTarget.html</filename>
    <class kind="class">DragAndDropTarget::SourceDetails</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DragAndDropTarget</name>
      <anchorfile>classDragAndDropTarget.html</anchorfile>
      <anchor>ae38b4052c9fb331f52a5cf41d9e4efca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInterestedInDragSource</name>
      <anchorfile>classDragAndDropTarget.html</anchorfile>
      <anchor>a53853ec7aac70f5590a590b84c3f4f12</anchor>
      <arglist>(const SourceDetails &amp;dragSourceDetails)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemDragEnter</name>
      <anchorfile>classDragAndDropTarget.html</anchorfile>
      <anchor>a116d963d936a6f1fff772d7d4bb6c811</anchor>
      <arglist>(const SourceDetails &amp;dragSourceDetails)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemDragMove</name>
      <anchorfile>classDragAndDropTarget.html</anchorfile>
      <anchor>a7f867a2c2d966cd80b0b6736a7ff96f1</anchor>
      <arglist>(const SourceDetails &amp;dragSourceDetails)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemDragExit</name>
      <anchorfile>classDragAndDropTarget.html</anchorfile>
      <anchor>a1b99d312afac5f1a84fe1ef84c94982e</anchor>
      <arglist>(const SourceDetails &amp;dragSourceDetails)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>itemDropped</name>
      <anchorfile>classDragAndDropTarget.html</anchorfile>
      <anchor>ac2240ffc2dd0ccf61670780a15b66017</anchor>
      <arglist>(const SourceDetails &amp;dragSourceDetails)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>shouldDrawDragImageWhenOver</name>
      <anchorfile>classDragAndDropTarget.html</anchorfile>
      <anchor>a160dc7a89ab43cd8d55c5e902bd0032c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DragAndDropTarget::SourceDetails</name>
    <filename>classDragAndDropTarget_1_1SourceDetails.html</filename>
    <member kind="function">
      <type></type>
      <name>SourceDetails</name>
      <anchorfile>classDragAndDropTarget_1_1SourceDetails.html</anchorfile>
      <anchor>affa8e9f1dfb0ad4f6f9e82e1b6416006</anchor>
      <arglist>(const var &amp;description, Component *sourceComponent, const Point&lt; int &gt; &amp;localPosition) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>var</type>
      <name>description</name>
      <anchorfile>classDragAndDropTarget_1_1SourceDetails.html</anchorfile>
      <anchor>a48087c787b2d1f08f84ba7bd6c5c6eec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WeakReference&lt; Component &gt;</type>
      <name>sourceComponent</name>
      <anchorfile>classDragAndDropTarget_1_1SourceDetails.html</anchorfile>
      <anchor>ad64cf556308af58fb6873d16f4a590de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point&lt; int &gt;</type>
      <name>localPosition</name>
      <anchorfile>classDragAndDropTarget_1_1SourceDetails.html</anchorfile>
      <anchor>ae56f0216335992ae66fdfacc3f4c6837</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Draggable3DOrientation</name>
    <filename>classDraggable3DOrientation.html</filename>
    <member kind="typedef">
      <type>Vector3D&lt; GLfloat &gt;</type>
      <name>VectorType</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>aae0b643886f4857b0a2a7bed1ace01a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Draggable3DOrientation</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>a926f24463e2a332a31897be82726e780</anchor>
      <arglist>(float objectRadius=0.5f) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>a044ceada7a836f33ed3b5359fdfd7117</anchor>
      <arglist>(const VectorType &amp;axis) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewport</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>aaf819f208f7b6f098a9d14084281f84c</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newArea) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>aba3b29abef586953b0ab2dc709dc274c</anchor>
      <arglist>(float newRadius) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>a336c7c82805ee40062b05ae12be2d589</anchor>
      <arglist>(const Point&lt; Type &gt; &amp;mousePos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>ab815c213fb6f40ee3516154c1bc4ec05</anchor>
      <arglist>(const Point&lt; Type &gt; &amp;mousePos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Matrix3D&lt; GLfloat &gt;</type>
      <name>getRotationMatrix</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>a0dcfe419cc056ca2150e71579502c695</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Drawable</name>
    <filename>classDrawable.html</filename>
    <base>Component</base>
    <class kind="class">Drawable::ValueTreeWrapperBase</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Drawable</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>abdc2e2d82c51c1703656a2dfba0feabd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Drawable *</type>
      <name>createCopy</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a4632f7ae2228fe64f4595291dcc813d6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>aba3144ad6192220685503f516411eeb0</anchor>
      <arglist>(Graphics &amp;g, float opacity, const AffineTransform &amp;transform=AffineTransform::identity) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawAt</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a25ec80262ebef1fd06d01b51893cee10</anchor>
      <arglist>(Graphics &amp;g, float x, float y, float opacity) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawWithin</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>afe9ff12d1f9a90b652ef53bd315cf9df</anchor>
      <arglist>(Graphics &amp;g, const Rectangle&lt; float &gt; &amp;destArea, const RectanglePlacement &amp;placement, float opacity) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOriginWithOriginalSize</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a51d0e1aa0062958f5220c9ad76f5a98d</anchor>
      <arglist>(const Point&lt; float &gt; &amp;originWithinParent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransformToFit</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a4c09ceb204e2909222929a9eb5b25a22</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;areaInParent, const RectanglePlacement &amp;placement)</arglist>
    </member>
    <member kind="function">
      <type>DrawableComposite *</type>
      <name>getParent</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a201ad5150a8a37b26a6587c6e51c75c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ValueTree</type>
      <name>createValueTree</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>accf0372cb695f03099384f1dadcc5b0a</anchor>
      <arglist>(ComponentBuilder::ImageProvider *imageProvider) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rectangle&lt; float &gt;</type>
      <name>getDrawableBounds</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a96e6f740a809b93b9ecf5f6e0dd3e421</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Drawable *</type>
      <name>createFromImageData</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a490039369111891979147bdfecf8d389</anchor>
      <arglist>(const void *data, size_t numBytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Drawable *</type>
      <name>createFromImageDataStream</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a763ef7e95af00fb88b4c45a1c38bd942</anchor>
      <arglist>(InputStream &amp;dataSource)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Drawable *</type>
      <name>createFromImageFile</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a71c90179ca2a582ef0814c983be41dc9</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Drawable *</type>
      <name>createFromSVG</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>af1fa4fa00c6e37bcaa7a9322a81bd2ec</anchor>
      <arglist>(const XmlElement &amp;svgDocument)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Drawable *</type>
      <name>createFromValueTree</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a59ef4e2922c93f3ec4cef7d11c980c69</anchor>
      <arglist>(const ValueTree &amp;tree, ComponentBuilder::ImageProvider *imageProvider)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerDrawableTypeHandlers</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a53870971c976cb6a7f37b67bc1e1929c</anchor>
      <arglist>(ComponentBuilder &amp;componentBuilder)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Drawable</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>aac88608db6081da479c772c96636acb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>transformContextToCorrectOrigin</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a5677834b7ae237a1777080ff6d246c7a</anchor>
      <arglist>(Graphics &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>ad5229618f634a19a7348a3b715791ea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setBoundsToEnclose</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>adcc45223d94b972f04d6734544df179e</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point&lt; int &gt;</type>
      <name>originRelativeToComponent</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a6f6686d94ab6c007bc89e97667fb1ef4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Drawable::ValueTreeWrapperBase</name>
    <filename>classDrawable_1_1ValueTreeWrapperBase.html</filename>
    <member kind="function">
      <type></type>
      <name>ValueTreeWrapperBase</name>
      <anchorfile>classDrawable_1_1ValueTreeWrapperBase.html</anchorfile>
      <anchor>a710b004f7226d58f3c95efce51f1c5b0</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree &amp;</type>
      <name>getState</name>
      <anchorfile>classDrawable_1_1ValueTreeWrapperBase.html</anchorfile>
      <anchor>a2ba2dc4635c0beda683b7e12496ca92a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getID</name>
      <anchorfile>classDrawable_1_1ValueTreeWrapperBase.html</anchorfile>
      <anchor>ad7cea4e28a944fee27d80f32200f5f7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setID</name>
      <anchorfile>classDrawable_1_1ValueTreeWrapperBase.html</anchorfile>
      <anchor>af25db11edf263f3e1ab7db410ebcd48b</anchor>
      <arglist>(const String &amp;newID)</arglist>
    </member>
    <member kind="variable">
      <type>ValueTree</type>
      <name>state</name>
      <anchorfile>classDrawable_1_1ValueTreeWrapperBase.html</anchorfile>
      <anchor>a2d6a64bfed533cc3ea54b334510856eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableButton</name>
    <filename>classDrawableButton.html</filename>
    <base>Button</base>
    <member kind="enumeration">
      <name>ButtonStyle</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a7da653337d7329405ef9865cc35f612e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ImageFitted</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a7da653337d7329405ef9865cc35f612ea79a05e8e03a639da1e34dd2bc76a4a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ImageRaw</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a7da653337d7329405ef9865cc35f612eadeca41061a457668e1b73bcea58f437f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ImageAboveTextLabel</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a7da653337d7329405ef9865cc35f612ea062ae670bdd4925a0a708dbaca8ebc2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ImageOnButtonBackground</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a7da653337d7329405ef9865cc35f612eaff968e270892fae0fee459da811d6a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a469961782a284aae38a2234a7f3fd37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textColourId</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a469961782a284aae38a2234a7f3fd37fabc6adc2de607e8eae04f999765ecf4ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawableButton</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a27adb65452ea50435a4a4e90c70e2cd0</anchor>
      <arglist>(const String &amp;buttonName, ButtonStyle buttonStyle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DrawableButton</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a9703cbdd10a62d88f297b9e2ac321dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImages</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a234fdfb0b05c4b2fe42b22366377829a</anchor>
      <arglist>(const Drawable *normalImage, const Drawable *overImage=nullptr, const Drawable *downImage=nullptr, const Drawable *disabledImage=nullptr, const Drawable *normalImageOn=nullptr, const Drawable *overImageOn=nullptr, const Drawable *downImageOn=nullptr, const Drawable *disabledImageOn=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setButtonStyle</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a5858b272f7062972f23eecfa4bb39362</anchor>
      <arglist>(ButtonStyle newStyle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColours</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>ab4f4cfb653551478adf5a57aa327a1aa</anchor>
      <arglist>(const Colour &amp;toggledOffColour, const Colour &amp;toggledOnColour)</arglist>
    </member>
    <member kind="function">
      <type>const Colour &amp;</type>
      <name>getBackgroundColour</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a9a776a06325e64e710c08f83bb37df0a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEdgeIndent</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a92a1179fe613504e1c0286bea62f9d7b</anchor>
      <arglist>(int numPixelsIndent)</arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>getCurrentImage</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>ad35d7da94a1e273ed5ac02d3591cfbb6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>getNormalImage</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>aa7c619db8754f604683b142683ab3afa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>getOverImage</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a178db462442745dba519dd884c90e6da</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>getDownImage</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a36fcdc9874414f34b173a2421a75c971</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a41b96d4fc2cd66b2325fa89310491a5a</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buttonStateChanged</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>ac7e055f7fcb1b2b75c08988a8578a243</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>af5e967b4d5866b6163f5bf3d01eb6fc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>abcfe109859c5f919c62af20da3ed15cd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableComposite</name>
    <filename>classDrawableComposite.html</filename>
    <base>Drawable</base>
    <class kind="class">DrawableComposite::ValueTreeWrapper</class>
    <member kind="function">
      <type></type>
      <name>DrawableComposite</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a03de775754fc0adf53262a651c8ca536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawableComposite</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>ae726a50e717c379a4f21a279506b1923</anchor>
      <arglist>(const DrawableComposite &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DrawableComposite</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a85ba7ab4bc45277ac96fa316b6fb91f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundingBox</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a0270c53e717d85b48e543f643703ada0</anchor>
      <arglist>(const RelativeParallelogram &amp;newBoundingBox)</arglist>
    </member>
    <member kind="function">
      <type>const RelativeParallelogram &amp;</type>
      <name>getBoundingBox</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>af9332218974c8f64403493a0e69013fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetBoundingBoxToContentArea</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a01762a42369e45a94d81c20bdc7e2d97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RelativeRectangle</type>
      <name>getContentArea</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>af05ea57b78d785ae92b13148de6602ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContentArea</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>ae1e3ae693c61513ed066c8b7ee46cfdd</anchor>
      <arglist>(const RelativeRectangle &amp;newArea)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetContentAreaAndBoundingBoxToFitChildren</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a3f6167f97a85bfab740f819ba6dae9b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>createCopy</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a9561857f7f0bd55184e1c9143251c0f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a18479c21f2611f97288b085aa8752d80</anchor>
      <arglist>(const ValueTree &amp;tree, ComponentBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createValueTree</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a443ab44a906834f66e35bcdfa145882a</anchor>
      <arglist>(ComponentBuilder::ImageProvider *imageProvider) const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getDrawableBounds</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a988966145119da928c5aa7fc42537bf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>childBoundsChanged</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a3a1df0c5e6f84ae2efbfa74f48685649</anchor>
      <arglist>(Component *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>childrenChanged</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>accfc779991c5c9562920f7b3d5f1edfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a5719168c0e5cdecf6dfd9b9baf35ed24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MarkerList *</type>
      <name>getMarkers</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>aa2dac5e3d09427a0ab495b5dfbd31818</anchor>
      <arglist>(bool xAxis)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>contentLeftMarkerName</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>aec7b41e0b8a05908a76dfef64c24696e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>contentRightMarkerName</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a8c5712364c56e60249a4733748bebff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>contentTopMarkerName</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>aca2862d596418e25a34e1331494171c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>contentBottomMarkerName</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>ac2b79e5eba11fb1e28c4970f17ec4a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>valueTreeType</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a79fcbf54418bd3ed7c361267e78dcb6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableComposite::ValueTreeWrapper</name>
    <filename>classDrawableComposite_1_1ValueTreeWrapper.html</filename>
    <base>Drawable::ValueTreeWrapperBase</base>
    <member kind="function">
      <type></type>
      <name>ValueTreeWrapper</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a226ea81b6d4fbc40ccbfd56b42196850</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getChildList</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a8450173efdb5e66a89ddfbdfb1a4e6b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getChildListCreating</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ae840e7be6efa39e431701021b2122d23</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>RelativeParallelogram</type>
      <name>getBoundingBox</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aeb8248e07e781566a2e8d441391551cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundingBox</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>acf472a93be9ce2520bbb5adf967b1ac9</anchor>
      <arglist>(const RelativeParallelogram &amp;newBounds, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetBoundingBoxToContentArea</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a27e459b1cc288fe3b9b69704b6a72be8</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>RelativeRectangle</type>
      <name>getContentArea</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a9b3ce53ae0da24984199779f8763598c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContentArea</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a56d6cde91c167fc948b479fa63191392</anchor>
      <arglist>(const RelativeRectangle &amp;newArea, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>MarkerList::ValueTreeWrapper</type>
      <name>getMarkerList</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ae091784eb7137a5cc92364bc6e774594</anchor>
      <arglist>(bool xAxis) const </arglist>
    </member>
    <member kind="function">
      <type>MarkerList::ValueTreeWrapper</type>
      <name>getMarkerListCreating</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>afebe568ce8bee588640594d061808606</anchor>
      <arglist>(bool xAxis, UndoManager *undoManager)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>topLeft</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a0553ca238cf2927942ec8f9c2fc18dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>topRight</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ab7ac1253c570eefa862e9fd70138f384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>bottomLeft</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ad52741ce0a23d56efc8563a97e16a4d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableImage</name>
    <filename>classDrawableImage.html</filename>
    <base>Drawable</base>
    <class kind="class">DrawableImage::ValueTreeWrapper</class>
    <member kind="function">
      <type></type>
      <name>DrawableImage</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a3d192dde1f7e9de122120f1824d5cd25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawableImage</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a5fc0437d940c28125d52fc331697dd69</anchor>
      <arglist>(const DrawableImage &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DrawableImage</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a7b34a12e946c0511bc534678461fdee2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImage</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a7d7980f2c8500b3224d1933cc8d65f86</anchor>
      <arglist>(const Image &amp;imageToUse)</arglist>
    </member>
    <member kind="function">
      <type>const Image &amp;</type>
      <name>getImage</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a4504d733f0df8eaa04a379777e1115c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a861406d16189ce7cb99128c0908daa03</anchor>
      <arglist>(float newOpacity)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a59963e5d33e6af788ce007b17f5fdc6e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverlayColour</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a440585a169c6acf1bb650def36946d43</anchor>
      <arglist>(const Colour &amp;newOverlayColour)</arglist>
    </member>
    <member kind="function">
      <type>const Colour &amp;</type>
      <name>getOverlayColour</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a5ccf5bbdecba127a1abb541450fdcc26</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundingBox</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a0fd935358208c9c564ed5adbb25f73c3</anchor>
      <arglist>(const RelativeParallelogram &amp;newBounds)</arglist>
    </member>
    <member kind="function">
      <type>const RelativeParallelogram &amp;</type>
      <name>getBoundingBox</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>ac962ca5d26adbecd1e31e3f1a931d107</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>aede2a24db1ad5a170e43c13ee5a84424</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a766fb4f5eb006e514604eec90cff7c6b</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>createCopy</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a088c8487043c0a6d7c3ced03278aa67e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getDrawableBounds</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a7af2b1d4db052c47b1e5e6460a4ab421</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>ad6ba8d81dc65a4100625bf47afdb9abe</anchor>
      <arglist>(const ValueTree &amp;tree, ComponentBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createValueTree</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a1760545195aaf0701e16fc2222291e37</anchor>
      <arglist>(ComponentBuilder::ImageProvider *imageProvider) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>valueTreeType</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>af85b0cacc82d36803d92a07cb2245d32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableImage::ValueTreeWrapper</name>
    <filename>classDrawableImage_1_1ValueTreeWrapper.html</filename>
    <base>Drawable::ValueTreeWrapperBase</base>
    <member kind="function">
      <type></type>
      <name>ValueTreeWrapper</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a2d75a11b7483fcb75236dc155f007bd0</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>getImageIdentifier</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aba81007fe62146ff1343499802c3b51b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImageIdentifier</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a2198be493f5555b6928bc2e239573e31</anchor>
      <arglist>(const var &amp;newIdentifier, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getImageIdentifierValue</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ad113b5bee2190612038804fc311de20a</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ad542679b725cea8595f6117d12fbdab8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a252ca5a2cecadf6a6496a80953410efe</anchor>
      <arglist>(float newOpacity, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getOpacityValue</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a8b8422082be6571156bc837242728544</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getOverlayColour</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ac1823974d19694e77755d192b77f16bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverlayColour</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a0ff08a906b43517b4007cbc76bed9e86</anchor>
      <arglist>(const Colour &amp;newColour, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getOverlayColourValue</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a4bd15f6d42a19fbcfd075f2f40a8f053</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>RelativeParallelogram</type>
      <name>getBoundingBox</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a519f7aaf04658a26b484aa944c1e3d12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundingBox</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aaa52bb39c5d19a8ad9422c80dda5e423</anchor>
      <arglist>(const RelativeParallelogram &amp;newBounds, UndoManager *undoManager)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>opacity</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a2eb3f522f2a263945932325aec6c8ffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>overlay</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a87c038c00ada31d98fa53ff64e0372a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>image</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a2926330f303d36706fe0f2fa865bd798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>topLeft</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ac57b823891f541423b30e71c5d49ed80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>topRight</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a76a96fe668faeb05516a5733e7f145e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>bottomLeft</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a645b1394e866d6d7c3a32b85fc3c9c4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawablePath</name>
    <filename>classDrawablePath.html</filename>
    <base>DrawableShape</base>
    <class kind="class">DrawablePath::ValueTreeWrapper</class>
    <member kind="function">
      <type></type>
      <name>DrawablePath</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>af685ace4640b8a33605587b25061095c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawablePath</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>a37864df96418ce1abac65162a938eff8</anchor>
      <arglist>(const DrawablePath &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DrawablePath</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>a421318896d790d59d43728ed81d47af2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>afc77b134d5d7920d8dc3028715c9b3ba</anchor>
      <arglist>(const Path &amp;newPath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>a51d8c85c76107f04d55e693bfdb2c117</anchor>
      <arglist>(const RelativePointPath &amp;newPath)</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>getPath</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>ac93a6f37d524176cd1c94397a827656e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>getStrokePath</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>a33b7a58c89c9e45d164e1faadf04ed39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>createCopy</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>a3cbfe640cd411ee076429a5416c6db1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>a3a0e354bc056708ed60d48328427385a</anchor>
      <arglist>(const ValueTree &amp;tree, ComponentBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createValueTree</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>a27fc29cae074fcd618cd47f9fc3dbfbd</anchor>
      <arglist>(ComponentBuilder::ImageProvider *imageProvider) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>valueTreeType</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>a8f7990a66e3691eda445ae155b24988c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawablePath::ValueTreeWrapper</name>
    <filename>classDrawablePath_1_1ValueTreeWrapper.html</filename>
    <base>DrawableShape::FillAndStrokeState</base>
    <class kind="class">DrawablePath::ValueTreeWrapper::Element</class>
    <member kind="function">
      <type></type>
      <name>ValueTreeWrapper</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a60df26703971f4cf381b2d8ea8695538</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesNonZeroWinding</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a520c193d536d0ab53cd5de356b6996be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsesNonZeroWinding</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>acdbb5580fcf38ccbe081755a80bf1570</anchor>
      <arglist>(bool b, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getPathState</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ad1fde4b7a140fef1f7d68b43625cca2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFrom</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ac781ae7badd63b239b8f885ae7dfe862</anchor>
      <arglist>(const RelativePointPath &amp;path, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeTo</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a2e9d9851cb80279b61485560e5ce457d</anchor>
      <arglist>(RelativePointPath &amp;path) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>nonZeroWinding</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a233cbbc5988e65e249c94820af5b6beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>point1</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aea7b6ab1d84a3a683d07bd40ad82d0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>point2</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a5376b890660e14bce30c42e3ec2d2f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>point3</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a5e1d8e76ec4f251fe8e41565baf70426</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawablePath::ValueTreeWrapper::Element</name>
    <filename>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</filename>
    <member kind="function">
      <type></type>
      <name>Element</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a182bb0536be440f286655d58705ed912</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Element</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a161eab4724ba67c2a24ec899f156231a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Identifier</type>
      <name>getType</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ac8097562285b0095974394de4bc59551</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumControlPoints</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ae4e38e3c66c5f1793f60161eb9194cbb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>RelativePoint</type>
      <name>getControlPoint</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ab908d4daa9ac7f8804b082585a07c482</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getControlPointValue</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a428356a0a4f8596d2eca4ba5770fc8c0</anchor>
      <arglist>(int index, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>RelativePoint</type>
      <name>getStartPoint</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a36dadd1daec35ed8be7224a3cdbdd249</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RelativePoint</type>
      <name>getEndPoint</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a4599e259116e17a57724a019f138ea34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setControlPoint</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ae67ec069b9614c5e9b3a63cc86ed0ba9</anchor>
      <arglist>(int index, const RelativePoint &amp;point, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLength</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a9292f87d3691d854d9101cc6111d3cdd</anchor>
      <arglist>(Expression::Scope *) const </arglist>
    </member>
    <member kind="function">
      <type>ValueTreeWrapper</type>
      <name>getParent</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ad4eee45337597489c6641a0348f6db4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Element</type>
      <name>getPreviousElement</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>aaa0147fc39a843203d0a65d4f9be503d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getModeOfEndPoint</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a597cea5b170e400690358b5b00c4d5b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModeOfEndPoint</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a7adf5df3a10f8624b4a9b57abb1224e0</anchor>
      <arglist>(const String &amp;newMode, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToLine</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ae2e323b120d273f239ed9e7667cfe819</anchor>
      <arglist>(UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToCubic</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ace6be613e553e831b40e09198cb7d931</anchor>
      <arglist>(Expression::Scope *, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToPathBreak</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>af3d3612f5664aa28830f63369fbb64f4</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>insertPoint</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a9d5a6e8663ced725c6e0b5724fdcc5fb</anchor>
      <arglist>(const Point&lt; float &gt; &amp;targetPoint, Expression::Scope *, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePoint</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a9e3f8061e154623859db61afa2497371</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>findProportionAlongLine</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a3e5e46566e1ebe3f1857d7d682904a11</anchor>
      <arglist>(const Point&lt; float &gt; &amp;targetPoint, Expression::Scope *) const </arglist>
    </member>
    <member kind="variable">
      <type>ValueTree</type>
      <name>state</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a7661a9586364dfdbb02ba2908e34226e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>mode</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a911a7f8c73d60b650f815e64f6d2684f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>startSubPathElement</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a2b07436db001bf677a70b81eae3311ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>closeSubPathElement</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a7afc7b8afa97f1aa086fd2dd5e58e616</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>lineToElement</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a4675f4374c85907b4fe86d21ffe58116</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>quadraticToElement</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ab21ea7edef3d68b071eba53b3232cc65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>cubicToElement</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a5c9f1dd9bbb59220239ffa238566eb19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>cornerMode</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a35740e83f44d2420d298b73c6bee0f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>roundedMode</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ac0a638e6c79fa05a4ffd78efc2061d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>symmetricMode</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ad46a5846bf7817ae1524974836fc7d9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableRectangle</name>
    <filename>classDrawableRectangle.html</filename>
    <base>DrawableShape</base>
    <class kind="class">DrawableRectangle::ValueTreeWrapper</class>
    <member kind="function">
      <type></type>
      <name>DrawableRectangle</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>a2c89f32aec360f2bcbc14317d88995f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawableRectangle</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>a3a442189039ee28d648be533eb5951fa</anchor>
      <arglist>(const DrawableRectangle &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DrawableRectangle</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>ad8515015ca9ca3cf54c0bfe2f004b2e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRectangle</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>a8c1259882358487176efb8014a4ee6a0</anchor>
      <arglist>(const RelativeParallelogram &amp;newBounds)</arglist>
    </member>
    <member kind="function">
      <type>const RelativeParallelogram &amp;</type>
      <name>getRectangle</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>abc9e853d1ba2ad799e0259baef40207a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const RelativePoint &amp;</type>
      <name>getCornerSize</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>a8c85f34dbaf2b42d2b2d12ad5b6e8c55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCornerSize</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>a1aa94bb3b7d2ff53760e0287f4217c82</anchor>
      <arglist>(const RelativePoint &amp;newSize)</arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>createCopy</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>a34af64455c0c362d49a340893571b8d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>a4ecff8ac31c987e8120019ab8211ba0c</anchor>
      <arglist>(const ValueTree &amp;tree, ComponentBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createValueTree</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>a2be91d71b8822deb0c276a256dab0d18</anchor>
      <arglist>(ComponentBuilder::ImageProvider *imageProvider) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>valueTreeType</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>af8fb302856b2ce235256bb6a15b2e6ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableRectangle::ValueTreeWrapper</name>
    <filename>classDrawableRectangle_1_1ValueTreeWrapper.html</filename>
    <base>DrawableShape::FillAndStrokeState</base>
    <member kind="function">
      <type></type>
      <name>ValueTreeWrapper</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a2faf2ce3cefa520c517d68ca93963e56</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>RelativeParallelogram</type>
      <name>getRectangle</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a0c1c6dd3125518c617290741e7f1f8c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRectangle</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a511d83577f6700b93259175031430ea3</anchor>
      <arglist>(const RelativeParallelogram &amp;newBounds, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCornerSize</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a800c92b165c53698e3ba489c37143427</anchor>
      <arglist>(const RelativePoint &amp;cornerSize, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>RelativePoint</type>
      <name>getCornerSize</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ab96cc47ffb3914db90aab74c42eeddae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getCornerSizeValue</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a895dd398ced7e8d71c74b459f21472f2</anchor>
      <arglist>(UndoManager *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>topLeft</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a3a2a5555be166a365df5cbdc07d879a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>topRight</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a48265bf9f33a9b5a5196fb9d8dee5c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>bottomLeft</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aa6b275efad14fda5688b27a786410c69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>cornerSize</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a0f3d6a68566ca3aa73532e0d991d2801</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableShape</name>
    <filename>classDrawableShape.html</filename>
    <base>Drawable</base>
    <class kind="class">DrawableShape::FillAndStrokeState</class>
    <class kind="class">DrawableShape::RelativeFillType</class>
    <member kind="function">
      <type></type>
      <name>~DrawableShape</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a320310cd3b48159d7994742d40c1a654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFill</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>acac534a8806a58ad45fea910a022b0fc</anchor>
      <arglist>(const FillType &amp;newFill)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFill</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a993e5bdb51adb90a18134ecf7a293566</anchor>
      <arglist>(const RelativeFillType &amp;newFill)</arglist>
    </member>
    <member kind="function">
      <type>const RelativeFillType &amp;</type>
      <name>getFill</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>adbe8f3b0aa43997ac4029485d87b4b88</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrokeFill</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>aa74fc95e0a629aa77654e88141ce818e</anchor>
      <arglist>(const FillType &amp;newStrokeFill)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrokeFill</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>ad595bc87395c5ee75dfcc8881b53ff65</anchor>
      <arglist>(const RelativeFillType &amp;newStrokeFill)</arglist>
    </member>
    <member kind="function">
      <type>const RelativeFillType &amp;</type>
      <name>getStrokeFill</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>aa9706720b417455b2f6f2c2f78ff2ffc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrokeType</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a668a8cbaac3e95ff46daaf2510c28bd3</anchor>
      <arglist>(const PathStrokeType &amp;newStrokeType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrokeThickness</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>aecf3b3fedf3e0caadd910927d10940f9</anchor>
      <arglist>(float newThickness)</arglist>
    </member>
    <member kind="function">
      <type>const PathStrokeType &amp;</type>
      <name>getStrokeType</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a9f774b60dc20e284865c5737686feec6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getDrawableBounds</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a206aa3cd5054cef851eb08315f1facfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>afd6b6eb2819f4f911aac0cfd6aa29d32</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a72064b4dc0a9487935fcbd19a55a5a40</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DrawableShape</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a802d24377bfe9d86c0757d7cded7ad43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DrawableShape</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>ad39f6fc4cb38f727b473a9d36b8eee43</anchor>
      <arglist>(const DrawableShape &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pathChanged</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>aa21557f80e4dbfede45bead0d53bf10c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>strokeChanged</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>ab7003952d3057045477be1cab834652e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isStrokeVisible</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a6f86229d1c51128bc47092ee7cf50f64</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>refreshFillTypes</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>acd67891c52a71792f90e2f6851f7fcfc</anchor>
      <arglist>(const FillAndStrokeState &amp;newState, ComponentBuilder::ImageProvider *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeTo</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>ac63d5cfc7a027d9c871d6bae60a955fc</anchor>
      <arglist>(FillAndStrokeState &amp;state, ComponentBuilder::ImageProvider *, UndoManager *) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathStrokeType</type>
      <name>strokeType</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>af636e2ff4b818d2b51994291facb30f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Path</type>
      <name>path</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a21fde06c1c09e9498575cbbfd36e7793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Path</type>
      <name>strokePath</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a9400e1628d38b4719c211da4158bc2ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableShape::FillAndStrokeState</name>
    <filename>classDrawableShape_1_1FillAndStrokeState.html</filename>
    <base>Drawable::ValueTreeWrapperBase</base>
    <member kind="function">
      <type></type>
      <name>FillAndStrokeState</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>adfecfeb667dfe2df233121ca4eaa8ed9</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getFillState</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a3e09291e14155308d7e0c419e6b92799</anchor>
      <arglist>(const Identifier &amp;fillOrStrokeType)</arglist>
    </member>
    <member kind="function">
      <type>RelativeFillType</type>
      <name>getFill</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a4bbfcc962666df3263f031a354f75742</anchor>
      <arglist>(const Identifier &amp;fillOrStrokeType, ComponentBuilder::ImageProvider *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFill</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a89626ce36a1d7d8f0e19f52ecdac4af3</anchor>
      <arglist>(const Identifier &amp;fillOrStrokeType, const RelativeFillType &amp;newFill, ComponentBuilder::ImageProvider *, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>PathStrokeType</type>
      <name>getStrokeType</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a7fdb2036ffce9db9c42d549145dcccad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrokeType</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a0ece5105599701ccdbfa1d65a4813c58</anchor>
      <arglist>(const PathStrokeType &amp;newStrokeType, UndoManager *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>type</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a6e88af5b0b69cf94ac15249483c0120a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>colour</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a347134a3f729efb5db8bf99a8329564d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>colours</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a76ee75c5e53e1af9ccfa7024e98d3e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>fill</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a1e913c8ccb288008352c13e904e6eca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>stroke</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a08c950337bcb50805541ad8f393969bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>path</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>ae8ba259de68b9df6260e6ba9ce4cf584</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>jointStyle</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>adf99bd7ed361ea8c43d293ef7f868d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>capStyle</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>abab2633ea9f8a934e8507f4881d2aade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>strokeWidth</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a28ff0be92cf70bf907ddfa4ba15ad52b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>gradientPoint1</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>ad239f8729825e72b61aca6eb452c897a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>gradientPoint2</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>affa1e7b20c1a64869e2db4bb321b19e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>gradientPoint3</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>afd09b1ebb23a013d95477020d2e066ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>radial</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a35b2d94ae6a13721f581b582400007bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>imageId</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>ad5d1a76e523f00264b9e44b26552772d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>imageOpacity</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a5103d236724f9a2757d7ae78f058dbf6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableShape::RelativeFillType</name>
    <filename>classDrawableShape_1_1RelativeFillType.html</filename>
    <member kind="function">
      <type></type>
      <name>RelativeFillType</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a1d18b56e7bbf1d96851afba0ffc97361</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeFillType</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>ac8574376679be369466a65c181b7c3bc</anchor>
      <arglist>(const FillType &amp;fill)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeFillType</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a57afe9e98af08368a187055a18fb638c</anchor>
      <arglist>(const RelativeFillType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>RelativeFillType &amp;</type>
      <name>operator=</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a4ca1fd09ab43316cfbbda2cbf302dcce</anchor>
      <arglist>(const RelativeFillType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a4b8a53dd920df244638133e1ba264664</anchor>
      <arglist>(const RelativeFillType &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a4fc70b5afe16f64e73b84e54327ff503</anchor>
      <arglist>(const RelativeFillType &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDynamic</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a8ce46992fd13ddf094e6a19dd5502fc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>recalculateCoords</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a076d32c0ce212574c253038bc39d7e5f</anchor>
      <arglist>(Expression::Scope *scope)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeTo</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a2eec5d9af7ed0b5dd32832af415d9592</anchor>
      <arglist>(ValueTree &amp;v, ComponentBuilder::ImageProvider *, UndoManager *) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFrom</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>aa1a99adfe5f82c9b3fa84c7c6aec6467</anchor>
      <arglist>(const ValueTree &amp;v, ComponentBuilder::ImageProvider *)</arglist>
    </member>
    <member kind="variable">
      <type>FillType</type>
      <name>fill</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a0026d1d9aa93d0ff94371b0d88dfd9e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>gradientPoint1</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a4b47e3bf680f03d73acc176869420b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>gradientPoint2</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a049a20063145853f8c9f3a470ed801e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>gradientPoint3</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a5a8bbcff3b0d52baf70528f9cdc7a3cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableText</name>
    <filename>classDrawableText.html</filename>
    <base>Drawable</base>
    <class kind="class">DrawableText::ValueTreeWrapper</class>
    <member kind="function">
      <type></type>
      <name>DrawableText</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a73580c842dc9e49ed090a14477e7c727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawableText</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>aef43047260a4bfc25e8456e14f22948b</anchor>
      <arglist>(const DrawableText &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DrawableText</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a5b0c67303f17491c35e0377f6867b290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a5c724f00d131228ecfc06694adca87b3</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getText</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>ab3a4ef75f8f80049d5bfc8016e4e67ac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a03521ac2b6f0d7e3c7101a5665e7ac89</anchor>
      <arglist>(const Colour &amp;newColour)</arglist>
    </member>
    <member kind="function">
      <type>const Colour &amp;</type>
      <name>getColour</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a84ba58e4f57e8b14224e7ba880342b69</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a2f2863123ab2a46c938394eb44585bf8</anchor>
      <arglist>(const Font &amp;newFont, bool applySizeAndScale)</arglist>
    </member>
    <member kind="function">
      <type>const Font &amp;</type>
      <name>getFont</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>aeb7642db1da8de0468a595a12d9a407e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJustification</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a938f2cfc4ecd82032f99985090d82dde</anchor>
      <arglist>(const Justification &amp;newJustification)</arglist>
    </member>
    <member kind="function">
      <type>const Justification &amp;</type>
      <name>getJustification</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>ab2543eda1a150035a70b3bccea95d4c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const RelativeParallelogram &amp;</type>
      <name>getBoundingBox</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a6616e9772907060e7a70ddffbfa1716c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundingBox</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a735a3721700a5c4e63b2c186ca6e0d41</anchor>
      <arglist>(const RelativeParallelogram &amp;newBounds)</arglist>
    </member>
    <member kind="function">
      <type>const RelativeCoordinate &amp;</type>
      <name>getFontHeight</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>ac8c1a818aa015af5fc4402483752271f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontHeight</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a401c60c9a4cf6a653c6ef1fef4ab9efc</anchor>
      <arglist>(const RelativeCoordinate &amp;newHeight)</arglist>
    </member>
    <member kind="function">
      <type>const RelativeCoordinate &amp;</type>
      <name>getFontHorizontalScale</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>af2a9dc839402ee623e1b26a438de6b59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontHorizontalScale</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a7c013a7d6b861f75cf85f5fc9d0e7d93</anchor>
      <arglist>(const RelativeCoordinate &amp;newScale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>ab8812e6b629390a0f765f7efae24938f</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>createCopy</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a37dbcc2467162b2ab05cbf6d7577546b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a7ed3e0fe3ec79a41bd475172892f3eca</anchor>
      <arglist>(const ValueTree &amp;tree, ComponentBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createValueTree</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>adcfe10a98ccfabbc0d19bf0bc64154ec</anchor>
      <arglist>(ComponentBuilder::ImageProvider *imageProvider) const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getDrawableBounds</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a4b501e7ce182941b05b034d2631450b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>valueTreeType</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>ad6de88be408a5940086cbb56891e1b5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableText::ValueTreeWrapper</name>
    <filename>classDrawableText_1_1ValueTreeWrapper.html</filename>
    <base>Drawable::ValueTreeWrapperBase</base>
    <member kind="function">
      <type></type>
      <name>ValueTreeWrapper</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aeaeb10047c8b037d7a15456da04769a7</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getText</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a52ee41015bb6c9f4ef6d9544e5a559a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aeeb6cbe54ad3a2e6ff65ec97bdf014e5</anchor>
      <arglist>(const String &amp;newText, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getTextValue</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a4909bf1667f8518156ed4b9683d3528c</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getColour</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a8d53f6956c39a21f567397b4e624e29e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ab53d5ca597d8742a5c7a9fb20285e6da</anchor>
      <arglist>(const Colour &amp;newColour, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>Justification</type>
      <name>getJustification</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ac9bdcc2a651b7c4ab2e801fc14117188</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJustification</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a95c531935483f452bea19722039c6a89</anchor>
      <arglist>(const Justification &amp;newJustification, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>getFont</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ad315746c06541231e8880abf442da325</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ade0fb00ee19f072454685d32a5f3063d</anchor>
      <arglist>(const Font &amp;newFont, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getFontValue</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ae3f5a8078bd285b8dc0ba465cac0ec2a</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>RelativeParallelogram</type>
      <name>getBoundingBox</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a56614741f509c5d73f797f61c43b189b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundingBox</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a6355eeabb6f4f2b85f29a2ea792f2c1f</anchor>
      <arglist>(const RelativeParallelogram &amp;newBounds, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>RelativeCoordinate</type>
      <name>getFontHeight</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a9e33ab845a7176341eb11b857d835f99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontHeight</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a90771c9155be7eee5b3ff0d0ecab1981</anchor>
      <arglist>(const RelativeCoordinate &amp;newHeight, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>RelativeCoordinate</type>
      <name>getFontHorizontalScale</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aec22e7bde043a1137c87d4122e6e08e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontHorizontalScale</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a0d9cc3512aca539de011270f968528cc</anchor>
      <arglist>(const RelativeCoordinate &amp;newScale, UndoManager *undoManager)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>text</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a286747f134e7fe4579075f71781d62cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>colour</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a38d4e6ba034789d76fc533e4950dc5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>font</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a58fc597095c77686d5eb2d97e539e64f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>justification</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a568480e7695b8c4be65f179e34fc1b61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>topLeft</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>af905ad717d903f7f7c6216e3588faa45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>topRight</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a4080580131c5dafed34ad920128d3c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>bottomLeft</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a3ba68bedf56180c1563b22bc5cd1f8f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>fontHeight</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a2b1cf90acc44a5ca2b9a7717962b44de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>fontHScale</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ac0a4ff12678830dd3a2cd0d1bd3c6e2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DropShadowEffect</name>
    <filename>classDropShadowEffect.html</filename>
    <base>ImageEffectFilter</base>
    <member kind="function">
      <type></type>
      <name>DropShadowEffect</name>
      <anchorfile>classDropShadowEffect.html</anchorfile>
      <anchor>a385d398423cf81f8e073195ea84473b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DropShadowEffect</name>
      <anchorfile>classDropShadowEffect.html</anchorfile>
      <anchor>ab74475a46901a77353310c39c82af5bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShadowProperties</name>
      <anchorfile>classDropShadowEffect.html</anchorfile>
      <anchor>adcfe0d311851f728cc68ef521d8e4f4a</anchor>
      <arglist>(float newRadius, float newOpacity, int newShadowOffsetX, int newShadowOffsetY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyEffect</name>
      <anchorfile>classDropShadowEffect.html</anchorfile>
      <anchor>aeee3f19864372e9c6ef4623df4e5a686</anchor>
      <arglist>(Image &amp;sourceImage, Graphics &amp;destContext, float scaleFactor, float alpha)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawShadow</name>
      <anchorfile>classDropShadowEffect.html</anchorfile>
      <anchor>a68590ffb0c86dbee0530e843ea147aa4</anchor>
      <arglist>(Graphics &amp;g, const Image &amp;srcImage, float radius, float alpha, int offsetX, int offsetY)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DropShadower</name>
    <filename>classDropShadower.html</filename>
    <base>ComponentListener</base>
    <member kind="function">
      <type></type>
      <name>DropShadower</name>
      <anchorfile>classDropShadower.html</anchorfile>
      <anchor>ade4cff3b353cd000e0ce6b7faff94edd</anchor>
      <arglist>(float alpha=0.5f, int xOffset=1, int yOffset=5, float blurRadius=10.0f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DropShadower</name>
      <anchorfile>classDropShadower.html</anchorfile>
      <anchor>a2b5a83d99a56e76c6294c075ce0f5c66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwner</name>
      <anchorfile>classDropShadower.html</anchorfile>
      <anchor>aa66afaff8ac325df14206e274589769f</anchor>
      <arglist>(Component *componentToFollow)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentMovedOrResized</name>
      <anchorfile>classDropShadower.html</anchorfile>
      <anchor>a71feda9735f257a78408132cee6c7797</anchor>
      <arglist>(Component &amp;component, bool wasMoved, bool wasResized)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentBroughtToFront</name>
      <anchorfile>classDropShadower.html</anchorfile>
      <anchor>a5ba61ab0dfb8faf0257342dcd89c81f7</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentParentHierarchyChanged</name>
      <anchorfile>classDropShadower.html</anchorfile>
      <anchor>a93f46d56e551e10250efaf86d755fc5c</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentVisibilityChanged</name>
      <anchorfile>classDropShadower.html</anchorfile>
      <anchor>abc142844a970d0c1f4867796103c14e9</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DummyCriticalSection</name>
    <filename>classDummyCriticalSection.html</filename>
    <class kind="struct">DummyCriticalSection::ScopedLockType</class>
    <member kind="typedef">
      <type>ScopedLockType</type>
      <name>ScopedUnlockType</name>
      <anchorfile>classDummyCriticalSection.html</anchorfile>
      <anchor>a455be3752f5f32c56fabe0b7b477b6f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DummyCriticalSection</name>
      <anchorfile>classDummyCriticalSection.html</anchorfile>
      <anchor>aed067ef6b51dcca1f25f19231a99b595</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DummyCriticalSection</name>
      <anchorfile>classDummyCriticalSection.html</anchorfile>
      <anchor>aae13b7a18e9cf77c6d85792a151f2d1c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enter</name>
      <anchorfile>classDummyCriticalSection.html</anchorfile>
      <anchor>a3511e9f002535174e24aa2e0983b60d9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryEnter</name>
      <anchorfile>classDummyCriticalSection.html</anchorfile>
      <anchor>a55f19ff3a0b0f91a1d025939d1c03a3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exit</name>
      <anchorfile>classDummyCriticalSection.html</anchorfile>
      <anchor>a00630497a7c9a449eca4630abf115fa6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DummyCriticalSection::ScopedLockType</name>
    <filename>structDummyCriticalSection_1_1ScopedLockType.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedLockType</name>
      <anchorfile>structDummyCriticalSection_1_1ScopedLockType.html</anchorfile>
      <anchor>af14a852a564837bcd71ad5592dec3b2d</anchor>
      <arglist>(const DummyCriticalSection &amp;) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DynamicLibrary</name>
    <filename>classDynamicLibrary.html</filename>
    <member kind="function">
      <type></type>
      <name>DynamicLibrary</name>
      <anchorfile>classDynamicLibrary.html</anchorfile>
      <anchor>a7c6a13e65177869af7116175c7745e2e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicLibrary</name>
      <anchorfile>classDynamicLibrary.html</anchorfile>
      <anchor>af9ad02ee239000e67ff664ef4b5dfe2c</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicLibrary</name>
      <anchorfile>classDynamicLibrary.html</anchorfile>
      <anchor>a25dd7a7cd386fbc1c8abde597c39c881</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>open</name>
      <anchorfile>classDynamicLibrary.html</anchorfile>
      <anchor>ab64b6f35270c87d0c69b422854683674</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classDynamicLibrary.html</anchorfile>
      <anchor>ac894163d2ef226237fd6d6cfaeb77fce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getFunction</name>
      <anchorfile>classDynamicLibrary.html</anchorfile>
      <anchor>a278ed4824af45759270b5c1eeba9dcb6</anchor>
      <arglist>(const String &amp;functionName) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getNativeHandle</name>
      <anchorfile>classDynamicLibrary.html</anchorfile>
      <anchor>acf0128264e0070e40f1be2eac26073e4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DynamicObject</name>
    <filename>classDynamicObject.html</filename>
    <base>ReferenceCountedObject</base>
    <member kind="function">
      <type></type>
      <name>DynamicObject</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a50a7adf3d7d1f411ed2aa9a663bfe275</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DynamicObject</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>af9141dddf35d338d5bae491cb0455583</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasProperty</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>aed8e9e391f64fd8ed239ebf63c9b61c8</anchor>
      <arglist>(const Identifier &amp;propertyName) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual var</type>
      <name>getProperty</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a3159e9c809748f851a20afb6eceb3b49</anchor>
      <arglist>(const Identifier &amp;propertyName) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProperty</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a837de05269dd0b343fd238cd95edca2a</anchor>
      <arglist>(const Identifier &amp;propertyName, const var &amp;newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeProperty</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>ab79f3693cafde34db5040e3d364fc1bf</anchor>
      <arglist>(const Identifier &amp;propertyName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasMethod</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a59cee4cadee9ea933a33629237aba3b7</anchor>
      <arglist>(const Identifier &amp;methodName) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual var</type>
      <name>invokeMethod</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a8c3dcc6304b1a01bdb48fd25f64757a3</anchor>
      <arglist>(const Identifier &amp;methodName, const var *parameters, int numParameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMethod</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a466c5a99725761f2c1b6969b2f67ba96</anchor>
      <arglist>(const Identifier &amp;methodName, var::MethodFunction methodFunction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a2512456cd96acf25a48af969b9269944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NamedValueSet &amp;</type>
      <name>getProperties</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a88367bccf6d0520f53283812ecdc10c9</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EdgeTable</name>
    <filename>classEdgeTable.html</filename>
    <member kind="function">
      <type></type>
      <name>EdgeTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>aa220ed166fa71ac953d39c6512588464</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;clipLimits, const Path &amp;pathToAdd, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>af1255353604f678892577a84414c7fe0</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rectangleToAdd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>a4cdc0bb4b999b7b3f60ba2ad9f792ec2</anchor>
      <arglist>(const RectangleList &amp;rectanglesToAdd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>ad1edf1a5e85ef52cddd76bfba0ad6014</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;rectangleToAdd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>a43bfa6fe36cab8b5b1ad646fff8668fa</anchor>
      <arglist>(const EdgeTable &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>EdgeTable &amp;</type>
      <name>operator=</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>a6a13aa29116244227af62953e3690b35</anchor>
      <arglist>(const EdgeTable &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EdgeTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>abd3d8878df1c4510d5e682fd0aabe465</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clipToRectangle</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>a8b4f654ca67629b18fd7bcfb181089db</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>excludeRectangle</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>ace4a4713af3e35ed6276ebc176e078e1</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clipToEdgeTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>af28f0aaffd1df75bcca54f5c46372992</anchor>
      <arglist>(const EdgeTable &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clipLineToMask</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>a65f05a5b115733ef69094e865987d295</anchor>
      <arglist>(int x, int y, const uint8 *mask, int maskStride, int numPixels)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>a858bd89f50cccb6d7276e6afa2796cb5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Rectangle&lt; int &gt; &amp;</type>
      <name>getMaximumBounds</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>ae8103c8b428695ba7a436eee2d801a40</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>acd16cc78f5d70567ef0fe0f6f29bd9a5</anchor>
      <arglist>(float dx, int dy) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>optimiseTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>a776538a2ee908e46769e6c4b56dbf5df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterate</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>af2a5e19d16658853b61684af190e03f6</anchor>
      <arglist>(EdgeTableIterationCallback &amp;iterationCallback) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Expression</name>
    <filename>classExpression.html</filename>
    <class kind="class">Expression::ParseError</class>
    <class kind="class">Expression::Scope</class>
    <class kind="struct">Expression::Symbol</class>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>aa416ac50fdbe8bdea9c59f5c78f0c85b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>constantType</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>aa416ac50fdbe8bdea9c59f5c78f0c85ba4c05ef0368ceb383ecdd4933ddb3b5db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>functionType</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>aa416ac50fdbe8bdea9c59f5c78f0c85ba4af6ecec6a8598073b3f70f7f1c10eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>operatorType</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>aa416ac50fdbe8bdea9c59f5c78f0c85ba222a2fd6162d6870e34cd9f8e6dc4dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>symbolType</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>aa416ac50fdbe8bdea9c59f5c78f0c85baef74a77024f2e22f163d3b2346b99162</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>afcf87716bf0abfe8d414c92529e1564a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expression</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a3e99570b177da619eeb2c5787cbb148e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a342898044343143057a6a7f1b0db0286</anchor>
      <arglist>(double constant)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a69c9c6077f3810a7a263c856b073d8da</anchor>
      <arglist>(const Expression &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Expression &amp;</type>
      <name>operator=</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>ac65fa67059ca8f9c4afdc4c76f3eb1cb</anchor>
      <arglist>(const Expression &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a54b6e59fb3527d2b188d907f0e086442</anchor>
      <arglist>(const String &amp;stringToParse)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a5eecd6f1f48d2baf2ce47d7fedc85d88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>operator+</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a7592fd84b5a141b80b38611040073845</anchor>
      <arglist>(const Expression &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>operator-</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a563b982726ce44227399ac535c113a8b</anchor>
      <arglist>(const Expression &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>operator*</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a51df3a8b717d5a1d6aa704bcaef0b89c</anchor>
      <arglist>(const Expression &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>operator/</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>aae41844a0bbfdb9357fef3a0cc42bfb9</anchor>
      <arglist>(const Expression &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>operator-</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a47885c5097dde4aa49e59c6949a73413</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a4321a7ad5078d5a8af0991f5580b3f99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a2a09ff11f4ffaebdcc3f7bf62c77bbf8</anchor>
      <arglist>(const Scope &amp;scope) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a32d7e977a1f77939f78b6c5b803f15e3</anchor>
      <arglist>(const Scope &amp;scope, String &amp;evaluationError) const </arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>adjustedToGiveNewResult</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>acc82cfe769a77bbf86288990d1bdc817</anchor>
      <arglist>(double targetValue, const Scope &amp;scope) const </arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>withRenamedSymbol</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a598b92aa6528a3c3d25a54095b0b9595</anchor>
      <arglist>(const Symbol &amp;oldSymbol, const String &amp;newName, const Scope &amp;scope) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>referencesSymbol</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a88ebc272c8f91d59c3d994386fe10583</anchor>
      <arglist>(const Symbol &amp;symbol, const Scope &amp;scope) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesAnySymbols</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a0d3a456e6890d85965d6c78be8df7bc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findReferencedSymbols</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a861cfe56ec5791117e8b7ff7ae530db0</anchor>
      <arglist>(Array&lt; Symbol &gt; &amp;results, const Scope &amp;scope) const </arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a460d4ee7e0480e3980390d18833ea97a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getSymbolOrFunction</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>ac469273e306b0c6526f3befc47594116</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumInputs</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a7c32d3b8d87eef9dfc13fe2490923813</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>getInput</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a48f1108d034f6b762528322f6749e4f3</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Expression</type>
      <name>symbol</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a596e6864c20b0d6ac5f42014103e6349</anchor>
      <arglist>(const String &amp;symbol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Expression</type>
      <name>function</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>afd58f776e343213a4e488db47faadcb2</anchor>
      <arglist>(const String &amp;functionName, const Array&lt; Expression &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Expression</type>
      <name>parse</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a6c6bd6049f3114b27b548409ac98488f</anchor>
      <arglist>(String::CharPointerType &amp;stringToParse)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Expression::ParseError</name>
    <filename>classExpression_1_1ParseError.html</filename>
    <member kind="function">
      <type></type>
      <name>ParseError</name>
      <anchorfile>classExpression_1_1ParseError.html</anchorfile>
      <anchor>a8f30b08fb14bd6e1b310fb0caeb612ef</anchor>
      <arglist>(const String &amp;message)</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>description</name>
      <anchorfile>classExpression_1_1ParseError.html</anchorfile>
      <anchor>a76b05c714f501d1ea82859f190315ac4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Expression::Scope</name>
    <filename>classExpression_1_1Scope.html</filename>
    <class kind="class">Expression::Scope::Visitor</class>
    <member kind="function">
      <type></type>
      <name>Scope</name>
      <anchorfile>classExpression_1_1Scope.html</anchorfile>
      <anchor>a270a255a97e5315bf08862e4c4a9fecb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Scope</name>
      <anchorfile>classExpression_1_1Scope.html</anchorfile>
      <anchor>a134d89a4582e099b5dec71641fc3f193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getScopeUID</name>
      <anchorfile>classExpression_1_1Scope.html</anchorfile>
      <anchor>a572a6d2b5a3638c4c79afc4e9ca3161d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Expression</type>
      <name>getSymbolValue</name>
      <anchorfile>classExpression_1_1Scope.html</anchorfile>
      <anchor>a4d8a192d01556547d0681897a457b52e</anchor>
      <arglist>(const String &amp;symbol) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluateFunction</name>
      <anchorfile>classExpression_1_1Scope.html</anchorfile>
      <anchor>a04568143f34090043d9d2fcc81a3c2c6</anchor>
      <arglist>(const String &amp;functionName, const double *parameters, int numParameters) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitRelativeScope</name>
      <anchorfile>classExpression_1_1Scope.html</anchorfile>
      <anchor>af8f9ce49ed1a0b9ee7848cc4b0308687</anchor>
      <arglist>(const String &amp;scopeName, Visitor &amp;visitor) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Expression::Scope::Visitor</name>
    <filename>classExpression_1_1Scope_1_1Visitor.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Visitor</name>
      <anchorfile>classExpression_1_1Scope_1_1Visitor.html</anchorfile>
      <anchor>a7567c04f75c80935764c4aa15f85b254</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visit</name>
      <anchorfile>classExpression_1_1Scope_1_1Visitor.html</anchorfile>
      <anchor>a843db0686a8680c7108985b18dd8c4b6</anchor>
      <arglist>(const Scope &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Expression::Symbol</name>
    <filename>structExpression_1_1Symbol.html</filename>
    <member kind="function">
      <type></type>
      <name>Symbol</name>
      <anchorfile>structExpression_1_1Symbol.html</anchorfile>
      <anchor>a5c3008e4a646591306842c148af8c2d5</anchor>
      <arglist>(const String &amp;scopeUID, const String &amp;symbolName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExpression_1_1Symbol.html</anchorfile>
      <anchor>a16efdcb0149bab86497e495ce9bada85</anchor>
      <arglist>(const Symbol &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structExpression_1_1Symbol.html</anchorfile>
      <anchor>ae052f0d2429a36a390531ad7d067943c</anchor>
      <arglist>(const Symbol &amp;) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>scopeUID</name>
      <anchorfile>structExpression_1_1Symbol.html</anchorfile>
      <anchor>aaddddb4fd2bad7fcce78adce69ba91d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>symbolName</name>
      <anchorfile>structExpression_1_1Symbol.html</anchorfile>
      <anchor>a8ea461b91478b99e10a04956c38f5d68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FakeMouseMoveGenerator</name>
    <filename>structFakeMouseMoveGenerator.html</filename>
  </compound>
  <compound kind="class">
    <name>File</name>
    <filename>classFile.html</filename>
    <member kind="enumeration">
      <name>TypesOfFileToFind</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a2e3d1ed8a9022434f3ddb7d34b24198c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>findDirectories</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a2e3d1ed8a9022434f3ddb7d34b24198ca35b223e26e0f30ee49e320b60af41965</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>findFiles</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a2e3d1ed8a9022434f3ddb7d34b24198ca0804ff838a8bfd66eaa300e5e0a3884a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>findFilesAndDirectories</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a2e3d1ed8a9022434f3ddb7d34b24198ca5bdd66baa4579bd9b698162bed951793</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ignoreHiddenFiles</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a2e3d1ed8a9022434f3ddb7d34b24198ca7913a92e21bc03cb18cecf6aa21221bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SpecialLocationType</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>userHomeDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313da8620eabc38cfbd921a52d10157463c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>userDocumentsDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313da72c8fbf94445ccce6b01470265c8f397</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>userDesktopDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313da4776bc5e304bf2857ed5ede0fbbc4060</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>userApplicationDataDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313da0c9f89d8dc9f9f32c9eb42428385351d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>commonApplicationDataDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313da18566f0ca926c8f6db1e178ba5f403c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tempDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313da08818a8233a97db2e3c54a917adf4954</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>currentExecutableFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313dab960741272c75e94482f295a516aae62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>currentApplicationFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313da8292b316ce9eb8ebc0d0980b788a877c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invokedExecutableFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313dafdae061dc559a8e9ac3a9623d2cd8081</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hostApplicationPath</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313dafab1d75c642d3f8eb23564f1cfb408a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>globalApplicationsDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313dad4f66736251eab2cdaa21dd5a709ed21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>userMusicDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313dad0662607d7763c1940693b9f80673567</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>userMoviesDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313dadcb6e6c19c350d8020615417b0505da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>File</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a51dc22c62ddf2fbeef8335300fc8e56a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>File</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ae48b8a5611a11bf2d6e7c23551452421</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>File</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ad1fbab59d996b3b3840986307eceb3ee</anchor>
      <arglist>(const File &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~File</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a5222c06f8d809438b51a7bd528760aaa</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>File &amp;</type>
      <name>operator=</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a117457fe9f7ded6dd0e1453603b2b272</anchor>
      <arglist>(const String &amp;newFilePath)</arglist>
    </member>
    <member kind="function">
      <type>File &amp;</type>
      <name>operator=</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a64fde399af107b07eed297920172e836</anchor>
      <arglist>(const File &amp;otherFile)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a44ecfb6abf4c56065e773785787f2fb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>existsAsFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a2810f7ad22c4cb4e8927dae25bd53345</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a0d02d044cfec9c218a57bd7f00ff71f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getSize</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a4e368252255a9310aceac2aca02ed238</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getFullPathName</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a317effd2ea56513feec717102676a718</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getFileName</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aef4bc6319861669081767d0efcd427db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getRelativePathFrom</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a634ce2ebe99d6d64b18b9d557b389350</anchor>
      <arglist>(const File &amp;directoryToBeRelativeTo) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getFileExtension</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a309e7dcfc0253ddde75f68b2a4f729d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFileExtension</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a30e32f94abb6a9a4e4e802129ac0ea02</anchor>
      <arglist>(const String &amp;extensionToTest) const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>withFileExtension</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ac694d20b84f58a5c11aa324bbd8fc272</anchor>
      <arglist>(const String &amp;newExtension) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getFileNameWithoutExtension</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a93ab669b92bba0ca0517c2b54e98242a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hashCode</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a990e6e4a166c52186b69f572c4dfc328</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>hashCode64</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a0584182ef19bf00394df96731bceaa8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getChildFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a4fcc888d3e82659859ceb3e792d86cdd</anchor>
      <arglist>(String relativePath) const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getSiblingFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aef5cbcefb11d448d5e4e1723f0590995</anchor>
      <arglist>(const String &amp;siblingFileName) const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getParentDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aab4c9f30b63c3714d601ed33324e6b33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAChildOf</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>abf31d130e6661ca5ee63d33c808b4f93</anchor>
      <arglist>(const File &amp;potentialParentDirectory) const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getNonexistentChildFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a44c390f65190f3a0dfdee29a615f0413</anchor>
      <arglist>(const String &amp;prefix, const String &amp;suffix, bool putNumbersInBrackets=true) const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getNonexistentSibling</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ad02ceff2de4491ebd52869e43d9599e3</anchor>
      <arglist>(bool putNumbersInBrackets=true) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a61c9b6177040ca5a4d2ea58875fba54f</anchor>
      <arglist>(const File &amp;otherFile) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>af168841501996b399a273a32b7fad92d</anchor>
      <arglist>(const File &amp;otherFile) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>af4463a6162d3d9936b946cb8bcc561fe</anchor>
      <arglist>(const File &amp;otherFile) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a42b7b9119234957198b2713e2d365699</anchor>
      <arglist>(const File &amp;otherFile) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasWriteAccess</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a11825b7fffe497f31c15c4a35e1e0353</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setReadOnly</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aaa0a3838942816c19fbffbffeb687272</anchor>
      <arglist>(bool shouldBeReadOnly, bool applyRecursively=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHidden</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>adf74fb4603dfd5684a6fd68cbb5fa8ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getLinkedTarget</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a6bbe2fbfc5436894574380b185fc2f87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getLastModificationTime</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a2af6e4e6ce8d74bb39b7f3a9a6feedf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getLastAccessTime</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a19c99f020760b21e6354298857e163a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getCreationTime</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a788021729da0be1169c05079b39e2943</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setLastModificationTime</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a65a296ca3298f2e093b1690320641858</anchor>
      <arglist>(const Time &amp;newTime) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setLastAccessTime</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a86c41779480fd3d01b38a90320067367</anchor>
      <arglist>(const Time &amp;newTime) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCreationTime</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a6923d5a8108b14af1e62133158a92169</anchor>
      <arglist>(const Time &amp;newTime) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getVersion</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a0a365147cb5fbd2d5c70b94b4151c6aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>create</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a074cbfd1833a3c88ade4529d59c392b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>createDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>abf66b1a134ee14b98006e85fede901f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>acca30337faecf8c3d97a1e70c725db23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteRecursively</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a45a371d70965e5efc1566c0a51d9042c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveToTrash</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ad5657b8a600ed241a204656811c9522f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveFileTo</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a43a7e37203ed65b036a2c54f0f260857</anchor>
      <arglist>(const File &amp;targetLocation) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copyFileTo</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a101f3d5cbcc6a6ef91cf9331802010a6</anchor>
      <arglist>(const File &amp;targetLocation) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copyDirectoryTo</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a1bef0d97a327689afa9d95151cca542f</anchor>
      <arglist>(const File &amp;newDirectory) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findChildFiles</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a6b382c3eb3cbbbfd7ef5550e42b5260a</anchor>
      <arglist>(Array&lt; File &gt; &amp;results, int whatToLookFor, bool searchRecursively, const String &amp;wildCardPattern=&quot;*&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfChildFiles</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a07e0af731f18680d32dd74043784a073</anchor>
      <arglist>(int whatToLookFor, const String &amp;wildCardPattern=&quot;*&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsSubDirectories</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a14db3982beea141ca7492a093bf4588c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FileInputStream *</type>
      <name>createInputStream</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aebd0de51f5df7da86749c90b68e5bc53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FileOutputStream *</type>
      <name>createOutputStream</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a55d5c85da1368d04c9a649d0753e5962</anchor>
      <arglist>(int bufferSize=0x8000) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadFileAsData</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a0fa017212282bc314ec2eab9dce135d0</anchor>
      <arglist>(MemoryBlock &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>loadFileAsString</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aac8775e3a91375fe12ebe068194a2812</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readLines</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a155785c6bd5e36a11be9c2451f8bb8f2</anchor>
      <arglist>(StringArray &amp;destLines) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>appendData</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a17e0a2c302c88ab8ea2d5acc7bbc0051</anchor>
      <arglist>(const void *dataToAppend, int numberOfBytes) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replaceWithData</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>af60949e7051260cdfb8a5a146b1a6115</anchor>
      <arglist>(const void *dataToWrite, int numberOfBytes) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>appendText</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a7908b0272d7564eb1f5a7505a5bc7351</anchor>
      <arglist>(const String &amp;textToAppend, bool asUnicode=false, bool writeUnicodeHeaderBytes=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replaceWithText</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ab3476536a97b787f00b5988cdb326816</anchor>
      <arglist>(const String &amp;textToWrite, bool asUnicode=false, bool writeUnicodeHeaderBytes=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasIdenticalContentTo</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ae8dbcb9e8bbce004d015688840423fa8</anchor>
      <arglist>(const File &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getVolumeLabel</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ae7c2f4704800071207afdbcaf4fad0ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVolumeSerialNumber</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ae07267c9417d77ef094253ecb206d842</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getBytesFreeOnVolume</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a881a4b5846c746c58c7dc1c7893e3ee5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getVolumeTotalSize</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a9737848d54ead1fe75cf289e37d1f95f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnCDRomDrive</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a4c71649a114a7f475599cbfa91af0f60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnHardDisk</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a8342584e08db6ffa9a0def1308d8030f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnRemovableDrive</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ad04995c68c992916f0ba3c35dd1731ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startAsProcess</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ab53026180cda413853c62a8a9aedcd00</anchor>
      <arglist>(const String &amp;parameters=String::empty) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>revealToUser</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a1e5beaaa04e6944be45c90fe331e0531</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAsCurrentWorkingDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a65e0278d019871c800bc334d5dd7c7eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OSType</type>
      <name>getMacOSType</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a4e68c24206a274e21ce7777aa2a0d295</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBundle</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ad4b60fb8cb686a14d5a34dd669f9df5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToDock</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aa8128493715ac5a6fb5255cb626e6472</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>descriptionOfSizeInBytes</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a589498af00c1eb8f7bffb628944462e2</anchor>
      <arglist>(int64 bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findFileSystemRoots</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a694de291d70096e9d31d0c95b432bcb6</anchor>
      <arglist>(Array&lt; File &gt; &amp;results)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static File JUCE_CALLTYPE</type>
      <name>getSpecialLocation</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a2a4396bc0e6f8b0430f6f54d029899e5</anchor>
      <arglist>(const SpecialLocationType type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static File</type>
      <name>createTempFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>affb1dc7e2e73412e0b6b2ae0b95722aa</anchor>
      <arglist>(const String &amp;fileNameEnding)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static File</type>
      <name>getCurrentWorkingDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a5801c94dd6dad89aeaf6e9ae10b81d9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>createLegalFileName</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ab5d6af755153f8af3d34912c7e498121</anchor>
      <arglist>(const String &amp;fileNameToFix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>createLegalPathName</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a40c39e2a1ce3dc25baea509eb40fe97c</anchor>
      <arglist>(const String &amp;pathNameToFix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>areFileNamesCaseSensitive</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a35111cb43b1e49c523b67c65a337764c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAbsolutePath</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a9674737530eec6eeeba74576231aa815</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static File</type>
      <name>createFileWithoutCheckingPath</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a064195d0f75aebeb20eb070e10da72af</anchor>
      <arglist>(const String &amp;path) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>addTrailingSeparator</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a7093f18070f9aec99e3bfd2857761514</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const File</type>
      <name>nonexistent</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>abdcef33a1c846d17b4405e0939358364</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const juce_wchar</type>
      <name>separator</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a03d104ec7dd9600dbfb8cfdd25585135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>separatorString</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a66e8bff47d42f5b093b88eacacb573ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileBasedDocument</name>
    <filename>classFileBasedDocument.html</filename>
    <base>ChangeBroadcaster</base>
    <member kind="enumeration">
      <name>SaveResult</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a89d417326aed46fb561c599265e426d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>savedOk</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a89d417326aed46fb561c599265e426d2aa0f8eec65cc59595a5e7d665c2a2efeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>userCancelledSave</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a89d417326aed46fb561c599265e426d2a29ad285f4aa606eb17b9f7f0de211f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>failedToWriteToFile</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a89d417326aed46fb561c599265e426d2a7b2f3f4edd3dc5b02d1578ef4594f394</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileBasedDocument</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a67651e24e6e4bd15b08edb2d101910aa</anchor>
      <arglist>(const String &amp;fileExtension, const String &amp;fileWildCard, const String &amp;openFileDialogTitle, const String &amp;saveFileDialogTitle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileBasedDocument</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a030915656fbe64df18d25b67fb7c0268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChangedSinceSaved</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a8a12cf36feeaec35c7d9cf4d7823bf72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changed</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a3a058b73776404d76b828205ca058e42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChangedFlag</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a60543bfd5b8889f23714e1b5cc72c44a</anchor>
      <arglist>(bool hasChanged)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadFrom</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a306a20730d9affcc1cf744d8cfaacb27</anchor>
      <arglist>(const File &amp;fileToLoadFrom, bool showMessageOnFailure)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadFromUserSpecifiedFile</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>ae9dfad2bdd9692ac31ff8cb87e97e38d</anchor>
      <arglist>(bool showMessageOnFailure)</arglist>
    </member>
    <member kind="function">
      <type>SaveResult</type>
      <name>save</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a8059227774bee831db9ca4d402c68321</anchor>
      <arglist>(bool askUserForFileIfNotSpecified, bool showMessageOnFailure)</arglist>
    </member>
    <member kind="function">
      <type>SaveResult</type>
      <name>saveIfNeededAndUserAgrees</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a619ff6ed84d0c0471c5bf7cf98b82d85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SaveResult</type>
      <name>saveAs</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a6e2943c148904e4d5357353034e69614</anchor>
      <arglist>(const File &amp;newFile, bool warnAboutOverwritingExistingFiles, bool askUserForFileIfNotSpecified, bool showMessageOnFailure)</arglist>
    </member>
    <member kind="function">
      <type>SaveResult</type>
      <name>saveAsInteractive</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>aa57557b32e2d2c61ef31f202e74521ad</anchor>
      <arglist>(bool warnAboutOverwritingExistingFiles)</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getFile</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>ac9711c4d28ffcb0397409cfe072e203f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFile</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>ae9831c5ca4576665d1876c129976a3f8</anchor>
      <arglist>(const File &amp;newFile)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual String</type>
      <name>getDocumentTitle</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>abf86feb0316f1d010c956bd687bc2bf8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Result</type>
      <name>loadDocument</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a88999864b31dbda9bb0be1e593428cef</anchor>
      <arglist>(const File &amp;file)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Result</type>
      <name>saveDocument</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a2042b565e85118d3a2b34f677f61cbd8</anchor>
      <arglist>(const File &amp;file)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual File</type>
      <name>getLastDocumentOpened</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a5d71efccf45d29de2c2dcbb801e8021a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setLastDocumentOpened</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>ad8fa1517b5af884e0213ee365dcf65f4</anchor>
      <arglist>(const File &amp;file)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileBrowserComponent</name>
    <filename>classFileBrowserComponent.html</filename>
    <base>Component</base>
    <base protection="private">FileBrowserListener</base>
    <base protection="private">TextEditor::Listener</base>
    <base protection="private">ComboBox::Listener</base>
    <base protection="private">FileFilter</base>
    <member kind="enumeration">
      <name>FileChooserFlags</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>openMode</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6a15f4871e1610d912885cc6de504e13e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>saveMode</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6aca3d0a66bd4fc606ab874b3da93a4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canSelectFiles</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6a07878819a9559235bff2789c1fdbd8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canSelectDirectories</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6ab7e808e7b8a33afb0150e9ea6047c2dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canSelectMultipleItems</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6a0eacc483cb1561acdce859beed28364f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>useTreeView</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6ab8a34263300c3e493f2a00deee6fc933</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>filenameBoxIsReadOnly</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6ab3724f30e884acc493ed9cb6bd064971</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileBrowserComponent</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a280d477349b38219b4870775aa4f67a2</anchor>
      <arglist>(int flags, const File &amp;initialFileOrDirectory, const FileFilter *fileFilter, FilePreviewComponent *previewComp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileBrowserComponent</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a7b829347edb8c65bcffaee2035ace1a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSelectedFiles</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>ad2f75dac028494d765401422825bfcd6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getSelectedFile</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>aa57cddd48bff6a59d68f43e11995dc8f</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselectAllFiles</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a88106ef1df177798550e93fb58ebe1d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>currentFileIsValid</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a9eddd1d64c2fe4d710a7c9fc607dca3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getHighlightedFile</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a71f3c0e207d80c7cd3893cb1b58fae9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getRoot</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a729b016025a4fc277285e1419e9702a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRoot</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a8537220a265903e339112794b2740f4c</anchor>
      <arglist>(const File &amp;newRootDirectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileName</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a4f4670732c403b2ceb280146fbd724eb</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>goUp</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a7c7382598466ef33dfc1cceb33bb60cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>ad8f5511627f790847298053874cb2e39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileFilter</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a217409df05fadaf15cae2715107b9894</anchor>
      <arglist>(const FileFilter *newFileFilter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getActionVerb</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a7e5e11247182aef630cec072d2945d0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSaveMode</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>ab1e3e064f521e76b62bf169aea69f23f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilenameBoxLabel</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a388d30921f63f1581f227d62dcd4dea9</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>ace96c9461921628b0668a0c38184d5e7</anchor>
      <arglist>(FileBrowserListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a92160e65690ad6288ef9eff9da052ae9</anchor>
      <arglist>(FileBrowserListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>ae85280c84ca33bd953211046b78dc7ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonClicked</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a3a3b168ae539bb3f16149f6612aba89b</anchor>
      <arglist>(Button *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comboBoxChanged</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>ae91b55afeea5cedcfe7948a59b09edc2</anchor>
      <arglist>(ComboBox *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textEditorTextChanged</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>ad322450bba21968d1b98fc5ccbc22406</anchor>
      <arglist>(TextEditor &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textEditorReturnKeyPressed</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a6dea9ba1745a4905c5acc99db3b9869a</anchor>
      <arglist>(TextEditor &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textEditorEscapeKeyPressed</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a3e778815fe92f3329653e8dd0b14f4db</anchor>
      <arglist>(TextEditor &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textEditorFocusLost</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a0cdb0e93b59c7fc8c9a090a011c43c87</anchor>
      <arglist>(TextEditor &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>aaebc1edd70159b86ed544be4c62c65f2</anchor>
      <arglist>(const KeyPress &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectionChanged</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a097ccbcfecf9f03e5ef3aa8838d0bd0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileClicked</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a07d728493799d3189eddb4defd9c1a4f</anchor>
      <arglist>(const File &amp;, const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileDoubleClicked</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a4140db0caf4e1fed89922dd1607a32cc</anchor>
      <arglist>(const File &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>browserRootChanged</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>ab3cfec767f1d4ab722d916d2f74b20e5</anchor>
      <arglist>(const File &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFileSuitable</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a913252df04de9b7c5879e27b6c57b8d3</anchor>
      <arglist>(const File &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDirectorySuitable</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a94f5e36b715499fe8febf1bb4203f74f</anchor>
      <arglist>(const File &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>FilePreviewComponent *</type>
      <name>getPreviewComponent</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a163416d7506eee6741d86f08b9691e82</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>DirectoryContentsDisplayComponent *</type>
      <name>getDisplayComponent</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a77af9e6ac9eb656c0aede422b07beb9a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getRoots</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>afc2c700b18e55f58693696e861f484a4</anchor>
      <arglist>(StringArray &amp;rootNames, StringArray &amp;rootPaths)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetRecentPaths</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>aa7de2c3418a52ac04d7d357cf6881b9f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileBrowserListener</name>
    <filename>classFileBrowserListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileBrowserListener</name>
      <anchorfile>classFileBrowserListener.html</anchorfile>
      <anchor>a5b66c7c2bd94c9a2ae5a48d6fb287346</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>selectionChanged</name>
      <anchorfile>classFileBrowserListener.html</anchorfile>
      <anchor>a70f633952496b13ef6f2c054615affd9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fileClicked</name>
      <anchorfile>classFileBrowserListener.html</anchorfile>
      <anchor>a16d17e5c9097cc3ed9794edfdfe838c4</anchor>
      <arglist>(const File &amp;file, const MouseEvent &amp;e)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fileDoubleClicked</name>
      <anchorfile>classFileBrowserListener.html</anchorfile>
      <anchor>ac2a06208299afcdf60dc7ea2f4dcd450</anchor>
      <arglist>(const File &amp;file)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>browserRootChanged</name>
      <anchorfile>classFileBrowserListener.html</anchorfile>
      <anchor>aa113aeb21edd4ac76d0f205aa5b4218c</anchor>
      <arglist>(const File &amp;newRoot)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileChooser</name>
    <filename>classFileChooser.html</filename>
    <member kind="function">
      <type></type>
      <name>FileChooser</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>a7f950ec1898a9cd3f74d7df5df9b85ea</anchor>
      <arglist>(const String &amp;dialogBoxTitle, const File &amp;initialFileOrDirectory=File::nonexistent, const String &amp;filePatternsAllowed=String::empty, bool useOSNativeDialogBox=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileChooser</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>a67c94ae24fad94cf464d1283f33175d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>browseForFileToOpen</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>aefb11cbc801d03c20b0ce271e3b20e40</anchor>
      <arglist>(FilePreviewComponent *previewComponent=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>browseForMultipleFilesToOpen</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>a8d89778ce04c2373fc7db535bc3365e6</anchor>
      <arglist>(FilePreviewComponent *previewComponent=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>browseForFileToSave</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>a1ccbbb48aefc471ea70c34f9ab18fcd1</anchor>
      <arglist>(bool warnAboutOverwritingExistingFiles)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>browseForDirectory</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>afdbce2d962f0c6c117d897e9e8687116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>browseForMultipleFilesOrDirectories</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>ae71e12cc990ae12d261a3d05388cd713</anchor>
      <arglist>(FilePreviewComponent *previewComponent=0)</arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getResult</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>a83beadbc2806f8c8945d672af96fc671</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Array&lt; File &gt; &amp;</type>
      <name>getResults</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>a530df3be774b8933e93f8a2be6a9f573</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileChooserDialogBox</name>
    <filename>classFileChooserDialogBox.html</filename>
    <base>ResizableWindow</base>
    <base>FileBrowserListener</base>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>aec403ffe26c5b7e34b6811cfb063df75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>titleTextColourId</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>aec403ffe26c5b7e34b6811cfb063df75acafefa55a6db4bba4a908e5ea63b3a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileChooserDialogBox</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>aacbcd5d0559e90827e3ffd0490c36346</anchor>
      <arglist>(const String &amp;title, const String &amp;instructions, FileBrowserComponent &amp;browserComponent, bool warnAboutOverwritingExistingFiles, const Colour &amp;backgroundColour)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileChooserDialogBox</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>a96980634d76e05ebc454ecfb5f020176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>centreWithDefaultSize</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>ae0c981acf5b79619d1d80a1fc07b6cce</anchor>
      <arglist>(Component *componentToCentreAround=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonClicked</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>a199e1af34103940149d9634918a634f5</anchor>
      <arglist>(Button *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeButtonPressed</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>a9e15f6562f7b236c017f59772a398694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectionChanged</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>a8e15c4cefdb60b4a4a2938e978ae9fed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileClicked</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>ae0842516d561b9cf13cbf8874fa7bd74</anchor>
      <arglist>(const File &amp;, const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileDoubleClicked</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>a045f910c4a1c54dd7bfa2d2188498320</anchor>
      <arglist>(const File &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>browserRootChanged</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>af3675eea60c76b1109828f8dc482ffec</anchor>
      <arglist>(const File &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileDragAndDropTarget</name>
    <filename>classFileDragAndDropTarget.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileDragAndDropTarget</name>
      <anchorfile>classFileDragAndDropTarget.html</anchorfile>
      <anchor>ac2dd4bc23ee0e715943c90bfb12cfb92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInterestedInFileDrag</name>
      <anchorfile>classFileDragAndDropTarget.html</anchorfile>
      <anchor>a44fa7f7e69dec8119c6b3a6ff9d2ddce</anchor>
      <arglist>(const StringArray &amp;files)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fileDragEnter</name>
      <anchorfile>classFileDragAndDropTarget.html</anchorfile>
      <anchor>a474150f8eb50c1272ea3eef9e30522e6</anchor>
      <arglist>(const StringArray &amp;files, int x, int y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fileDragMove</name>
      <anchorfile>classFileDragAndDropTarget.html</anchorfile>
      <anchor>ae07df070efc3dfcd54c7b97b36dc1b8e</anchor>
      <arglist>(const StringArray &amp;files, int x, int y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fileDragExit</name>
      <anchorfile>classFileDragAndDropTarget.html</anchorfile>
      <anchor>a218984a4bb2fa6d33418c0f519e4685b</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>filesDropped</name>
      <anchorfile>classFileDragAndDropTarget.html</anchorfile>
      <anchor>adc7848885ab2d9380f242c6445b019d4</anchor>
      <arglist>(const StringArray &amp;files, int x, int y)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileFilter</name>
    <filename>classFileFilter.html</filename>
    <member kind="function">
      <type></type>
      <name>FileFilter</name>
      <anchorfile>classFileFilter.html</anchorfile>
      <anchor>a3f90501257450a3f88b3d143dec7946b</anchor>
      <arglist>(const String &amp;filterDescription)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileFilter</name>
      <anchorfile>classFileFilter.html</anchorfile>
      <anchor>a969a3ec83a59362beeee0e4325dbdb6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getDescription</name>
      <anchorfile>classFileFilter.html</anchorfile>
      <anchor>a46a7289c4a5fa272f730d1c890a7ca5f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isFileSuitable</name>
      <anchorfile>classFileFilter.html</anchorfile>
      <anchor>aeda6e37c3d5696fec7cb77970706deff</anchor>
      <arglist>(const File &amp;file) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isDirectorySuitable</name>
      <anchorfile>classFileFilter.html</anchorfile>
      <anchor>ac133687fcf57ee26643d17af7df85e0a</anchor>
      <arglist>(const File &amp;file) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>String</type>
      <name>description</name>
      <anchorfile>classFileFilter.html</anchorfile>
      <anchor>a405f80abc17801d969bbaab30b4cec10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileInputSource</name>
    <filename>classFileInputSource.html</filename>
    <base>InputSource</base>
    <member kind="function">
      <type></type>
      <name>FileInputSource</name>
      <anchorfile>classFileInputSource.html</anchorfile>
      <anchor>a9bf6fb87e9675c644bc98ccb141c8508</anchor>
      <arglist>(const File &amp;file, bool useFileTimeInHashGeneration=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileInputSource</name>
      <anchorfile>classFileInputSource.html</anchorfile>
      <anchor>a02931f6b2178aaf377f014e279677793</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InputStream *</type>
      <name>createInputStream</name>
      <anchorfile>classFileInputSource.html</anchorfile>
      <anchor>a0da92ee54e577fbd14352bc121d13c11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InputStream *</type>
      <name>createInputStreamFor</name>
      <anchorfile>classFileInputSource.html</anchorfile>
      <anchor>ac01db04a5397f2bd4da7f2bd9582ebae</anchor>
      <arglist>(const String &amp;relatedItemPath)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>hashCode</name>
      <anchorfile>classFileInputSource.html</anchorfile>
      <anchor>ad502d2d89937525cce7179cee2104be8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileInputStream</name>
    <filename>classFileInputStream.html</filename>
    <base>InputStream</base>
    <member kind="function">
      <type></type>
      <name>FileInputStream</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>a277a7370f2a2f038e9258de395122510</anchor>
      <arglist>(const File &amp;fileToRead)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileInputStream</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>a48dfa318f2d5ebefc1489ac44edefde5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getFile</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>a4f162d294de9de866f6ef74313faef68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Result &amp;</type>
      <name>getStatus</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>ace9aedfff3f4e9f375f6b5cd1bb056dd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>failedToOpen</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>a203bfaf432beeac638b8d6ec5bbce2c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>openedOk</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>a45dc57c8101f565e505fed847723eb5d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>ae5f0c76cce2f78e36145532283655957</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>ade84696bb793d206a64c8b4da92512c8</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExhausted</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>ab57c67d696646e6acf1301cea635f053</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>aa1ef13b569fe4690f35ae799a4ed0193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>ad66bd953e8e16e6ed07d39f0b3e5ad14</anchor>
      <arglist>(int64 pos)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileListComponent</name>
    <filename>classFileListComponent.html</filename>
    <base>ListBox</base>
    <base>DirectoryContentsDisplayComponent</base>
    <base protection="private">ListBoxModel</base>
    <base protection="private">ChangeListener</base>
    <member kind="function">
      <type></type>
      <name>FileListComponent</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>adbd638f9975ed562d987ffc9425ea397</anchor>
      <arglist>(DirectoryContentsList &amp;listToShow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileListComponent</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>addb0d8acf1582da5e55386321ff71895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSelectedFiles</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>ad63ce4326e3cfe2e4deeeb735da550ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getSelectedFile</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>ae04fe8c03ba18b64065fe1aac0527f59</anchor>
      <arglist>(int index=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselectAllFiles</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>ad9faa05bc34a52c7c36749db81fa843f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToTop</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>ac199579bb7313547a21c540a7b5b0d48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedFile</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>a075e3754b55e1db6fea4f9599635263a</anchor>
      <arglist>(const File &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeListenerCallback</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>a8c1f1804bef2a8fdb6d82a5bd0e8d25b</anchor>
      <arglist>(ChangeBroadcaster *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRows</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>a727944ea3e06b211c0115eb792e9cfe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintListBoxItem</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>ac009e675d2b4446550b18345b0e64b1e</anchor>
      <arglist>(int, Graphics &amp;, int, int, bool)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>refreshComponentForRow</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>ac3e5d364c6f601baba103c41aaafa691</anchor>
      <arglist>(int rowNumber, bool isRowSelected, Component *existingComponentToUpdate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectedRowsChanged</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>a5e9d674b21ee66c45daf19fc9193505c</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteKeyPressed</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>a3ca7e3d202f0a695eab38628b4c3a68e</anchor>
      <arglist>(int currentSelectedRow)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>returnKeyPressed</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>a446f729961a0f3c4f1adb28e1554ab4e</anchor>
      <arglist>(int currentSelectedRow)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileLogger</name>
    <filename>classFileLogger.html</filename>
    <base>Logger</base>
    <member kind="function">
      <type></type>
      <name>FileLogger</name>
      <anchorfile>classFileLogger.html</anchorfile>
      <anchor>a2d873dd232329a1602ae230b3d1e2736</anchor>
      <arglist>(const File &amp;fileToWriteTo, const String &amp;welcomeMessage, const int maxInitialFileSizeBytes=128 *1024)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileLogger</name>
      <anchorfile>classFileLogger.html</anchorfile>
      <anchor>ab08af44f2de3fe1b51158132f9a399dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMessage</name>
      <anchorfile>classFileLogger.html</anchorfile>
      <anchor>a36e23aca4e91ff567ad79ff7eb3df695</anchor>
      <arglist>(const String &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getLogFile</name>
      <anchorfile>classFileLogger.html</anchorfile>
      <anchor>a12114b85851110cee7831fe97ab835a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FileLogger *</type>
      <name>createDefaultAppLogger</name>
      <anchorfile>classFileLogger.html</anchorfile>
      <anchor>af546ec5497b6bb3d126cf64f182fc2d9</anchor>
      <arglist>(const String &amp;logFileSubDirectoryName, const String &amp;logFileName, const String &amp;welcomeMessage, const int maxInitialFileSizeBytes=128 *1024)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilenameComponent</name>
    <filename>classFilenameComponent.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>FileDragAndDropTarget</base>
    <base protection="private">AsyncUpdater</base>
    <base protection="private">ComboBox::Listener</base>
    <member kind="function">
      <type></type>
      <name>FilenameComponent</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>af7e0ceb90d37ff9a92f453d9c59212d9</anchor>
      <arglist>(const String &amp;name, const File &amp;currentFile, bool canEditFilename, bool isDirectory, bool isForSaving, const String &amp;fileBrowserWildcard, const String &amp;enforcedSuffix, const String &amp;textWhenNothingSelected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FilenameComponent</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>afb93c7681259b25567f0b78008794ee0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getCurrentFile</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>abefc290967f8808c6bd42f5baaf97bf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentFile</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a5a4dead1f0820321e9439a48eb52a588</anchor>
      <arglist>(File newFile, bool addToRecentlyUsedList, bool sendChangeNotification=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilenameIsEditable</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a2b3bbfd73bd1f071a5c511f8782266d8</anchor>
      <arglist>(bool shouldBeEditable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultBrowseTarget</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a79934b297889977649251cae1afd323e</anchor>
      <arglist>(const File &amp;newDefaultDirectory)</arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getRecentlyUsedFilenames</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a13a4a367ac633583eedae376b73373e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRecentlyUsedFilenames</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a740fcb632383c83c32b744f16191e7cd</anchor>
      <arglist>(const StringArray &amp;filenames)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRecentlyUsedFile</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a4a49fee3ac243a55e7ef7db10535b432</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumberOfRecentFiles</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a6c0e43582a1abe9542b8382592f3e515</anchor>
      <arglist>(int newMaximum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBrowseButtonText</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>af3f994d7a7e5591322f01288b4a2000c</anchor>
      <arglist>(const String &amp;browseButtonText)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a68d23410011d95128c87ad14dfca04f8</anchor>
      <arglist>(FilenameComponentListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a37affd68e94d2099914b142bc6a5bc0d</anchor>
      <arglist>(FilenameComponentListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTooltip</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>ad5fe19746b9f6fdd901ff55e1483c5d6</anchor>
      <arglist>(const String &amp;newTooltip)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintOverChildren</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>aee44df6fd5bdd223cd27216c07f56a37</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a85417eceae2e7bbaec3addfff7ec0991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>aa04497b25c3fd066518c2deb93daae7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInterestedInFileDrag</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>ae9b2c41affe5d644920389d6030a1866</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filesDropped</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>aa4e4085755587f59230ff52ff5fdd353</anchor>
      <arglist>(const StringArray &amp;files, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileDragEnter</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a02c4f2917eacf9763215883f0236a13f</anchor>
      <arglist>(const StringArray &amp;files, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileDragExit</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a2ec216d51fd5ad29159602a4f7a889f1</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilenameComponentListener</name>
    <filename>classFilenameComponentListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilenameComponentListener</name>
      <anchorfile>classFilenameComponentListener.html</anchorfile>
      <anchor>ae6b8bb26e3daf19d3b935cd5bea2e707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>filenameComponentChanged</name>
      <anchorfile>classFilenameComponentListener.html</anchorfile>
      <anchor>ab004f18f2a17ca43a7c153f8680a11f4</anchor>
      <arglist>(FilenameComponent *fileComponentThatHasChanged)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileOutputStream</name>
    <filename>classFileOutputStream.html</filename>
    <base>OutputStream</base>
    <member kind="function">
      <type></type>
      <name>FileOutputStream</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>a8fec01c54ed2612012b722141710fdbc</anchor>
      <arglist>(const File &amp;fileToWriteTo, int bufferSizeToUse=16384)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileOutputStream</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>aa0423041bf20194144689440ed94ade3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getFile</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>aaefbc546f0a295eea4abc66c4b1e1409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Result &amp;</type>
      <name>getStatus</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>a042b69b37a81a6e51bb5f45b18cce067</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>failedToOpen</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>a616887c2791a85e35f00b6e38436d4be</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>openedOk</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>a5b0c2bc1b12469f38d4a2929711b66d9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>truncate</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>a663c7e264306c74ed58f2639acec5797</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>ac7ddf0244b8e03bf43ea1d873b65af28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>a460286bad1258c1ad1be8751a72a2205</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>ab20f6daa82d40203ffa8b00fb5f6c80b</anchor>
      <arglist>(int64 pos)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>ae6238549583f374812e88be52e033882</anchor>
      <arglist>(const void *data, int numBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRepeatedByte</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>a73719ce22652b249152351ba00b76a37</anchor>
      <arglist>(uint8 byte, int numTimesToRepeat)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilePreviewComponent</name>
    <filename>classFilePreviewComponent.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>FilePreviewComponent</name>
      <anchorfile>classFilePreviewComponent.html</anchorfile>
      <anchor>a1d368e3ea93da423b44da9001d63cd5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FilePreviewComponent</name>
      <anchorfile>classFilePreviewComponent.html</anchorfile>
      <anchor>aa2f2047c589d8aee5f4e92973c16e00c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>selectedFileChanged</name>
      <anchorfile>classFilePreviewComponent.html</anchorfile>
      <anchor>aa89507ce51322a1462bb12d1fd07715a</anchor>
      <arglist>(const File &amp;newSelectedFile)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileSearchPath</name>
    <filename>classFileSearchPath.html</filename>
    <member kind="function">
      <type></type>
      <name>FileSearchPath</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a37b486aaabdae9e71f69310bcd32de79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileSearchPath</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a55b79d55adaa7a4635063088eb00dd2c</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileSearchPath</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a043b1f2ab48ded271f78b7ddd17a68f6</anchor>
      <arglist>(const FileSearchPath &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileSearchPath</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>aefab78766a187af30986836b9ba1f70d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FileSearchPath &amp;</type>
      <name>operator=</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a663c28591c30e3f2f3c9ce07bdb680f9</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPaths</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>ac23a53aa33f559222421ac4d17321804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>operator[]</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>ab83cfa4d96cc23f1a2000bd054f5f786</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>ae9bc3fdeef9af732d51ec8dd7d4ab08e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a045b18e60858ac874c9fbf4b28c4f52f</anchor>
      <arglist>(const File &amp;directoryToAdd, int insertIndex=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addIfNotAlreadyThere</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a1c282c10f1b2d4217959dc1514fc4611</anchor>
      <arglist>(const File &amp;directoryToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>ad560bd8c08782e3eb0ead50ee2793161</anchor>
      <arglist>(int indexToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPath</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a0c2d266907a5e34df0048bb9865703f1</anchor>
      <arglist>(const FileSearchPath &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRedundantPaths</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>ada0f0c385326ce152cf1b23c39b31516</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeNonExistentPaths</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a9a3170aadec6b3dd9b2d5c263f87b9bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findChildFiles</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a4ba70d62200ad57a85b1cb0ade33b1cf</anchor>
      <arglist>(Array&lt; File &gt; &amp;results, int whatToLookFor, bool searchRecursively, const String &amp;wildCardPattern=&quot;*&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFileInPath</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a9b866d5ab02e3677c375bf1e3fa935f6</anchor>
      <arglist>(const File &amp;fileToCheck, bool checkRecursively) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileSearchPathListComponent</name>
    <filename>classFileSearchPathListComponent.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>FileDragAndDropTarget</base>
    <base protection="private">ListBoxModel</base>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>ad490e320611ac10c29f5c07e0c6aa30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>ad490e320611ac10c29f5c07e0c6aa30faaeb38822be9df0511374d2f6c0684790</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileSearchPathListComponent</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a5e41ab33f6ec3c92c65d5ccbf6b1735a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileSearchPathListComponent</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>aa19c5cc1e545558434fdd65239f38318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FileSearchPath &amp;</type>
      <name>getPath</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>af58876df760a2f3c4096abd4b9454b50</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a04ad4d49fa2871532c5d66a682ef03a9</anchor>
      <arglist>(const FileSearchPath &amp;newPath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultBrowseTarget</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>aac07a5d2f748148ca278a8d8826e6e43</anchor>
      <arglist>(const File &amp;newDefaultDirectory)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRows</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>adab5968a6560b7f5def84290fc9bb02a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintListBoxItem</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>aa95a61fc7de9f0e2d5643a6449c34158</anchor>
      <arglist>(int rowNumber, Graphics &amp;g, int width, int height, bool rowIsSelected)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteKeyPressed</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a9f3c1e515a937e00d8ac6843967514a0</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>returnKeyPressed</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>afe63228e9b3e14845d2aa4bfd4484678</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listBoxItemDoubleClicked</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a0a47ee02b43741bcca7c630cd719cc8c</anchor>
      <arglist>(int row, const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectedRowsChanged</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a14e32eced450dcc84ca663f4f4386e14</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>aa7d61c91f1206b26e168477b93c43274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a19355d862b903b574f27e188095eaa79</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInterestedInFileDrag</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a4a9ea69e889bd338207f0b11bf68169f</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filesDropped</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a97a40e4a8f032de64c4c450f5c220226</anchor>
      <arglist>(const StringArray &amp;files, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonClicked</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a1c691dc224b70cc1c02bf86ccdcfd015</anchor>
      <arglist>(Button *button)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileTreeComponent</name>
    <filename>classFileTreeComponent.html</filename>
    <base>TreeView</base>
    <base>DirectoryContentsDisplayComponent</base>
    <member kind="function">
      <type></type>
      <name>FileTreeComponent</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>ac2d6da93dff837221552e684749ce508</anchor>
      <arglist>(DirectoryContentsList &amp;listToShow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileTreeComponent</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>a23f8e7a313601b0cba09ced9bdcc2dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSelectedFiles</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>a2a6c7a1c69078fe7a1755a49ec12a04a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getSelectedFile</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>ad384276f8952d1a045300d36cd7e9d31</anchor>
      <arglist>(int index=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselectAllFiles</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>a61af64fc88e2b595b521f52f05d3a959</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToTop</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>a073e0467733f97816641d88f4fad899a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedFile</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>acaed76d7b3ab186018b5eaec0179c600</anchor>
      <arglist>(const File &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>aacc76f2cb6f1857df9898250751c5463</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDragAndDropDescription</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>acf0d725ef9505914f37e60ab433c84d4</anchor>
      <arglist>(const String &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getDragAndDropDescription</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>ad5ae34f6647c564e3555ac5684954230</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FillType</name>
    <filename>classFillType.html</filename>
    <member kind="function">
      <type></type>
      <name>FillType</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a118c51580928b701c7c3a1976d5b5133</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FillType</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>ac331196982b7630ad9c5d1139264cdc3</anchor>
      <arglist>(const Colour &amp;colour) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FillType</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a5be046ef5a18f2a136a9b33b2486e58d</anchor>
      <arglist>(const ColourGradient &amp;gradient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FillType</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a3f67b8d794cafa66ccf9f60a80bfc6d2</anchor>
      <arglist>(const Image &amp;image, const AffineTransform &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FillType</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>accca5be8258d918b4cdce41b5bbca907</anchor>
      <arglist>(const FillType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>FillType &amp;</type>
      <name>operator=</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a41018ff8ebbb02d12d0d0117b4c4f9de</anchor>
      <arglist>(const FillType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FillType</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a45a28cb87d8faf5789c14c88087852e0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isColour</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>ae816ef1788db62d88a9ea251fd7abdf4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGradient</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>adf38a922717b83a0f9ed9b9d0b294efc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTiledImage</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>aaaee9279ba52466501e9a231e02b3358</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a6e0b52c6c2a2bfb2c8ff56c39c8a68fa</anchor>
      <arglist>(const Colour &amp;newColour) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGradient</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a56bd20de45bbd44cd262245ea1ff3615</anchor>
      <arglist>(const ColourGradient &amp;newGradient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTiledImage</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a37f1ace7dcffb397803ee1d0cdb51749</anchor>
      <arglist>(const Image &amp;image, const AffineTransform &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a4c05ac05e816cecabba0971b3840ba40</anchor>
      <arglist>(float newOpacity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a257456c1f1541722a4ef662520670c2b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvisible</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>ae94ec364686ded07aa207a91fe33941d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FillType</type>
      <name>transformed</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a5750bc2f18b31abf87555c132334056b</anchor>
      <arglist>(const AffineTransform &amp;transform) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a09e60b6da3a8ace833aeab3c299ade71</anchor>
      <arglist>(const FillType &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a483da26a20e0473940fc9733896b21e5</anchor>
      <arglist>(const FillType &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>Colour</type>
      <name>colour</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a6eb1907c0b75fccfbf45ede3b3b490d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ScopedPointer&lt; ColourGradient &gt;</type>
      <name>gradient</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a62d382f59a2bf0720245908a4269a805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Image</type>
      <name>image</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a10bd0d13433133545b26ea3894b3c641</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AffineTransform</type>
      <name>transform</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a6302124b870bccda6a55b13a37a69744</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FlacAudioFormat</name>
    <filename>classFlacAudioFormat.html</filename>
    <base>AudioFormat</base>
    <member kind="function">
      <type></type>
      <name>FlacAudioFormat</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>a767df3502e290183216370447d1dc7ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FlacAudioFormat</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>a71a95d6ee4ba2c401b82fc253be3c99b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleSampleRates</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>af70c9072832ae7aa80b730d5e5a5144a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleBitDepths</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>aae989ca5a9d3ed6ec0a2ffe58a2e0555</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoStereo</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>a1c139fb670a143f8d20b6de0e52048fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoMono</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>af6345c8cc4eb0b6b7cf564d15291f3aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>a3f1df9dc90113b19635266689a843040</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getQualityOptions</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>a4c0497f4cb5e2f8795a8fc26dd3f21cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>a789c5b288edf8f187b56f5fa8e779b4e</anchor>
      <arglist>(InputStream *sourceStream, bool deleteStreamIfOpeningFails)</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatWriter *</type>
      <name>createWriterFor</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>aa7c76099fd21f91d57104d3db9ce3e90</anchor>
      <arglist>(OutputStream *streamToWriteTo, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FocusChangeListener</name>
    <filename>classFocusChangeListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FocusChangeListener</name>
      <anchorfile>classFocusChangeListener.html</anchorfile>
      <anchor>aa63a86374b76c70ecc0bbae3977f17a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>globalFocusChanged</name>
      <anchorfile>classFocusChangeListener.html</anchorfile>
      <anchor>aea1c72e9c4d918e41c729d79592fa956</anchor>
      <arglist>(Component *focusedComponent)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Font</name>
    <filename>classFont.html</filename>
    <member kind="enumeration">
      <name>FontStyleFlags</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a52a35b5dc1e6f782e25283c9283bae4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>plain</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a52a35b5dc1e6f782e25283c9283bae4fa99039e6bb438434f9bccde132132dd99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bold</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a52a35b5dc1e6f782e25283c9283bae4fa1af8035a650d8a663a3f67b3b6208eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>italic</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a52a35b5dc1e6f782e25283c9283bae4fa1d2b466ff0cbcf7e762558b847b99a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>underlined</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a52a35b5dc1e6f782e25283c9283bae4fa3bb23d4d794ac926cd255a886aa37190</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a15524cff0cecb0d9525c786678a7935c</anchor>
      <arglist>(float fontHeight, int styleFlags=plain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>ae41e6b5cf9c3c368aaace76f7208c2fa</anchor>
      <arglist>(const String &amp;typefaceName, float fontHeight, int styleFlags)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>aa06c029ddf2e47279c95828581feaa10</anchor>
      <arglist>(const String &amp;typefaceStyle, float fontHeight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>ab41a1accb2fbbd96b2e35d5ef4c548c9</anchor>
      <arglist>(const String &amp;typefaceName, const String &amp;typefaceStyle, float fontHeight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a3b40611ef144d05c0126f7c69890b32b</anchor>
      <arglist>(const Font &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a9524428484b892673994cd74f964a089</anchor>
      <arglist>(const Typeface::Ptr &amp;typeface)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a4e6a119206f505522100221c1fafde45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Font &amp;</type>
      <name>operator=</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a55edb0fa67d9ddcd87be622f3f9031c8</anchor>
      <arglist>(const Font &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a56d28dff0503d6ee86ee1bac2fb371e7</anchor>
      <arglist>(const Font &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a81ce76953397ead163002ed82380b7e9</anchor>
      <arglist>(const Font &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Font</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>af7a69b535952054cd42b65000d8182f4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTypefaceName</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a79a3169e0685ade146aefe20b2250745</anchor>
      <arglist>(const String &amp;faceName)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getTypefaceName</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a66d068f203550181d57353649f8f694f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getTypefaceStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a5c7bb70dc22a35c23ebc4b685b679556</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTypefaceStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a844b7f87922aabf01971921f44d2662f</anchor>
      <arglist>(const String &amp;newStyle)</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>withTypefaceStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a26442e5b4da40871d16a35497bb3126b</anchor>
      <arglist>(const String &amp;newStyle) const </arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getAvailableStyles</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>ae381cbed77eed2b1e69f735906b3bf26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getHeight</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a96e4ccc975ce4180c10107aa77ea8c7d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>withHeight</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a27bd3773032ababc77e6c2d4b73b2026</anchor>
      <arglist>(float height) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a3dc7a6f8ab92c63a7a3551434806aebf</anchor>
      <arglist>(float newHeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightWithoutChangingWidth</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a704ed07aafcb44d99cf5724e08893316</anchor>
      <arglist>(float newHeight)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAscent</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>adf2c00fbf24a05b02b5b8e6cf41f37b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDescent</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>afb12eaca61c64310775518f68ad7cf35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStyleFlags</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a62ed83b1c35f63287c8e792c4a3a46cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>withStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a0b9fb0ca73a2e9c8296d6203070a4b37</anchor>
      <arglist>(int styleFlags) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStyleFlags</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a6e4e89d5c6b92af16360307ea8b0a905</anchor>
      <arglist>(int newFlags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBold</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a46c360f86677fda0471d61c22eb82a3a</anchor>
      <arglist>(bool shouldBeBold)</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>boldened</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a02ac6e93c1de92fdb7959d9367608ea2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBold</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a4edbda1c220656c7f2cea27e06464c15</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setItalic</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a4c72d0b30c88f8119f285306acbb4344</anchor>
      <arglist>(bool shouldBeItalic)</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>italicised</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>afe493fc7743d0311adb2b96d3fe49718</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isItalic</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a5523f05c4ae0df0375e538d8053f0679</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnderline</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>af107c023ff440651ae9291cdf058b7c1</anchor>
      <arglist>(bool shouldBeUnderlined)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnderlined</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a8246621b771e73832156cad3c1ba66d6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getHorizontalScale</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a1e44cb15a955d489c0bb980fe7bcdda5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>withHorizontalScale</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a1d23c59274334f004505169596de4029</anchor>
      <arglist>(float scaleFactor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHorizontalScale</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a305977210a0e621b8c36bbce58d665aa</anchor>
      <arglist>(float scaleFactor)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getExtraKerningFactor</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>ad9e47ffcaf3ed0cc8d81cc088a55a8a6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>withExtraKerningFactor</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a1f5951b14ebdedafc548f0ee2b69fcba</anchor>
      <arglist>(float extraKerning) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtraKerningFactor</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a996b7095b0956f62b71f24893e72a914</anchor>
      <arglist>(float extraKerning)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSizeAndStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>adda175db2fae3b56a41d59db82b26ab8</anchor>
      <arglist>(float newHeight, int newStyleFlags, float newHorizontalScale, float newKerningAmount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSizeAndStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a405732674d98d90cb2948ea20ccbe67c</anchor>
      <arglist>(float newHeight, const String &amp;newStyle, float newHorizontalScale, float newKerningAmount)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStringWidth</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>aed4d0579fb11ca1bba6c68e5bd02e1b2</anchor>
      <arglist>(const String &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStringWidthFloat</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a9fac3d0ffd0163d9063047d78db7781c</anchor>
      <arglist>(const String &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlyphPositions</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a6040a5e844539fb75c720b1d6d0ae053</anchor>
      <arglist>(const String &amp;text, Array&lt; int &gt; &amp;glyphs, Array&lt; float &gt; &amp;xOffsets) const </arglist>
    </member>
    <member kind="function">
      <type>Typeface *</type>
      <name>getTypeface</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a7b3902ae5dde1ad8cd5f5cd5c6fb3960</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>ab087e90d7aa1d13ffc7de7c477dfa0c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const String &amp;</type>
      <name>getDefaultSansSerifFontName</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>affc37b5ccde3bccea8108d25307b2fe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const String &amp;</type>
      <name>getDefaultSerifFontName</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a85320a4e022c86097ad17e844fab13c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const String &amp;</type>
      <name>getDefaultMonospacedFontName</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>aa515d2236ce4c270785e5391ac3c8514</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const String &amp;</type>
      <name>getDefaultStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a7f0dad8086009fad6e3d43b72442dc6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Typeface::Ptr</type>
      <name>getDefaultTypefaceForFont</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a46b174245c0324ceab50fbeec45cc288</anchor>
      <arglist>(const Font &amp;font)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findFonts</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a95f7587d2f1bb76329f4f09444b09cdb</anchor>
      <arglist>(Array&lt; Font &gt; &amp;results)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>findAllTypefaceNames</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a8dd330a501635eb452c07c0f3e937c31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>findAllTypefaceStyles</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a4504ff88b0af4aec852736d267f837cc</anchor>
      <arglist>(const String &amp;family)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const String &amp;</type>
      <name>getFallbackFontName</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a9d672fdb986d1fc4ddb5207d08d3bcb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setFallbackFontName</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>ad898e9741496ae8fe48aa27198732733</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const String &amp;</type>
      <name>getFallbackFontStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a51defec01a1b77bd50b70c452cc6e658</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setFallbackFontStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>aa58cbc471e7b0a24568526dabffc3672</anchor>
      <arglist>(const String &amp;style)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Font</type>
      <name>fromString</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a9ce8c13a7877c1a0e6cb78163fb6aefd</anchor>
      <arglist>(const String &amp;fontDescription)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericAudioProcessorEditor</name>
    <filename>classGenericAudioProcessorEditor.html</filename>
    <base>AudioProcessorEditor</base>
    <member kind="function">
      <type></type>
      <name>GenericAudioProcessorEditor</name>
      <anchorfile>classGenericAudioProcessorEditor.html</anchorfile>
      <anchor>ab1b348342e9a7fdf916637cb3efca990</anchor>
      <arglist>(AudioProcessor *owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericAudioProcessorEditor</name>
      <anchorfile>classGenericAudioProcessorEditor.html</anchorfile>
      <anchor>a3a06a90ce44f2715a2741eed8636c5ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classGenericAudioProcessorEditor.html</anchorfile>
      <anchor>a61acb775686bfb1e6dbcd2eb70e3da5b</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classGenericAudioProcessorEditor.html</anchorfile>
      <anchor>a12d7eba07748502e6c8533e93bb08ddf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericScopedLock</name>
    <filename>classGenericScopedLock.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>GenericScopedLock</name>
      <anchorfile>classGenericScopedLock.html</anchorfile>
      <anchor>acb13a2d16339b721c40951ce85005eeb</anchor>
      <arglist>(const LockType &amp;lock) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericScopedLock</name>
      <anchorfile>classGenericScopedLock.html</anchorfile>
      <anchor>a02234589cd2f1c0ff057d4d64beb12e1</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericScopedTryLock</name>
    <filename>classGenericScopedTryLock.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>GenericScopedTryLock</name>
      <anchorfile>classGenericScopedTryLock.html</anchorfile>
      <anchor>a2d8b85eb72c754b7d2162c3cc296f30a</anchor>
      <arglist>(const LockType &amp;lock) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericScopedTryLock</name>
      <anchorfile>classGenericScopedTryLock.html</anchorfile>
      <anchor>aa552ec1121d42230080f6dbc614ead99</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classGenericScopedTryLock.html</anchorfile>
      <anchor>a0504fe1e14b9a246e5e6018132578b94</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericScopedUnlock</name>
    <filename>classGenericScopedUnlock.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>GenericScopedUnlock</name>
      <anchorfile>classGenericScopedUnlock.html</anchorfile>
      <anchor>ab2dc89287c459355d6a04fb5d58d9ce3</anchor>
      <arglist>(const LockType &amp;lock) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericScopedUnlock</name>
      <anchorfile>classGenericScopedUnlock.html</anchorfile>
      <anchor>ab979a8270fadb8bd835ef693cb5ad474</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GIFImageFormat</name>
    <filename>classGIFImageFormat.html</filename>
    <base>ImageFileFormat</base>
    <member kind="function">
      <type></type>
      <name>GIFImageFormat</name>
      <anchorfile>classGIFImageFormat.html</anchorfile>
      <anchor>a59f51435522dcbc617840c3e94173922</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GIFImageFormat</name>
      <anchorfile>classGIFImageFormat.html</anchorfile>
      <anchor>ac2e0d532b3adb1e119163d35f85230cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getFormatName</name>
      <anchorfile>classGIFImageFormat.html</anchorfile>
      <anchor>a4848377ac83ccf0ad54120e0c42ba0d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canUnderstand</name>
      <anchorfile>classGIFImageFormat.html</anchorfile>
      <anchor>a482ca505b61af3903820411546015681</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>decodeImage</name>
      <anchorfile>classGIFImageFormat.html</anchorfile>
      <anchor>a30aab4005e0609815159e9ed99652d9d</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeImageToStream</name>
      <anchorfile>classGIFImageFormat.html</anchorfile>
      <anchor>a25fa8ee423088f8dc7300997093ab512</anchor>
      <arglist>(const Image &amp;sourceImage, OutputStream &amp;destStream)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlowEffect</name>
    <filename>classGlowEffect.html</filename>
    <base>ImageEffectFilter</base>
    <member kind="function">
      <type></type>
      <name>GlowEffect</name>
      <anchorfile>classGlowEffect.html</anchorfile>
      <anchor>a8ffa8313feae185387d68af2983cdeea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlowEffect</name>
      <anchorfile>classGlowEffect.html</anchorfile>
      <anchor>a15493b06f02825726df3e69c6a5e4a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlowProperties</name>
      <anchorfile>classGlowEffect.html</anchorfile>
      <anchor>ad34cee4100d109dbb29321c8696a1de8</anchor>
      <arglist>(float newRadius, const Colour &amp;newColour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyEffect</name>
      <anchorfile>classGlowEffect.html</anchorfile>
      <anchor>a1addc87c44d02d6c864dd8d7c1cadf35</anchor>
      <arglist>(Image &amp;sourceImage, Graphics &amp;destContext, float scaleFactor, float alpha)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlyphArrangement</name>
    <filename>classGlyphArrangement.html</filename>
    <member kind="function">
      <type></type>
      <name>GlyphArrangement</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>ab05924e6a7eded55ad3d030fbc55d5ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlyphArrangement</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>af7176b40ebcf58f8eee687b94515b912</anchor>
      <arglist>(const GlyphArrangement &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>GlyphArrangement &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>aa6fd6205db7ea08cf1aa32f88a0016c9</anchor>
      <arglist>(const GlyphArrangement &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlyphArrangement</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>aa6a89d95ae356910d04d56121f44d693</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlyphs</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a65842effc25470c117a8a623e888e19b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PositionedGlyph &amp;</type>
      <name>getGlyph</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>ae5d54fc2b1b0da9c7e973594a85442d7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a910c2396f3737e63dbf6d0ce4e8fdf94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLineOfText</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a0ace103d7c4b6600dcea7aff1f26811d</anchor>
      <arglist>(const Font &amp;font, const String &amp;text, float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCurtailedLineOfText</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a7bd1c1d0e03dfd9ecc19a826b78975aa</anchor>
      <arglist>(const Font &amp;font, const String &amp;text, float x, float y, float maxWidthPixels, bool useEllipsis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addJustifiedText</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a5cc600b28d93cb972baf14d3be08859f</anchor>
      <arglist>(const Font &amp;font, const String &amp;text, float x, float y, float maxLineWidth, const Justification &amp;horizontalLayout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFittedText</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a18cfbfb3481a8f6d498e58be4f1c438b</anchor>
      <arglist>(const Font &amp;font, const String &amp;text, float x, float y, float width, float height, const Justification &amp;layout, int maximumLinesToUse, float minimumHorizontalScale=0.7f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGlyphArrangement</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a985ca35c831980383080c6565caf36b4</anchor>
      <arglist>(const GlyphArrangement &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGlyph</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>aef0f563d347779a6455f54fe78c6b12e</anchor>
      <arglist>(const PositionedGlyph &amp;glyph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a5944d7c77faa1ea9ab6273d5806860c6</anchor>
      <arglist>(const Graphics &amp;g) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>ab0a6d27632c9a1bc564aa8b50330551e</anchor>
      <arglist>(const Graphics &amp;g, const AffineTransform &amp;transform) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPath</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a35cd45ff7bd974e0c4876142eef16c90</anchor>
      <arglist>(Path &amp;path) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findGlyphIndexAt</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>aca23d4051cb4934df16f76a128798e01</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getBoundingBox</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a90d447c048d1e490bce6c796baed8a75</anchor>
      <arglist>(int startIndex, int numGlyphs, bool includeWhitespace) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveRangeOfGlyphs</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a56badaeaf0b5dbeed1920757fd8c9a05</anchor>
      <arglist>(int startIndex, int numGlyphs, float deltaX, float deltaY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRangeOfGlyphs</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>ad3fcc973e64f466911320e90ca57a322</anchor>
      <arglist>(int startIndex, int numGlyphs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stretchRangeOfGlyphs</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a70fb63a9d205a4af5f3cb258f2b8b501</anchor>
      <arglist>(int startIndex, int numGlyphs, float horizontalScaleFactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>justifyGlyphs</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a4f5a5b4bfea37fb1bcfc4747b0f4bbc5</anchor>
      <arglist>(int startIndex, int numGlyphs, float x, float y, float width, float height, const Justification &amp;justification)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Graphics</name>
    <filename>classGraphics.html</filename>
    <class kind="class">Graphics::ScopedSaveState</class>
    <member kind="enumeration">
      <name>ResamplingQuality</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a5da218e649d1b5ac3d67443ae77caf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lowResamplingQuality</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a5da218e649d1b5ac3d67443ae77caf87a4eb9cfa2e544befd2d50708e3316b28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mediumResamplingQuality</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a5da218e649d1b5ac3d67443ae77caf87a5d8dfbf84457e91eb309b1402562f2af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>highResamplingQuality</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a5da218e649d1b5ac3d67443ae77caf87ae3c4b3cdf28f0aefc035977522675e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Graphics</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ada6375a2e6bf68758a2191acb4d62c65</anchor>
      <arglist>(const Image &amp;imageToDrawOnto)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Graphics</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a7841c9a961ac9bca33bd30ddf8066cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>af17c43bb97e6822aa4b7b8a8adc40b99</anchor>
      <arglist>(const Colour &amp;newColour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a1ce91a31ec1258a73ace93b6c337dbb2</anchor>
      <arglist>(float newOpacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGradientFill</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a57478bc2496ebb84696e5ba64b455965</anchor>
      <arglist>(const ColourGradient &amp;gradient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTiledImageFill</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a675cd4c4715165f0a0aec0bd8c3fe390</anchor>
      <arglist>(const Image &amp;imageToUse, int anchorX, int anchorY, float opacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillType</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a763ea233d7b7c8e45e33c7ea8030ff48</anchor>
      <arglist>(const FillType &amp;newFill)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a1fbdb321975d90c45243027a61ac2be9</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a8c9a73240eab843cbf93393956910e72</anchor>
      <arglist>(float newFontHeight)</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>getCurrentFont</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>abb972f0d801630b6e02d335cfa9da28a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSingleLineText</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ade61955c11b56c91232b350dbfbf1b81</anchor>
      <arglist>(const String &amp;text, int startX, int baselineY, const Justification &amp;justification=Justification::left) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawMultiLineText</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a37c017a9d2f32bcd677f61f5de97ab9a</anchor>
      <arglist>(const String &amp;text, int startX, int baselineY, int maximumLineWidth) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTextAsPath</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a837821b4bab764d76df560350e069b45</anchor>
      <arglist>(const String &amp;text, const AffineTransform &amp;transform) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawText</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>aa03c871748cf584b548663b79da7926c</anchor>
      <arglist>(const String &amp;text, int x, int y, int width, int height, const Justification &amp;justificationType, bool useEllipsesIfTooBig) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawFittedText</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ad2c56e11c42bc7404233b9a23e939ede</anchor>
      <arglist>(const String &amp;text, int x, int y, int width, int height, const Justification &amp;justificationFlags, int maximumNumberOfLines, float minimumHorizontalScale=0.7f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a516a7795e6e0c6c70eb982a83ea0b8c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a29e9bc174cf54be0f423172e24d5cf78</anchor>
      <arglist>(const Colour &amp;colourToUse) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRect</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ac2202ef993b53d77d8646ed4ce3ea9d1</anchor>
      <arglist>(int x, int y, int width, int height) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRect</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a9ff78524c757a302ad8b9cbc4c7ba851</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rectangle) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRect</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a018bffc13a318cb5e59d29b258313b8b</anchor>
      <arglist>(float x, float y, float width, float height) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRoundedRectangle</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a1049a2dae8a1ae3e5e57238f2fd36a84</anchor>
      <arglist>(float x, float y, float width, float height, float cornerSize) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRoundedRectangle</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>afc06f32c228086e55876184176314bd1</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;rectangle, float cornerSize) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillCheckerBoard</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a359717e34bed0f5dfd2f3004b3cea19f</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;area, int checkWidth, int checkHeight, const Colour &amp;colour1, const Colour &amp;colour2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRect</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a28baf90f8e11ec6f96c349f45e09a9d0</anchor>
      <arglist>(int x, int y, int width, int height, int lineThickness=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRect</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a7b8a15c73c5d797cd169852224236f4f</anchor>
      <arglist>(float x, float y, float width, float height, float lineThickness=1.0f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRect</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a88e7c28b48c3f2e9e2c9df7d2571908f</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rectangle, int lineThickness=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRoundedRectangle</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a78541e36136eb040c4b8c81d4b8db8dd</anchor>
      <arglist>(float x, float y, float width, float height, float cornerSize, float lineThickness) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRoundedRectangle</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a91706e86b7120523346fee8f2161d48f</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;rectangle, float cornerSize, float lineThickness) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawBevel</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a9785e9e0d63e8576db415decc7f5b2cd</anchor>
      <arglist>(int x, int y, int width, int height, int bevelThickness, const Colour &amp;topLeftColour=Colours::white, const Colour &amp;bottomRightColour=Colours::black, bool useGradient=true, bool sharpEdgeOnOutside=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixel</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a69e70db1afc03d58f9055f8f45d8e5d1</anchor>
      <arglist>(int x, int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillEllipse</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ab6fdfd1cb32b32d52b6b30df36321f70</anchor>
      <arglist>(float x, float y, float width, float height) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawEllipse</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ac88110d5407539aa1be841a89d5170b0</anchor>
      <arglist>(float x, float y, float width, float height, float lineThickness) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a0911bf63fd6c0d3e35b2b701fcbc7728</anchor>
      <arglist>(float startX, float startY, float endX, float endY) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a664643f9fef3c8b37b0620c28ec4bb76</anchor>
      <arglist>(float startX, float startY, float endX, float endY, float lineThickness) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a94cf6a3a058ad1a36dc836b34916ef0d</anchor>
      <arglist>(const Line&lt; float &gt; &amp;line) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ace7c180c66f119399acb69ad966057e3</anchor>
      <arglist>(const Line&lt; float &gt; &amp;line, float lineThickness) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawDashedLine</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ab24a3f2ba3d648285fcad7c97fb8270f</anchor>
      <arglist>(const Line&lt; float &gt; &amp;line, const float *dashLengths, int numDashLengths, float lineThickness=1.0f, int dashIndexToStartFrom=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawVerticalLine</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a042d4f7223a63212ae1d9452e26cbd7a</anchor>
      <arglist>(int x, float top, float bottom) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawHorizontalLine</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>aeea9ba47ff90bb7643038692bf647738</anchor>
      <arglist>(int y, float left, float right) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillPath</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a129aa4c9dcc137a1c910a2f5ef118fb7</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform=AffineTransform::identity) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>strokePath</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a5bd626168d02b83d10123e398da5c5a7</anchor>
      <arglist>(const Path &amp;path, const PathStrokeType &amp;strokeType, const AffineTransform &amp;transform=AffineTransform::identity) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawArrow</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ab1484b102f99384c443cfb5881d68fa9</anchor>
      <arglist>(const Line&lt; float &gt; &amp;line, float lineThickness, float arrowheadWidth, float arrowheadLength) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImageResamplingQuality</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a0f8160f9b0a6866e40cf1a2b45c3b892</anchor>
      <arglist>(const ResamplingQuality newQuality)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawImageAt</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ab754b6a67c6964be2d27b1ba82bdae56</anchor>
      <arglist>(const Image &amp;imageToDraw, int topLeftX, int topLeftY, bool fillAlphaChannelWithCurrentBrush=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawImage</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a6e09218805a3eb3f7d4973433647d0e9</anchor>
      <arglist>(const Image &amp;imageToDraw, int destX, int destY, int destWidth, int destHeight, int sourceX, int sourceY, int sourceWidth, int sourceHeight, bool fillAlphaChannelWithCurrentBrush=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawImageTransformed</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a79c4f544cd7fcada2be7d24691e157a3</anchor>
      <arglist>(const Image &amp;imageToDraw, const AffineTransform &amp;transform, bool fillAlphaChannelWithCurrentBrush=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawImageWithin</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a980e4beef03333ee1ec1ca7b7963ad63</anchor>
      <arglist>(const Image &amp;imageToDraw, int destX, int destY, int destWidth, int destHeight, const RectanglePlacement &amp;placementWithinTarget, bool fillAlphaChannelWithCurrentBrush=false) const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getClipBounds</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a34942cbdbd743d7fd332c218ea7e4c5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipRegionIntersects</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a0a91a1c322713e070d8fd42796854340</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;area) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduceClipRegion</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ad97e058fcff2bc0e634eacc4ef1d7a5f</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduceClipRegion</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a97cba43cb492f57590b5f211e590e38f</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduceClipRegion</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ae30c76ed849ef8a987cb98191e0668e1</anchor>
      <arglist>(const RectangleList &amp;clipRegion)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduceClipRegion</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a01d830805b335f8cdf52fadd00bd0d30</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform=AffineTransform::identity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduceClipRegion</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a735b5096ea063020134fdf1c570dec9a</anchor>
      <arglist>(const Image &amp;image, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>excludeClipRegion</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a9ff97378305763a38f4a99bc638a8824</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rectangleToExclude)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClipEmpty</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a6ae806601e19bc1631085d6e2a7f5d74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveState</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ab4df35938684890f7adac0439e900ca8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreState</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ac724e99c9a7bcd8b2987a484e269a368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginTransparencyLayer</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ab8d8ee1c6bb810074eff904fd3c21fc4</anchor>
      <arglist>(float layerOpacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endTransparencyLayer</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ae6b36ef8295dd83d33287a328e88ef9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a9f6c05af33aefe49851d0d1eb9294bea</anchor>
      <arglist>(int newOriginX, int newOriginY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransform</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a7d9d400fdb96d3c6bbb640fb94b54d06</anchor>
      <arglist>(const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ab8b7cd49bf1ff738c5ff848727e3bc75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVectorDevice</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ae584e8878455891d9010addb384425cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Graphics</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ac2f451095caee3a7262f135dfd9ed93d</anchor>
      <arglist>(LowLevelGraphicsContext *internalContext) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LowLevelGraphicsContext *</type>
      <name>getInternalContext</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a56d2788fe6978ee9da3b58864767e74a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Graphics::ScopedSaveState</name>
    <filename>classGraphics_1_1ScopedSaveState.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedSaveState</name>
      <anchorfile>classGraphics_1_1ScopedSaveState.html</anchorfile>
      <anchor>a1ec28167cc6cca7785c405ea8cab1019</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedSaveState</name>
      <anchorfile>classGraphics_1_1ScopedSaveState.html</anchorfile>
      <anchor>a3330e087bb4afe184909a96725563665</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GroupComponent</name>
    <filename>classGroupComponent.html</filename>
    <base>Component</base>
    <class kind="struct">GroupComponent::Ids</class>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a78ec5941214fc9f9cc82447ae04db082</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>outlineColourId</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a78ec5941214fc9f9cc82447ae04db082a25fccffcfe6b20840ac84a5dab932f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textColourId</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a78ec5941214fc9f9cc82447ae04db082a979b6f395a45c23d357f5687bdd74a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GroupComponent</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a381fb059a695f0138b2b62dc2a45dcb9</anchor>
      <arglist>(const String &amp;componentName=String::empty, const String &amp;labelText=String::empty)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GroupComponent</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a558f46ecb72027cdac88676f98a1d649</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>ad71b970bb527c75f7dfa568902ef6977</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getText</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>aa18e2435f8faeea30c6c3a62c6ec4364</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextLabelPosition</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a90e058cf3a35a3d9943f399e2ef459f3</anchor>
      <arglist>(const Justification &amp;justification)</arglist>
    </member>
    <member kind="function">
      <type>const Justification</type>
      <name>getTextLabelPosition</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a374ffd1aa39bfda59d36f1bce263a3af</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a866bb8513ebf57625eaa7f0df86b45ea</anchor>
      <arglist>(const ValueTree &amp;, ComponentBuilder &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a683b8eada2fd402d353b2caece5568fe</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a6cb96fc58844707b8dae8a6f1feaedfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a4d2a952995b5853ce5b93eeae031e29f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GroupComponent::Ids</name>
    <filename>structGroupComponent_1_1Ids.html</filename>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>tagType</name>
      <anchorfile>structGroupComponent_1_1Ids.html</anchorfile>
      <anchor>ad44f355b79ff308e86bfe0607bc095f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>text</name>
      <anchorfile>structGroupComponent_1_1Ids.html</anchorfile>
      <anchor>a0a03b8ad91cfdb7e3882eaa7428ca632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>justification</name>
      <anchorfile>structGroupComponent_1_1Ids.html</anchorfile>
      <anchor>a856dfc6b5c1c7148ccf40f7e515917be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GZIPCompressorOutputStream</name>
    <filename>classGZIPCompressorOutputStream.html</filename>
    <base>OutputStream</base>
    <member kind="enumeration">
      <name>WindowBitsValues</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>ae5aaccd93a4e2389b1a6aa6862b671da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>windowBitsRaw</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>ae5aaccd93a4e2389b1a6aa6862b671daa5a830100618fccabd9dd5dcdd0b71276</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>windowBitsGZIP</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>ae5aaccd93a4e2389b1a6aa6862b671daaaa8b14e2775fa3de96c140b001c01cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GZIPCompressorOutputStream</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>a4d9597aa751a44f510feedf2316891b1</anchor>
      <arglist>(OutputStream *destStream, int compressionLevel=0, bool deleteDestStreamWhenDestroyed=false, int windowBits=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GZIPCompressorOutputStream</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>a7e77d9225c8d3b44d7a55fd328f710d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>ac5a33ac0aa774dfe5cfd66d50a0c5fb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>ae0254cd137c6aad4f6b76f97b8b1e3d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>a2cf4ecde3f94696165cc1d677f26e05d</anchor>
      <arglist>(int64 newPosition)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>a719a785d83c04a320acf301ee2c41b77</anchor>
      <arglist>(const void *destBuffer, int howMany)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GZIPDecompressorInputStream</name>
    <filename>classGZIPDecompressorInputStream.html</filename>
    <base>InputStream</base>
    <member kind="function">
      <type></type>
      <name>GZIPDecompressorInputStream</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a1f3e3e868fcac072d0d5cc49bde278f0</anchor>
      <arglist>(InputStream *sourceStream, bool deleteSourceWhenDestroyed, bool noWrap=false, int64 uncompressedStreamLength=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GZIPDecompressorInputStream</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a3beb8232d0d81935fa78d75e30ba8e01</anchor>
      <arglist>(InputStream &amp;sourceStream)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GZIPDecompressorInputStream</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a4bcf594ac091cb9def1938a8aa85e448</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a9574085dbd2619a36d895038068bfbcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a5303758dc9798bc160092aa2a00e41bd</anchor>
      <arglist>(int64 pos)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a166543f803d19e2ab68a6966370c2da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExhausted</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a7acb0a126be288acfc39410b0b25fe12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a7bb2f5942f0da1304399cdbdfb4c5a33</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HashMap</name>
    <filename>classHashMap.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">HashMap::Iterator</class>
    <member kind="typedef">
      <type>TypeOfCriticalSectionToUse::ScopedLockType</type>
      <name>ScopedLockType</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a2053dc3e335c31fdc9f60e1eab786967</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashMap</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a4e1e6302d9a96ed3baba8e00c9dad143</anchor>
      <arglist>(const int numberOfSlots=defaultHashTableSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HashMap</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a358efcaba0080089ddf21b4c652b3a5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a5c05298ac37d90e8ae6b944cf9ef90a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a4fb1bd69682e00d4b83b0c05dbf92bc8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>operator[]</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a7dbed3ff20a43f4f6997f40b15a8ae5c</anchor>
      <arglist>(KeyTypeParameter keyToLookFor) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a5c46356ec0825277b52729dd6c650c85</anchor>
      <arglist>(KeyTypeParameter keyToLookFor) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsValue</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>ad5b7794228bc73ed367a656c7354e0ef</anchor>
      <arglist>(ValueTypeParameter valueToLookFor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a0eef18aeb766505db7721b895ecd5654</anchor>
      <arglist>(KeyTypeParameter newKey, ValueTypeParameter newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a9a2ced849c2687f6bf93c8e311d23b32</anchor>
      <arglist>(KeyTypeParameter keyToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeValue</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a69fffa7da6512b84a990d471600c5c3e</anchor>
      <arglist>(ValueTypeParameter valueToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remapTable</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a2520099a7f8ebd6b7921b9d6a3eedb1c</anchor>
      <arglist>(int newNumberOfSlots)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSlots</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>ad88492074f61172e919d17a8338ec670</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a6d47bc560004a8f525484f94dd8796ca</anchor>
      <arglist>(HashMap &amp;otherHashMap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TypeOfCriticalSectionToUse &amp;</type>
      <name>getLock</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a7fcaef6a8e7be6d592594e160e90243a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HashMap::Iterator</name>
    <filename>classHashMap_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classHashMap_1_1Iterator.html</anchorfile>
      <anchor>ac41c61c6d2266cbd5c4458129a376aa4</anchor>
      <arglist>(const HashMap &amp;hashMapToIterate)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classHashMap_1_1Iterator.html</anchorfile>
      <anchor>a926563d924a70859451fb30256d2d75c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KeyType</type>
      <name>getKey</name>
      <anchorfile>classHashMap_1_1Iterator.html</anchorfile>
      <anchor>a989d7b73fcba617cd94a55f70f2abb01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getValue</name>
      <anchorfile>classHashMap_1_1Iterator.html</anchorfile>
      <anchor>aff65eb18637ae8a6b530602a05c16bc8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HeapBlock</name>
    <filename>classHeapBlock.html</filename>
    <templarg>ElementType</templarg>
    <templarg>throwOnFailure</templarg>
    <member kind="function">
      <type></type>
      <name>HeapBlock</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>ab7643beefa078bb4692dbfff40f6f3bb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HeapBlock</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a31427ded49cc996e6f894f124c4aa5ba</anchor>
      <arglist>(const size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HeapBlock</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>adcd966a89c09b50e2fa4efc1a7b20ca6</anchor>
      <arglist>(const size_t numElements, const bool initialiseToZero)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HeapBlock</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>abf392fafab8530d45132eaeb81ff372d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ElementType *</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>af6d00012477feaaab90bcf100d05d08a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType *</type>
      <name>getData</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a30a00ad8520b7b4b5f58c063a7247a7f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a912268a681322c1234753bd580bf1f89</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const void *</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>af51c07aad68df37e185d1f452a5ace97</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>ad7d495cdad2d794c5fc544e54d43caa2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a4fde2d780504edd9e7a33efe0c24ab9c</anchor>
      <arglist>(IndexType index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType *</type>
      <name>operator+</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>ae5769755baa56702235ecf2edc68f808</anchor>
      <arglist>(IndexType index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a4e298218cf588337359db82edd07e497</anchor>
      <arglist>(const ElementType *const otherPointer) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a02ba60581374bc14ffc29d208937d0ae</anchor>
      <arglist>(const ElementType *const otherPointer) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>malloc</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a1a196c4ebdb6a5ff9517e262b91894cf</anchor>
      <arglist>(const size_t newNumElements, const size_t elementSize=sizeof(ElementType))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calloc</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a59dc4dfb0d05906164f4362b2086cd50</anchor>
      <arglist>(const size_t newNumElements, const size_t elementSize=sizeof(ElementType))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a4e999ff1f7ed59dd4546596447059cc7</anchor>
      <arglist>(const size_t newNumElements, bool initialiseToZero)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realloc</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a75f22feaa5bb7278e6a6234ec5d19778</anchor>
      <arglist>(const size_t newNumElements, const size_t elementSize=sizeof(ElementType))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a5533b239d1c8d763064c196397bb839d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a7ebc384a5d3f8ccfb56229688a0a273c</anchor>
      <arglist>(HeapBlock&lt; ElementType, otherBlockThrows &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a658838e2b07f498b169c87c73040b509</anchor>
      <arglist>(size_t numElements) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HyperlinkButton</name>
    <filename>classHyperlinkButton.html</filename>
    <base>Button</base>
    <class kind="struct">HyperlinkButton::Ids</class>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>a7e5d7db9e3d3665d349ec2582eb48d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textColourId</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>a7e5d7db9e3d3665d349ec2582eb48d5badc8e65be7955e88ddfe56e9555246d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HyperlinkButton</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>aab8c9244ad8e28df8d012bbb3fb5b89f</anchor>
      <arglist>(const String &amp;linkText, const URL &amp;linkURL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HyperlinkButton</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>a6248ace276d2aade28ae1c61f33e76fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HyperlinkButton</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>a277791602a973667098c9bcdbfed251b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>a255042483636a407ec06dfb34adcd6dd</anchor>
      <arglist>(const Font &amp;newFont, bool resizeToMatchComponentHeight, const Justification &amp;justificationType=Justification::horizontallyCentred)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setURL</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>af822610fabccf3a135936de178b6b1ac</anchor>
      <arglist>(const URL &amp;newURL) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const URL &amp;</type>
      <name>getURL</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>ae0af7b706d9881125f005817a115307f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeWidthToFitText</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>adab11697af1e6c4c886537e03cedd8ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>a4d2e2b974af9af23e75c8c0855acbeee</anchor>
      <arglist>(const ValueTree &amp;, ComponentBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clicked</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>a0f8a1a05d9efecf0c9e8911d65f02778</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>ae50702ce7f1d7665f890c9d8eaf86874</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>a7eab0c8a05e56b8f2c078dc2b58a16d1</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HyperlinkButton::Ids</name>
    <filename>structHyperlinkButton_1_1Ids.html</filename>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>tagType</name>
      <anchorfile>structHyperlinkButton_1_1Ids.html</anchorfile>
      <anchor>ac3218e1bd60cfdeb5a9c1e89a58f7ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>text</name>
      <anchorfile>structHyperlinkButton_1_1Ids.html</anchorfile>
      <anchor>a6a49dd9f884c750b10deab41d0a3cb8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>url</name>
      <anchorfile>structHyperlinkButton_1_1Ids.html</anchorfile>
      <anchor>aa9566b781654444fb7e51d1c0b0cc7f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Identifier</name>
    <filename>classIdentifier.html</filename>
    <member kind="function">
      <type></type>
      <name>Identifier</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a1c1912edf41af15a4e1d51798d6bb895</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Identifier</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a694f45d87dd86efb3d5f412e777f32c7</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Identifier</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>ab607b123ad36c57c0e81cf0818fe1d9c</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Identifier</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>abc24d2cc68eb9728bd88c5889cc2949a</anchor>
      <arglist>(const Identifier &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Identifier &amp;</type>
      <name>operator=</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>afc7c01762a98ef336ada6587b9e16697</anchor>
      <arglist>(const Identifier &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Identifier</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>accad9bf28291261cd181e32b0f64767e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a9ddc8e162da333db929220659ebbfdd8</anchor>
      <arglist>(const Identifier &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>ae05b1735aa748cd28ce1d2d3bed7f13d</anchor>
      <arglist>(const Identifier &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>afc06903c41a8a07eaede368a6732c68f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const String::CharPointerType</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a5df2432719141c7d6d1261093b070794</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String::CharPointerType</type>
      <name>getCharPointer</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>aed76898985fd3dd4543706eb047309f6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidIdentifier</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a84834b24c111e28ecd4a8b68ec57ad1e</anchor>
      <arglist>(const String &amp;possibleIdentifier) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IIRFilter</name>
    <filename>classIIRFilter.html</filename>
    <member kind="function">
      <type></type>
      <name>IIRFilter</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a63408f45298f7a9e5451f7163cbba401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IIRFilter</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a6f824a2d84fe4c52f38f6f5fe8ccb946</anchor>
      <arglist>(const IIRFilter &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IIRFilter</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a7fbc93f9fc0ff65e785f8f2bfe13cfdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>ad393cad59b722523a6a10a4db579fbf7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processSamples</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a49057fbc71f621e06d1074af44ce90e8</anchor>
      <arglist>(float *samples, int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>processSingleSampleRaw</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>afcd358671fc2fdd9bcd531dc7f1156d6</anchor>
      <arglist>(float sample) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeLowPass</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a8cf949ee928b3c7690f08898b3537cb3</anchor>
      <arglist>(double sampleRate, double frequency) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeHighPass</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>af258472c8eb2c4f975f175049cddf9e5</anchor>
      <arglist>(double sampleRate, double frequency) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeLowShelf</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a9b2b81a171924730545dff43e65cfcf3</anchor>
      <arglist>(double sampleRate, double cutOffFrequency, double Q, float gainFactor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeHighShelf</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a52947f798c6f401e1ea4bf7fbc0ce8ef</anchor>
      <arglist>(double sampleRate, double cutOffFrequency, double Q, float gainFactor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeBandPass</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a3e7be2dfa4f83fefb049825ef7c067ce</anchor>
      <arglist>(double sampleRate, double centreFrequency, double Q, float gainFactor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeInactive</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a5c72ccd292a66e9e53b845362c700094</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyCoefficientsFrom</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a162479dcb75cf7fff65a0ad1fedf7e99</anchor>
      <arglist>(const IIRFilter &amp;other) noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setCoefficients</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a769ce957455a184cc750c96d730f2617</anchor>
      <arglist>(double c1, double c2, double c3, double c4, double c5, double c6) noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IIRFilter &amp;</type>
      <name>operator=</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>afba9f11078d1258454da525fc5557e8d</anchor>
      <arglist>(const IIRFilter &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JUCE_LEAK_DETECTOR</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a4a5724d22fb0a7b58b4d58df02b50798</anchor>
      <arglist>(IIRFilter)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CriticalSection</type>
      <name>processLock</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>ab00b0f82d8811523cd31398a3cffae46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>active</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>ace0c7930049d2cca00bebc4b7f9c3a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>coefficients</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a8339abd8667934e70de91813a100f725</anchor>
      <arglist>[6]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>x1</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a1200c91a1b971931425a74f1ffa57c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>x2</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>adef45ab67e66dd710429c50dc5cdcb41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>y1</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>aa12d79fee01468222a9fda148deda917</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>y2</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a9088d65b14318be689d7e823a4f72463</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IIRFilterAudioSource</name>
    <filename>classIIRFilterAudioSource.html</filename>
    <base>AudioSource</base>
    <member kind="function">
      <type></type>
      <name>IIRFilterAudioSource</name>
      <anchorfile>classIIRFilterAudioSource.html</anchorfile>
      <anchor>aad6e3a6a2bb8a6c600b848a102ef45d0</anchor>
      <arglist>(AudioSource *inputSource, bool deleteInputWhenDeleted)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IIRFilterAudioSource</name>
      <anchorfile>classIIRFilterAudioSource.html</anchorfile>
      <anchor>ae32c8faf7d8c4b95fc389bad73902fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilterParameters</name>
      <anchorfile>classIIRFilterAudioSource.html</anchorfile>
      <anchor>ae124f080830b80361ad4012751805ac4</anchor>
      <arglist>(const IIRFilter &amp;newSettings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classIIRFilterAudioSource.html</anchorfile>
      <anchor>a191aaf9746867f15ca1de8aabd4a69d1</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classIIRFilterAudioSource.html</anchorfile>
      <anchor>a5e7ffb44f21f7098ca15ee92f877a048</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classIIRFilterAudioSource.html</anchorfile>
      <anchor>ab8e2a41159ebad98f2adec4bf066eb9b</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Image</name>
    <filename>classImage.html</filename>
    <class kind="class">Image::BitmapData</class>
    <member kind="enumeration">
      <name>PixelFormat</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ab47b5746d2df286ae6f8da6af5463c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnknownFormat</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ab47b5746d2df286ae6f8da6af5463c01a54eec5e1c5371ae7ad7242c6a2be067d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RGB</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ab47b5746d2df286ae6f8da6af5463c01a03a8b8bb3246ef72c98b01e711d61425</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARGB</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ab47b5746d2df286ae6f8da6af5463c01a9adefc17fe4663de8e3fc9621c891b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SingleChannel</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ab47b5746d2df286ae6f8da6af5463c01ab8bd2ed5df42fd15bd349195d81b64b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a58edd1c45b4faeb5f789b0d036d02313</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>aa51549669248091773ee494737abdc24</anchor>
      <arglist>(PixelFormat format, int imageWidth, int imageHeight, bool clearImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ac9e7f47996c7b81190e6cf151bc31fa0</anchor>
      <arglist>(PixelFormat format, int imageWidth, int imageHeight, bool clearImage, const ImageType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a5a3bc57bd7ba53f9ae55b1963b9ba0a1</anchor>
      <arglist>(const Image &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Image &amp;</type>
      <name>operator=</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a1a50d3d1da8a95f7c74af4ef8d4eda6f</anchor>
      <arglist>(const Image &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Image</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a0294f63700543e11c0f0da85601c7ae5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>aa0b558cf4f55b47b15f11094f4fa84cc</anchor>
      <arglist>(const Image &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a9f6d8eea11bc8e8129e313e63f312802</anchor>
      <arglist>(const Image &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a761214d2fa016e3e793b5a2d6b8b85ec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a4084a24d1034249f29a7781ef44159d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWidth</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a3c540187e754adb5beac244b64df70af</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeight</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a717b9cde54f44af0ea68e87729c1365f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getBounds</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a6b9f151177766fae7679c7994161ceba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PixelFormat</type>
      <name>getFormat</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a73ceedb27674d0ad6611356147344677</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isARGB</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a14441f64b47e4d881c399e07a2718de1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRGB</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a53b8b72f6cf08ce6d6179666250aedc7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSingleChannel</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a1176ae108a31a0f4b7b4be6b86bc6181</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAlphaChannel</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>abb862a4402074ef0dc0382e2c6267a32</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ae04bbf6e3d8e0409e5cfa917fb2c89f9</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;area, const Colour &amp;colourToClearTo=Colour(0x00000000))</arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>rescaled</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ae2355def370dff47cb627fa6419a6ac6</anchor>
      <arglist>(int newWidth, int newHeight, Graphics::ResamplingQuality quality=Graphics::mediumResamplingQuality) const </arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>createCopy</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ace65de369620555550026debef672bff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>convertedToFormat</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a1822e722596488f04d51ae8166a02921</anchor>
      <arglist>(PixelFormat newFormat) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>duplicateIfShared</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ad995cd253234063d22b604984e83489d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>getClippedImage</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a23f8ff9b07d67f2c60776d4031c27417</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;area) const </arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getPixelAt</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a667728516fe03d6c9e29ec696e4d5bdd</anchor>
      <arglist>(int x, int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixelAt</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ae30ed74286ddce38cd01e2ad459119ad</anchor>
      <arglist>(int x, int y, const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyAlphaAt</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a795ef04008dc17e60231eb6bf0618946</anchor>
      <arglist>(int x, int y, float multiplier)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyAllAlphas</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a9d1febd93213f92b50af58ce731cdabf</anchor>
      <arglist>(float amountToMultiplyBy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desaturate</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a038f9f882f1829362c23c22a9577e22d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveImageSection</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a5e90b1777a505f16e3f9d2a6da674a36</anchor>
      <arglist>(int destX, int destY, int sourceX, int sourceY, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createSolidAreaMask</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a7879a00425ea9c79fa30a67740ca1ca1</anchor>
      <arglist>(RectangleList &amp;result, float alphaThreshold=0.5f) const </arglist>
    </member>
    <member kind="function">
      <type>NamedValueSet *</type>
      <name>getProperties</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a7d92d7dc5d490da7f2dee52dfd787ba6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LowLevelGraphicsContext *</type>
      <name>createLowLevelContext</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>aa7465ae26c9af5f0bdf8d759c53886e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReferenceCount</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>abd88aa52bedce6d7def13d4b39e7f954</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ImagePixelData *</type>
      <name>getPixelData</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a8b47b5735561b3949f462ecc0a9fe7ca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>acfeaef9ef636d139cecd8f6d9c6f0ea7</anchor>
      <arglist>(ImagePixelData *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Image</type>
      <name>null</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>af20f6e6962f885e2142520f18ca4ee17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Image::BitmapData</name>
    <filename>classImage_1_1BitmapData.html</filename>
    <class kind="class">Image::BitmapData::BitmapDataReleaser</class>
    <member kind="enumeration">
      <name>ReadWriteMode</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>aef68f9fb2440dd6a56a3c0b8c8b6fc13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>readOnly</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>aef68f9fb2440dd6a56a3c0b8c8b6fc13a97c870458227b8f45385b81515b25534</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>writeOnly</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>aef68f9fb2440dd6a56a3c0b8c8b6fc13a5cf46bf61ad8fd0449364d4e0a0eeac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>readWrite</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>aef68f9fb2440dd6a56a3c0b8c8b6fc13ad55b50039ed1f7483753714d5a92e7df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BitmapData</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a3a1e71986fb37cbd7ce981352032122b</anchor>
      <arglist>(Image &amp;image, int x, int y, int w, int h, ReadWriteMode mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BitmapData</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a3710b2251c4c56fa36a1f999ea6b2fdd</anchor>
      <arglist>(const Image &amp;image, int x, int y, int w, int h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BitmapData</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a781088bb00a4a9b3925c5f67ebf05cff</anchor>
      <arglist>(const Image &amp;image, ReadWriteMode mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BitmapData</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a0398d1e66c0d7ebdac9a373d516dad82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint8 *</type>
      <name>getLinePointer</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a12e054792c046149198ab3c821a1e09d</anchor>
      <arglist>(int y) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8 *</type>
      <name>getPixelPointer</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a1d66ad5f9cedfd56e18e480ee23d5b90</anchor>
      <arglist>(int x, int y) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getPixelColour</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>ae2a2c5b5c9aeb01e0098da19c5057d48</anchor>
      <arglist>(int x, int y) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixelColour</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a7dfdcbe67a205792670691b8ed68ae1f</anchor>
      <arglist>(int x, int y, const Colour &amp;colour) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>uint8 *</type>
      <name>data</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a20783df25b604990685fe8cbb0f1cf91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PixelFormat</type>
      <name>pixelFormat</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>aae26ad39defa124117e3a7d8da499e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lineStride</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a0c9d05e29235f0b395fa57b26b13d67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>pixelStride</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a7fc1d9da2a609dd67e8e9ad70e5f38f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>width</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a9eea8066d52a09fb2fce0ae4dd49df1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>height</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>ac81ba5621e83a0bc7d090bf2a17dcc8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ScopedPointer&lt; BitmapDataReleaser &gt;</type>
      <name>dataReleaser</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>af6357aea98c90de8dcbbaadbd4969d2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Image::BitmapData::BitmapDataReleaser</name>
    <filename>classImage_1_1BitmapData_1_1BitmapDataReleaser.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BitmapDataReleaser</name>
      <anchorfile>classImage_1_1BitmapData_1_1BitmapDataReleaser.html</anchorfile>
      <anchor>a1991252530e1120d7e380c5147eaf347</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BitmapDataReleaser</name>
      <anchorfile>classImage_1_1BitmapData_1_1BitmapDataReleaser.html</anchorfile>
      <anchor>a9e5c771b4c6e5fd29ca21709ace1bafa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageButton</name>
    <filename>classImageButton.html</filename>
    <base>Button</base>
    <class kind="struct">ImageButton::Ids</class>
    <member kind="function">
      <type></type>
      <name>ImageButton</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>a4c8bb900ecd51c298dbfb2b591f0c02e</anchor>
      <arglist>(const String &amp;name=String::empty)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageButton</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>afbbc63233e45f52a269cca07cbd18d94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImages</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>a2c9e66d1df23af0953255add35164365</anchor>
      <arglist>(bool resizeButtonNowToFitThisImage, bool rescaleImagesWhenButtonSizeChanges, bool preserveImageProportions, const Image &amp;normalImage, float imageOpacityWhenNormal, const Colour &amp;overlayColourWhenNormal, const Image &amp;overImage, float imageOpacityWhenOver, const Colour &amp;overlayColourWhenOver, const Image &amp;downImage, float imageOpacityWhenDown, const Colour &amp;overlayColourWhenDown, float hitTestAlphaThreshold=0.0f)</arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>getNormalImage</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>af87734afe617eb9f4fcc7d397577e882</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>getOverImage</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>af6a5ccb3cfe987cb3cc0ec90d0a3747f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>getDownImage</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>adb12b3d33c65d8022e4fe12c235ebb36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>a212a4a69370e50e726c0fac5e174cfc3</anchor>
      <arglist>(const ValueTree &amp;, ComponentBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>aee8b3ea35e0bf045ef3779015b80416c</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>aa52c5f0822b68a2e2d64053a169daa0a</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ImageButton::Ids</name>
    <filename>structImageButton_1_1Ids.html</filename>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>tagType</name>
      <anchorfile>structImageButton_1_1Ids.html</anchorfile>
      <anchor>ae42466b65ec63f718cff197686cfc2d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>upImage</name>
      <anchorfile>structImageButton_1_1Ids.html</anchorfile>
      <anchor>a1a81e96106d1d993f7353c72f49685d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>overImage</name>
      <anchorfile>structImageButton_1_1Ids.html</anchorfile>
      <anchor>a58ea269f353d473f71cbfa5d1bc4486c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>downImage</name>
      <anchorfile>structImageButton_1_1Ids.html</anchorfile>
      <anchor>a26a121e552603c7940a06db1c6a67728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>upOverlay</name>
      <anchorfile>structImageButton_1_1Ids.html</anchorfile>
      <anchor>a13b11212f8793da53022a33e0df4e044</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>overOverlay</name>
      <anchorfile>structImageButton_1_1Ids.html</anchorfile>
      <anchor>a9413f857382ed3b3f6f7a1fa5c69ef88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>downOverlay</name>
      <anchorfile>structImageButton_1_1Ids.html</anchorfile>
      <anchor>abd85ebf218c02a2bdd55ff45d33fae00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>upOpacity</name>
      <anchorfile>structImageButton_1_1Ids.html</anchorfile>
      <anchor>ac63022eb635d1aa9df17d81ae3a6a8b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>overOpacity</name>
      <anchorfile>structImageButton_1_1Ids.html</anchorfile>
      <anchor>a1d6206cc708a3a7a3cb41fe346042823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>downOpacity</name>
      <anchorfile>structImageButton_1_1Ids.html</anchorfile>
      <anchor>afc6b5ef653312630168b6a24c86b9661</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageCache</name>
    <filename>classImageCache.html</filename>
    <member kind="function" static="yes">
      <type>static Image</type>
      <name>getFromFile</name>
      <anchorfile>classImageCache.html</anchorfile>
      <anchor>acc266a65cf61dd0a2f68e68840b4a5c4</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image</type>
      <name>getFromMemory</name>
      <anchorfile>classImageCache.html</anchorfile>
      <anchor>ac3e80d35b973c3cb47a031185ff56c06</anchor>
      <arglist>(const void *imageData, int dataSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image</type>
      <name>getFromHashCode</name>
      <anchorfile>classImageCache.html</anchorfile>
      <anchor>a4ebcfbc2287268f4312c8137a913bca4</anchor>
      <arglist>(int64 hashCode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addImageToCache</name>
      <anchorfile>classImageCache.html</anchorfile>
      <anchor>aba7b8b9196a99296dc3900fb6d01f04a</anchor>
      <arglist>(const Image &amp;image, int64 hashCode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setCacheTimeout</name>
      <anchorfile>classImageCache.html</anchorfile>
      <anchor>a7e8f2a2260acf7ca4f4a62c36ce99332</anchor>
      <arglist>(int millisecs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageComponent</name>
    <filename>classImageComponent.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <class kind="struct">ImageComponent::Ids</class>
    <member kind="function">
      <type></type>
      <name>ImageComponent</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a335e328ee5a7ce054405b1a6f123cabb</anchor>
      <arglist>(const String &amp;componentName=String::empty)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageComponent</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a80d6f915909d151df0c785b803f1aafa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImage</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a262dd9eba5bb2626134fa9771eead654</anchor>
      <arglist>(const Image &amp;newImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImage</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a0eefa66c19426237445042f5a63b984a</anchor>
      <arglist>(const Image &amp;newImage, const RectanglePlacement &amp;placementToUse)</arglist>
    </member>
    <member kind="function">
      <type>const Image &amp;</type>
      <name>getImage</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a74e7161c2da4f7262717fb0aa5e5b3fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImagePlacement</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a8e7e4f97db89aa97a6db186b445116d5</anchor>
      <arglist>(const RectanglePlacement &amp;newPlacement)</arglist>
    </member>
    <member kind="function">
      <type>const RectanglePlacement</type>
      <name>getImagePlacement</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a34019a76da30f0664b4e15509c57a99b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a0dc544cb46ca57f0923a3ac70555e708</anchor>
      <arglist>(const ValueTree &amp;, ComponentBuilder &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a497a808dcc68e715a75b179f4ae7aeec</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RectanglePlacement</type>
      <name>getPlacement</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a583b3f6e9b6b507c50fb8a6d5e133cd9</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ImageComponent::Ids</name>
    <filename>structImageComponent_1_1Ids.html</filename>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>tagType</name>
      <anchorfile>structImageComponent_1_1Ids.html</anchorfile>
      <anchor>a89001d5709e5512dae4099ddc3afef5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>image</name>
      <anchorfile>structImageComponent_1_1Ids.html</anchorfile>
      <anchor>ac5a87c2344e2dc496f35ed3bddd2b656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>placement</name>
      <anchorfile>structImageComponent_1_1Ids.html</anchorfile>
      <anchor>adf4dfb69e6e3cbc9cd51f52bafaf71e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageConvolutionKernel</name>
    <filename>classImageConvolutionKernel.html</filename>
    <member kind="function">
      <type></type>
      <name>ImageConvolutionKernel</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>a291ce213057a0e0cad9559b349426b44</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageConvolutionKernel</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>ae80e9785cc4cfa1458d6c4da4b40af58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>ad9a4fd22ec090082e020872213193253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getKernelValue</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>a98bbf0e40749584bc07038d17e9ee031</anchor>
      <arglist>(int x, int y) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKernelValue</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>ad615fc9a3faa8f6d0bc8f83b20288711</anchor>
      <arglist>(int x, int y, float value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverallSum</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>ac71dbeddeb4565e410f5fed1a8216902</anchor>
      <arglist>(float desiredTotalSum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rescaleAllValues</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>adff3c9b24817bd16ffa56df9af129641</anchor>
      <arglist>(float multiplier)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createGaussianBlur</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>a622a69a6e139de9ccc3bf8f15b841dfe</anchor>
      <arglist>(float blurRadius)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getKernelSize</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>a429c15723be0603d5d0cb0f3f242b148</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyToImage</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>af797442e1d75b9780ef4c992e39dceac</anchor>
      <arglist>(Image &amp;destImage, const Image &amp;sourceImage, const Rectangle&lt; int &gt; &amp;destinationArea) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageEffectFilter</name>
    <filename>classImageEffectFilter.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyEffect</name>
      <anchorfile>classImageEffectFilter.html</anchorfile>
      <anchor>afcdcb809146e0774b8d7ca24591771ad</anchor>
      <arglist>(Image &amp;sourceImage, Graphics &amp;destContext, float scaleFactor, float alpha)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageEffectFilter</name>
      <anchorfile>classImageEffectFilter.html</anchorfile>
      <anchor>ac8eceef9cd72ea8f81f992e2db0ea791</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageFileFormat</name>
    <filename>classImageFileFormat.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageFileFormat</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>adb530fe6617767ac78c26baf179e78d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getFormatName</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>a141e61162c688d5497e1b6391970fa7a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canUnderstand</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>a5ff3f240860ae444a7eaafb708b563e2</anchor>
      <arglist>(InputStream &amp;input)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Image</type>
      <name>decodeImage</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>a7ece13108d27014ff96e67ce80dd4092</anchor>
      <arglist>(InputStream &amp;input)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>writeImageToStream</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>af70bdf60c3cea3a6806d225706670a63</anchor>
      <arglist>(const Image &amp;sourceImage, OutputStream &amp;destStream)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageFileFormat *</type>
      <name>findImageFormatForStream</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>a7fcb93b4c52f931ec437674c731c9c04</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image</type>
      <name>loadFrom</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>a1ce6ae82e06b40e9149d1ab73951ce1c</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image</type>
      <name>loadFrom</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>a9e32b679760095924f3240372f2648b6</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image</type>
      <name>loadFrom</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>a5a0d38a154faccbc0bbe245dadede62c</anchor>
      <arglist>(const void *rawData, size_t numBytesOfData)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageFileFormat</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>ac2e60288a31b4d2a963b0350f72c4483</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImagePixelData</name>
    <filename>classImagePixelData.html</filename>
    <base>ReferenceCountedObject</base>
    <member kind="function">
      <type></type>
      <name>ImagePixelData</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>a2146dc3531e1beea8138e36b883edb0d</anchor>
      <arglist>(Image::PixelFormat, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImagePixelData</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>ac0118555ec7bade25b1873aeaf1f8e97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LowLevelGraphicsContext *</type>
      <name>createLowLevelContext</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>a7c445af05c23a94c1ea844ff1350bebc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ImagePixelData *</type>
      <name>clone</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>af0bee720a0ffc30acfbd8011b1f9a7ea</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ImageType *</type>
      <name>createType</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>a4c9b23625405aad26d3b6a4682d39c50</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialiseBitmapData</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>a775f806a9a4b8cef306304ff81a1a47b</anchor>
      <arglist>(Image::BitmapData &amp;, int x, int y, Image::BitmapData::ReadWriteMode)=0</arglist>
    </member>
    <member kind="variable">
      <type>const Image::PixelFormat</type>
      <name>pixelFormat</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>a7af8920b587eebc3d94a0883375ca08f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>width</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>ac31ea8f068a17b9ee554261069b20a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>height</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>af792076cc5a5339766f1efb20592943c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NamedValueSet</type>
      <name>userData</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>a881fd3f8939e4994ca95c052b27221ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImagePreviewComponent</name>
    <filename>classImagePreviewComponent.html</filename>
    <base>FilePreviewComponent</base>
    <base protection="private">Timer</base>
    <member kind="function">
      <type></type>
      <name>ImagePreviewComponent</name>
      <anchorfile>classImagePreviewComponent.html</anchorfile>
      <anchor>aea25f0e8e764235c53ef1842294ba66e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImagePreviewComponent</name>
      <anchorfile>classImagePreviewComponent.html</anchorfile>
      <anchor>a3ff657921827907d142d96b6539ca3d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectedFileChanged</name>
      <anchorfile>classImagePreviewComponent.html</anchorfile>
      <anchor>a3f953788b417de0d3a45ffae57961a45</anchor>
      <arglist>(const File &amp;newSelectedFile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classImagePreviewComponent.html</anchorfile>
      <anchor>a83b48da064856202d5a2cf7a539d7407</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timerCallback</name>
      <anchorfile>classImagePreviewComponent.html</anchorfile>
      <anchor>a932fae317a4255ec4d1d099753bf814b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageType</name>
    <filename>classImageType.html</filename>
    <member kind="function">
      <type></type>
      <name>ImageType</name>
      <anchorfile>classImageType.html</anchorfile>
      <anchor>acd073c0347c16656a21210f29563f3c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageType</name>
      <anchorfile>classImageType.html</anchorfile>
      <anchor>a35b3b765a517eac3b617d014764cda35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ImagePixelData *</type>
      <name>create</name>
      <anchorfile>classImageType.html</anchorfile>
      <anchor>a277b62d0a8e48920678cd40983d65854</anchor>
      <arglist>(Image::PixelFormat format, int width, int height, bool shouldClearImage) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getTypeID</name>
      <anchorfile>classImageType.html</anchorfile>
      <anchor>a7329724dfcd2de39b2ad45142dab632d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Image</type>
      <name>convert</name>
      <anchorfile>classImageType.html</anchorfile>
      <anchor>a858baa050bbb2711ad15e53eecbcddc3</anchor>
      <arglist>(const Image &amp;source) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InputSource</name>
    <filename>classInputSource.html</filename>
    <member kind="function">
      <type></type>
      <name>InputSource</name>
      <anchorfile>classInputSource.html</anchorfile>
      <anchor>af7e98cfaf3512fbae4f691c715b24383</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InputSource</name>
      <anchorfile>classInputSource.html</anchorfile>
      <anchor>a09958a0275a39a619a5b64b3e86e76ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InputStream *</type>
      <name>createInputStream</name>
      <anchorfile>classInputSource.html</anchorfile>
      <anchor>a600038277a388345be98e0a71000cc47</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InputStream *</type>
      <name>createInputStreamFor</name>
      <anchorfile>classInputSource.html</anchorfile>
      <anchor>a45470c84b437855c2cdefce6aae2fcfa</anchor>
      <arglist>(const String &amp;relatedItemPath)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>hashCode</name>
      <anchorfile>classInputSource.html</anchorfile>
      <anchor>a1fe754d44724da8eaef055c496ca4140</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InputStream</name>
    <filename>classInputStream.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InputStream</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a8c49246dd62e559578732f518f159432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>getTotalLength</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>aebacb933570264e9697f6c984e348d01</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getNumBytesRemaining</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>adc989306067e47deabad840d05846290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isExhausted</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>aabacc50cde9fcabe4752c796648fde49</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>aa5350c414bad6b97ae3b463a3401c0d6</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>readByte</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a2e5944641712d84b6da2eee5d394326a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readBool</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a37d1e4956da4fb9f765f16f9c4b4ec3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>readShort</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a0c4b0f9f1fa9515fea5a98d2ffe7ae02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>readShortBigEndian</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>ac33bbf8ae4597a30bde70cbdbc6bfa5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>readInt</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a59eb456ebfbe9d4c7fdfd4c14337e19a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>readIntBigEndian</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a84ab1bcc547eee621c4c6c2502af808d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>readInt64</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a58941fd7cf4279e49d4697750f837a56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>readInt64BigEndian</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a8894f1c01c6e0de4b5dd9b9c1fe06c4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>readFloat</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a46d7f191f1872bc27550db3fa0733f59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>readFloatBigEndian</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a4d19fef152296085c477882e0650b011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>readDouble</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a31626a82ad48629a202135ac925ffecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>readDoubleBigEndian</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a7c7a2928053424caf51986d9e6fdaa35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>readCompressedInt</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a3e3643991f4103c5cfc1b8c61c6a3e92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>readNextLine</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>af16acc8f2fd769adb559a781ece8e903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>readString</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>abff18ad6e416d45f19d347abd3433665</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>readEntireStreamAsString</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>aeb956ec5838d7f64153141ef51977c40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>readIntoMemoryBlock</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a126afb4d61c4c1e9c843a75dfe612185</anchor>
      <arglist>(MemoryBlock &amp;destBlock, ssize_t maxNumBytesToRead=-1)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>getPosition</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>abf909e2de145df97221ab4deb2824c5c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setPosition</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>ad7b4e8cec1e383657900e27bbcb3b06c</anchor>
      <arglist>(int64 newPosition)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>skipNextBytes</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a7e3005cc6a58cd2ded6094dd6dd06542</anchor>
      <arglist>(int64 numBytesToSkip)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InputStream</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a7652c5cf6f92901c99ddb19a8adf2268</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterprocessConnection</name>
    <filename>classInterprocessConnection.html</filename>
    <base>Thread</base>
    <member kind="function">
      <type></type>
      <name>InterprocessConnection</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a31dc05e077ee562d5ca96ecea09c3663</anchor>
      <arglist>(bool callbacksOnMessageThread=true, uint32 magicMessageHeaderNumber=0xf2b49e2c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InterprocessConnection</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>ad4e4b9a6f85226f1015c6620009456c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectToSocket</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a007450a6ca6dc60bb48d384479d9a49d</anchor>
      <arglist>(const String &amp;hostName, int portNumber, int timeOutMillisecs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectToPipe</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>af55a39c96e49248340800c122c622653</anchor>
      <arglist>(const String &amp;pipeName, int pipeReceiveMessageTimeoutMs=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createPipe</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a7ddea65e7dbb25d1d471db7355743276</anchor>
      <arglist>(const String &amp;pipeName, int pipeReceiveMessageTimeoutMs=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a16959b067e088c75663fcff8633d600f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a2c3d425edefb392a174f01a4e8e4c83a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StreamingSocket *</type>
      <name>getSocket</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a1bee6edc518378ac8c5639ae517535eb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>NamedPipe *</type>
      <name>getPipe</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>abc220aa35a0b727979279f5557c0f2d1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getConnectedHostName</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a5878989beffd3680d6d5b93fa8b61baa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sendMessage</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a6fc9e7b55c25eac48baebd131ded9d4f</anchor>
      <arglist>(const MemoryBlock &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionMade</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a6491a1c39849ecbdb6093965cfd47b03</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionLost</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a83bf2f27d14ea3a9c7e1a88e18e31351</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageReceived</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a69549dd1bda0584d212940d3faf7457a</anchor>
      <arglist>(const MemoryBlock &amp;message)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterprocessConnectionServer</name>
    <filename>classInterprocessConnectionServer.html</filename>
    <base protection="private">Thread</base>
    <member kind="function">
      <type></type>
      <name>InterprocessConnectionServer</name>
      <anchorfile>classInterprocessConnectionServer.html</anchorfile>
      <anchor>af1449e1e8da7ad7a7a30a15e3edea59f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InterprocessConnectionServer</name>
      <anchorfile>classInterprocessConnectionServer.html</anchorfile>
      <anchor>ac5a60a85820e4c6344a2225b81cf630d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beginWaitingForSocket</name>
      <anchorfile>classInterprocessConnectionServer.html</anchorfile>
      <anchor>a12aa4180243cdb01725237da25d2230d</anchor>
      <arglist>(int portNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classInterprocessConnectionServer.html</anchorfile>
      <anchor>ac8a4c37b9e77848e48b499f441749324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual InterprocessConnection *</type>
      <name>createConnectionObject</name>
      <anchorfile>classInterprocessConnectionServer.html</anchorfile>
      <anchor>af0f9bee85542b7adc149270ad779b415</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterProcessLock</name>
    <filename>classInterProcessLock.html</filename>
    <class kind="class">InterProcessLock::ScopedLockType</class>
    <member kind="function">
      <type></type>
      <name>InterProcessLock</name>
      <anchorfile>classInterProcessLock.html</anchorfile>
      <anchor>aa4bb20ad9b280ba608e570f8ece8351e</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InterProcessLock</name>
      <anchorfile>classInterProcessLock.html</anchorfile>
      <anchor>a464f2a7c6a841b37534f1d1cbe5c1571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enter</name>
      <anchorfile>classInterProcessLock.html</anchorfile>
      <anchor>a00d7b9e49bf365eedc923f622e330179</anchor>
      <arglist>(int timeOutMillisecs=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exit</name>
      <anchorfile>classInterProcessLock.html</anchorfile>
      <anchor>a3387e77951f1777be407cf76d2691bd0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterProcessLock::ScopedLockType</name>
    <filename>classInterProcessLock_1_1ScopedLockType.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedLockType</name>
      <anchorfile>classInterProcessLock_1_1ScopedLockType.html</anchorfile>
      <anchor>a3796700eafa76f5633346ffd7674e400</anchor>
      <arglist>(InterProcessLock &amp;lock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedLockType</name>
      <anchorfile>classInterProcessLock_1_1ScopedLockType.html</anchorfile>
      <anchor>a2517d70321d5acabdfe5a96f11ef9c8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classInterProcessLock_1_1ScopedLockType.html</anchorfile>
      <anchor>ab4c0eda7e9ab3196721f5707e36f4b4a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JPEGImageFormat</name>
    <filename>classJPEGImageFormat.html</filename>
    <base>ImageFileFormat</base>
    <member kind="function">
      <type></type>
      <name>JPEGImageFormat</name>
      <anchorfile>classJPEGImageFormat.html</anchorfile>
      <anchor>a3e000b303a2a2d90dca7be44ace102c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JPEGImageFormat</name>
      <anchorfile>classJPEGImageFormat.html</anchorfile>
      <anchor>a92189a737ac849a79b0950b42bf03142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuality</name>
      <anchorfile>classJPEGImageFormat.html</anchorfile>
      <anchor>ad4388095c291a86f073d511ddfa8607e</anchor>
      <arglist>(float newQuality)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getFormatName</name>
      <anchorfile>classJPEGImageFormat.html</anchorfile>
      <anchor>a480b8359659b767a48bf861182a47fff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canUnderstand</name>
      <anchorfile>classJPEGImageFormat.html</anchorfile>
      <anchor>affbf9cfed2bb92a27d8feaa5cca3152f</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>decodeImage</name>
      <anchorfile>classJPEGImageFormat.html</anchorfile>
      <anchor>a16249c51337029127b625233d49ae0e7</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeImageToStream</name>
      <anchorfile>classJPEGImageFormat.html</anchorfile>
      <anchor>a4d41f19c27e81243677780a10a15b567</anchor>
      <arglist>(const Image &amp;sourceImage, OutputStream &amp;destStream)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JSON</name>
    <filename>classJSON.html</filename>
    <member kind="function" static="yes">
      <type>static Result</type>
      <name>parse</name>
      <anchorfile>classJSON.html</anchorfile>
      <anchor>a04abe8e9f60ea6ef8d54151947cafdb4</anchor>
      <arglist>(const String &amp;text, var &amp;parsedResult)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static var</type>
      <name>parse</name>
      <anchorfile>classJSON.html</anchorfile>
      <anchor>a0ef8e7d4c113ec4d4a3ecbb11670d019</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static var</type>
      <name>parse</name>
      <anchorfile>classJSON.html</anchorfile>
      <anchor>aa8073c7491473c44b995de10b961f7b8</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static var</type>
      <name>parse</name>
      <anchorfile>classJSON.html</anchorfile>
      <anchor>ac4c2776e3251bccd24e2ead35235777b</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>toString</name>
      <anchorfile>classJSON.html</anchorfile>
      <anchor>a2939ffbe0e0ee5a03eac1cd3f3d9a9d0</anchor>
      <arglist>(const var &amp;objectToFormat, bool allOnOneLine=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeToStream</name>
      <anchorfile>classJSON.html</anchorfile>
      <anchor>a9614ceea2dcd1e6c9f3bba86e273d024</anchor>
      <arglist>(OutputStream &amp;output, const var &amp;objectToFormat, bool allOnOneLine=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JUCEApplication</name>
    <filename>classJUCEApplication.html</filename>
    <base>JUCEApplicationBase</base>
    <base>ApplicationCommandTarget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JUCEApplication</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a7dc209ab07c1dbb226fa106a07e1a22a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInitialising</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a59c23a7ac955f975007e5ba52e8037dd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const String</type>
      <name>getApplicationName</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a6d0ce92edbfcc864e69faeed9bde92bd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const String</type>
      <name>getApplicationVersion</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a4d429c838740667370e1439bc0905471</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>moreThanOneInstanceAllowed</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>aea2d05c2f43278e26da09c2c8aee5325</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anotherInstanceStarted</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a951c761fef742f6d7020907d6073a6eb</anchor>
      <arglist>(const String &amp;commandLine)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>systemRequestedQuit</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a508f46d93a9355c2dc984c7f12c3abbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>suspended</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a523435f7aaf8663bc78d00261c684de5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resumed</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a121ca0380aada6ce6638ad1c5f789ff0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unhandledException</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>af4b96f97305d972bc9c3f1cc7157af29</anchor>
      <arglist>(const std::exception *e, const String &amp;sourceFilename, int lineNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setApplicationReturnValue</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a0fee97d4e78a41773873b54f1e75a68d</anchor>
      <arglist>(int newReturnValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getApplicationReturnValue</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a9589d48062e6c253e9f708ce24de231a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ApplicationCommandTarget *</type>
      <name>getNextCommandTarget</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a53eb2460c6147646ceefe65db2c01931</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCommandInfo</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>acf6b2c78fa3d4a05b7203fd02d101c32</anchor>
      <arglist>(CommandID, ApplicationCommandInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllCommands</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a772c13187c7362f188b4c2117aec8ef3</anchor>
      <arglist>(Array&lt; CommandID &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>perform</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>ac4c89154aef3d78059477a11ebd22820</anchor>
      <arglist>(const InvocationInfo &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JUCEApplication *</type>
      <name>getInstance</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a742b0cd37ba47f08ac7d765e3a9d1b7a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>quit</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a618b5238c20a1590c12ffe20d15e999a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray JUCE_CALLTYPE</type>
      <name>getCommandLineParameterArray</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a89bb36beea2a9173d79ed503eff27d88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String JUCE_CALLTYPE</type>
      <name>getCommandLineParameters</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>aa6478f1fde2de46834a8a000df6f8967</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isStandaloneApp</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>af4811fa78fc392744a9d4e92b85c424d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JUCEApplication</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a80e6dadf35b6954df90f2e11bb25ad8b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JUCEApplicationBase</name>
    <filename>classJUCEApplicationBase.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JUCEApplicationBase</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a98ba445960e64ae6314626cd14659bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const String</type>
      <name>getApplicationName</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>afa035ff6f164652542e7084f56f940fe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const String</type>
      <name>getApplicationVersion</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a364c4e6df0c1b21f38a95be61589978c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>moreThanOneInstanceAllowed</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a8b0b428b93e6972f3efae78bdda0fac6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialise</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>ad584bed05116674a1e68f60a1ac546f5</anchor>
      <arglist>(const String &amp;commandLineParameters)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a318021f86bf379caeb4cb27c32f0f229</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>anotherInstanceStarted</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a77dc328a5400d0866b03a96684c0d9c4</anchor>
      <arglist>(const String &amp;commandLine)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>systemRequestedQuit</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>aa4ae0dcc3467f4927d8365b4814b1396</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>suspended</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>ac641cfe5fd77b0f7ffb7b21e0d30f114</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resumed</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a3d6b5a8c46caa068a61fa775df38d014</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unhandledException</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>adb182f77016ee90f8d5443abcb0bb3f0</anchor>
      <arglist>(const std::exception *, const String &amp;sourceFilename, int lineNumber)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JUCEApplicationBase *</type>
      <name>getInstance</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a7beddd11441f0657d771d897ca864005</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isStandaloneApp</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>ab37b7899d09c4bd2b6f38a3ae13dcb33</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JUCEApplicationBase</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a3b64c47474ca9bf96c4ad7c0ee8cb3f5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Justification</name>
    <filename>classJustification.html</filename>
    <member kind="enumvalue">
      <name>left</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a56156bb2892e32febf8011af9c5da653</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>right</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a92d0fe0a466b35d67e1b7b91f971d7bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>horizontallyCentred</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a4b9db354585c335c96baecf1a14c2db5ac9fd148cf8547fab0e3aeee306223ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>top</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a4b9db354585c335c96baecf1a14c2db5aba34337f0f6a8cfcaf472a72f6d46649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bottom</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a4b9db354585c335c96baecf1a14c2db5ac77cede28d3cecdc46227f503446207b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>verticallyCentred</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a8a4ec09c32a9a1111e72ec7a9b6f9411</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>horizontallyJustified</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a0881c08fa2d58e9d6f36ab8bbea4b800</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>centred</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a4b9db354585c335c96baecf1a14c2db5af9d9adde20dce1aa38ff9a69be2b4384</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>centredLeft</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a66eba21caedb3d6bfbeff74c610628b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>centredRight</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a4b9db354585c335c96baecf1a14c2db5aea1dc507ac46f0c7417666ba14d9ad5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>centredTop</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a3a44a2451bf933ef23b99d19c53db3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>centredBottom</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a392a10b2805345384ac0589b1261cea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>topLeft</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a4b9db354585c335c96baecf1a14c2db5af2d7cc575db9d4d9a1305407625b7afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>topRight</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a36ad3c72f605613650333cc78d1e0b44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bottomLeft</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a3597930eb27b2d7aed0a929816a10ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bottomRight</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a397027445c8ee878b4f4871f10ba58d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Justification</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>ad88054a89ce3ab6b2a4b2bf8990390ce</anchor>
      <arglist>(int flags_) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Justification</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a04002a24d0dea5eb7b893e364a12d0e7</anchor>
      <arglist>(const Justification &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Justification &amp;</type>
      <name>operator=</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a747e830f3478823948d1f5f109ade4f9</anchor>
      <arglist>(const Justification &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a975c2fdf40e8243fac17861e179240ed</anchor>
      <arglist>(const Justification &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>adcdcb4a8ca5ea6da52244114256eea6f</anchor>
      <arglist>(const Justification &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFlags</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>aa34a4685b36f9cbc012c7682d1688fd4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testFlags</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>afdcebb7ecc5434a82f7e282d9f17c39f</anchor>
      <arglist>(int flagsToTest) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOnlyVerticalFlags</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>ab92d64608943bf4ddfc71c456f2af147</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOnlyHorizontalFlags</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a8318bc37f42d5296c334770fd9edd4e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyToRectangle</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a2ec608d8a7cf43d431ae2eb8c0e21597</anchor>
      <arglist>(ValueType &amp;x, ValueType &amp;y, ValueType w, ValueType h, ValueType spaceX, ValueType spaceY, ValueType spaceW, ValueType spaceH) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Rectangle&lt; ValueType &gt;</type>
      <name>appliedToRectangle</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a11cb23fcc90a17ef4f5ac888e44d5bf6</anchor>
      <arglist>(const Rectangle&lt; ValueType &gt; &amp;areaToAdjust, const Rectangle&lt; ValueType &gt; &amp;targetSpace) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyboardFocusTraverser</name>
    <filename>classKeyboardFocusTraverser.html</filename>
    <member kind="function">
      <type></type>
      <name>KeyboardFocusTraverser</name>
      <anchorfile>classKeyboardFocusTraverser.html</anchorfile>
      <anchor>a275c834346e37c782d74f08365f1a06f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KeyboardFocusTraverser</name>
      <anchorfile>classKeyboardFocusTraverser.html</anchorfile>
      <anchor>ac8dafe9d30ce2fbc9fb3163d1d16b2e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Component *</type>
      <name>getNextComponent</name>
      <anchorfile>classKeyboardFocusTraverser.html</anchorfile>
      <anchor>a7e353323ae96807e5f9cc903e49ca839</anchor>
      <arglist>(Component *current)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Component *</type>
      <name>getPreviousComponent</name>
      <anchorfile>classKeyboardFocusTraverser.html</anchorfile>
      <anchor>ab452631402fb9031651434f2e94b252c</anchor>
      <arglist>(Component *current)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Component *</type>
      <name>getDefaultComponent</name>
      <anchorfile>classKeyboardFocusTraverser.html</anchorfile>
      <anchor>a2c21be5bdf95b97b501e595955c7d75b</anchor>
      <arglist>(Component *parentComponent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyListener</name>
    <filename>classKeyListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KeyListener</name>
      <anchorfile>classKeyListener.html</anchorfile>
      <anchor>a3b63a69dab82d70acb71939a4c05b869</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>keyPressed</name>
      <anchorfile>classKeyListener.html</anchorfile>
      <anchor>ae69d788cbada2ae5069a9e725db0baf7</anchor>
      <arglist>(const KeyPress &amp;key, Component *originatingComponent)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>keyStateChanged</name>
      <anchorfile>classKeyListener.html</anchorfile>
      <anchor>aa3efa1c9c4ebfb754c9d68180a40b6c7</anchor>
      <arglist>(bool isKeyDown, Component *originatingComponent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyMappingEditorComponent</name>
    <filename>classKeyMappingEditorComponent.html</filename>
    <base>Component</base>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a5621ed52a0934c85301ded0696798a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a5621ed52a0934c85301ded0696798a42a41dc42d5069bfbae08a65ae57066f836</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textColourId</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a5621ed52a0934c85301ded0696798a42a83eb0e6141d7afb10f1392784575d617</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyMappingEditorComponent</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>ad82af2e52efb94bd1f48aba770e068fb</anchor>
      <arglist>(KeyPressMappingSet &amp;mappingSet, bool showResetToDefaultButton)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KeyMappingEditorComponent</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a8d8cddb27b23c862b2230586daebc9e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColours</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a726406bd37ec08341122647a00fee15a</anchor>
      <arglist>(const Colour &amp;mainBackground, const Colour &amp;textColour)</arglist>
    </member>
    <member kind="function">
      <type>KeyPressMappingSet &amp;</type>
      <name>getMappings</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a07e566d197bbb1d14296fbb7a755674a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>shouldCommandBeIncluded</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>abb52cedae53b4d9b12d7f084b688cbed</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCommandReadOnly</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>aa62cc07cddf842c855c577fbd118958c</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getDescriptionForKeyPress</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a9b7f50c2171670f5d5908a48e5ebbcfb</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>afdc0351656e9806877eeec6fddc91949</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a27467e99983021ebe48794a60f799ed0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyPress</name>
    <filename>classKeyPress.html</filename>
    <member kind="function">
      <type></type>
      <name>KeyPress</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a7d40630120c945017e8e3fbc30bb3499</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyPress</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aea05e4d18b9bf66752bdbb26413410be</anchor>
      <arglist>(int keyCode, const ModifierKeys &amp;modifiers, juce_wchar textCharacter) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyPress</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aee4f777a405880b975b96dc7738c151d</anchor>
      <arglist>(int keyCode) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyPress</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a748bef397e6bc4ba452a98dd67d43f97</anchor>
      <arglist>(const KeyPress &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>KeyPress &amp;</type>
      <name>operator=</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a6257c6ee69898f561ccd4e2af8c66e8d</anchor>
      <arglist>(const KeyPress &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>af0f5939d677fd996b3d25f9a8fb50643</anchor>
      <arglist>(const KeyPress &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>afb86f08e6db034fbd3f143ffa31e4777</anchor>
      <arglist>(const KeyPress &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ab4f51e1cc6e423380fa7e77f105eef0c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getKeyCode</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a4cfa514c624628995ce687dcdc6518fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ModifierKeys</type>
      <name>getModifiers</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a1bc9306994b77cccb0055618ce8d355c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getTextCharacter</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>acc9672e1abfbb01f150b3282775c71fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isKeyCode</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ac443b8024725e24f0da796cbac8d7fff</anchor>
      <arglist>(int keyCodeToCompare) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextDescription</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a551a1ee0911f6d73d176848f8cbfd3a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextDescriptionWithIcons</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a4ff9a0b14d9dbf35f1146f801ec8679f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCurrentlyDown</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>abbe7f5207ac72fbda3be3ac287c16a88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeyPress</type>
      <name>createFromDescription</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a9370e54ba688baf761a8ec78a3a61269</anchor>
      <arglist>(const String &amp;textVersion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isKeyCurrentlyDown</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a94c2aecc867e4dba1382c31c377523d2</anchor>
      <arglist>(int keyCode)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>spaceKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a60f802af5aff465d7ff910009608e343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>escapeKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a565ec13ad662d05392b609fad31b8f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>returnKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a1cfe46412c3af08250ddc14bfaef1205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>tabKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a2a3d96e0f2602106a3855a34a2e1dbb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>deleteKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ae568c9aba033acf0c24390f24304b9e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>backspaceKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a035471d297e6f91fc8e86d91539da361</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>insertKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>af62c3ffd333fc440eca6596b56df48b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>upKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a97fcf796ea92d9ff3818ee17cdbafa80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>downKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aeb9a20dd50b39f66d7d778d31b6b5f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>leftKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ad2961244072158eee77e11844a968f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>rightKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aff89b4c5876819968ff83a6c6ee15416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>pageUpKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aed878a6382f57cca1617d923b236ea1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>pageDownKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ac30e9e5628a043cfac1c601540b1ef01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>homeKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ae811d47e771f147a949d1bb818d9c9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>endKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a54ced410db4096610651498e85e63b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F1Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a4718eab842ed4cfef54b2538941fd7cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F2Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a68ef806408eb7ad6a13923d8244771f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F3Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ad8eef2e261d82cfb2957fd6b6b27e421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F4Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a962505a345c199485480f3a87e33968e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F5Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a41256ebbfdcd285a06baab285bb24f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F6Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a6fc8b94cc4fc53cd0dd8a60ab1275e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F7Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a1600c88c7f1d109d1c098b89ed399eb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F8Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a33c505fcea9f343a0682ea8b9ac38361</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F9Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ab2826f73bf6f9851a03908984e9ef85a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F10Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>acc93115bcbc62c2d6f6410bd953048b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F11Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aba680314581f58ae805b8ca6db4cd7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F12Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a8d2b24133ac5f7be8968dc6f76ad290d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F13Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aae831dec3e60af238a7691365fbca521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F14Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>af81fbf2d5a9848bfae5344cf9daa01ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F15Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>af08f015ab55e816151f061946a86922f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F16Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ab22e575b32683a1dc7b8ca3c578dc402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad0</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a4a44bab251df2712330effd9358968b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad1</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>af8c69449943e82aac0a728d2ba4dd016</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad2</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a25a781888b24650884cb41a70a2f1b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad3</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aa020cb0e8d6661d2d38476c96524b542</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad4</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ae49578eec3c953038ec269380fddc032</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad5</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>af5ff94b47c44d1e41e80dc581a872a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad6</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a5d362149cc5a341c24b74644d0812f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad7</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a8b9053c4da94ae7a5d8f7d171adb6853</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad8</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>af941a0797b78b1429f20497d4c16b4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad9</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>af5c16e7d95c0cc6b5e0739c2021b7f72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPadAdd</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a070c217aebfc2af7c511a12623db59e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPadSubtract</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a3587df27be497fb3d805dc6ac8eadc5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPadMultiply</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aec3e249cbc1b42e0917131c64c5a3042</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPadDivide</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a3261a5f6e1231d0dc55294c38ae67108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPadSeparator</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a53df5e582959f3ae2e3c75f383f251e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPadDecimalPoint</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a599c6a65c651b40c667d369e58a31d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPadEquals</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ac52dd54c9ba617eb2075d0769238d9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPadDelete</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a98053d001402ac0a14ba101f9fd98615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>playKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a08e1a3281e1a772f1e6227f70d117622</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>stopKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a4ebc694e95335f25418c99eb2235d815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>fastForwardKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a5818ad479163ff4ee7d191b5c125a5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>rewindKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a135d25e32e2493d0e58a61ae3e476121</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyPressMappingSet</name>
    <filename>classKeyPressMappingSet.html</filename>
    <base>KeyListener</base>
    <base>ChangeBroadcaster</base>
    <base>FocusChangeListener</base>
    <member kind="function">
      <type></type>
      <name>KeyPressMappingSet</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a28df6e3408888b79979a196f4a17c614</anchor>
      <arglist>(ApplicationCommandManager *commandManager)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyPressMappingSet</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a5c900ef5b95eafc0f30d43b099990b4f</anchor>
      <arglist>(const KeyPressMappingSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KeyPressMappingSet</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>adae95f518172adb938d30d38cf361743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ApplicationCommandManager *</type>
      <name>getCommandManager</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a4f3bb58614dd9adc7f418b265e108811</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; KeyPress &gt;</type>
      <name>getKeyPressesAssignedToCommand</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>abbe0438da9067d9ebc5a0406ccea3c98</anchor>
      <arglist>(CommandID commandID) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addKeyPress</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>ac2adbad788cddf223990617e00fbd7f1</anchor>
      <arglist>(CommandID commandID, const KeyPress &amp;newKeyPress, int insertIndex=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetToDefaultMappings</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a11ec4b86290489da987e2fcc3455b140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetToDefaultMapping</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a60fb5f6f71f8d4b9ef04627c625fb5b5</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllKeyPresses</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a16e2d91480adcd22ee5dbfdce01c0156</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllKeyPresses</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a9f3803440dd3d36fd79680c8dc2cc779</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeKeyPress</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a69386f2e687ced9630b24a745b6fa33a</anchor>
      <arglist>(CommandID commandID, int keyPressIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeKeyPress</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a0626523ca6a55cc5948531f0382e2ad8</anchor>
      <arglist>(const KeyPress &amp;keypress)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsMapping</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a452b1dd8851dd760fb52f97637f387a5</anchor>
      <arglist>(CommandID commandID, const KeyPress &amp;keyPress) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CommandID</type>
      <name>findCommandForKeyPress</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a748d3657cb192844b1ff7cfa1044231d</anchor>
      <arglist>(const KeyPress &amp;keyPress) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>restoreFromXml</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>acd0da647bbd350e6daebcd8705a8b11e</anchor>
      <arglist>(const XmlElement &amp;xmlVersion)</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>createXml</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>ab1f065bf0a2035046b35d84080a7c42d</anchor>
      <arglist>(bool saveDifferencesFromDefaultSet) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a67a478973fe6aede21f1651a85ab2049</anchor>
      <arglist>(const KeyPress &amp;key, Component *originatingComponent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyStateChanged</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a5a13378496876203f2f13b86a135ad5e</anchor>
      <arglist>(bool isKeyDown, Component *originatingComponent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalFocusChanged</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>acc295bb3a49df59b7b360d859a5b660a</anchor>
      <arglist>(Component *focusedComponent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KnownPluginList</name>
    <filename>classKnownPluginList.html</filename>
    <base>ChangeBroadcaster</base>
    <member kind="enumeration">
      <name>SortMethod</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a6beabfccc86796527f663f30f3514098</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>defaultOrder</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a6beabfccc86796527f663f30f3514098a095b33c1920322812d2f98874fa647c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sortAlphabetically</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a6beabfccc86796527f663f30f3514098a13fa4bc46bb8b6c70670f13fa2a8ad4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sortByCategory</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a6beabfccc86796527f663f30f3514098a2a27fc73f320a500d812f660663eee11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sortByManufacturer</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a6beabfccc86796527f663f30f3514098acf0c4ac83301f91cb2eb1ac54fb32222</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sortByFileSystemLocation</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a6beabfccc86796527f663f30f3514098a7da9f1486befa583139ced7d449a6b9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KnownPluginList</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a9e42fc0a1b1819ad21a734f6380fb1a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KnownPluginList</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a62cbb85f1fe910f1197f078b90dfac61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>af0066ed9002767c229a86e18407ddd7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTypes</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>af887b51cf7d3b8c4f44f2475c8109888</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PluginDescription *</type>
      <name>getType</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a98c2c30f15758fbf36f7f73b36fc2e49</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PluginDescription *</type>
      <name>getTypeForFile</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a2d4b52e7433bf90ddb5b8c7a0e73564f</anchor>
      <arglist>(const String &amp;fileOrIdentifier) const </arglist>
    </member>
    <member kind="function">
      <type>PluginDescription *</type>
      <name>getTypeForIdentifierString</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>ab9bc09ac3eb4efb14cefbc3a390acc95</anchor>
      <arglist>(const String &amp;identifierString) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addType</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a3ca7b930d503c7a4f56198603ff82215</anchor>
      <arglist>(const PluginDescription &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeType</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a4ec98afce586dfbef03a3098b8c73038</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scanAndAddFile</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a8364ba510d676c59677c997a7f89235c</anchor>
      <arglist>(const String &amp;possiblePluginFileOrIdentifier, bool dontRescanIfAlreadyInList, OwnedArray&lt; PluginDescription &gt; &amp;typesFound, AudioPluginFormat &amp;formatToUse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isListingUpToDate</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>aee17a685ddb53a81e3d660619b32c1a1</anchor>
      <arglist>(const String &amp;possiblePluginFileOrIdentifier) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanAndAddDragAndDroppedFiles</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a213f3e5fde4c3c0d31244c6b3e6ad172</anchor>
      <arglist>(const StringArray &amp;filenames, OwnedArray&lt; PluginDescription &gt; &amp;typesFound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToMenu</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>abdf4797df0f108759d2a6cbf2278521a</anchor>
      <arglist>(PopupMenu &amp;menu, const SortMethod sortMethod) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexChosenByMenu</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a39129b712d42d4ae13b9a2209014e88b</anchor>
      <arglist>(int menuResultCode) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>ab2dd417611080b9ee8a6ccdea73d4f0f</anchor>
      <arglist>(const SortMethod method)</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>createXml</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>ad89793da82742e90ca4226d2e93aa946</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recreateFromXml</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a3914fddc79074744a1a7b7d7a0e8201f</anchor>
      <arglist>(const XmlElement &amp;xml)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Label</name>
    <filename>classLabel.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base protection="protected">TextEditor::Listener</base>
    <base protection="private">ComponentListener</base>
    <base protection="private">Value::Listener</base>
    <class kind="struct">Label::Ids</class>
    <class kind="class">Label::Listener</class>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a41756012394513222e1323bb432fa701</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a41756012394513222e1323bb432fa701a80bf4bb58a466a4debb994f3ee2c8cab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textColourId</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a41756012394513222e1323bb432fa701a1f25238374bf53d43f8c73e68c8e937c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>outlineColourId</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a41756012394513222e1323bb432fa701ab67bf6af853bcef12b41b3e81f7d18bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Label</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>aab39f7d5f34a8b407e21ba812434d2da</anchor>
      <arglist>(const String &amp;componentName=String::empty, const String &amp;labelText=String::empty)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Label</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a39e1167a9b5827afd888780973d88894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>af718cbb06e0c0fe8535ad90ead295ba4</anchor>
      <arglist>(const String &amp;newText, bool broadcastChangeMessage)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getText</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>ade230ed2c7caf91abbf27f8b023f99e7</anchor>
      <arglist>(bool returnActiveEditorContents=false) const </arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getTextValue</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a64f6e22191ff430b97887e5647336c27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>af590df032e89790278b1b00ce4083d1d</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <type>const Font &amp;</type>
      <name>getFont</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a9f7a5710cf2e74686d77d2584f2e2525</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJustificationType</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a3a9a927872bce1fc045e1116ae15c9a3</anchor>
      <arglist>(const Justification &amp;justification)</arglist>
    </member>
    <member kind="function">
      <type>Justification</type>
      <name>getJustificationType</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>ad640f4583b4c76cffaff3082b50cc505</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderSize</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a9299ad0f357b8264fea2ff8de4dc2eda</anchor>
      <arglist>(int horizontalBorder, int verticalBorder)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHorizontalBorderSize</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a9848a728108a77d164a061fabbda75f1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVerticalBorderSize</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a503e3b2631d88dfaa01033ef6c84f2e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachToComponent</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a3c2397c0da1249f9e27e2279e0f2d4eb</anchor>
      <arglist>(Component *owner, bool onLeft)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getAttachedComponent</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>aa632b228291a4bc21e6ad21c675099e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAttachedOnLeft</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a4a36509a1bc34089dfdf1828dc87d23d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumHorizontalScale</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a3529019ec38b097daec0fb97fe7218d1</anchor>
      <arglist>(float newScale)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMinimumHorizontalScale</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>ab0d9138c10c41be554779d0c41aff70d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a05dc02ef40bf0244c928bff8c7cf904e</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a7dd9288cdac6891c5c3a4c38df30c2b9</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEditable</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a9342a397932d82bb1d196ebf9a8969d8</anchor>
      <arglist>(bool editOnSingleClick, bool editOnDoubleClick=false, bool lossOfFocusDiscardsChanges=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEditableOnSingleClick</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a466283689e98cc6d1d3d521ab8d383e2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEditableOnDoubleClick</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a05a999148537f67b9cb676f3940bb3f7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doesLossOfFocusDiscardChanges</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>aac0b01b91b21112f397fcde2d5942bc9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEditable</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a4531c2784a8896eaa50d6461ccc764c2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showEditor</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a7e8a44e4664b3d3e774e78d29b4b558b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideEditor</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a6f5fd9653da51af4720d1ac5e54f18d8</anchor>
      <arglist>(bool discardCurrentEditorContents)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBeingEdited</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a4a96b4b788e9bc056b513d6f7f89686e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a9fd9c7ba17bfb93505818dab8a8324c9</anchor>
      <arglist>(const ValueTree &amp;, ComponentBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TextEditor *</type>
      <name>createEditorComponent</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a87b2717e5c855b64346b70a908eabc13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>textWasEdited</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>ac25aabade178c65badaaf2773e0c26b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>textWasChanged</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a2bc26840c05560b6c17a719c0a2537b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>editorShown</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a7e0205075e382e2ae226655cedfdccba</anchor>
      <arglist>(TextEditor *editorComponent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>editorAboutToBeHidden</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a0cb8d5ff136d2281df6dbb76330d868d</anchor>
      <arglist>(TextEditor *editorComponent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a0ebe311cefa2aa293b18ce1079659dd6</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a3939a8a7549b917a28e007a0a6d09f05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a94850560f9ea4740867ba2f08d64a7d6</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDoubleClick</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>aeb582223218bbf23de03b11819cee514</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>componentMovedOrResized</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>af9f4b597e7e9ce7d5559b304bcae398e</anchor>
      <arglist>(Component &amp;component, bool wasMoved, bool wasResized)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>componentParentHierarchyChanged</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>aa880620724bf84b6c301a3fc1e5f7a58</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>componentVisibilityChanged</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>ad09ceec2027842198ddea2c2c5179c9e</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>inputAttemptWhenModal</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a0885863f2ab250112dc376f9f753b2eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>focusGained</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>adc3037d9147502cbc43c2581c5ff2523</anchor>
      <arglist>(FocusChangeType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a7d3e731ef29721e61e9df7357462bfe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyboardFocusTraverser *</type>
      <name>createFocusTraverser</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a157d56a441cfb160979eef9c0cd5ace9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>textEditorTextChanged</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a16e5e8decd8a9156d7ec182bb9fc9b09</anchor>
      <arglist>(TextEditor &amp;editor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>textEditorReturnKeyPressed</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>acaac8d1bf746085f232f5dbe39c22fa3</anchor>
      <arglist>(TextEditor &amp;editor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>textEditorEscapeKeyPressed</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>ac540b373b82500335531c5307274c0ba</anchor>
      <arglist>(TextEditor &amp;editor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>textEditorFocusLost</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a9e7197698d63937d565e04c0ec1a102c</anchor>
      <arglist>(TextEditor &amp;editor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a1025963c51c7e6834ac65aa2f31cbc7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>valueChanged</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>aec3e90374cfdbcda0fcb5c664f52cd02</anchor>
      <arglist>(Value &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Label::Ids</name>
    <filename>structLabel_1_1Ids.html</filename>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>tagType</name>
      <anchorfile>structLabel_1_1Ids.html</anchorfile>
      <anchor>a4f3017024c9f8f2cb187dc13f14b2b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>text</name>
      <anchorfile>structLabel_1_1Ids.html</anchorfile>
      <anchor>abfabcee03b3affb685a7cf548a9b1fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>font</name>
      <anchorfile>structLabel_1_1Ids.html</anchorfile>
      <anchor>a5c28a60eefe69fb534fc09a6daedc254</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>editMode</name>
      <anchorfile>structLabel_1_1Ids.html</anchorfile>
      <anchor>a8173e2849a2d620931725d89da801766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>justification</name>
      <anchorfile>structLabel_1_1Ids.html</anchorfile>
      <anchor>abd43e4f19dd8e843b5e80d2dd0d0731f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>focusLossDiscardsChanges</name>
      <anchorfile>structLabel_1_1Ids.html</anchorfile>
      <anchor>a267449a553b3d064334e1cc89659e453</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Label::Listener</name>
    <filename>classLabel_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classLabel_1_1Listener.html</anchorfile>
      <anchor>a722e6e037b03e122cd00c11426f2a964</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>labelTextChanged</name>
      <anchorfile>classLabel_1_1Listener.html</anchorfile>
      <anchor>ad2a3e79ba106bfa64cab523e197b1514</anchor>
      <arglist>(Label *labelThatHasChanged)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LassoComponent</name>
    <filename>classLassoComponent.html</filename>
    <templarg></templarg>
    <base>Component</base>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>aee298dc93b3481d6cef3b0884a9c4790</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lassoFillColourId</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>aee298dc93b3481d6cef3b0884a9c4790ae8e91c39fc10151d1ed7c9312f090522</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lassoOutlineColourId</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>aee298dc93b3481d6cef3b0884a9c4790a55fc81e2446917181ae96167d1e10fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LassoComponent</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>a16d6156cf00545c4645f09a13757ef0c</anchor>
      <arglist>(const int outlineThickness_=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LassoComponent</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>a4b5fcd45216fac0717e4d7c968975dd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginLasso</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>a63eaa333f9eec6357aec04380c63c879</anchor>
      <arglist>(const MouseEvent &amp;e, LassoSource&lt; SelectableItemType &gt; *const lassoSource)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dragLasso</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>a4aca7f9f28ecef2834bfabe648ba6959</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endLasso</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>a77e7463330941cd3ef81fa41209387f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>aa2b05e6a36b1ab1f9bbdc52d27bb1c08</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>aadb4a553d8c80a89900d7d7a6d6ff40a</anchor>
      <arglist>(int, int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LassoSource</name>
    <filename>classLassoSource.html</filename>
    <templarg>SelectableItemType</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LassoSource</name>
      <anchorfile>classLassoSource.html</anchorfile>
      <anchor>a852e8a3012d3590f1eaaa4d01683fc99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>findLassoItemsInArea</name>
      <anchorfile>classLassoSource.html</anchorfile>
      <anchor>af15851c6dc40e3931659c665b87bdf34</anchor>
      <arglist>(Array&lt; SelectableItemType &gt; &amp;itemsFound, const Rectangle&lt; int &gt; &amp;area)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SelectedItemSet&lt; SelectableItemType &gt; &amp;</type>
      <name>getLassoSelection</name>
      <anchorfile>classLassoSource.html</anchorfile>
      <anchor>a24cf96f354570daf9478658f79c0c1b1</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LeakedObjectDetector</name>
    <filename>classLeakedObjectDetector.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>LeakedObjectDetector</name>
      <anchorfile>classLeakedObjectDetector.html</anchorfile>
      <anchor>a33b0ca6504a300f0c321e89f28512aab</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeakedObjectDetector</name>
      <anchorfile>classLeakedObjectDetector.html</anchorfile>
      <anchor>ab474ac40a76a5d47b39d8a68b983767f</anchor>
      <arglist>(const LeakedObjectDetector &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LeakedObjectDetector</name>
      <anchorfile>classLeakedObjectDetector.html</anchorfile>
      <anchor>a8ea749cb2c38ee245dabf0dd4876a023</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Line</name>
    <filename>classLine.html</filename>
    <templarg>ValueType</templarg>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a460e27482a530ff771edb7b90ef339bf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a5f1e08e5f7347ec68e2744f4736ff362</anchor>
      <arglist>(const Line &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a0c5c5fb238000700acbba2857ca3e26a</anchor>
      <arglist>(ValueType startX, ValueType startY, ValueType endX, ValueType endY) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a631f12f794fe47dff6a193faa653196a</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;startPoint, const Point&lt; ValueType &gt; &amp;endPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Line &amp;</type>
      <name>operator=</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a6248c53667ef464babfc2a6b4456465e</anchor>
      <arglist>(const Line &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Line</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a61b0f32593c8fb3621276544769cbfcf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getStartX</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ae6357ca5be4c752771200880cea28dec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getStartY</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>abcb613b81630dbc4c1f155293f5bb738</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getEndX</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ac35f5f251652247e74ece5b36dee794f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getEndY</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a5db26e9e2834a8dcba4b08f7436fefb6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Point&lt; ValueType &gt; &amp;</type>
      <name>getStart</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a1998bb56f1bd6f6c8b2fd0d5149a12b5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Point&lt; ValueType &gt; &amp;</type>
      <name>getEnd</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a405e867a10b8a088573dff6733664ab2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a81b142801ed7a97edc10eefb5193d0b2</anchor>
      <arglist>(ValueType newStartX, ValueType newStartY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnd</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a8d5aa926b6361e15842f6e916d27af54</anchor>
      <arglist>(ValueType newEndX, ValueType newEndY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a67129d797b23238a6a523e5867d5c773</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;newStart) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnd</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ae0f169d068c3294b28457e401dcc4b2e</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;newEnd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Line</type>
      <name>reversed</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a5f1e5bd37ae3cf2dd014f854b7ea0337</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTransform</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a3529809adcfc1833215ee01318e1f40e</anchor>
      <arglist>(const AffineTransform &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getLength</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ac47e36fae13dc1baa6b11b2b545946c0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVertical</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>acf1d4f45d3f48b6d3540e19ecd9897c5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHorizontal</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a3f5dbfbf321eed9048d94635ff2457ab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;::FloatType</type>
      <name>getAngle</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ac4843d9a7d9cc7481c6d2b6cd5af3f7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a3974f999e9c76f5ca90ac332ad37c86b</anchor>
      <arglist>(const Line &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>af09579d2e9104536c115d1992ae6769d</anchor>
      <arglist>(const Line &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ab298dc289dc2d8e1c10bc11e463b5c81</anchor>
      <arglist>(const Line &amp;line, Point&lt; ValueType &gt; &amp;intersection) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getIntersection</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a5299710db931ecb75f09968e088e2ca7</anchor>
      <arglist>(const Line &amp;line) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getPointAlongLine</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ae09b929efc5c12defda7715092ff0c05</anchor>
      <arglist>(ValueType distanceFromStart) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getPointAlongLine</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a77bc36673f43fd4e4e966fe3294a9db5</anchor>
      <arglist>(ValueType distanceFromStart, ValueType perpendicularDistance) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getPointAlongLineProportionally</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a987efd8a7c899cbb70fe3ad20e0cc9d4</anchor>
      <arglist>(ValueType proportionOfLength) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getDistanceFromPoint</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ab19decc4c5bccabf58e0f775cd540a20</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;targetPoint, Point&lt; ValueType &gt; &amp;pointOnLine) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>findNearestProportionalPositionTo</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a332f0fce64dfc58897371ed4146e5ac9</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>findNearestPointTo</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a4b88c715edd6688db7f7f1b2cb974161</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPointAbove</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a40b24c158025f80b3dc9e074059fbdd8</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Line</type>
      <name>withShortenedStart</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a7cbccb4467b3a80464db2c5d51d6280f</anchor>
      <arglist>(ValueType distanceToShortenBy) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Line</type>
      <name>withShortenedEnd</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ab153135d534455fb2d3a04bd347a1790</anchor>
      <arglist>(ValueType distanceToShortenBy) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinkedListPointer</name>
    <filename>classLinkedListPointer.html</filename>
    <templarg>ObjectType</templarg>
    <class kind="class">LinkedListPointer::Appender</class>
    <member kind="function">
      <type></type>
      <name>LinkedListPointer</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a044598f5b6b8ac53a221fb934fa41724</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkedListPointer</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>ac971f23361914ad4adef583e766e9d7f</anchor>
      <arglist>(ObjectType *const headItem) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinkedListPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a5437ec0b943e77c01966131940946c7c</anchor>
      <arglist>(ObjectType *const newItem) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ObjectType *</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a248a5c3438640cb2ce0ac3115c9d90d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>get</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a7567b9c57a22c2977a65845cf5cdce98</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinkedListPointer &amp;</type>
      <name>getLast</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a4770930165d9058d405edc5a31186a25</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a167753863d2e10d5ae5e98fbd7b1cfa4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinkedListPointer &amp;</type>
      <name>operator[]</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a098a7e36d30ebc62a9ae3a146021116c</anchor>
      <arglist>(int index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const LinkedListPointer &amp;</type>
      <name>operator[]</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>ae5716fd33afa27433373f11e475c94d2</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a3cc7650c325a2661c02eb5b08219ff92</anchor>
      <arglist>(const ObjectType *const itemToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNext</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>aec30ea7b65a22847a91011e7a413a7f5</anchor>
      <arglist>(ObjectType *const newItem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertAtIndex</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>ace9638977f9007c5de6d705dd0698d72</anchor>
      <arglist>(int index, ObjectType *newItem)</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>replaceNext</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a52ef66e128a22c2f2f89b2090320312d</anchor>
      <arglist>(ObjectType *const newItem) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a7d3e9a4e9bfed23ecb63a534cf84772d</anchor>
      <arglist>(ObjectType *const newItem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCopyOfList</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a471a609ef0b2d61ccfdada1aaf5eb73f</anchor>
      <arglist>(const LinkedListPointer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>removeNext</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a45a025cb179d7dd8494ff045adc64d88</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a45793c4207bcab206c31e281a7593d9d</anchor>
      <arglist>(ObjectType *const itemToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAll</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a2762ae9b67186e39883a9b1bd0a1d4af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LinkedListPointer *</type>
      <name>findPointerTo</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a3fd8303ecfdb2a5e449342fd772f24ea</anchor>
      <arglist>(ObjectType *const itemToLookFor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToArray</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a2474d1f6e6156e9d5ffdcd3bb873b7c9</anchor>
      <arglist>(ObjectType **destArray) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a32fe51ed00c010d04a24f36a6b39ce16</anchor>
      <arglist>(LinkedListPointer &amp;other) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinkedListPointer::Appender</name>
    <filename>classLinkedListPointer_1_1Appender.html</filename>
    <member kind="function">
      <type></type>
      <name>Appender</name>
      <anchorfile>classLinkedListPointer_1_1Appender.html</anchorfile>
      <anchor>a752b6c9da32ac7a17eb2a50c62cf9233</anchor>
      <arglist>(LinkedListPointer &amp;endOfListPointer) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classLinkedListPointer_1_1Appender.html</anchorfile>
      <anchor>a9cdd44669fe1fb53b54e0dfc30833c2b</anchor>
      <arglist>(ObjectType *const newItem) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListBox</name>
    <filename>classListBox.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <class kind="struct">ListBox::Ids</class>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a08423950677e2e4efe521b32184708cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a08423950677e2e4efe521b32184708cbaf183e449ae9c8c100dd383198dab361b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>outlineColourId</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a08423950677e2e4efe521b32184708cbad8efb08c0307b5e7e87d2590af10ef1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textColourId</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a08423950677e2e4efe521b32184708cbae4c8cdf2403dbc1feb8c9fe1d91281ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListBox</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a5d17d8e050606081afde2ee5443085a8</anchor>
      <arglist>(const String &amp;componentName=String::empty, ListBoxModel *model=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ListBox</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a71376a469c4b6a97b100d227fd8704ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModel</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a4d47ad39b0125f2ef5c35ce945c9b529</anchor>
      <arglist>(ListBoxModel *newModel)</arglist>
    </member>
    <member kind="function">
      <type>ListBoxModel *</type>
      <name>getModel</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a3c71b8c2d45739b4860194c57148a135</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContent</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a3e8cb20434a462c1a102cf62e112e16d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMultipleSelectionEnabled</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a9647c445c0cd064c37247bc004738bdc</anchor>
      <arglist>(bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseMoveSelectsRows</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>aaaff40d6a0a564eda13a1a34d5daca15</anchor>
      <arglist>(bool shouldSelect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectRow</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ac56613db03adf964a683e184f7248640</anchor>
      <arglist>(int rowNumber, bool dontScrollToShowThisRow=false, bool deselectOthersFirst=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectRangeOfRows</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ae846fdb92bcf2be4040f93eba9f13efd</anchor>
      <arglist>(int firstRow, int lastRow)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselectRow</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a55db77bbc9e90e83b1f137fa1e565b55</anchor>
      <arglist>(int rowNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselectAllRows</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a60b4c8ea8a51c04d43899fd51f349794</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipRowSelection</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>adb559ca08ef51c4a81160a235172eae8</anchor>
      <arglist>(int rowNumber)</arglist>
    </member>
    <member kind="function">
      <type>SparseSet&lt; int &gt;</type>
      <name>getSelectedRows</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>aa70bd5b2e4c8731b54d0dafe2a59b5bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedRows</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a8fda2df4929cc0e94ffaea5614484a0d</anchor>
      <arglist>(const SparseSet&lt; int &gt; &amp;setOfRowsToBeSelected, bool sendNotificationEventToModel=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRowSelected</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ae2a4e8b0468e2adaeedf571cb1aa0cc0</anchor>
      <arglist>(int rowNumber) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSelectedRows</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>abd6d17d979e1f30c5f305fc3d248ea0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSelectedRow</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a7539693edfefdf90f4e6562e4cebb6b8</anchor>
      <arglist>(int index=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastRowSelected</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a8fc23c975d4c66b24b4233df57262bbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectRowsBasedOnModifierKeys</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a536a8ad1c7b1674fafc585dbc696c750</anchor>
      <arglist>(int rowThatWasClickedOn, const ModifierKeys &amp;modifiers, bool isMouseUpEvent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerticalPosition</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a250df6a39059fde46b37fcf17fb982db</anchor>
      <arglist>(double newProportion)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVerticalPosition</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ad9924ff85a8ec56761fdbd90a8b25bf5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToEnsureRowIsOnscreen</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a743f9159c7d4bd49390e43559e933fa0</anchor>
      <arglist>(int row)</arglist>
    </member>
    <member kind="function">
      <type>ScrollBar *</type>
      <name>getVerticalScrollBar</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>afe55a57c6b24f05383a3e1fc5766cedd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ScrollBar *</type>
      <name>getHorizontalScrollBar</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a34f3e83f581aefca741e801314f39594</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowContainingPosition</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a5e832a5db1d2601b70711f4fe1c7e79e</anchor>
      <arglist>(int x, int y) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInsertionIndexForPosition</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a0fde453ad2b8090d2406a960b4433435</anchor>
      <arglist>(int x, int y) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getRowPosition</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a6c7836b55e7d5a39f2fa60e47e0612c3</anchor>
      <arglist>(int rowNumber, bool relativeToComponentTopLeft) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getComponentForRowNumber</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ad18fef6d775866379e631e5a669776cc</anchor>
      <arglist>(int rowNumber) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowNumberOfComponent</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ae6af3bb596848fcdaa2763760f1536e1</anchor>
      <arglist>(Component *rowComponent) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVisibleRowWidth</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a5aeb18048979c0ead80497efc515cbaa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRowHeight</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ab9c8c47afd94fbfd4cf84edcab71acb2</anchor>
      <arglist>(int newHeight)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowHeight</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a522aa72c0c35bb8689f160498bd101b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRowsOnScreen</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a83f3eb25a49724dbf05f14af307371bd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutlineThickness</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a621d125d3338ff769bfcac1ca057e66b</anchor>
      <arglist>(int outlineThickness)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOutlineThickness</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a233cede0e16b37229b7f4a6a42e26f3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeaderComponent</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ab36777ae5cce2b2fc5008504117f6cc9</anchor>
      <arglist>(Component *newHeaderComponent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumContentWidth</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>addb9bd64ab337e3d8a50b199a93d3840</anchor>
      <arglist>(int newMinimumWidth)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVisibleContentWidth</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ab31f0d60daffd2359ec0d6cb3aeec0b9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repaintRow</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a0a89c76d3b62e0bc8cd2b41bfcfe3337</anchor>
      <arglist>(int rowNumber) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Image</type>
      <name>createSnapshotOfSelectedRows</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>af9ffb6fa801da0bf81afd5e42285bd11</anchor>
      <arglist>(int &amp;x, int &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Viewport *</type>
      <name>getViewport</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a43f8dacc6d109e009e06fcf49ba6dcf3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>af2f2f0817886d94bdcdf12ba3eb9af85</anchor>
      <arglist>(const ValueTree &amp;, ComponentBuilder &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ab1619d0c34947cc7feae4f22925ed9b6</anchor>
      <arglist>(const KeyPress &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyStateChanged</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>adec2c4109b1bd0377ff6e30edeff3f78</anchor>
      <arglist>(bool isKeyDown)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>af3fa7e06850423b8c022cd54852f22cc</anchor>
      <arglist>(Graphics &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintOverChildren</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>aa63a693ff4957f5a54e2d5eb8887fb26</anchor>
      <arglist>(Graphics &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a7a5a4e8b6cdb335be6cd92cbcda4606b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visibilityChanged</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>af1c552504b44b9b97427edf6bcdffe8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ac82712800c23ab48599c23bcfbf43553</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseMove</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a2c7eb193f1a8b3551d5c357bcf1d8381</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseExit</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a541bd20151b60a4b5fa389dd79bd17ec</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a7cb72fe5c9ba86d68761a8b9613c4235</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a6abc85c250457bc654a36f69ebce5a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startDragAndDrop</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ae812d8ed4df3b8439d4b139c2a9f195d</anchor>
      <arglist>(const MouseEvent &amp;, const var &amp;dragDescription, bool allowDraggingToOtherWindows)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ListBox::Ids</name>
    <filename>structListBox_1_1Ids.html</filename>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>rowHeight</name>
      <anchorfile>structListBox_1_1Ids.html</anchorfile>
      <anchor>a66f20519ec5da251c275905459bdf18d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>borderThickness</name>
      <anchorfile>structListBox_1_1Ids.html</anchorfile>
      <anchor>a65315c938bf4d3bf79b6ec1b4f989043</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListBoxModel</name>
    <filename>classListBoxModel.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ListBoxModel</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>aab4876cf1091ee05b32a39a485f1a4fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRows</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>aa34d0f88948722ae16c8ce6a7874bcfd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>paintListBoxItem</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>a255cf47783413c4f3fa71008a34cb776</anchor>
      <arglist>(int rowNumber, Graphics &amp;g, int width, int height, bool rowIsSelected)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Component *</type>
      <name>refreshComponentForRow</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>af049aa731e43557c107b1285ca7e3d88</anchor>
      <arglist>(int rowNumber, bool isRowSelected, Component *existingComponentToUpdate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>listBoxItemClicked</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>a1ffd0f1cb56fa4b5f080b22ca0e424ad</anchor>
      <arglist>(int row, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>listBoxItemDoubleClicked</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>ad4830f15c32a393371e0c1e4fe211e14</anchor>
      <arglist>(int row, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>backgroundClicked</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>a7b5d369b12c2a23a8d87600978f7e2f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectedRowsChanged</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>a869cb29e1b605e7312806f0ee7449fa2</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteKeyPressed</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>acc840517aac4398dd378ce1e5bd668ac</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>returnKeyPressed</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>a713c3007875a4473feafdd81fc8d58fc</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>listWasScrolled</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>aec88952fecefb30febf11ed9f172ba40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual var</type>
      <name>getDragSourceDescription</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>a9f42f453b1c3d80956047c7e2d4d1a9f</anchor>
      <arglist>(const SparseSet&lt; int &gt; &amp;currentlySelectedRows)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getTooltipForRow</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>ab00efad30db9008960012e8194a2452e</anchor>
      <arglist>(int row)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListenerList</name>
    <filename>classListenerList.html</filename>
    <templarg>ListenerClass</templarg>
    <templarg>ArrayType</templarg>
    <class kind="class">ListenerList::DummyBailOutChecker</class>
    <class kind="class">ListenerList::Iterator</class>
    <member kind="typedef">
      <type>ListenerList&lt; ListenerClass, ArrayType &gt;</type>
      <name>ThisType</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a3b96ee4d2b3e77dfddce53f2451c4556</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ListenerClass</type>
      <name>ListenerType</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>aa03db5b04e4fe0dda6e95bd9055c9705</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListenerList</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a809baedf6e32eaaf1696e85e1149389f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ListenerList</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a3b3b8138506855e80b9ebf61a032f540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>aad67eee9d64815b62ad8ea11f6812e75</anchor>
      <arglist>(ListenerClass *const listenerToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>ac7d5795fb151d7470e1fb2226c7d4676</anchor>
      <arglist>(ListenerClass *const listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a4ced7631daac418522719e14a1d35b7d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>ac35c41903fa2ee45cb8f5666b6724d06</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a8e777917d86ac8f06c6ce97e00d3ef54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>aa57ce8e754fd494260dd68a3ba23fb3a</anchor>
      <arglist>(ListenerClass *const listener) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>adb25c4b3880d1004072305edf2e08766</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callChecked</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a5757f573480b5f86416f2c85bb985d7a</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a02ed7b864a523d0f3a015c0cb131564e</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)(P1), LL_PARAM(1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callChecked</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>adfa011223fefc9446a4e1a68fd163233</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1), LL_PARAM(1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>af27a26ed368214fa92f7f31497a7bc9a</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)(P1, P2), LL_PARAM(1), LL_PARAM(2))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callChecked</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a016324817b14abe106980929a8ad20b3</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2), LL_PARAM(1), LL_PARAM(2))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a3135456a9b63353c4ac4de9fcbd214dd</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)(P1, P2, P3), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callChecked</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a105833e18f32cd00ee0a4aca5b35a0b3</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2, P3), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a5396917f4ce69ff81b3779e9ce64c751</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)(P1, P2, P3, P4), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callChecked</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a18c5f7f2f18d054bbbe516e33c6a7d13</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2, P3, P4), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a1e8137450a357ee0c57627d6ff963b22</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)(P1, P2, P3, P4, P5), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4), LL_PARAM(5))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callChecked</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a72225f7871a1ae12c2a4ffd978aa5b5a</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2, P3, P4, P5), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4), LL_PARAM(5))</arglist>
    </member>
    <member kind="function">
      <type>const ArrayType &amp;</type>
      <name>getListeners</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>aae7f9efd24496a8284f6f1df4b9065bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListenerList::DummyBailOutChecker</name>
    <filename>classListenerList_1_1DummyBailOutChecker.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>shouldBailOut</name>
      <anchorfile>classListenerList_1_1DummyBailOutChecker.html</anchorfile>
      <anchor>a8d8093b22c3d503e1aae0a5cd59766e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListenerList::Iterator</name>
    <filename>classListenerList_1_1Iterator.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classListenerList_1_1Iterator.html</anchorfile>
      <anchor>ada44697ba9cb8a9a212b65ff2bfe6025</anchor>
      <arglist>(const ListType &amp;list_) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Iterator</name>
      <anchorfile>classListenerList_1_1Iterator.html</anchorfile>
      <anchor>a6d090aa6025bf1955b936cfa24cf2057</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classListenerList_1_1Iterator.html</anchorfile>
      <anchor>a9791ff087b9d8f7978fd9e3a68d713b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classListenerList_1_1Iterator.html</anchorfile>
      <anchor>ae1c1247ae0215416f493b46f4a386eb9</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ListType::ListenerType *</type>
      <name>getListener</name>
      <anchorfile>classListenerList_1_1Iterator.html</anchorfile>
      <anchor>a4b5bd0f27cb7b70b294b233584c8fd63</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LocalisedStrings</name>
    <filename>classLocalisedStrings.html</filename>
    <member kind="function">
      <type></type>
      <name>LocalisedStrings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>a12f939ad4557caada5822e7bb9025318</anchor>
      <arglist>(const String &amp;fileContents)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalisedStrings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>a11442a8ad64719a7f8cff9142fffb877</anchor>
      <arglist>(const File &amp;fileToLoad)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalisedStrings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>aba56315c628fc24aee1fb9c41e0e4fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>translate</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>af13a0ba50d4e1a4d2116824eb6e0183a</anchor>
      <arglist>(const String &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>translate</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>ae113b9ff57e82b03f5430da8ad009192</anchor>
      <arglist>(const String &amp;text, const String &amp;resultIfNotFound) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getLanguageName</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>a46d409862744c0276d9f35226af285de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getCountryCodes</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>aea4a5e0684f629680ef934ac593a2697</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnoresCase</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>a575016aff77e9a6c991dd6285980bbc6</anchor>
      <arglist>(bool shouldIgnoreCase)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setCurrentMappings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>a4916d09e4d881362a6d35d753d902bf5</anchor>
      <arglist>(LocalisedStrings *newTranslations)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LocalisedStrings *</type>
      <name>getCurrentMappings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>a0131361dde468bffc6c76a6f97b768eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>translateWithCurrentMappings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>adbb25081e75842b43db17d585cf00c6d</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>translateWithCurrentMappings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>af6fe719801fc2c136e408d9392e45384</anchor>
      <arglist>(const char *text)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Logger</name>
    <filename>classLogger.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Logger</name>
      <anchorfile>classLogger.html</anchorfile>
      <anchor>ae93f62ca3e47716b7120acb032a260f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>setCurrentLogger</name>
      <anchorfile>classLogger.html</anchorfile>
      <anchor>afb892b547ba50ab614e95c26566f2c5c</anchor>
      <arglist>(Logger *newLogger, bool deleteOldLogger=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>writeToLog</name>
      <anchorfile>classLogger.html</anchorfile>
      <anchor>a037cd16034c0663805f301b0e95c0be6</anchor>
      <arglist>(const String &amp;message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>outputDebugString</name>
      <anchorfile>classLogger.html</anchorfile>
      <anchor>a54273b4faf398b4da464d21bb6abac59</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Logger</name>
      <anchorfile>classLogger.html</anchorfile>
      <anchor>abc41bfb031d896170c7675fa96a6b30c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>logMessage</name>
      <anchorfile>classLogger.html</anchorfile>
      <anchor>ab2ef7f6552d425bf729b7d1a7ed5160f</anchor>
      <arglist>(const String &amp;message)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LookAndFeel</name>
    <filename>classLookAndFeel.html</filename>
    <member kind="function">
      <type></type>
      <name>LookAndFeel</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ac3c8e3057a825febbdf7fcff31d0cb99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeel</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a377c52537b71e079dba7568f35af6520</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>findColour</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>aa7f9faa480c9ec9d61b66672425f380b</anchor>
      <arglist>(int colourId) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a817beefa430ae0028d6bec566e151d9f</anchor>
      <arglist>(int colourId, const Colour &amp;colour) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isColourSpecified</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a01bc0ae6a79f5e89413284856944c133</anchor>
      <arglist>(int colourId) const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Typeface::Ptr</type>
      <name>getTypefaceForFont</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a9f0db849b384fb22137023583167f419</anchor>
      <arglist>(const Font &amp;font)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultSansSerifTypefaceName</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a15a3d2e1c913bc68859d29945f40a51a</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MouseCursor</type>
      <name>getMouseCursorFor</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>addc70dc2f74308badd5f7675842d5044</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LowLevelGraphicsContext *</type>
      <name>createGraphicsContext</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>abf73cf57faec27c985eec8e11bcd7aff</anchor>
      <arglist>(const Image &amp;imageToRenderOn, const Point&lt; int &gt; &amp;origin, const RectangleList &amp;initialClip)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawButtonBackground</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a8dbd9bd9a981a90a1e0d15ec7270079b</anchor>
      <arglist>(Graphics &amp;g, Button &amp;button, const Colour &amp;backgroundColour, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Font</type>
      <name>getFontForTextButton</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>aed73a9961d3f0d20c5cb4ef471490e1d</anchor>
      <arglist>(TextButton &amp;button)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawButtonText</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a34b3d88bf774404b069092e8ee7955ed</anchor>
      <arglist>(Graphics &amp;g, TextButton &amp;button, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawToggleButton</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ad00c510749e2a29f742cc034d8d13347</anchor>
      <arglist>(Graphics &amp;g, ToggleButton &amp;button, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changeToggleButtonWidthToFitText</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>af00e9c23ac73e0b4a9aeb4eaa7883f3a</anchor>
      <arglist>(ToggleButton &amp;button)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawTickBox</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a4cb7f93b5c2dc0750c25289c3b2c965c</anchor>
      <arglist>(Graphics &amp;g, Component &amp;component, float x, float y, float w, float h, bool ticked, bool isEnabled, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AlertWindow *</type>
      <name>createAlertWindow</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>adc19e3d1d06b1a8999790b47b56d3f95</anchor>
      <arglist>(const String &amp;title, const String &amp;message, const String &amp;button1, const String &amp;button2, const String &amp;button3, AlertWindow::AlertIconType iconType, int numButtons, Component *associatedComponent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawAlertBox</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a7808705b08c5c33e39f01bfc6210410c</anchor>
      <arglist>(Graphics &amp;g, AlertWindow &amp;alert, const Rectangle&lt; int &gt; &amp;textArea, TextLayout &amp;textLayout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getAlertBoxWindowFlags</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ae1f8e3d087bd7fa54618034819dadcc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getAlertWindowButtonHeight</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>aa5178a29ba5ed5fb1e752f20408abd06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Font</type>
      <name>getAlertWindowMessageFont</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>aac3594c16cb7ee4778c4fd613685bc2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Font</type>
      <name>getAlertWindowFont</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>af3a91f996021475a8f22e1f421f2b43f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsingNativeAlertWindows</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a4b0aa92ddc422d660d162dd2e304c35f</anchor>
      <arglist>(bool shouldUseNativeAlerts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingNativeAlertWindows</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a08905a5fe3fa51ec2cd99010a1042007</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawProgressBar</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a5a0f15843df14eb4ddbcaeb60423510b</anchor>
      <arglist>(Graphics &amp;g, ProgressBar &amp;progressBar, int width, int height, double progress, const String &amp;textToShow)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawSpinningWaitAnimation</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a8b1b828e749bbf0c966c3563062ec77d</anchor>
      <arglist>(Graphics &amp;g, const Colour &amp;colour, int x, int y, int w, int h)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawScrollbarButton</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a4880cb3699cd3024ca14ca94755dae50</anchor>
      <arglist>(Graphics &amp;g, ScrollBar &amp;scrollbar, int width, int height, int buttonDirection, bool isScrollbarVertical, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawScrollbar</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a60d120c5f522635b86feee4f727815ce</anchor>
      <arglist>(Graphics &amp;g, ScrollBar &amp;scrollbar, int x, int y, int width, int height, bool isScrollbarVertical, int thumbStartPosition, int thumbSize, bool isMouseOver, bool isMouseDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ImageEffectFilter *</type>
      <name>getScrollbarEffect</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a620d41bdbc1915245f64c1646409024a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMinimumScrollbarThumbSize</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a2bfec8ff30e454fdee91a87b8788a97e</anchor>
      <arglist>(ScrollBar &amp;scrollbar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDefaultScrollbarWidth</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ab67f8f8945ff7776e29479aba9dc69c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getScrollbarButtonSize</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a020bc1ed1ce162cbf482fad7ea46408b</anchor>
      <arglist>(ScrollBar &amp;scrollbar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Path</type>
      <name>getTickShape</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a59b9be0688bae8e46c927b9b1ba5ff50</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Path</type>
      <name>getCrossShape</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ac7ef8f5c24356c91c56be8089b90342b</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawTreeviewPlusMinusBox</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>afa9575ddeeaa4b946fff1cf474606518</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int w, int h, bool isPlus, bool isMouseOver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fillTextEditorBackground</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a5605ae9a851611cb56c050e99ca7a68c</anchor>
      <arglist>(Graphics &amp;g, int width, int height, TextEditor &amp;textEditor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawTextEditorOutline</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a1d9832a561664cced8c00d5c5169fac0</anchor>
      <arglist>(Graphics &amp;g, int width, int height, TextEditor &amp;textEditor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CaretComponent *</type>
      <name>createCaretComponent</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a8cb6995003b52cb881b23790b1e14220</anchor>
      <arglist>(Component *keyFocusOwner)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Drawable *</type>
      <name>getDefaultFolderImage</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>afada8ec1da4a1c3d40a1184961750d47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Drawable *</type>
      <name>getDefaultDocumentFileImage</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a856c16a426ab532fb7e8611f58663faf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createFileChooserHeaderText</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a33a95fb6c3940c91981b3f4822f6cf6b</anchor>
      <arglist>(const String &amp;title, const String &amp;instructions, GlyphArrangement &amp;destArrangement, int width)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawFileBrowserRow</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ada040ee479f43ee78e78da7e7b2a09be</anchor>
      <arglist>(Graphics &amp;g, int width, int height, const String &amp;filename, Image *icon, const String &amp;fileSizeDescription, const String &amp;fileTimeDescription, bool isDirectory, bool isItemSelected, int itemIndex, DirectoryContentsDisplayComponent &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Button *</type>
      <name>createFileBrowserGoUpButton</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a310794092fd24d9f23bc7b7620964e4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>layoutFileBrowserComponent</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a996c40ff545bd36b85b6f7b97fd101d1</anchor>
      <arglist>(FileBrowserComponent &amp;browserComp, DirectoryContentsDisplayComponent *fileListComponent, FilePreviewComponent *previewComp, ComboBox *currentPathBox, TextEditor *filenameBox, Button *goUpButton)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawBubble</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a290c9c86050db87f5ea6779030826ded</anchor>
      <arglist>(Graphics &amp;g, float tipX, float tipY, float boxX, float boxY, float boxW, float boxH)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawPopupMenuBackground</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ad7660f46281cd050dde931232a3cff4d</anchor>
      <arglist>(Graphics &amp;g, int width, int height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawPopupMenuItem</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a140a6248309d56bf8c8b3e72ed7bdc6c</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isSeparator, bool isActive, bool isHighlighted, bool isTicked, bool hasSubMenu, const String &amp;text, const String &amp;shortcutKeyText, Image *image, const Colour *const textColour)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Font</type>
      <name>getPopupMenuFont</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ab534edc759d27fe27a308685e5043d1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawPopupMenuUpDownArrow</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>af43c11f45a2d65ead660355e8468e471</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isScrollUpArrow)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getIdealPopupMenuItemSize</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ae6d8e4885202adf5eeeafbb1dad8587d</anchor>
      <arglist>(const String &amp;text, bool isSeparator, int standardMenuItemHeight, int &amp;idealWidth, int &amp;idealHeight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMenuWindowFlags</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>aaffa3812abc886b082449a1bfc2cdce8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawMenuBarBackground</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a585e8abe5df765d2eca59789e3c907a2</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isMouseOverBar, MenuBarComponent &amp;menuBar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMenuBarItemWidth</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a03a4b7206e36203a4b4398c9c5ec32a3</anchor>
      <arglist>(MenuBarComponent &amp;menuBar, int itemIndex, const String &amp;itemText)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Font</type>
      <name>getMenuBarFont</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a42323b086efbec2bfab2665494a5f297</anchor>
      <arglist>(MenuBarComponent &amp;menuBar, int itemIndex, const String &amp;itemText)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawMenuBarItem</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>aa4c4834d321b9489a702bb23de791a2f</anchor>
      <arglist>(Graphics &amp;g, int width, int height, int itemIndex, const String &amp;itemText, bool isMouseOverItem, bool isMenuOpen, bool isMouseOverBar, MenuBarComponent &amp;menuBar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawComboBox</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a6374b412f3dc81090012716e447b2916</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isButtonDown, int buttonX, int buttonY, int buttonW, int buttonH, ComboBox &amp;box)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Font</type>
      <name>getComboBoxFont</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>aa2355506a261a71a65c3841f394d148d</anchor>
      <arglist>(ComboBox &amp;box)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Label *</type>
      <name>createComboBoxTextBox</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ae4ee56424e5b369ba7188deb20ee3326</anchor>
      <arglist>(ComboBox &amp;box)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>positionComboBoxText</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ad1e94a16a424903b5cad9baa3909421a</anchor>
      <arglist>(ComboBox &amp;box, Label &amp;labelToPosition)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawLabel</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a44ef672b9065ecd4c553d1bae6238ad0</anchor>
      <arglist>(Graphics &amp;g, Label &amp;label)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawLinearSlider</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a6476217b0367fe42cca0e8a8beb401d5</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle style, Slider &amp;slider)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawLinearSliderBackground</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>afd9d8b992c754e7730bf802865e4a8e4</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle style, Slider &amp;slider)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawLinearSliderThumb</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>aa5f3eac6860c4cbdee2d8f71c7952381</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle style, Slider &amp;slider)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSliderThumbRadius</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a3431247f022a5abd39de55fed9b35a29</anchor>
      <arglist>(Slider &amp;slider)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawRotarySlider</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a06a712a86cf11099ee0495f416e7761e</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int width, int height, float sliderPosProportional, float rotaryStartAngle, float rotaryEndAngle, Slider &amp;slider)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Button *</type>
      <name>createSliderButton</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a8936bfac6c30ca3bfc02b8717c78724c</anchor>
      <arglist>(bool isIncrement)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Label *</type>
      <name>createSliderTextBox</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>afb1eb68e3421cf3dcea9b3d4204d2e2e</anchor>
      <arglist>(Slider &amp;slider)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ImageEffectFilter *</type>
      <name>getSliderEffect</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>add3d1dc087adf5b3c19e4b11fcdf126a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getTooltipSize</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a3a44cc3dd7f4e47b6b3450bd833c7ac1</anchor>
      <arglist>(const String &amp;tipText, int &amp;width, int &amp;height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawTooltip</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a6facc42a5b70d48c9c6706ae06b1c766</anchor>
      <arglist>(Graphics &amp;g, const String &amp;text, int width, int height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Button *</type>
      <name>createFilenameComponentBrowseButton</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ae14685e5b684de2c1a86b0bb774f25de</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>layoutFilenameComponent</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a812441cc621a83202e9e7381e696c55c</anchor>
      <arglist>(FilenameComponent &amp;filenameComp, ComboBox *filenameBox, Button *browseButton)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawCornerResizer</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ad88c6a610b71f207cbe1ddf894e33f38</anchor>
      <arglist>(Graphics &amp;g, int w, int h, bool isMouseOver, bool isMouseDragging)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawResizableFrame</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a820e063514836b73d77f5a6c8ead8080</anchor>
      <arglist>(Graphics &amp;g, int w, int h, const BorderSize&lt; int &gt; &amp;borders)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fillResizableWindowBackground</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a3361de82e5142493bde5bf5c5550d270</anchor>
      <arglist>(Graphics &amp;g, int w, int h, const BorderSize&lt; int &gt; &amp;border, ResizableWindow &amp;window)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawResizableWindowBorder</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a59f7eba4f67fe140320a854033154b50</anchor>
      <arglist>(Graphics &amp;g, int w, int h, const BorderSize&lt; int &gt; &amp;border, ResizableWindow &amp;window)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawDocumentWindowTitleBar</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a41b7ba1e8cfdf0532eecf76f32322c62</anchor>
      <arglist>(DocumentWindow &amp;window, Graphics &amp;g, int w, int h, int titleSpaceX, int titleSpaceW, const Image *icon, bool drawTitleTextOnLeft)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Button *</type>
      <name>createDocumentWindowButton</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a95a790d5f1be2ac8a3abf1f75ef5f001</anchor>
      <arglist>(int buttonType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>positionDocumentWindowButtons</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a6f49a6578f85f27e457cba06a4e3a915</anchor>
      <arglist>(DocumentWindow &amp;window, int titleBarX, int titleBarY, int titleBarW, int titleBarH, Button *minimiseButton, Button *maximiseButton, Button *closeButton, bool positionTitleBarButtonsOnLeft)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDefaultMenuBarHeight</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>afbb9c7a455f188ac30ae4dac354cce8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DropShadower *</type>
      <name>createDropShadowerForComponent</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a2482b209dec9f86c0f2ddc249d8b77c9</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawStretchableLayoutResizerBar</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a22dd269f6b66f077f1699dc23a001d3f</anchor>
      <arglist>(Graphics &amp;g, int w, int h, bool isVerticalBar, bool isMouseOver, bool isMouseDragging)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawGroupComponentOutline</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a4e8170460cb6ce0c373447232f05cfb6</anchor>
      <arglist>(Graphics &amp;g, int w, int h, const String &amp;text, const Justification &amp;position, GroupComponent &amp;group)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createTabButtonShape</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a2658988ac7e09488762d3a76a0d5ff3e</anchor>
      <arglist>(Path &amp;p, int width, int height, int tabIndex, const String &amp;text, Button &amp;button, TabbedButtonBar::Orientation orientation, bool isMouseOver, bool isMouseDown, bool isFrontTab)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fillTabButtonShape</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a1f3c2d68322f937465327408f1f06d0a</anchor>
      <arglist>(Graphics &amp;g, const Path &amp;path, const Colour &amp;preferredBackgroundColour, int tabIndex, const String &amp;text, Button &amp;button, TabbedButtonBar::Orientation orientation, bool isMouseOver, bool isMouseDown, bool isFrontTab)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawTabButtonText</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>aa21ca6362973ac302435e335b7c14548</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int w, int h, const Colour &amp;preferredBackgroundColour, int tabIndex, const String &amp;text, Button &amp;button, TabbedButtonBar::Orientation orientation, bool isMouseOver, bool isMouseDown, bool isFrontTab)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTabButtonOverlap</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a9b2f6ab233f29beeb4b66225e14a5e3f</anchor>
      <arglist>(int tabDepth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTabButtonSpaceAroundImage</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a3a25d9b9d0aa131940ac3c48ac46811e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTabButtonBestWidth</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a7f01a8d7922574e167cee0c0ec46f476</anchor>
      <arglist>(int tabIndex, const String &amp;text, int tabDepth, Button &amp;button)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawTabButton</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ae21968f086967bf3571248c08bdabf3a</anchor>
      <arglist>(Graphics &amp;g, int w, int h, const Colour &amp;preferredColour, int tabIndex, const String &amp;text, Button &amp;button, TabbedButtonBar::Orientation orientation, bool isMouseOver, bool isMouseDown, bool isFrontTab)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawTabAreaBehindFrontButton</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a5b56a42509e1650b52bd9ae6af78e7da</anchor>
      <arglist>(Graphics &amp;g, int w, int h, TabbedButtonBar &amp;tabBar, TabbedButtonBar::Orientation orientation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Button *</type>
      <name>createTabBarExtrasButton</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>af390796715eb21445893f5d895714c95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawImageButton</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>aa5e490ef83db662ec7be31c759bfc199</anchor>
      <arglist>(Graphics &amp;g, Image *image, int imageX, int imageY, int imageW, int imageH, const Colour &amp;overlayColour, float imageOpacity, ImageButton &amp;button)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawTableHeaderBackground</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a3978bacd83746fa52fe8b6ca301fbc0e</anchor>
      <arglist>(Graphics &amp;g, TableHeaderComponent &amp;header)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawTableHeaderColumn</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a402d9884ebdfc8464be986ce056651a0</anchor>
      <arglist>(Graphics &amp;g, const String &amp;columnName, int columnId, int width, int height, bool isMouseOver, bool isMouseDown, int columnFlags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>paintToolbarBackground</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>afadb0bbb5a0272263a0de37c5756d100</anchor>
      <arglist>(Graphics &amp;g, int width, int height, Toolbar &amp;toolbar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Button *</type>
      <name>createToolbarMissingItemsButton</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>aaadbaa034de45111397987b70d41c426</anchor>
      <arglist>(Toolbar &amp;toolbar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>paintToolbarButtonBackground</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a144d7350c3d57fb1f17c49a34b3b674f</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isMouseOver, bool isMouseDown, ToolbarItemComponent &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>paintToolbarButtonLabel</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ac5b59d072b7c89510cc866f950458d8b</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int width, int height, const String &amp;text, ToolbarItemComponent &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawPropertyPanelSectionHeader</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a977fc8156a5eca5ab95cd1904f3599bd</anchor>
      <arglist>(Graphics &amp;g, const String &amp;name, bool isOpen, int width, int height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawPropertyComponentBackground</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a4e119b58dcd08d39c4775b0079d97a25</anchor>
      <arglist>(Graphics &amp;g, int width, int height, PropertyComponent &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawPropertyComponentLabel</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a836de65af6c2fc67e08492acb9e7876a</anchor>
      <arglist>(Graphics &amp;g, int width, int height, PropertyComponent &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rectangle&lt; int &gt;</type>
      <name>getPropertyComponentContentPosition</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>adfaba2582e895d244b7979f19669bb60</anchor>
      <arglist>(PropertyComponent &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawCallOutBoxBackground</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a79fb6d93814ac47ab77ee9c4cd65b72a</anchor>
      <arglist>(CallOutBox &amp;box, Graphics &amp;g, const Path &amp;path, Image &amp;cachedImage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawLevelMeter</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a5baa8963b51fbd5bb4df6657ed8760f0</anchor>
      <arglist>(Graphics &amp;g, int width, int height, float level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawKeymapChangeButton</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a8a8bfac538ddc28e73496c26d963638e</anchor>
      <arglist>(Graphics &amp;g, int width, int height, Button &amp;button, const String &amp;keyDescription)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>playAlertSound</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ac8619d01580cde12075b229490ab2f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LookAndFeel &amp;</type>
      <name>getDefaultLookAndFeel</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>aacb8588072823d7e67dada5ff8f6dbb3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDefaultLookAndFeel</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a0d2cc7f39cb3804d68a6fd2a723d05a4</anchor>
      <arglist>(LookAndFeel *newDefaultLookAndFeel) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawGlassSphere</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a142965689add97c69601ad683ac11776</anchor>
      <arglist>(Graphics &amp;g, float x, float y, float diameter, const Colour &amp;colour, float outlineThickness) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawGlassPointer</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a1c29db9b4bba12d424123bf2fb3be984</anchor>
      <arglist>(Graphics &amp;g, float x, float y, float diameter, const Colour &amp;colour, float outlineThickness, int direction) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawGlassLozenge</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a0b6848846b18a5855bc9ee6720a7d6f2</anchor>
      <arglist>(Graphics &amp;g, float x, float y, float width, float height, const Colour &amp;colour, float outlineThickness, float cornerSize, bool flatOnLeft, bool flatOnRight, bool flatOnTop, bool flatOnBottom) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Drawable *</type>
      <name>loadDrawableFromData</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ac1a42e3c43a627166232deb268dcd81b</anchor>
      <arglist>(const void *data, size_t numBytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LowLevelGraphicsContext</name>
    <filename>classLowLevelGraphicsContext.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LowLevelGraphicsContext</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>ae52dbd717d7336a5523e0e3106c2f8be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isVectorDevice</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a3065966f502492c5889429a13b5e45ab</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a088803372a49c9b297a1bafeb03a2398</anchor>
      <arglist>(int x, int y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addTransform</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a18e6da4370c8d0e89312aedc479628f7</anchor>
      <arglist>(const AffineTransform &amp;transform)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getScaleFactor</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>ab781ea1e9fba61b48198836dea0ccf83</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getTargetDeviceScaleFactor</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>af1dadc17fd06a4904cf1833cfaf8b18f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>clipToRectangle</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>aaa08f796cf992357fb6342baa958bfd6</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>clipToRectangleList</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a02c89819dca5f7c67ba91f0e3f8d803a</anchor>
      <arglist>(const RectangleList &amp;clipRegion)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>excludeClipRectangle</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a9f4fba10dde9c8e5031d924505f183df</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clipToPath</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a8ad59b64de518b81311efe156a006a2d</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clipToImageAlpha</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a6fe69db4a645250d2013608d511cd907</anchor>
      <arglist>(const Image &amp;sourceImage, const AffineTransform &amp;transform)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>clipRegionIntersects</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>af98935b3abbe40e7a1ecf85d777723bd</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rectangle&lt; int &gt;</type>
      <name>getClipBounds</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a3749b8130680e7f2f8e9f7ce313e0008</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isClipEmpty</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a1bfb18f0f76a90bb5c2282777551acde</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveState</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a254135b4a407bdbc47c4f25e70c3eaf5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>restoreState</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a873bad830decaf0de5a3a34027ce8519</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>beginTransparencyLayer</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a7779642c9e50269e96906915f8dd833d</anchor>
      <arglist>(float opacity)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endTransparencyLayer</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a8ea588902423657839d8b7af248029da</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setFill</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a40bc24455843a6e95b88db3d86cffe1a</anchor>
      <arglist>(const FillType &amp;fillType)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOpacity</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>aa84973a37cea2535e86143a54f4fb0a3</anchor>
      <arglist>(float newOpacity)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setInterpolationQuality</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>ab1ffb7d4c38df12ce39fe36bb73b3615</anchor>
      <arglist>(Graphics::ResamplingQuality quality)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fillRect</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a0b3f796d4abd33b5e90d4eaedea50df9</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r, bool replaceExistingContents)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fillPath</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>ab8aa4bea47040112f7a185ae689faffd</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawImage</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>acdbccec1e9657b3e38783339787c256b</anchor>
      <arglist>(const Image &amp;sourceImage, const AffineTransform &amp;transform)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawLine</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a3ef1e5efeb3e9db1d7dda48a91717908</anchor>
      <arglist>(const Line&lt; float &gt; &amp;line)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawVerticalLine</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a00755e2700af8cb0fc97d5a79c566d00</anchor>
      <arglist>(int x, float top, float bottom)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawHorizontalLine</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a00efd27906afe649a0cb17a947ac2ac5</anchor>
      <arglist>(int y, float left, float right)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setFont</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a0a13d86839d52f6d691f4694e0b941a9</anchor>
      <arglist>(const Font &amp;newFont)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Font &amp;</type>
      <name>getFont</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>ad94eaf063959d06038a12ec80eeb5f84</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawGlyph</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>aae75c3a7ea8ff92f52f8f92d122ce4de</anchor>
      <arglist>(int glyphNumber, const AffineTransform &amp;transform)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>drawTextLayout</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>accf05124131ec30b12b88334b1cfd716</anchor>
      <arglist>(const AttributedString &amp;, const Rectangle&lt; float &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LowLevelGraphicsContext</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a7bc641020d6f44a15a10bde2f22a8bab</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LowLevelGraphicsPostScriptRenderer</name>
    <filename>classLowLevelGraphicsPostScriptRenderer.html</filename>
    <base>LowLevelGraphicsContext</base>
    <class kind="struct">LowLevelGraphicsPostScriptRenderer::SavedState</class>
    <member kind="function">
      <type></type>
      <name>LowLevelGraphicsPostScriptRenderer</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a08206c409e9491668e7d929fd06d5391</anchor>
      <arglist>(OutputStream &amp;resultingPostScript, const String &amp;documentTitle, int totalWidth, int totalHeight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LowLevelGraphicsPostScriptRenderer</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a1fe792575e086f09de6b8b7a1d71d815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVectorDevice</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>acabb79057bf1345aa637b21ab5a4bc48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a415300484c4f2d659cb26dfd19b28314</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransform</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a0021a50effff7dd0fd88330e06996831</anchor>
      <arglist>(const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getScaleFactor</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a73bfc3a4df415657378c17cd3c9ae4b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipToRectangle</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>aeb6e0383fce8c1e8cfad36952a424ea0</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipToRectangleList</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a43370004ace2094c69fa837f3a392dd8</anchor>
      <arglist>(const RectangleList &amp;clipRegion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>excludeClipRectangle</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a58f689a9ccdc50884c792dd221269f9c</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clipToPath</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>ad85a04353f8babdae930dec28c46711d</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clipToImageAlpha</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a97e8741dfb618b910b50ad2de8c09a47</anchor>
      <arglist>(const Image &amp;sourceImage, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveState</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>af3a313342b98473f97734c7345dcbee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreState</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>ae819a388261847724abedfbb0cc76b42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginTransparencyLayer</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>aea922fb9dee35e4cd297e2120aefb78e</anchor>
      <arglist>(float opacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endTransparencyLayer</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a49a2a33ba12f4b0a767a6b932adfeb67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipRegionIntersects</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a9abcde249dd45dddff4fbc108dae0a57</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getClipBounds</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a208b2b7538569d1802eef9d0610880d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClipEmpty</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>aed924bca5c684b5b4b4a78f54c8df0d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFill</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a05dc63404638c983e43abc132f30f628</anchor>
      <arglist>(const FillType &amp;fillType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a629c3a2b985114fa571db27963fc2277</anchor>
      <arglist>(float opacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterpolationQuality</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>ab45102dfd88fe08d3c005424005052b6</anchor>
      <arglist>(Graphics::ResamplingQuality quality)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRect</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>af86d1af660e7cb82c42862531feaab92</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r, bool replaceExistingContents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillPath</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a8449127c9e0f0dc2726493f290fb8d5a</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawImage</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>ad2242d8a97ca9faef1291f8b653f4b9e</anchor>
      <arglist>(const Image &amp;sourceImage, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>adc443fcd5cf684bc3f78870b58f0b9b4</anchor>
      <arglist>(const Line&lt; float &gt; &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawVerticalLine</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a043821b650523a9658d21f6648e00f9c</anchor>
      <arglist>(int x, float top, float bottom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawHorizontalLine</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a6bfe73959c98fe643ffb82eb5f384b12</anchor>
      <arglist>(int x, float top, float bottom)</arglist>
    </member>
    <member kind="function">
      <type>const Font &amp;</type>
      <name>getFont</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a09728a283faf79b34e88dba3dab7b751</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>adbd9ed0d6470b8f3c2e8b4ac76307999</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawGlyph</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a5362ccebd773c4af42ef1e1e1442e43f</anchor>
      <arglist>(int glyphNumber, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeClip</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>ad6a3a6f3041a02c5aac656dbd7ec2c5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeColour</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a1faf5f29049d5da11911c8df037612be</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writePath</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a7dd61a77af1e0fbf83a2879f5f383309</anchor>
      <arglist>(const Path &amp;path) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeXY</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>aa55ce0492614b773c2250d7d1e37d954</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeTransform</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a134cad7780073f23056bf7e2637a1985</anchor>
      <arglist>(const AffineTransform &amp;trans) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeImage</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>acf0d11d1eff9fdc8f70a9c377c076269</anchor>
      <arglist>(const Image &amp;im, int sx, int sy, int maxW, int maxH) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a0314e800e5bffafb536835753fe6d294</anchor>
      <arglist>(LowLevelGraphicsPostScriptRenderer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OutputStream &amp;</type>
      <name>out</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>abda44d72a9730c4b62ce3a7a2fbc8bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>totalWidth</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a0fa5658fdc5f8c2fb801ab7dba117f84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>totalHeight</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a842f2dc876aeebb14cc27e3faee70735</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>needToClip</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a75772619fb8c5d185cd82b48ee46822e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Colour</type>
      <name>lastColour</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>af380fa0611c3ca97a4cb2925a228bbd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OwnedArray&lt; SavedState &gt;</type>
      <name>stateStack</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a95a55fd1cd7588048a37ac86fa384849</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LowLevelGraphicsPostScriptRenderer::SavedState</name>
    <filename>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</filename>
    <member kind="function">
      <type></type>
      <name>SavedState</name>
      <anchorfile>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</anchorfile>
      <anchor>a45d789ecb774106d92269b21cf1591c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SavedState</name>
      <anchorfile>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</anchorfile>
      <anchor>a94b080a2305995c6bb5796a705287bcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>RectangleList</type>
      <name>clip</name>
      <anchorfile>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</anchorfile>
      <anchor>af49eca03e67c284afd9d676304c29c28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>xOffset</name>
      <anchorfile>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</anchorfile>
      <anchor>a10d46be69faae4c3c27ae95dfac5a713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yOffset</name>
      <anchorfile>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</anchorfile>
      <anchor>a0f4d17295aea556882e47a9a8b07b9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FillType</type>
      <name>fillType</name>
      <anchorfile>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</anchorfile>
      <anchor>a36435de04c6937319a263ddbf37d3f2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Font</type>
      <name>font</name>
      <anchorfile>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</anchorfile>
      <anchor>a350201db969d79ab1783c0bde1030469</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LowLevelGraphicsSoftwareRenderer</name>
    <filename>classLowLevelGraphicsSoftwareRenderer.html</filename>
    <base>LowLevelGraphicsContext</base>
    <member kind="function">
      <type></type>
      <name>LowLevelGraphicsSoftwareRenderer</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a96db3b90ab25c63c03481269f946789f</anchor>
      <arglist>(const Image &amp;imageToRenderOnto)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LowLevelGraphicsSoftwareRenderer</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a1dd0983ad9b83427309573ac0bb6be0a</anchor>
      <arglist>(const Image &amp;imageToRenderOnto, const Point&lt; int &gt; &amp;origin, const RectangleList &amp;initialClip)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LowLevelGraphicsSoftwareRenderer</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>aa1594e25b78ce4f55d1a4c785fdce3ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVectorDevice</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a2923a10a3f58198049e53ef7c8a4da0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>ae4135dd1d692f2fe8d36ec17b9dc36b2</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransform</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a504abc5a862d7a859c7f4ad415e3aee3</anchor>
      <arglist>(const AffineTransform &amp;)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getScaleFactor</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a3c65fd985067c4f382661234487fbe9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipToRectangle</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>ad430634396ca5e4ab8470996a5a3e007</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipToRectangleList</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>ab21fddb053931f06dd60512c101e5919</anchor>
      <arglist>(const RectangleList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>excludeClipRectangle</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a6c72235f3e705b676d382a1766218311</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clipToPath</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a861a7efb3da658e0376a4867b1029b6e</anchor>
      <arglist>(const Path &amp;, const AffineTransform &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clipToImageAlpha</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>ace0a6a593de63c8ac8c682c6ccc38dcf</anchor>
      <arglist>(const Image &amp;, const AffineTransform &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipRegionIntersects</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a3d85b58138e4efa604e7f732af5e15bf</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getClipBounds</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a4ffeb960ecc0b9f09d8cc5edb8d16e37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClipEmpty</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>acd85f92727ce047921232e08489db5bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveState</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a0354dced116a419c90309477a05bd7ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreState</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a6ce62a6b103e8f0ea6a257fbb431dc66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginTransparencyLayer</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>ad5f12bc7dcc5e277486cbab29be1ec45</anchor>
      <arglist>(float opacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endTransparencyLayer</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>aef5819c13ac3104ff610aa365be9535d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFill</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a03a82ced42bd90064f4e6c5c6442664f</anchor>
      <arglist>(const FillType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a0712b890c6e0fdc52a364e6df080c8a5</anchor>
      <arglist>(float opacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterpolationQuality</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>af3ad74a21b84628e16e13fc73c962353</anchor>
      <arglist>(Graphics::ResamplingQuality)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRect</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>aa2f59b584cb81aa8282b0a0f0af79bc2</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;, bool replaceExistingContents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillPath</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a61e75dc2623d1cab7ea65d170dc535ff</anchor>
      <arglist>(const Path &amp;, const AffineTransform &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawImage</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>aa98478b641e08086354041bdc96ffe10</anchor>
      <arglist>(const Image &amp;, const AffineTransform &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a3f874bae8c12e7b6f4e013dc50a9390c</anchor>
      <arglist>(const Line&lt; float &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawVerticalLine</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>adb2d64adbf1d561af1c5140c956adea3</anchor>
      <arglist>(int x, float top, float bottom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawHorizontalLine</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a1ce2f99657c94e522535269128182d3b</anchor>
      <arglist>(int x, float top, float bottom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a46c3bb9404c008f762b60108aee9104a</anchor>
      <arglist>(const Font &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const Font &amp;</type>
      <name>getFont</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a2f2fb636e1708e9e9a7c52d3b1edb368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawGlyph</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>aa51af2f0267f19b882f7c05af68428b7</anchor>
      <arglist>(int glyphNumber, float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawGlyph</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a0de997a9f597de846cf2738ccf929b2f</anchor>
      <arglist>(int glyphNumber, const AffineTransform &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>aa3b319f21085e835ce05d7dc03d9f42f</anchor>
      <arglist>(LowLevelGraphicsSoftwareRenderer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RenderingHelpers::SavedStateStack&lt; RenderingHelpers::SoftwareRendererSavedState &gt;</type>
      <name>savedState</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>ae8b6b909e4d296eae82dc074a3d0fe03</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MACAddress</name>
    <filename>classMACAddress.html</filename>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>a155b01d9d9c04fbe13ea9b821519b571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>a9ab1361f2773c6840f8fc96f73000b20</anchor>
      <arglist>(const MACAddress &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MACAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>a81e0e779bcc372284a137c141eb14f3d</anchor>
      <arglist>(const MACAddress &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>aeabd33e9cbb643fc35c4caea9ed5fd41</anchor>
      <arglist>(const uint8 bytes[6])</arglist>
    </member>
    <member kind="function">
      <type>const uint8 *</type>
      <name>getBytes</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>abcfe7ffd43b048fb7ff09e5029898933</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>a2288e82d87329833ec16dacba2290540</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>toInt64</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>a6f760036561796c4abf45a7f86454b33</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>a999d550f9a74abb93229d00d5fb38aa7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>aa6a77a69fa675e51be108cb22670ad5a</anchor>
      <arglist>(const MACAddress &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>abc63d92b1b9bf6b228288777a1644d07</anchor>
      <arglist>(const MACAddress &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findAllAddresses</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>a85000063afc46f503a7a22d13cc49e3a</anchor>
      <arglist>(Array&lt; MACAddress &gt; &amp;results)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MarkerList</name>
    <filename>classMarkerList.html</filename>
    <class kind="class">MarkerList::Listener</class>
    <class kind="class">MarkerList::Marker</class>
    <class kind="class">MarkerList::ValueTreeWrapper</class>
    <member kind="function">
      <type></type>
      <name>MarkerList</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>aec769d5fe4ed37fac5093d0b420a06c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MarkerList</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>ade1d2b7a557c3e92846ede5550d2db2d</anchor>
      <arglist>(const MarkerList &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MarkerList &amp;</type>
      <name>operator=</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>ad466ac730156f60289da11c36e11b1e3</anchor>
      <arglist>(const MarkerList &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MarkerList</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a3c564a517aa72ffeee0f5c16f4b5f0e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMarkers</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a3e1a4fc0d6b65838f3f7a737aaec7ddc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Marker *</type>
      <name>getMarker</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a1388805e9a795035f016b5e48fad22c5</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Marker *</type>
      <name>getMarker</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>ad5d509facf46e1333f9c0ade028e5356</anchor>
      <arglist>(const String &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMarkerPosition</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>ab24986317f17d5d2f5a2a56a95f72154</anchor>
      <arglist>(const Marker &amp;marker, Component *parentComponent) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMarker</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a94cab6b8076345f32a65bdac9f5f0544</anchor>
      <arglist>(const String &amp;name, const RelativeCoordinate &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMarker</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>ae03909a6ec94bb19d68567cc3d5dcea4</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMarker</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a5590053217d116a36637c85e0029bdcc</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a43813a3d9d6baf3990e49ad9fbfc1099</anchor>
      <arglist>(const MarkerList &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a7a89dc36b1b66710aabff4d1ef47a496</anchor>
      <arglist>(const MarkerList &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a69ebc97778614b8abe46134f2bd4fe14</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a8b63e66800748ca8a426fb1a46ee078b</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markersHaveChanged</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a0b8a4773fabc9941f3b1cfd7edde342e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MarkerList::Listener</name>
    <filename>classMarkerList_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classMarkerList_1_1Listener.html</anchorfile>
      <anchor>a784097c6e76bc9ccada894cc1746b3ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>markersChanged</name>
      <anchorfile>classMarkerList_1_1Listener.html</anchorfile>
      <anchor>ace4f10849b4f4d2d7c311ad9a2fad7c8</anchor>
      <arglist>(MarkerList *markerList)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>markerListBeingDeleted</name>
      <anchorfile>classMarkerList_1_1Listener.html</anchorfile>
      <anchor>a1366341c47f066cfb5798504fb75ff8c</anchor>
      <arglist>(MarkerList *markerList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MarkerList::Marker</name>
    <filename>classMarkerList_1_1Marker.html</filename>
    <member kind="function">
      <type></type>
      <name>Marker</name>
      <anchorfile>classMarkerList_1_1Marker.html</anchorfile>
      <anchor>ad026d83d2228c9257e0269cd40ad5b51</anchor>
      <arglist>(const Marker &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Marker</name>
      <anchorfile>classMarkerList_1_1Marker.html</anchorfile>
      <anchor>a5f504ecd66bdf1cfa2cd6350223bbc52</anchor>
      <arglist>(const String &amp;name, const RelativeCoordinate &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMarkerList_1_1Marker.html</anchorfile>
      <anchor>ad085731af17b15bcd128b9a970442145</anchor>
      <arglist>(const Marker &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMarkerList_1_1Marker.html</anchorfile>
      <anchor>a7d4ba6d144551045511c75d4cf3f36b1</anchor>
      <arglist>(const Marker &amp;) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>name</name>
      <anchorfile>classMarkerList_1_1Marker.html</anchorfile>
      <anchor>af3b200d9580dfe7fd665ee5820a5ed0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativeCoordinate</type>
      <name>position</name>
      <anchorfile>classMarkerList_1_1Marker.html</anchorfile>
      <anchor>a22c96e38c72f6b18a164ed0fa0b0eb0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MarkerList::ValueTreeWrapper</name>
    <filename>classMarkerList_1_1ValueTreeWrapper.html</filename>
    <member kind="function">
      <type></type>
      <name>ValueTreeWrapper</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ac07bbc3655da644dc6b5ab6fcfd8b6de</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree &amp;</type>
      <name>getState</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a135fc8bc4723096d6f384eba5e8526a7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMarkers</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a7e41771a8473d0ff72ae07bd1a995043</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getMarkerState</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a4b923a2d493b7a579656bf6108f3113f</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getMarkerState</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a866747fc701bd7d496a6a37639ee0b47</anchor>
      <arglist>(const String &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsMarker</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a0f67689c093ff40a6d6fb469f0a2cb01</anchor>
      <arglist>(const ValueTree &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>MarkerList::Marker</type>
      <name>getMarker</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>af7f1896cb986999a8fc773ea5b68ff06</anchor>
      <arglist>(const ValueTree &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMarker</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a03a72327258884ba74656f088d71044f</anchor>
      <arglist>(const MarkerList::Marker &amp;marker, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMarker</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>af6d105d45ded3ab7a10e984fecf2f547</anchor>
      <arglist>(const ValueTree &amp;state, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTo</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ac76fe73807d07580b66c4d64e23e516b</anchor>
      <arglist>(MarkerList &amp;markerList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFrom</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a78d4f5624dcd2b9c5b03d09bbbc5689b</anchor>
      <arglist>(const MarkerList &amp;markerList, UndoManager *undoManager)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>markerTag</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a6ee3f514e213161c74b047b9bc6011d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>nameProperty</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a896618b21ad5b4670845cea9fa176920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>posProperty</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aea00685271d757b553f1e4796b07156c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix3D</name>
    <filename>classMatrix3D.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Matrix3D</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>abff2f7b90514911e716c28b4a45f62b1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3D</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>ab1217941d2532ab0576c592f64784e4b</anchor>
      <arglist>(const Matrix3D &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3D</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>a05918505e2adf83c18ea1e03e21d5b7b</anchor>
      <arglist>(const AffineTransform &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3D</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>adea8dbce2ba1c50f3a6da8ee7326f2ed</anchor>
      <arglist>(const Type *values) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3D</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>ada20a058ce0354f5c61aace9400a8a82</anchor>
      <arglist>(const Type &amp;m00, const Type &amp;m10, const Type &amp;m20, const Type &amp;m30, const Type &amp;m01, const Type &amp;m11, const Type &amp;m21, const Type &amp;m31, const Type &amp;m02, const Type &amp;m12, const Type &amp;m22, const Type &amp;m32, const Type &amp;m03, const Type &amp;m13, const Type &amp;m23, const Type &amp;m33) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Matrix3D &amp;</type>
      <name>operator=</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>ab862a0f5aa487664c87aa491e98f45c4</anchor>
      <arglist>(const Matrix3D &amp;other) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>mat</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>ad7e9eecc94c0a33a029a5de12c5c056b</anchor>
      <arglist>[16]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MD5</name>
    <filename>classMD5.html</filename>
    <member kind="function">
      <type></type>
      <name>MD5</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>af5ff29c71d5f4e3229158714ea86f991</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MD5</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>a27bc7a9369e27a0b837dd88ecf9b9b59</anchor>
      <arglist>(const MD5 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MD5 &amp;</type>
      <name>operator=</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>acf477e072c6109a95fbaa218825b25d8</anchor>
      <arglist>(const MD5 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MD5</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>a87d0e0590f66f0273eb34562c5193214</anchor>
      <arglist>(const MemoryBlock &amp;data) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MD5</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>aa06bf7f26ba7ffcb27f8b7ab58f6656a</anchor>
      <arglist>(const void *data, size_t numBytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MD5</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>aeace778a72301d24a79b8519e1dcedbd</anchor>
      <arglist>(InputStream &amp;input, int64 numBytesToRead=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MD5</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>a4dd5165aaeca735d904b8e47d94e8cf3</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MD5</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>ae8aded3f6595b3a47669a8bad574f91c</anchor>
      <arglist>(const CharPointer_UTF8 &amp;utf8Text) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MD5</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>ae8c0b386b7f6b7ac3e6f89a50884fe32</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>MemoryBlock</type>
      <name>getRawChecksumData</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>ad69844e36b717ab29e2a11634453c6fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const uint8 *</type>
      <name>getChecksumDataArray</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>a4b60fc21b3008e6ed75c20828b15cbb8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toHexString</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>af1c9da20d349083318efcb7d988ab6b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>ac9e9dfb6104e724f92d97f42aa479bad</anchor>
      <arglist>(const MD5 &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>a8329542849c3e6d453d3963f7ca8e118</anchor>
      <arglist>(const MD5 &amp;) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MD5</type>
      <name>fromUTF32</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>a77bcb27f700db51a8514e00960f9d728</anchor>
      <arglist>(const String &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MemoryBlock</name>
    <filename>classMemoryBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>MemoryBlock</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>ac01749da15e7970e88e877a4dfac07bc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryBlock</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a922d11a5bf4d47cf31e224f98a9a3c79</anchor>
      <arglist>(const size_t initialSize, bool initialiseToZero=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryBlock</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>ae1ab9d3202796c403ab7a0481118d2bf</anchor>
      <arglist>(const MemoryBlock &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryBlock</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>aa338e73761a208455554559cf3336fab</anchor>
      <arglist>(const void *dataToInitialiseFrom, size_t sizeInBytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemoryBlock</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>aa6d4a35c7a288f4333201f82ca52658b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>MemoryBlock &amp;</type>
      <name>operator=</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>af529a6629e2e1da15941498825093c11</anchor>
      <arglist>(const MemoryBlock &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a308c24cd090e0a90752387fba08df7c3</anchor>
      <arglist>(const MemoryBlock &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a95e5067680bd24d97e988537d93c9530</anchor>
      <arglist>(const MemoryBlock &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a5fca2456a2660c460077d73bbc7fb226</anchor>
      <arglist>(const void *data, size_t dataSize) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getData</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>ae3473f5770e3a31357c6eeb04f9cc7e8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>operator[]</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>ae75cf1dc7703f2e00589d2bee9ba9de4</anchor>
      <arglist>(const Type offset) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a7192f6e8a3f06c4476ddca1fe2ed7bfb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a447eb5fbd59a587951fe0ef8b73f2a2f</anchor>
      <arglist>(const size_t newSize, bool initialiseNewSpaceToZero=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureSize</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a62cb5792aa70e8eb83d96fce1fa7a51d</anchor>
      <arglist>(const size_t minimumSize, bool initialiseNewSpaceToZero=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillWith</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>af1a5b9c93434edf34464d4fd5b046df5</anchor>
      <arglist>(uint8 valueToUse) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>af54e9ebd64519e0b5e67ebc483a26200</anchor>
      <arglist>(const void *data, size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceWith</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>ad396877d63f2a45095535895a9b5071f</anchor>
      <arglist>(const void *data, size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>af5c3c4addd27e9c7a9adfbc0466080e2</anchor>
      <arglist>(const void *dataToInsert, size_t numBytesToInsert, size_t insertPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSection</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a7fb654675288d40483f9150ffd38e16a</anchor>
      <arglist>(size_t startByte, size_t numBytesToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a31d3f1d7a0269229c5f0c36ab0b9dc40</anchor>
      <arglist>(const void *srcData, int destinationOffset, size_t numBytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyTo</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>aacda2afa6101956c2c66ebca93c42c36</anchor>
      <arglist>(void *destData, int sourceOffset, size_t numBytes) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a9cfd6e1987101fb2903bd6988933f8ce</anchor>
      <arglist>(MemoryBlock &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>ab1624f3d46df7c3568c81d08b9c62346</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadFromHexString</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a9e3a187895669b56e43f94a6811d39b9</anchor>
      <arglist>(const String &amp;sourceHexString)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBitRange</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>af3c473a086ecae12702ef5094c4c06fa</anchor>
      <arglist>(size_t bitRangeStart, size_t numBits, int binaryNumberToApply) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBitRange</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>afd81e1ac31bef25bbb2f4dc5a6865a15</anchor>
      <arglist>(size_t bitRangeStart, size_t numBitsToRead) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toBase64Encoding</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a69724db38afce62092e39171edc77fea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromBase64Encoding</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a1195493d153f46de5f9bc8d7f78de84e</anchor>
      <arglist>(const String &amp;encodedString)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MemoryInputStream</name>
    <filename>classMemoryInputStream.html</filename>
    <base>InputStream</base>
    <member kind="function">
      <type></type>
      <name>MemoryInputStream</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>a31c23dcffd260d093e1393dc041c1645</anchor>
      <arglist>(const void *sourceData, size_t sourceDataSize, bool keepInternalCopyOfData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryInputStream</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>a27eb51bcd71517ffcc20c8f3c49481d7</anchor>
      <arglist>(const MemoryBlock &amp;data, bool keepInternalCopyOfData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemoryInputStream</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>a9ed7a136a3c0b06d98eb79c4f02acaeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getData</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>a5a63ec1c561d4fc257b0ff65907f71a6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getDataSize</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>aca7db79c18dbd0d425249aef22b22ba3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>a1dd03d5d90d73eab9adcf60a065314f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>a3b8720d99faecfe1d86b63905c6d0025</anchor>
      <arglist>(int64 pos)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>a33b7212051a112031b41ebd3cea4302f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExhausted</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>a13f93439dc9a045befd130c5da70ff49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>aa1f1cfc628b4061671930f82f72bf7b0</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MemoryMappedFile</name>
    <filename>classMemoryMappedFile.html</filename>
    <member kind="enumeration">
      <name>AccessMode</name>
      <anchorfile>classMemoryMappedFile.html</anchorfile>
      <anchor>a1fb6563237aaf7bd02f4b30f13b0e2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>readOnly</name>
      <anchorfile>classMemoryMappedFile.html</anchorfile>
      <anchor>a1fb6563237aaf7bd02f4b30f13b0e2d0adcfba7d8c4095759d308001cd11cbdc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>readWrite</name>
      <anchorfile>classMemoryMappedFile.html</anchorfile>
      <anchor>a1fb6563237aaf7bd02f4b30f13b0e2d0a600bfb19741145c6c13280a687797041</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryMappedFile</name>
      <anchorfile>classMemoryMappedFile.html</anchorfile>
      <anchor>a886747596cde69fdddd5726993aacefd</anchor>
      <arglist>(const File &amp;file, AccessMode mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemoryMappedFile</name>
      <anchorfile>classMemoryMappedFile.html</anchorfile>
      <anchor>a50f37ae28ddf9c0e57823c0b75743878</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getData</name>
      <anchorfile>classMemoryMappedFile.html</anchorfile>
      <anchor>a201023945c6c0f7d729fc68157430f41</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>classMemoryMappedFile.html</anchorfile>
      <anchor>a98d9f4380b1343520779570fbe5bf2b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MemoryOutputStream</name>
    <filename>classMemoryOutputStream.html</filename>
    <base>OutputStream</base>
    <member kind="function">
      <type></type>
      <name>MemoryOutputStream</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>ac57d1788ff3df4500ea7928900d5e8bf</anchor>
      <arglist>(size_t initialSize=256)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryOutputStream</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a21a486f75eaef9c0f01783dac034a411</anchor>
      <arglist>(MemoryBlock &amp;memoryBlockToWriteTo, bool appendToExistingBlockContent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemoryOutputStream</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a535d2b68d0309dfdf673618761d0891d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getData</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>ae55776d95c0ba0639e30145f7473602d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getDataSize</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>abedf6ef0d5e12b672e5c8dcab75f0d33</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a48022a2ed05716333bcd8da5c26b4d59</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preallocate</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>ab178f1539081ad4ca0870bf9f94e592b</anchor>
      <arglist>(size_t bytesToPreallocate)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toUTF8</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>ac148c479157c53b9c8133a3eef72c6e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a4260170787b7fe3ddf47468625898549</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MemoryBlock</type>
      <name>getMemoryBlock</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a3e00b2923ee9a93e67cf26855b75e635</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a9f055142557e0a5974e938252cb90c65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a75cfaa1821699acb524c14ed327532ad</anchor>
      <arglist>(const void *buffer, int howMany)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a590bfb36b287784157762a38de87a365</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a0e3883e02c73b379239af1cc333f3809</anchor>
      <arglist>(int64 newPosition)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeFromInputStream</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>af6f80197eb18078445c6c1c394defe8e</anchor>
      <arglist>(InputStream &amp;source, int64 maxNumBytesToWrite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRepeatedByte</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a0be46b2a4ffd644342b9d2e7cae137de</anchor>
      <arglist>(uint8 byte, int numTimesToRepeat)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MenuBarComponent</name>
    <filename>classMenuBarComponent.html</filename>
    <base>Component</base>
    <base protection="private">MenuBarModel::Listener</base>
    <base protection="private">Timer</base>
    <member kind="function">
      <type></type>
      <name>MenuBarComponent</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>afe767c3daa7001e53350f6b02954ca79</anchor>
      <arglist>(MenuBarModel *model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MenuBarComponent</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a41f0a0bf08a3d837ef5c82e447b3e199</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModel</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a3d2c0734ccc73dbb620e3576398aeb2d</anchor>
      <arglist>(MenuBarModel *newModel)</arglist>
    </member>
    <member kind="function">
      <type>MenuBarModel *</type>
      <name>getModel</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>aacd0c446393f9b02b27a478f0d464160</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showMenu</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>af24eead5eca57b4f29544c40449a4b8e</anchor>
      <arglist>(int menuIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a6600a045f5498f49d4b792bf6a44b405</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a04b11916a6f802fa44c5bff039d29220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseEnter</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>ac9fb385b5bb4da628865425da93b2d66</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseExit</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a617a6707264ce92ba88f347dfa1efedf</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a4ee001f965de4bc991124c467c19a2bc</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a52ad34e2acf2d6fc3a0bf7c88dd1e8f7</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a20446f0d4ea86e898ff99cfe61b9ba1b</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseMove</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a4731f938d4fdf8cd204fc4c31c760739</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleCommandMessage</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a436c107fbe704f6c2cd47a43922306f5</anchor>
      <arglist>(int commandId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a26b27c1eaf5cafe546ed2d4452be2861</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>menuBarItemsChanged</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a52a06b67c9621ab6022175c6559962bf</anchor>
      <arglist>(MenuBarModel *menuBarModel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>menuCommandInvoked</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a41e3e16f13a07b7e12b93126f05276f0</anchor>
      <arglist>(MenuBarModel *menuBarModel, const ApplicationCommandTarget::InvocationInfo &amp;info)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MenuBarModel</name>
    <filename>classMenuBarModel.html</filename>
    <base protection="private">AsyncUpdater</base>
    <base protection="private">ApplicationCommandManagerListener</base>
    <class kind="class">MenuBarModel::Listener</class>
    <member kind="function">
      <type></type>
      <name>MenuBarModel</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a33991bb21a029647ec0db64ab5349eff</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MenuBarModel</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a7f7348e4e1de229386474baf63a6c4d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>menuItemsChanged</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>aac9cef411b80f8b5ab1dc4572ec90019</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setApplicationCommandManagerToWatch</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>afb34b774a0e4a5575c0d4f744cf969bd</anchor>
      <arglist>(ApplicationCommandManager *manager) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a0b4940acabc597922895c33aba06aacd</anchor>
      <arglist>(Listener *listenerToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a2a7813e9ab8db041f974f42bf8e9695d</anchor>
      <arglist>(Listener *listenerToRemove) noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StringArray</type>
      <name>getMenuBarNames</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a2a42b27dc2d8e42b21b130d72b8d10c4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PopupMenu</type>
      <name>getMenuForIndex</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a500e3714cf915d27cd37bf13a79511f4</anchor>
      <arglist>(int topLevelMenuIndex, const String &amp;menuName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>menuItemSelected</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>aa64b5b9bb4ea4e7bcdc49924659936cc</anchor>
      <arglist>(int menuItemID, int topLevelMenuIndex)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applicationCommandInvoked</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a0fe4486db7cfc54e7188cbe41916ad19</anchor>
      <arglist>(const ApplicationCommandTarget::InvocationInfo &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applicationCommandListChanged</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a4c063d32d810e7e843858c8537b2f921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleAsyncUpdate</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>ae4b769f88e54074dc8e24a533e60dc1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setMacMainMenu</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a5e1edd5373bab77e60f0993f024f5c5b</anchor>
      <arglist>(MenuBarModel *newMenuBarModel, const PopupMenu *extraAppleMenuItems=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MenuBarModel *</type>
      <name>getMacMainMenu</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a69b8ff2471d5dc4651c31326bdc3ee56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const PopupMenu *</type>
      <name>getMacExtraAppleItemsMenu</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a9b1819d59a781c4aeb6e978940e224ba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MenuBarModel::Listener</name>
    <filename>classMenuBarModel_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classMenuBarModel_1_1Listener.html</anchorfile>
      <anchor>a9485d7d7bbaba159d8407d02d38ba479</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>menuBarItemsChanged</name>
      <anchorfile>classMenuBarModel_1_1Listener.html</anchorfile>
      <anchor>a32ab03020b06798d01ff472ee7305e64</anchor>
      <arglist>(MenuBarModel *menuBarModel)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>menuCommandInvoked</name>
      <anchorfile>classMenuBarModel_1_1Listener.html</anchorfile>
      <anchor>a24a09292d83e8c60e34c3396060ef66a</anchor>
      <arglist>(MenuBarModel *menuBarModel, const ApplicationCommandTarget::InvocationInfo &amp;info)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Message</name>
    <filename>classMessage.html</filename>
    <base>MessageManager::MessageBase</base>
    <member kind="typedef">
      <type>ReferenceCountedObjectPtr&lt; Message &gt;</type>
      <name>Ptr</name>
      <anchorfile>classMessage.html</anchorfile>
      <anchor>ab9d84d4a94fcfa0d345b54a7fc804977</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>classMessage.html</anchorfile>
      <anchor>a223b9a5452992205c5afd647dc3faa25</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Message</name>
      <anchorfile>classMessage.html</anchorfile>
      <anchor>a3f7275462831f787a861271687bcad67</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageListener</name>
    <filename>classMessageListener.html</filename>
    <member kind="function">
      <type></type>
      <name>MessageListener</name>
      <anchorfile>classMessageListener.html</anchorfile>
      <anchor>ac9f7a08c985ea4a1b8c2e6e2caec20f1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageListener</name>
      <anchorfile>classMessageListener.html</anchorfile>
      <anchor>a70778be12f8d64adbb571c610c412021</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classMessageListener.html</anchorfile>
      <anchor>a5174ef8bd8b5faedf4d7b96d1fd8eaf1</anchor>
      <arglist>(const Message &amp;message)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postMessage</name>
      <anchorfile>classMessageListener.html</anchorfile>
      <anchor>a70b99f10227be91c6768c07c19efec38</anchor>
      <arglist>(Message *message) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageManager</name>
    <filename>classMessageManager.html</filename>
    <class kind="class">MessageManager::MessageBase</class>
    <member kind="function">
      <type>void</type>
      <name>runDispatchLoop</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>a3084a3a75717db0f7f05604f2956ff65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopDispatchLoop</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>a283b20c2b3786537b31952670d2df7bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStopMessageBeenSent</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>a3b51c7c37417fea8c4f47ebb7913ddba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>callFunctionOnMessageThread</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>a554f81587d57127c9cb5be72aced11c1</anchor>
      <arglist>(MessageCallbackFunction *callback, void *userData)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isThisTheMessageThread</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>accd7b539b31d809c30685b3d49327322</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentThreadAsMessageThread</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>af94f78debd3b3d70acade65f50c5058e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Thread::ThreadID</type>
      <name>getCurrentMessageThread</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>aa64162d4d9711b2c299e66775b57f414</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>currentThreadHasLockedMessageManager</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>aebd4b8896d7b6bdfa34d3cd8eb2e1777</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerBroadcastListener</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>ad4ee5d1cae2b55eb45507b491489e5de</anchor>
      <arglist>(ActionListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deregisterBroadcastListener</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>a5a64dae92820a0ec102294d8ea7aa94f</anchor>
      <arglist>(ActionListener *listener)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MessageManager *</type>
      <name>getInstance</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>aea95a541b6660b7cdcc79b675879f35d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MessageManager *</type>
      <name>getInstanceWithoutCreating</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>ae890114c8f95bef376d498f633db4de2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteInstance</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>a4bdcb8bd5ef27480b49d6b1ff6ecdaa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>broadcastMessage</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>a252262c8bfe857ea77fe4e7b4b42ae80</anchor>
      <arglist>(const String &amp;messageText)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageManager::MessageBase</name>
    <filename>classMessageManager_1_1MessageBase.html</filename>
    <base>ReferenceCountedObject</base>
    <member kind="typedef">
      <type>ReferenceCountedObjectPtr&lt; MessageBase &gt;</type>
      <name>Ptr</name>
      <anchorfile>classMessageManager_1_1MessageBase.html</anchorfile>
      <anchor>a0f00522db88c06d0dae02759f197dfa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageBase</name>
      <anchorfile>classMessageManager_1_1MessageBase.html</anchorfile>
      <anchor>aa6778b8af6b43e189e8e9d5136609bdc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageBase</name>
      <anchorfile>classMessageManager_1_1MessageBase.html</anchorfile>
      <anchor>a68a883d493b6ae46b030b9f51bbc2dce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCallback</name>
      <anchorfile>classMessageManager_1_1MessageBase.html</anchorfile>
      <anchor>a3cbc8f5a0aa7496a7653fa3c0fd49232</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post</name>
      <anchorfile>classMessageManager_1_1MessageBase.html</anchorfile>
      <anchor>a492d2621be06d22e33387a169f351679</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JUCE_DECLARE_NON_COPYABLE</name>
      <anchorfile>classMessageManager_1_1MessageBase.html</anchorfile>
      <anchor>a4fedad5ce181744cf46360bc5f2a41ab</anchor>
      <arglist>(MessageBase)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageManagerLock</name>
    <filename>classMessageManagerLock.html</filename>
    <member kind="function">
      <type></type>
      <name>MessageManagerLock</name>
      <anchorfile>classMessageManagerLock.html</anchorfile>
      <anchor>a294fab36d4e9fe48cc2b52b36974111c</anchor>
      <arglist>(Thread *threadToCheckForExitSignal=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageManagerLock</name>
      <anchorfile>classMessageManagerLock.html</anchorfile>
      <anchor>ac6da971e61e376e8216da1f39ccb5582</anchor>
      <arglist>(ThreadPoolJob *jobToCheckForExitSignal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MessageManagerLock</name>
      <anchorfile>classMessageManagerLock.html</anchorfile>
      <anchor>a4d3e1ab142b50ad49e5fe60f8ae7d22f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lockWasGained</name>
      <anchorfile>classMessageManagerLock.html</anchorfile>
      <anchor>a5f3d8b6abc27aa324a882abc6e2d96ba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiBuffer</name>
    <filename>classMidiBuffer.html</filename>
    <class kind="class">MidiBuffer::Iterator</class>
    <member kind="function">
      <type></type>
      <name>MidiBuffer</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>ab65b3385b997f4f76d706687fb701f1a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiBuffer</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a15df89fc8b402a82d99c73f3591dc0bb</anchor>
      <arglist>(const MidiMessage &amp;message) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiBuffer</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a8e9e44a640dacbd0ef841f48a4d123d3</anchor>
      <arglist>(const MidiBuffer &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MidiBuffer &amp;</type>
      <name>operator=</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a647948e5c204b61dca19a56cd860a523</anchor>
      <arglist>(const MidiBuffer &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MidiBuffer</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a169f3e58f12b15d73e1372f549fe6e1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a220d909954450942ecd87a945a82e7aa</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>aacd8382869c865bb8d15c0cfffe9dff1</anchor>
      <arglist>(int start, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a028cf0791d2afd0ec4d172017b6ff428</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEvents</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a7ae34c5a596a27a6ec1e5a92552f0a1e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEvent</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>aee453648cab2b625eb222c40ec5fc37f</anchor>
      <arglist>(const MidiMessage &amp;midiMessage, int sampleNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEvent</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a196179c4d682c97aef13e18c1cf13f02</anchor>
      <arglist>(const void *rawMidiData, int maxBytesOfMidiData, int sampleNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEvents</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a9607fef1521aa115337f012cff244950</anchor>
      <arglist>(const MidiBuffer &amp;otherBuffer, int startSample, int numSamples, int sampleDeltaToAdd)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstEventTime</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a2c1a7797666709cb58f0fb3bf079df21</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastEventTime</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>aafb2fe191779749350ff2e9af66b5a12</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>aee3b10a8f86b8489feacb62adc76adae</anchor>
      <arglist>(MidiBuffer &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureSize</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>aab971f45d6443204a4ac10fc79439467</anchor>
      <arglist>(size_t minimumNumBytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiBuffer::Iterator</name>
    <filename>classMidiBuffer_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classMidiBuffer_1_1Iterator.html</anchorfile>
      <anchor>a19578e82fbfed6f1a84539a35d68dc4d</anchor>
      <arglist>(const MidiBuffer &amp;buffer) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Iterator</name>
      <anchorfile>classMidiBuffer_1_1Iterator.html</anchorfile>
      <anchor>a4b227176b60e4b8543c35da2765d7221</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextSamplePosition</name>
      <anchorfile>classMidiBuffer_1_1Iterator.html</anchorfile>
      <anchor>a46525a78fde6e0a7657f2dadcb54186b</anchor>
      <arglist>(int samplePosition) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNextEvent</name>
      <anchorfile>classMidiBuffer_1_1Iterator.html</anchorfile>
      <anchor>a895cab75c71293cf080c6b215ab3c1d9</anchor>
      <arglist>(MidiMessage &amp;result, int &amp;samplePosition) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNextEvent</name>
      <anchorfile>classMidiBuffer_1_1Iterator.html</anchorfile>
      <anchor>aa3101f440255afdb667a5cb5f728c2ab</anchor>
      <arglist>(const uint8 *&amp;midiData, int &amp;numBytesOfMidiData, int &amp;samplePosition) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiFile</name>
    <filename>classMidiFile.html</filename>
    <member kind="function">
      <type></type>
      <name>MidiFile</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a989fec6d479c0ebf68ef72224e58e894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MidiFile</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a8d14e6df12f54918a8caf500f03fd78e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTracks</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a908f8db88d0740c8de225c31660d71a0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const MidiMessageSequence *</type>
      <name>getTrack</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a334aa932bc738914eb3e1578a7ee1d7c</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTrack</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a9ff930286a6fa4531df163480b22a313</anchor>
      <arglist>(const MidiMessageSequence &amp;trackSequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>ab676af68f56e7cc8b2e0a4afdaf52d20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getTimeFormat</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a084eacf906fca71b2c9436aa1c14ed16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTicksPerQuarterNote</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>ab18143cad013db21a71735b01aef2a9f</anchor>
      <arglist>(int ticksPerQuarterNote) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSmpteTimeFormat</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>ab63f442d05b8d7c2742de4515f6e8917</anchor>
      <arglist>(int framesPerSecond, int subframeResolution) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findAllTempoEvents</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>aab69b7b893078ffe67bc810f2685492d</anchor>
      <arglist>(MidiMessageSequence &amp;tempoChangeEvents) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findAllTimeSigEvents</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>adc010123e7ae3e80c33645a977fade24</anchor>
      <arglist>(MidiMessageSequence &amp;timeSigEvents) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLastTimestamp</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a122b40184ad0593df7d08e7691a604a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFrom</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a541d03108b4bcbaf2124eee401b2d92f</anchor>
      <arglist>(InputStream &amp;sourceStream)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeTo</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a11f01512fda204cfe2e99cafc0b9179a</anchor>
      <arglist>(OutputStream &amp;destStream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertTimestampTicksToSeconds</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>af66c3497ec6109a9c7c1cf1f474c8b95</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiInput</name>
    <filename>classMidiInput.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MidiInput</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>a96b5565483632d06d8fdcc268bbfce79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>a4ac389b52419c5b59a6e28f7bbf30301</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>ad85cc3c81a13f0fae9924d6ca3881b21</anchor>
      <arglist>(const String &amp;newName) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>acecb4462174423673ffb4b4dfd5b3676</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>a5f59f07a81bbc31a4a0fefffc3978d25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>getDevices</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>ab2e0e7bb96700f9e2ecd77bc3b96d42f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getDefaultDeviceIndex</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>a2c14fc7803134015ea3718f79d4e2d55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiInput *</type>
      <name>openDevice</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>ae7bb7e3f91dfe6bda7bce3e13a3efa8e</anchor>
      <arglist>(int deviceIndex, MidiInputCallback *callback)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiInput *</type>
      <name>createNewDevice</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>af6053fd48f64d92cb2efb54c266d10c5</anchor>
      <arglist>(const String &amp;deviceName, MidiInputCallback *callback)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MidiInput</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>a309cf3495398ff178358df1f3a7d552e</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>String</type>
      <name>name</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>ac6cd3d83df95bc0e07f3a062d42972a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>internal</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>a2dafd2f0852e544ae9ea2f2a34c90762</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiInputCallback</name>
    <filename>classMidiInputCallback.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MidiInputCallback</name>
      <anchorfile>classMidiInputCallback.html</anchorfile>
      <anchor>a5636d6d55f23b03b3d443ed42609f566</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleIncomingMidiMessage</name>
      <anchorfile>classMidiInputCallback.html</anchorfile>
      <anchor>acdf6d7e27b96a50fe06922737f0d082e</anchor>
      <arglist>(MidiInput *source, const MidiMessage &amp;message)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePartialSysexMessage</name>
      <anchorfile>classMidiInputCallback.html</anchorfile>
      <anchor>a0c7e16b3fd06deebf7a79ae0ee0eed3f</anchor>
      <arglist>(MidiInput *source, const uint8 *messageData, const int numBytesSoFar, const double timestamp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiKeyboardComponent</name>
    <filename>classMidiKeyboardComponent.html</filename>
    <base>Component</base>
    <base>MidiKeyboardStateListener</base>
    <base>ChangeBroadcaster</base>
    <base protection="private">Timer</base>
    <member kind="enumeration">
      <name>Orientation</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a6f6844672df93f8f631fa7e22cf0cdaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>horizontalKeyboard</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a6f6844672df93f8f631fa7e22cf0cdafa0b62143bbab080673411400a14d6abd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>verticalKeyboardFacingLeft</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a6f6844672df93f8f631fa7e22cf0cdafa9c90bd6998f744646d80f46f7dfa80a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>verticalKeyboardFacingRight</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a6f6844672df93f8f631fa7e22cf0cdafae068b9f8ab1fd8850cdd7e3f26f8eb1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>whiteNoteColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05eabb77b95502c3687ed23bcda22e4c416d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blackNoteColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05eadaf19e83bcd2d13a33a2e84d982b3506</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>keySeparatorLineColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05ea945be9fe34d15aea642b2ab53e2ac30e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mouseOverKeyOverlayColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05ead204f469f2f66e619d2c8778ed83a5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>keyDownOverlayColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05eaca2ce853f7e9341311ff237d17f5485f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textLabelColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05ead3e09ed20f7c6c46a687e2c2e4f90fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>upDownButtonBackgroundColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05ea613cf60467dce390a9fe44ebed5e69fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>upDownButtonArrowColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05ea8d0d8a7ad3b1a2dd479172cad20839a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiKeyboardComponent</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a8272936e0d5efbd6b756cfb7028597ea</anchor>
      <arglist>(MidiKeyboardState &amp;state, Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MidiKeyboardComponent</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>abf2634c9e691e2174f86b77cf9998797</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVelocity</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a3e321405b2fa424dfe9679a23408fda3</anchor>
      <arglist>(float velocity, bool useMousePositionForVelocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMidiChannel</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a65d5ec3c781f5963c7b974c12d6aa8a2</anchor>
      <arglist>(int midiChannelNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMidiChannel</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>aa992efe4cbe130f4b5d3b2ccb7f0b287</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMidiChannelsToDisplay</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a7c9b21f928db6a8a72b7e323169bad6b</anchor>
      <arglist>(int midiChannelMask)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMidiChannelsToDisplay</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>aa8614e0abb166b2f44c2614e4c12e503</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeyWidth</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a177b5c93b812c35498e6eeeefcb1de16</anchor>
      <arglist>(float widthInPixels)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getKeyWidth</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a805bf0fa23c79b5f5b98eef0fe1333c6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a9d57fd0840c352b1db80c258b5d54fdf</anchor>
      <arglist>(Orientation newOrientation)</arglist>
    </member>
    <member kind="function">
      <type>const Orientation</type>
      <name>getOrientation</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a566d52ba1d7f9962085ff3f8bf05d7b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAvailableRange</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a8628c695cf83b8bea146722f653d12d9</anchor>
      <arglist>(int lowestNote, int highestNote)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRangeStart</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a9cff573cd06fd8d1a7c37d9ea406a032</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRangeEnd</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a9952f7894a0732a2dd97cebc8f571622</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLowestVisibleKey</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>ac9cb4b2afee773e1d29d3a39fb79de8e</anchor>
      <arglist>(int noteNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLowestVisibleKey</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a65c3893f74b575906c2b4d09e7a03fa3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlackNoteLength</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>abe40c4bd99e138ee13dae7dcb77246b6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollButtonsVisible</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a209f55725a073395da946d8cb4652f0d</anchor>
      <arglist>(bool canScroll)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getKeyStartPosition</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a54acd6b8ddd5354a23944557102c916d</anchor>
      <arglist>(const int midiNoteNumber) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearKeyMappings</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a24880c249ce33326d3bc1636b2b116a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeyPressForNote</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>ac72e50288986458d0f288f723edf9f69</anchor>
      <arglist>(const KeyPress &amp;key, int midiNoteOffsetFromC)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeKeyPressForNote</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a142da1db9d85ebdd107986d1725041e6</anchor>
      <arglist>(int midiNoteOffsetFromC)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeyPressBaseOctave</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>ad79211e120662c2ce6079e78f724209f</anchor>
      <arglist>(int newOctaveNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOctaveForMiddleC</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a0fa0517007dae385e61b92a938e5a030</anchor>
      <arglist>(int octaveNumForMiddleC)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOctaveForMiddleC</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a4409af4c9ef645c3c1d91027c98a87d0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a34e996026773931b1ec3e6615db3226a</anchor>
      <arglist>(Graphics &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a33e7b19eb98f1f8235a670df0d4fc5dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseMove</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a98f2f352e3ed87618bb027e2623234fa</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a5e9744eedfc4205a99f35604e3627e1e</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a029c01905a8fb479191009861e72eac0</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a797d67d7fcfde5db2fbc390ed6f5531b</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseEnter</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>aef727264b255d35d4e386dedbdefe503</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseExit</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a06c70c5bd38260b25e4df9c82448e37c</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>aee9ef3adcf158ddcebd7f4436a4fc8fc</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timerCallback</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a989b56c676e3b536353c49f5ceeda894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyStateChanged</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a5dd8ebe7b03af18e8a4a32e506ea8814</anchor>
      <arglist>(bool isKeyDown)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>focusLost</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a6764ad1640c9b3ab9e827929d4f25c4f</anchor>
      <arglist>(FocusChangeType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleNoteOn</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a33898a1b910d81e19062e0bd2753ae0f</anchor>
      <arglist>(MidiKeyboardState *, int midiChannel, int midiNoteNumber, float velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleNoteOff</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a27f89985df1f18dbbb85d7dd63ee8d4d</anchor>
      <arglist>(MidiKeyboardState *, int midiChannel, int midiNoteNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a671b0fa9103f6b2920bda5b7975a5bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drawWhiteNote</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a4ea196a5f3da8336e7c7f6b3dbeae3e5</anchor>
      <arglist>(int midiNoteNumber, Graphics &amp;g, int x, int y, int w, int h, bool isDown, bool isOver, const Colour &amp;lineColour, const Colour &amp;textColour)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drawBlackNote</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a5c8caf074328689d7d8d32885979d2ef</anchor>
      <arglist>(int midiNoteNumber, Graphics &amp;g, int x, int y, int w, int h, bool isDown, bool isOver, const Colour &amp;noteFillColour)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual String</type>
      <name>getWhiteNoteText</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a76583bdd62d53794c0fbdbea451a5121</anchor>
      <arglist>(const int midiNoteNumber)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drawUpDownButton</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a1bcc397745486d1576b8b1440533cbd5</anchor>
      <arglist>(Graphics &amp;g, int w, int h, const bool isMouseOver, const bool isButtonPressed, const bool movesOctavesUp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>mouseDownOnKey</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>ae89f77de00ce176aa9196009bd58755c</anchor>
      <arglist>(int midiNoteNumber, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseDraggedToKey</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>ad9ca06baaf1f9def867598e0f9ab0fff</anchor>
      <arglist>(int midiNoteNumber, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getKeyPosition</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>ad08b809c0e82d9f8de186fa96c72c60d</anchor>
      <arglist>(int midiNoteNumber, float keyWidth, int &amp;x, int &amp;w) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiKeyboardState</name>
    <filename>classMidiKeyboardState.html</filename>
    <member kind="function">
      <type></type>
      <name>MidiKeyboardState</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>a73da349edfd89275f5b26d20c9176238</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MidiKeyboardState</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>af2b02fd4e51714be242331000e8f3e11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>a32ba944d0ca8e29347abb96f24e56bf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNoteOn</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>ab99a7baab30f24ef183d08ebb0014a20</anchor>
      <arglist>(int midiChannel, int midiNoteNumber) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNoteOnForChannels</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>ac4d6b358469d1765d5ee2fd7880b7d3a</anchor>
      <arglist>(int midiChannelMask, int midiNoteNumber) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noteOn</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>a60e0e629d485466360bded04ad35025a</anchor>
      <arglist>(int midiChannel, int midiNoteNumber, float velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noteOff</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>ac81d34d008322c1c527bae2ceb2bde3b</anchor>
      <arglist>(int midiChannel, int midiNoteNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allNotesOff</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>a74515f3ac2b2f1bebd6fe5204e9eb203</anchor>
      <arglist>(int midiChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processNextMidiEvent</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>a537775e3c3b13bbd6b3195c928aae5c4</anchor>
      <arglist>(const MidiMessage &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processNextMidiBuffer</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>aa7afad38f581c129c407a4d7d069bbbb</anchor>
      <arglist>(MidiBuffer &amp;buffer, int startSample, int numSamples, bool injectIndirectEvents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>ac802282e7fde631869c854c419c66018</anchor>
      <arglist>(MidiKeyboardStateListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>a1a4eebcb383b1d4aa650757a5b2694ed</anchor>
      <arglist>(MidiKeyboardStateListener *listener)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiKeyboardStateListener</name>
    <filename>classMidiKeyboardStateListener.html</filename>
    <member kind="function">
      <type></type>
      <name>MidiKeyboardStateListener</name>
      <anchorfile>classMidiKeyboardStateListener.html</anchorfile>
      <anchor>a657137415d4965118111ee4f1b75d9cb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MidiKeyboardStateListener</name>
      <anchorfile>classMidiKeyboardStateListener.html</anchorfile>
      <anchor>afe4605c8d15e17cf8327078b6bcd2130</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleNoteOn</name>
      <anchorfile>classMidiKeyboardStateListener.html</anchorfile>
      <anchor>a0f4b54bd89239c0e184f155060a4397a</anchor>
      <arglist>(MidiKeyboardState *source, int midiChannel, int midiNoteNumber, float velocity)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleNoteOff</name>
      <anchorfile>classMidiKeyboardStateListener.html</anchorfile>
      <anchor>a7af47d0a4de9ee82f545fef3bdfe8094</anchor>
      <arglist>(MidiKeyboardState *source, int midiChannel, int midiNoteNumber)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiMessage</name>
    <filename>classMidiMessage.html</filename>
    <member kind="enumeration">
      <name>SmpteTimecodeType</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0e86db4d1186af858ad9f80d6abe96ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fps24</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0e86db4d1186af858ad9f80d6abe96abade7bcfdca717ecd009d2a10c41e77485</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fps25</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0e86db4d1186af858ad9f80d6abe96abab4a72d4e94a2431828188c3dd05df35a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fps30drop</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0e86db4d1186af858ad9f80d6abe96aba16b56e3f81f4265ffc0d553e763f6a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fps30</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0e86db4d1186af858ad9f80d6abe96aba91e489a4210c9f5cbe2a47c4d3e26194</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>MidiMachineControlCommand</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mmc_stop</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631da155f2d18fc89378f6cc9c4982db67bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mmc_play</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631da852c994c93716c792fd33ef2882174bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mmc_deferredplay</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631da07a0c0e0cc4d8a4e03b420bcdeb5e555</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mmc_fastforward</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631da2d6a145a51bd9090e99040cd90241318</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mmc_rewind</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631da8ab7de3ea5e060435d0d420630cdd40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mmc_recordStart</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631da4f684774d0aa585b94f9e8aa447ce1a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mmc_recordStop</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631da2dde82123f4aba81c023d5a07e6732cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mmc_pause</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631daea66d5cf7abc74b30cf5d529057ff301</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ab5b6fe39b57b4c39e4400b4d8e9bbbc9</anchor>
      <arglist>(int byte1, int byte2, int byte3, double timeStamp=0) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a1e4f3637ec1968b34b0aa0e87dd30d03</anchor>
      <arglist>(int byte1, int byte2, double timeStamp=0) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ac37614dc438a8adfaf335daa0c67e1db</anchor>
      <arglist>(int byte1, double timeStamp=0) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a6adcb5182a0e1446f5b9d77c9e08c7b3</anchor>
      <arglist>(const void *data, int numBytes, double timeStamp=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a93361ca01f624ea67769474d15cceca9</anchor>
      <arglist>(const void *data, int maxBytesToUse, int &amp;numBytesUsed, uint8 lastStatusByte, double timeStamp=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ad6e2e3e43fa78ef012bf87b5d7392e8a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a9e2108bbef1d0d22a6c3b7f85d765b36</anchor>
      <arglist>(const MidiMessage &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a514b3e4c76271d34c74fd83e9e82f1a2</anchor>
      <arglist>(const MidiMessage &amp;other, double newTimeStamp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a483a17987c54fd61b1e4d74fd8564357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MidiMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a3ae9ac3c147ca7a1f66f15905e37412a</anchor>
      <arglist>(const MidiMessage &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>uint8 *</type>
      <name>getRawData</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a671cb0c884424bd69023ce3ed5a8ac5e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRawDataSize</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a5768889fe63a63c58755d9d2f05afbd0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTimeStamp</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a9a942c96a776e80e3c512058b29011a8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeStamp</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ad5f9ceed74dd22e846ed0650d81f11a7</anchor>
      <arglist>(double newTimestamp) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToTimeStamp</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a49112e5cf324feff8c69e2a2d8963695</anchor>
      <arglist>(double delta) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getChannel</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a7d681b7417c52d29cb73c108ca2a83b7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isForChannel</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aaf63f62d38b5174c967164395bf05252</anchor>
      <arglist>(int channelNumber) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChannel</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ac35c11dba441d652e70720525cb2dc7f</anchor>
      <arglist>(int newChannelNumber) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSysEx</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a8412d9b5f9d717d104537b96263dbdf5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const uint8 *</type>
      <name>getSysExData</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a473aec9f7d86b602e407e6d488122fd7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSysExDataSize</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>afb6ff5014531a80589756228fe637aaa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNoteOn</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a590da92c0536e23f9d3c90c99278d789</anchor>
      <arglist>(bool returnTrueForVelocity0=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNoteOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af66814dee34738882ba39d8796b77be0</anchor>
      <arglist>(bool returnTrueForNoteOnVelocity0=true) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNoteOnOrOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0d1c1c5927eb898dbacb832f768299bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNoteNumber</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a6a5f965e98254fb026c5a20b64edcbc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoteNumber</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a47583c88bed0ca4b30b0f86bc2afb48c</anchor>
      <arglist>(int newNoteNumber) noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getVelocity</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ad5483775a661b2176687303bc9c8aac6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloatVelocity</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a07210a8a79ef89e079be89ad6e1b98ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVelocity</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>afab2cc0f59531d4aba57a0f10e9dafc4</anchor>
      <arglist>(float newVelocity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyVelocity</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a12058e7e2cb2d287241824caf6c729c7</anchor>
      <arglist>(float scaleFactor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSustainPedalOn</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a2a0b1143c544e7a107c1d86e1ac7d4c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSustainPedalOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>abb4e431332e797a548092c16c37f5ccf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSostenutoPedalOn</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a3ddae770f33da071772f3570a9dbd119</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSostenutoPedalOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa5508f9280afa255ab17b5cfc7577a5c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSoftPedalOn</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a37edc67c1113f68a3e9cb063ab7e2781</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSoftPedalOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a3fa95632707d7540c705151421de13fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProgramChange</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a89035047ec5cc9b77d8d484d4a8c9a8d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getProgramChangeNumber</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a9c200619411c253b661acee5660e4b76</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPitchWheel</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aaa504ef83e8d0c5fd8f652bf0712c4e1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPitchWheelValue</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aaa9675ccbce68b47067b512370e2ac20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAftertouch</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a08acde3017ba958b404f1b5e191c88e6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAfterTouchValue</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a623eb143fab4c07d18106c8e4e40316f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChannelPressure</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a49037c7f75318d83ab284708c682c843</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getChannelPressureValue</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa9dc36194c26bb72f35d8522f60b3ac1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isController</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ac059a2234b67e28464a519632a1b31db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getControllerNumber</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a772acb26aa7f2cdc1992210b6d2d496a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getControllerValue</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa301aa18dace968d5ebb2f809fd52522</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isControllerOfType</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af5f1b96eff37b0ca1fccfb67960e829b</anchor>
      <arglist>(int controllerType) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAllNotesOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a861beff07f9593a7711e773bcd81ba3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAllSoundOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af87b936f883b459c1e9cb87c0bfec783</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ac1ec120f33d7cb7fc186f254493cf553</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMetaEventType</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ae46c134b2808500122c73347cc07014f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const uint8 *</type>
      <name>getMetaEventData</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a7ae164759cabda66685b34961bf0073e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMetaEventLength</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a3e0156ec465f66b3333ecfbcdfe340f6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrackMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>acecc7e99f8287e851d6d944a4babc08e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEndOfTrackMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a17ea4a5fc3cb8e1b83a002797e1350e6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrackNameEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aeb18602ea05f67cad490f8866e07c172</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>afb44a1c54810b707eb0f6e108d3060f1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextFromTextMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0505068deffc2212e292144f73d44627</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTempoMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa9654c52ea08da9d76a31c93006348f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTempoMetaEventTickLength</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>abd90df7704a306f5186aa86f14978ae9</anchor>
      <arglist>(short timeFormat) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTempoSecondsPerQuarterNote</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ab4228aa759969257eae0dc29d76bd70c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTimeSignatureMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0253a501abf4ee4d2a66dcc6e8ce433c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTimeSignatureInfo</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a35ab9435cfda308abd22f6d72a5fece1</anchor>
      <arglist>(int &amp;numerator, int &amp;denominator) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isKeySignatureMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ae686c5d86fa7d04df268f56bbf853f23</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getKeySignatureNumberOfSharpsOrFlats</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a13348f90ec60de09d242265d4652711c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMidiChannelMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a15aa1d11ffbdfbe78b2a11bf6375f4f9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMidiChannelMetaEventChannel</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a04730ebdec68d3db7501e8e2c68111e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActiveSense</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>abfb16fe1f29aa68b21cbe3933c048606</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMidiStart</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aea49271c04e05ebad35131635935f469</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMidiContinue</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a8c5254f2b5450aaf1937395a7f162636</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMidiStop</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a54444e9d53fb321909cf0b5c9d1b5515</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMidiClock</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0529f082f989c25373050f04e0df2b1f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSongPositionPointer</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ae4ed73e5046837c640064c937c538a00</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSongPositionPointerMidiBeat</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a75823853d0f796d2671efa4a1b9876f1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isQuarterFrame</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a948318bbf7471f8e4ab857c43004b34c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getQuarterFrameSequenceNumber</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a9eb49c9f42a98dfd8dd9c2eb55e33afd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getQuarterFrameValue</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>acd7704a0c68987326fdd4127f77a9976</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullFrame</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a79564ccd8e9e0a46591eb2daedea8cdb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFullFrameParameters</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a47d3e7c684912a0c9993f227ef675198</anchor>
      <arglist>(int &amp;hours, int &amp;minutes, int &amp;seconds, int &amp;frames, SmpteTimecodeType &amp;timecodeType) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMidiMachineControlMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af6fcf72f3bbbf104c63da61defa42bc9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MidiMachineControlCommand</type>
      <name>getMidiMachineControlCommand</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a20f75c97a556334bce9db178c072dd27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMidiMachineControlGoto</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa9ce1a0076fb2e6c229a84bd6e2665d9</anchor>
      <arglist>(int &amp;hours, int &amp;minutes, int &amp;seconds, int &amp;frames) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>noteOn</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a24e09d2737c08842a6e4902554d2899c</anchor>
      <arglist>(int channel, int noteNumber, float velocity) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>noteOn</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a4858073a7bf29ce14fbb2f6ad7faeb86</anchor>
      <arglist>(int channel, int noteNumber, uint8 velocity) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>noteOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a69577868a75a85f4448c5a21b967a679</anchor>
      <arglist>(int channel, int noteNumber, uint8 velocity=0) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>programChange</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a72a62c7793c8f4a917bf060e7475a1e2</anchor>
      <arglist>(int channel, int programNumber) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>pitchWheel</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af0c5babd47c02dad8f8e2171e1cd662c</anchor>
      <arglist>(int channel, int position) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>aftertouchChange</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a650e86fdb73ee07e68594e9296edba45</anchor>
      <arglist>(int channel, int noteNumber, int aftertouchAmount) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>channelPressureChange</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af3100fb66d5fc20c8c0d458c51ddb309</anchor>
      <arglist>(int channel, int pressure) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>controllerEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a7c776a7b6bfa0e4216e95ff236ff250c</anchor>
      <arglist>(int channel, int controllerType, int value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>allNotesOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a8e4c49679c88dc562ca523060fffc11e</anchor>
      <arglist>(int channel) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>allSoundOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a3a56275d5dd5bebc9edba4e6ab8aa467</anchor>
      <arglist>(int channel) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>allControllersOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ac691395427e8cece84124508e8650387</anchor>
      <arglist>(int channel) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>endOfTrack</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ae6e0123d262c36aad45471dd85ed47d6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>tempoMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af9166392943b1905b39dc816aca1aa99</anchor>
      <arglist>(int microsecondsPerQuarterNote) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>timeSignatureMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a37f45d1509f385ab05b93c0795cc9fc1</anchor>
      <arglist>(int numerator, int denominator)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>midiChannelMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>afd3fc870ce448791ea794d858062435a</anchor>
      <arglist>(int channel) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>midiStart</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a32256e3ed500d65199e931575b3c7f7f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>midiContinue</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a2596bded93cb7d3d196ece8a7dee2d9b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>midiStop</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a079571d3e3e25780fa2764c33c222249</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>midiClock</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ab5cd973a73b82153aea0329933a37306</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>songPositionPointer</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0bbced4f538c6c9d1aedc03acd2fc4ab</anchor>
      <arglist>(int positionInMidiBeats) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>quarterFrame</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ab21def5ca28557f4d7df31c8425c3386</anchor>
      <arglist>(int sequenceNumber, int value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>fullFrame</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a58a16ba76b5f789b238155359ba9379c</anchor>
      <arglist>(int hours, int minutes, int seconds, int frames, SmpteTimecodeType timecodeType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>midiMachineControlCommand</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a196e608c9db1cddc57caebf241d89e1b</anchor>
      <arglist>(MidiMachineControlCommand command)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>midiMachineControlGoto</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a88a4e968bcde1ba571f3823edda75ab3</anchor>
      <arglist>(int hours, int minutes, int seconds, int frames)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>masterVolume</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a76e40b076f9b6790aa2a664e523f98f5</anchor>
      <arglist>(float volume)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>createSysExMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ae720eaa9dcb7c9085353c2c3e57a8ef2</anchor>
      <arglist>(const uint8 *sysexData, int dataSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>readVariableLengthVal</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a7a9fc08ca4beba20e50afaf91c0c316b</anchor>
      <arglist>(const uint8 *data, int &amp;numBytesUsed) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getMessageLengthFromFirstByte</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>acdb9ae9ee3d2bd531be688dfe3567855</anchor>
      <arglist>(const uint8 firstByte) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getMidiNoteName</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aff9cacd221a092d203249a2c7435d9dc</anchor>
      <arglist>(int noteNumber, bool useSharps, bool includeOctaveNumber, int octaveNumForMiddleC)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const double</type>
      <name>getMidiNoteInHertz</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a1d4f5959a4a09c74ed66d6da004c5831</anchor>
      <arglist>(int noteNumber, const double frequencyOfA=440.0) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getGMInstrumentName</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af2b7142d0355faaf6db202bf3dbe7415</anchor>
      <arglist>(int midiInstrumentNumber)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getGMInstrumentBankName</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>afe6272a51e788b7bef2ec13cc302c2dd</anchor>
      <arglist>(int midiBankNumber)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getRhythmInstrumentName</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a5af1609a1c7bcb9742bb619586081ab6</anchor>
      <arglist>(int midiNoteNumber)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getControllerName</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ab8996fa7c1ef6f7528fa462e4b85e70e</anchor>
      <arglist>(int controllerNumber)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiMessageCollector</name>
    <filename>classMidiMessageCollector.html</filename>
    <base>MidiKeyboardStateListener</base>
    <base>MidiInputCallback</base>
    <member kind="function">
      <type></type>
      <name>MidiMessageCollector</name>
      <anchorfile>classMidiMessageCollector.html</anchorfile>
      <anchor>a81989229e6c29b6f3835a961195278d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MidiMessageCollector</name>
      <anchorfile>classMidiMessageCollector.html</anchorfile>
      <anchor>a2a3b28e921806211ad3d0109f09fd8a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classMidiMessageCollector.html</anchorfile>
      <anchor>ab9f16c8ff3d5d1b45ec409a6fb297b51</anchor>
      <arglist>(double sampleRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMessageToQueue</name>
      <anchorfile>classMidiMessageCollector.html</anchorfile>
      <anchor>ad1d42045ccbc9bbc4256d08a632a8fe2</anchor>
      <arglist>(const MidiMessage &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeNextBlockOfMessages</name>
      <anchorfile>classMidiMessageCollector.html</anchorfile>
      <anchor>ac72b6cf4965e63b90d1a2402b73b1798</anchor>
      <arglist>(MidiBuffer &amp;destBuffer, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleNoteOn</name>
      <anchorfile>classMidiMessageCollector.html</anchorfile>
      <anchor>a6a3f7ed60eaf1a05335d1284afa34713</anchor>
      <arglist>(MidiKeyboardState *source, int midiChannel, int midiNoteNumber, float velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleNoteOff</name>
      <anchorfile>classMidiMessageCollector.html</anchorfile>
      <anchor>af954c579fd0f0b7487d8cf1e91478b8c</anchor>
      <arglist>(MidiKeyboardState *source, int midiChannel, int midiNoteNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleIncomingMidiMessage</name>
      <anchorfile>classMidiMessageCollector.html</anchorfile>
      <anchor>ada171e18b04834d1ec4ce61d99a8ceea</anchor>
      <arglist>(MidiInput *source, const MidiMessage &amp;message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiMessageSequence</name>
    <filename>classMidiMessageSequence.html</filename>
    <class kind="class">MidiMessageSequence::MidiEventHolder</class>
    <member kind="function">
      <type></type>
      <name>MidiMessageSequence</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a29929e2219c0e52cc7da1d0d9cef2c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessageSequence</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>af2e3263d3feb5d6108038a31438e7ff7</anchor>
      <arglist>(const MidiMessageSequence &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MidiMessageSequence &amp;</type>
      <name>operator=</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a2af719316dd49b52c772d574ef4932dc</anchor>
      <arglist>(const MidiMessageSequence &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MidiMessageSequence</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a072fd14cf8b73d09cdb54373f74f294a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a9bf65342afa0261969d2d55834798763</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEvents</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>ad127ce46ad9f2729ac65be6122413613</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MidiEventHolder *</type>
      <name>getEventPointer</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a5daa49759026952c73df867b75f9696e</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTimeOfMatchingKeyUp</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a807f23052e3ea93c614aebcbf9ee25d0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexOfMatchingKeyUp</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>af8769441eb34e726e74619fd4c5a6e56</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexOf</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a89598c42957bfc28fdb23f6fcb923e40</anchor>
      <arglist>(MidiEventHolder *event) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNextIndexAtTime</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a032d8eeebcfbec3a364a6c594e465110</anchor>
      <arglist>(double timeStamp) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStartTime</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a41860f8baaa3bac06aea74c9f66ba2d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEndTime</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a9d431f06444ae322df2556c89f4ddb9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEventTime</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a1d40da64c5a9fd61c7350346ca8c8144</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>MidiEventHolder *</type>
      <name>addEvent</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>abcfb3b7334ccd8bf72fc95e5019cddd6</anchor>
      <arglist>(const MidiMessage &amp;newMessage, double timeAdjustment=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteEvent</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a67b6db1465ea07fb7493909409d89a44</anchor>
      <arglist>(int index, bool deleteMatchingNoteUp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSequence</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a287c649d4618e657fe2fe3c54d16473a</anchor>
      <arglist>(const MidiMessageSequence &amp;other, double timeAdjustmentDelta, double firstAllowableDestTime, double endOfAllowableDestTimes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMatchedPairs</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a00ec5acfb0da6ce7cf402163f634ac54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractMidiChannelMessages</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>aef3f5fde8115f9fd4b46603f54076038</anchor>
      <arglist>(int channelNumberToExtract, MidiMessageSequence &amp;destSequence, bool alsoIncludeMetaEvents) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractSysExMessages</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>abf6f7bd5e449976caf1541a880d185b0</anchor>
      <arglist>(MidiMessageSequence &amp;destSequence) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteMidiChannelMessages</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a47466395fc2296b724defd56076cd5ed</anchor>
      <arglist>(int channelNumberToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteSysExMessages</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a9654788bd88928d6853d260d4e323e01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTimeToMessages</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a699a94796541c3935c40c93e11e29f6a</anchor>
      <arglist>(double deltaTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createControllerUpdatesForTime</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a29ab386ec48fe06f957711a3e59f9675</anchor>
      <arglist>(int channelNumber, double time, OwnedArray&lt; MidiMessage &gt; &amp;resultMessages)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a0c6208d4c8105df3825a91be780540d5</anchor>
      <arglist>(MidiMessageSequence &amp;other) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiMessageSequence::MidiEventHolder</name>
    <filename>classMidiMessageSequence_1_1MidiEventHolder.html</filename>
    <member kind="function">
      <type></type>
      <name>~MidiEventHolder</name>
      <anchorfile>classMidiMessageSequence_1_1MidiEventHolder.html</anchorfile>
      <anchor>acd4dbc9ad72a8c2d114a4e3488d103a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>MidiMessage</type>
      <name>message</name>
      <anchorfile>classMidiMessageSequence_1_1MidiEventHolder.html</anchorfile>
      <anchor>a4d9cf307bd15a6abb4e98cfe03f8f580</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MidiEventHolder *</type>
      <name>noteOffObject</name>
      <anchorfile>classMidiMessageSequence_1_1MidiEventHolder.html</anchorfile>
      <anchor>abd0fc0f7b71616c7a9f6f70b2a499de5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiOutput</name>
    <filename>classMidiOutput.html</filename>
    <base protection="private">Thread</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MidiOutput</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>a16d9a275e984ebaa7e87f56234d0d9fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendMessageNow</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>ac2f80c5930a244636efad59e6ba0f7b5</anchor>
      <arglist>(const MidiMessage &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendBlockOfMessages</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>a023c7c703b5231048767a2ab1d24193d</anchor>
      <arglist>(const MidiBuffer &amp;buffer, double millisecondCounterToStartAt, double samplesPerSecondForBuffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearAllPendingMessages</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>a964ebc950ee7c10f4f024f29a75ef1ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startBackgroundThread</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>aa8313c8ebdfc4c8425c7919643ce0085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stopBackgroundThread</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>adc5bad6deaa1df0c842155990434f68b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>getDevices</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>a59a303f5b44aa772903984818b6b7275</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getDefaultDeviceIndex</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>a5459a18d9b1b9a5fe27e95e6e9e06a87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiOutput *</type>
      <name>openDevice</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>add5366efd74e5c5ee665af4592c6b15e</anchor>
      <arglist>(int deviceIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiOutput *</type>
      <name>createNewDevice</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>a04169caa4a0c533c57a55357f2e13cc8</anchor>
      <arglist>(const String &amp;deviceName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MidiOutput</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>ac16764b0d7153689f406d2d38cf332b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>run</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>ad11ece96fe621b940d02aaa39cd74095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>internal</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>a0910f2de4bc5576874b5c6716d336c86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CriticalSection</type>
      <name>lock</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>af0ebae21888c365aa2fadc2aa8eb27c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PendingMessage *</type>
      <name>firstMessage</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>aafd2e65a8fcdc67749eca25f63c0883c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MixerAudioSource</name>
    <filename>classMixerAudioSource.html</filename>
    <base>AudioSource</base>
    <member kind="function">
      <type></type>
      <name>MixerAudioSource</name>
      <anchorfile>classMixerAudioSource.html</anchorfile>
      <anchor>aaca222da99166a5eaf439bdfd338dfca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MixerAudioSource</name>
      <anchorfile>classMixerAudioSource.html</anchorfile>
      <anchor>acecfacbc1ce17d659e96ae4c39ac6f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInputSource</name>
      <anchorfile>classMixerAudioSource.html</anchorfile>
      <anchor>a2f5ccbafaf3e746b1a219b750ddac7f2</anchor>
      <arglist>(AudioSource *newInput, bool deleteWhenRemoved)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeInputSource</name>
      <anchorfile>classMixerAudioSource.html</anchorfile>
      <anchor>abab39cc908793dc78dc7af23d1c516b2</anchor>
      <arglist>(AudioSource *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllInputs</name>
      <anchorfile>classMixerAudioSource.html</anchorfile>
      <anchor>ac2a2baaa8b0e941ae8ffe55d37cea176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classMixerAudioSource.html</anchorfile>
      <anchor>a454858132e7f87c842c01363951c0345</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classMixerAudioSource.html</anchorfile>
      <anchor>af8eda7ec97cfaf49589b7b1ec231c697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classMixerAudioSource.html</anchorfile>
      <anchor>a8e8c513e0669d92f7e42e470f0502609</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModalCallbackFunction</name>
    <filename>classModalCallbackFunction.html</filename>
    <member kind="function" static="yes">
      <type>static ModalComponentManager::Callback *</type>
      <name>create</name>
      <anchorfile>classModalCallbackFunction.html</anchorfile>
      <anchor>a47c2e0f447876fabf4644d1cae159a0f</anchor>
      <arglist>(void(*functionToCall)(int, ParamType), ParamType parameterValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ModalComponentManager::Callback *</type>
      <name>withParam</name>
      <anchorfile>classModalCallbackFunction.html</anchorfile>
      <anchor>a2330d0069d39bbb844ec75cb09bc7868</anchor>
      <arglist>(void(*functionToCall)(int, ParamType1, ParamType2), ParamType1 parameterValue1, ParamType2 parameterValue2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ModalComponentManager::Callback *</type>
      <name>forComponent</name>
      <anchorfile>classModalCallbackFunction.html</anchorfile>
      <anchor>a66fc6472aeb843617982fa7df9a83fc3</anchor>
      <arglist>(void(*functionToCall)(int, ComponentType *), ComponentType *component)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ModalComponentManager::Callback *</type>
      <name>forComponent</name>
      <anchorfile>classModalCallbackFunction.html</anchorfile>
      <anchor>a81ac9bb08f1700c1f5621339cae63f40</anchor>
      <arglist>(void(*functionToCall)(int, ComponentType *, ParamType), ComponentType *component, ParamType param)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModalComponentManager</name>
    <filename>classModalComponentManager.html</filename>
    <base>AsyncUpdater</base>
    <base>DeletedAtShutdown</base>
    <class kind="class">ModalComponentManager::Callback</class>
    <member kind="function">
      <type>int</type>
      <name>getNumModalComponents</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>a0753309ef278201323b1f2ab20a8b5ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getModalComponent</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>ae0cc69f288251b77294a0db2ae202259</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isModal</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>a680e783f606445b929f266335fee5bd4</anchor>
      <arglist>(Component *component) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFrontModalComponent</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>abd4a81dfce7204dff84cb0c7b5c85d83</anchor>
      <arglist>(Component *component) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachCallback</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>a2ce962253cf2c8e42d5575ad2a41d888</anchor>
      <arglist>(Component *component, Callback *callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bringModalComponentsToFront</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>a3e398829cf3016f4f370b21330686d1b</anchor>
      <arglist>(bool topOneShouldGrabFocus=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>juce_DeclareSingleton_SingleThreaded_Minimal</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>a60dd56d888e33d633d06f878562a59e6</anchor>
      <arglist>(ModalComponentManager)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ModalComponentManager</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>aaf0be23075467f26330a77781e1f3ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ModalComponentManager</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>a02e3e222650d2b03105246b012e3b640</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAsyncUpdate</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>a1982004cf3474cd195df01cd0cb2f772</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModalComponentManager::Callback</name>
    <filename>classModalComponentManager_1_1Callback.html</filename>
    <member kind="function">
      <type></type>
      <name>Callback</name>
      <anchorfile>classModalComponentManager_1_1Callback.html</anchorfile>
      <anchor>aca24598e184879750980c40e96fa835e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Callback</name>
      <anchorfile>classModalComponentManager_1_1Callback.html</anchorfile>
      <anchor>a58db204caa63cdda1621ff605bb98b0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>modalStateFinished</name>
      <anchorfile>classModalComponentManager_1_1Callback.html</anchorfile>
      <anchor>ad44cd3225753579084bdb3ba7bd8e625</anchor>
      <arglist>(int returnValue)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModifierKeys</name>
    <filename>classModifierKeys.html</filename>
    <member kind="enumeration">
      <name>Flags</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>noModifiers</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678bae42cb786cbb3c1d7d50c9c1f659838a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shiftModifier</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678baafc1c1b745213b6915f1932ecf0ea042</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ctrlModifier</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba1328b9c57c54ec51dbbfacb537cc737b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>altModifier</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba06a1a39ebe788d01c5d421f8f472347d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>leftButtonModifier</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba0248a87157fdf267a857b723d30f5c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rightButtonModifier</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba4676310fa50ddb14bb81722e1dd3bdd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>middleButtonModifier</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba332cb354a7b1cb322e97c6678d94ee22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>commandModifier</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba5e28f0dd247a86d9a21bdcabd644d058</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>popupMenuClickModifier</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba95a2100e9a4b1a5786b253c065936627</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>allKeyboardModifiers</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678bad234b97b656e78e1b0c500bff2618126</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>allMouseButtonModifiers</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678bac6eb27985ac385d33aa8c8ea9a261dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ctrlAltCommandModifiers</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba2647f9ed4b2db164973d8b735f3b216a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModifierKeys</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>adfcf4939ec180442da20992c50de24ae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModifierKeys</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>ab75d0460df15e0c4ba76fab270ea9623</anchor>
      <arglist>(int flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModifierKeys</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a617688714d7b3a91dc908ac9a20b249b</anchor>
      <arglist>(const ModifierKeys &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ModifierKeys &amp;</type>
      <name>operator=</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a5408c17dd7966bc0d268536da8def409</anchor>
      <arglist>(const ModifierKeys &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCommandDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a88f9e02beb40f6461d6ed8b655b7ebb3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPopupMenu</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>aedd7b0f26fdc0a2355947aadb7ecc650</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeftButtonDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a38ab832ba987f15ec2ba6ba71b6c02b7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRightButtonDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a25e86fa7211644350b4b946989d1623c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMiddleButtonDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a31d1d60335d49a8647cfc70a08f0ddbc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnyMouseButtonDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a70d85aa2a4b5908357ee626b54faff7c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnyModifierKeyDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a0484a727ea9f8de0c2f3c9ac86a64108</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isShiftDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>afd9f4558046eccad2c3a3366c6bcf6b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCtrlDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a06514fc0170112636f4582b1f997de39</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAltDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a7cb1ec2ddb92d635e19397d485874d68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ModifierKeys</type>
      <name>withOnlyMouseButtons</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a415c95f97a814d74e27e09665ee9ffb6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ModifierKeys</type>
      <name>withoutMouseButtons</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a3721a2e2f7aa8f34a3c28caa804c8356</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a01839742914728830abd2daace3091d0</anchor>
      <arglist>(const ModifierKeys &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>af7f6cb23f9d76e0548d34c5c33480475</anchor>
      <arglist>(const ModifierKeys &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRawFlags</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>ae503d7f23c5d3fa5b0318a090935d9ce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ModifierKeys</type>
      <name>withoutFlags</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a00ef202e1fad8edda50b9f4632bb64e0</anchor>
      <arglist>(int rawFlagsToClear) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ModifierKeys</type>
      <name>withFlags</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a34d981c0d9431e661b84f4685f1e37ee</anchor>
      <arglist>(int rawFlagsToSet) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testFlags</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a3bc69d9f9ec0939a79cd01992f45e1c0</anchor>
      <arglist>(const int flagsToTest) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMouseButtonsDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a2adc41db5a9ff04b6527bc6c1a656005</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ModifierKeys</type>
      <name>getCurrentModifiers</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a69b1631db7f2ec0367bfe39d2eb57398</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ModifierKeys</type>
      <name>getCurrentModifiersRealtime</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>ad174aefc02f39bf4892ef79aeb23fec4</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MouseCursor</name>
    <filename>classMouseCursor.html</filename>
    <member kind="enumeration">
      <name>StandardCursorType</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a765994c253a794c44b2a919f39738917</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NormalCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97aa05a8960e2a3e32bfad68fdcb31a1511</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WaitCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a42461326b47b05238177df410c2245f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IBeamCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97ab6611ff9b703b9a53c45745936c66393</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CrosshairCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97add4ed956814986c922cdeae70fdad9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CopyingCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97abe0154531e3b7b07ea1241be32850c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PointingHandCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a8d9a75ed7f8d15943c53fe50d584c250</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DraggingHandCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a95198e14e2dede840964e9bd4c785770</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LeftRightResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a17de630b8e7ac48222b7d4a47e80bbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpDownResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a74809dadde8902b777944cf0f9bf1eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpDownLeftRightResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a70324887aed0e0010031ef5eeea795f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopEdgeResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a715ab886dadb13d14a738c2b2709c118</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomEdgeResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97ad5aac7a930b9b99cbd426166e9f51060</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LeftEdgeResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a5c9f991872485b4ffc337a7f8d61df34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RightEdgeResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a9c5b17c307e6d6d996f09621940cabd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftCornerResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97aa0d19a1c9571c4e7ecced0c47c3227e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightCornerResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a675f05cc9819fc54c59ec30a59454321</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftCornerResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a9c0dfbb89b147f494350fd8b21558d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightCornerResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97aa1bc9fcfb9b9e0f39e513ca1fcb8392b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MouseCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>ae117c650dd31b67b0a0530c6a9299782</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MouseCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>adf26703e6d1e9a26fd7cc2d745f67d73</anchor>
      <arglist>(StandardCursorType type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MouseCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>ab5a0c9110724b59af28e8c2cbb888b5a</anchor>
      <arglist>(const Image &amp;image, int hotSpotX, int hotSpotY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MouseCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>aac0e05bc1aa9304ec96f7b19acfcae7b</anchor>
      <arglist>(const MouseCursor &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MouseCursor &amp;</type>
      <name>operator=</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a74fd0a90bf6e742c58fbbd51a04ea8d7</anchor>
      <arglist>(const MouseCursor &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MouseCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a7ceae294b75ec60291604f81efd1509d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a7d28def46b5196c4d314c97b6a547b78</anchor>
      <arglist>(const MouseCursor &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>af5779ebdab2bfe8351d1501d5fe7718e</anchor>
      <arglist>(const MouseCursor &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>showWaitCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a29d3a192ded584323597869f975faab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>hideWaitCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a4671d39f6abcc1ca73fd8d95cf1e4355</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MouseEvent</name>
    <filename>classMouseEvent.html</filename>
    <member kind="function">
      <type></type>
      <name>MouseEvent</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a5f5d08839c7caca0a15964a5ced30cd0</anchor>
      <arglist>(MouseInputSource &amp;source, const Point&lt; int &gt; &amp;position, const ModifierKeys &amp;modifiers, Component *eventComponent, Component *originator, const Time &amp;eventTime, const Point&lt; int &gt; mouseDownPos, const Time &amp;mouseDownTime, int numberOfClicks, bool mouseWasDragged) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MouseEvent</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a2fb97aee455a770a0bbd916c1504d02c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMouseDownX</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a77f87c7cebd5fbc719a9e2c89ef6b262</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMouseDownY</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a5a05bcd49bb3a9c6506f18f6dba16137</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getMouseDownPosition</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>aa253a71e1086586ade374a16c146c7c4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDistanceFromDragStart</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>afff96c10c810ab1cf5bc21b4e1b232c4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDistanceFromDragStartX</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>ae6d2098fdcf0c124ebd68fdcdb926c33</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDistanceFromDragStartY</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a07c2f2d292f919a6d8f3e31c69c5ebb3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getOffsetFromDragStart</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>ae7914aff9654e82aa14c2881f0f651fa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mouseWasClicked</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a134d8c300344a66d9a831f29270ec2e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfClicks</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a94f8d29018a8dcd1238f9e321944b118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLengthOfMousePress</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a8f67d78e40437aa67368f08c2fd8a581</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getPosition</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>af475e6f7ef2e702a72bff90f166c8161</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getScreenX</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>ad6125254b5a45897e2559dc56f9f1370</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getScreenY</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a545ee04124637ad0ad9e428ac3d97035</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getScreenPosition</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>afe462af2c2fdcbb635cebe36d19e0715</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMouseDownScreenX</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a459acd7877f6300971f8fed0d399615a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMouseDownScreenY</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a31eeda4bb4c5940e762110434428ba13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getMouseDownScreenPosition</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>aa2bb3d5a683d33c68429f8b818203560</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MouseEvent</type>
      <name>getEventRelativeTo</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a83759659994ba50b9b857a44ba51cff8</anchor>
      <arglist>(Component *newComponent) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MouseEvent</type>
      <name>withNewPosition</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a1f3717f87d9dec6da162b7d41d57ef89</anchor>
      <arglist>(const Point&lt; int &gt; &amp;newPosition) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDoubleClickTimeout</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a61131d747c89f4781a69619f5e07c535</anchor>
      <arglist>(int timeOutMilliseconds) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getDoubleClickTimeout</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a6f5b93fb2511b810505a1e47a670ca26</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>x</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>af3127333fe067df8158c9bb3da36ec84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>y</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>ad5c3872ed713f0d237898aa7307ece23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ModifierKeys</type>
      <name>mods</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>aaabc365b704e243b193b41113d4e50de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Component *const</type>
      <name>eventComponent</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a33c37dc970ab4c24e9e5b2c33e568d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Component *const</type>
      <name>originalComponent</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>abe6b50fe43981f161200d99e6d235953</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Time</type>
      <name>eventTime</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>ad2980025e848cebfad0d6ad43f61c648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MouseInputSource &amp;</type>
      <name>source</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a173d0c09a756adab9d82ebffa78df628</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MouseInputSource</name>
    <filename>classMouseInputSource.html</filename>
    <member kind="function">
      <type></type>
      <name>MouseInputSource</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a47ef93676191649ffdc9a8b6d31b20f3</anchor>
      <arglist>(int index, bool isMouseDevice)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MouseInputSource</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a739e599b83e531d0576e7de581066939</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMouse</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a4f3f5416c8ab8b0cdb88b0e6aadae306</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTouch</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>ab0418b41ec98a2958bd61774df4f9bbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canHover</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>adc671e46803c3067fb8c07c375e417a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMouseWheel</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a53cae84bba54e2533e00dec6a1789b92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>ad75daa5396d854a0fa6ec7e2b698e482</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDragging</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>aa5a7aa0c25b57d17eec69b2cb375c3e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getScreenPosition</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>af707ebee40d29c3e552d5320d86186db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ModifierKeys</type>
      <name>getCurrentModifiers</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a80bee93474362a0909fcee225621a9c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getComponentUnderMouse</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>abda8731023c5f8697a0771c5e60f91c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triggerFakeMove</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a14cec6bb08eab4074ef660db8d65ffbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfMultipleClicks</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a42bbc70e6f7a10e4cc98ff0c03a4b12e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getLastMouseDownTime</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>abb5ad7dac8b0721c935bda1c10c1fd9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getLastMouseDownPosition</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a887337ab768d46304c5cf5274061a74c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMouseMovedSignificantlySincePressed</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a351f9a0c4b526c0d2702417e54fc726a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMouseCursor</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>ad2b2d3176e07d9672e949dc88135f532</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showMouseCursor</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>acd385b3a829ec2d6a5aabb5ecedfcbce</anchor>
      <arglist>(const MouseCursor &amp;cursor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideCursor</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a61bc07273b91b328bcff92e721a2461e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>revealCursor</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>ade2da3233cdfaab0e8b6baf5671682bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forceMouseCursorUpdate</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>abb9ef3b672be6570b2345ad12fa93e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoUnboundedMovement</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a75c31f53d17ea048bf83e19e8b051ba2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableUnboundedMouseMovement</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a8289b45acc8783feb0d83898885a70b3</anchor>
      <arglist>(bool isEnabled, bool keepCursorVisibleUntilOffscreen=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleEvent</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a7948ed80ff3aea9e605620823232eb6d</anchor>
      <arglist>(ComponentPeer *, const Point&lt; int &gt; &amp;positionWithinPeer, int64 time, const ModifierKeys &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleWheel</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a9aacf0e288001bdc933ec2639d2922ac</anchor>
      <arglist>(ComponentPeer *, const Point&lt; int &gt; &amp;positionWithinPeer, int64 time, const MouseWheelDetails &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MouseListener</name>
    <filename>classMouseListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MouseListener</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>a9d4fc9354c8e4109c9b8f0d4b50dd440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseMove</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>a34327ec666304f0660d818db8281d2fd</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseEnter</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>a479dc784712648193bdc236b2c34e8bd</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseExit</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>ac35ed155e9255cebdc5c81231d963aec</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseDown</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>afebc11cdb56f49eeabc9f8b81814f9ce</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseDrag</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>a434a85e97e248920ae699a2f030bfa70</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseUp</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>ac5eb93de1cfd68a35473071df3e2e8cc</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseDoubleClick</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>a7ef5d0993f3036233f458fc88f71462c</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>afb5eae301f38f79acb6c13dcb8cb7532</anchor>
      <arglist>(const MouseEvent &amp;event, const MouseWheelDetails &amp;wheel)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MouseWheelDetails</name>
    <filename>structMouseWheelDetails.html</filename>
    <member kind="variable">
      <type>float</type>
      <name>deltaX</name>
      <anchorfile>structMouseWheelDetails.html</anchorfile>
      <anchor>a09f65902f9a85a4c035cfdd350195666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>deltaY</name>
      <anchorfile>structMouseWheelDetails.html</anchorfile>
      <anchor>af2fbbe8a59ef8e84f7bbe5a2cd441fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isReversed</name>
      <anchorfile>structMouseWheelDetails.html</anchorfile>
      <anchor>a05d876e5b384961aad49c7e310ba7203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isSmooth</name>
      <anchorfile>structMouseWheelDetails.html</anchorfile>
      <anchor>a01a4af26811a69fe0465d6797cc122d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiDocumentPanel</name>
    <filename>classMultiDocumentPanel.html</filename>
    <base>Component</base>
    <base protection="private">ComponentListener</base>
    <member kind="enumeration">
      <name>LayoutMode</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a493599178acb0ddea50f7059faa4f8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FloatingWindows</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a493599178acb0ddea50f7059faa4f8f3aa9d0aa1885d047c950adf06e10b47014</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaximisedWindowsWithTabs</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a493599178acb0ddea50f7059faa4f8f3abefd8f86bfe674ec6c95337947d3754c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDocumentPanel</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a2a3d7d745dd5cd11709ecee4102fa154</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiDocumentPanel</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>af17382f4a96ca832de343b158c59b1a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closeAllDocuments</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>acb21e02cfd0dcc0ecc9f34e85f8f4d0c</anchor>
      <arglist>(bool checkItsOkToCloseFirst)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addDocument</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a3e395d369af51814e5f8598605594883</anchor>
      <arglist>(Component *component, const Colour &amp;backgroundColour, bool deleteWhenRemoved)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closeDocument</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>adedf8a2aa07d2a92788e22ab8fa6cae4</anchor>
      <arglist>(Component *component, bool checkItsOkToCloseFirst)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDocuments</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a37014ef928560012f424dbb32cd43b03</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getDocument</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a40cd8b7b1144dd24094a51f897c835f1</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getActiveDocument</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>adedd251ed9639c354ffea9b122447ef3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActiveDocument</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a561e26068d11c7f2fedf147bec78ff53</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activeDocumentChanged</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a3359aed8eb9e6711da33f0fb032aa1b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumNumDocuments</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a60485a3e9af742aed9dcd8b93879459e</anchor>
      <arglist>(int maximumNumDocuments)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useFullscreenWhenOneDocument</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>aae57bc01df58759446d1ad745b1dd0ee</anchor>
      <arglist>(bool shouldUseTabs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullscreenWhenOneDocument</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>ac5b81c1b77e348e97fc9882e9975bf45</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLayoutMode</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>aacc7913164527f666fbc8e9f06d279fb</anchor>
      <arglist>(LayoutMode newLayoutMode)</arglist>
    </member>
    <member kind="function">
      <type>LayoutMode</type>
      <name>getLayoutMode</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a29c294685d373be1e52b9cdd7ce2c399</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a4fe91bf898e98c5f29846310184855da</anchor>
      <arglist>(const Colour &amp;newBackgroundColour)</arglist>
    </member>
    <member kind="function">
      <type>const Colour &amp;</type>
      <name>getBackgroundColour</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>af241f8902a087a4b95d7677aa1230127</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TabbedComponent *</type>
      <name>getCurrentTabbedComponent</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>ac86ed410df52f651903bf2641862bbe2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>tryToCloseDocument</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>abc45cc74d6985f3df5afb907d731d4a7</anchor>
      <arglist>(Component *component)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MultiDocumentPanelWindow *</type>
      <name>createNewDocumentWindow</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a4044246d06a86634830051c1ae93ea14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>af43d92974fd62ce6d2e37e365a4c2e59</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a3d7634287983cd7edd1fec1b068084bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentNameChanged</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>af10b150bc19bd74c0dd9a2e29436e3ca</anchor>
      <arglist>(Component &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiDocumentPanelWindow</name>
    <filename>classMultiDocumentPanelWindow.html</filename>
    <base>DocumentWindow</base>
    <member kind="function">
      <type></type>
      <name>MultiDocumentPanelWindow</name>
      <anchorfile>classMultiDocumentPanelWindow.html</anchorfile>
      <anchor>a498c18de5829f4206b6a5ba878a5da52</anchor>
      <arglist>(const Colour &amp;backgroundColour)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiDocumentPanelWindow</name>
      <anchorfile>classMultiDocumentPanelWindow.html</anchorfile>
      <anchor>aa0f4c2871d1877ec636e6def20226e1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maximiseButtonPressed</name>
      <anchorfile>classMultiDocumentPanelWindow.html</anchorfile>
      <anchor>a037c11b196c6b58af19823ade8004f0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeButtonPressed</name>
      <anchorfile>classMultiDocumentPanelWindow.html</anchorfile>
      <anchor>ab4b5a80fa095fcf5418af5743f5a63a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activeWindowStatusChanged</name>
      <anchorfile>classMultiDocumentPanelWindow.html</anchorfile>
      <anchor>ac0fe0ec780604ce71dc5e02642ca1726</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broughtToFront</name>
      <anchorfile>classMultiDocumentPanelWindow.html</anchorfile>
      <anchor>a9f12031fd8551e5945b045075ec82db6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiTimer</name>
    <filename>classMultiTimer.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiTimer</name>
      <anchorfile>classMultiTimer.html</anchorfile>
      <anchor>a6b839b0a693cfaf5e42d8274450b9a9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>timerCallback</name>
      <anchorfile>classMultiTimer.html</anchorfile>
      <anchor>a19947d3dbdb91dfef027fe566e24f6c9</anchor>
      <arglist>(int timerId)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startTimer</name>
      <anchorfile>classMultiTimer.html</anchorfile>
      <anchor>a71c3fb7914ceeaa6d8c162f132a6f6e1</anchor>
      <arglist>(int timerId, int intervalInMilliseconds) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopTimer</name>
      <anchorfile>classMultiTimer.html</anchorfile>
      <anchor>a5c71f25024a88a21920eaf6013955339</anchor>
      <arglist>(int timerId) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTimerRunning</name>
      <anchorfile>classMultiTimer.html</anchorfile>
      <anchor>a1ecac6a44d5be2bddecfa6c5a4eb56f1</anchor>
      <arglist>(int timerId) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTimerInterval</name>
      <anchorfile>classMultiTimer.html</anchorfile>
      <anchor>a34c6d12ffc86f030fe4c08e8e62082db</anchor>
      <arglist>(int timerId) const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiTimer</name>
      <anchorfile>classMultiTimer.html</anchorfile>
      <anchor>a608fc823bb95f046f439424521615dc9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiTimer</name>
      <anchorfile>classMultiTimer.html</anchorfile>
      <anchor>a50d46d7cd8889f8329e27e518bbe20e2</anchor>
      <arglist>(const MultiTimer &amp;other) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamedPipe</name>
    <filename>classNamedPipe.html</filename>
    <member kind="function">
      <type></type>
      <name>NamedPipe</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>a81946cbcb2a7d0c979f5f7e1b565b4ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NamedPipe</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>a24ff787de22c7abe0ad7b556296d3b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>openExisting</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>a7fb5d29a7fcb0ab8dada0948c5d3e536</anchor>
      <arglist>(const String &amp;pipeName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createNewPipe</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>a015797c3a8cecb5012289bece1dfe9fe</anchor>
      <arglist>(const String &amp;pipeName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>ae6b7c1b0efe76f82ca1eb90383391cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpen</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>aa9226f1d0b9da26f505b9bce3a4967b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getName</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>a97cb252834169983a8fa1eb950a82fb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>a8b81c89f81044602748c81fc073c9ac3</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead, int timeOutMilliseconds=5000)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>write</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>a5f46a13f1bf91790ff4d063220e312b5</anchor>
      <arglist>(const void *sourceBuffer, int numBytesToWrite, int timeOutMilliseconds=2000)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelPendingReads</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>a4521d38b599081da3f02e1468dac6445</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamedValueSet</name>
    <filename>classNamedValueSet.html</filename>
    <member kind="function">
      <type></type>
      <name>NamedValueSet</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a7c23ef1e536e90700bde50433c839597</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NamedValueSet</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a7336357ad76cf764e20876ca430cc7f9</anchor>
      <arglist>(const NamedValueSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>NamedValueSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a140bdc23733578508f19f033a531865a</anchor>
      <arglist>(const NamedValueSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NamedValueSet</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a927f2cf592dfd32511bdfae167d8bac1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a0e9f7ad7b581fbd979256cb8b1feb14d</anchor>
      <arglist>(const NamedValueSet &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a664080b7c38c83120cfeb03d329f854b</anchor>
      <arglist>(const NamedValueSet &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>ad9f9066eed12be3d9e569c5181d05edd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const var &amp;</type>
      <name>operator[]</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>ac672c75d86b6d9ff63c9a26ee8842e56</anchor>
      <arglist>(const Identifier &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>getWithDefault</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a76fd6393abbc48a3745987047945fa9f</anchor>
      <arglist>(const Identifier &amp;name, const var &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a84ff59604170b019e51bb1342cc87374</anchor>
      <arglist>(const Identifier &amp;name, const var &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>aaf6843642bec8cc38921d16923e4f6fe</anchor>
      <arglist>(const Identifier &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a62fbe8b7c2d1b2b86d4c4c0c9f733a3d</anchor>
      <arglist>(const Identifier &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const Identifier</type>
      <name>getName</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a0aa96e28770071f76de5d6ed748057bd</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>const var &amp;</type>
      <name>getValueAt</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a2aa0a75c369f0cf64122231ab3a005c6</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>ae879588edbc9473e4185f03b4882f0c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>var *</type>
      <name>getVarPointer</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a0f306cf06a0b33496e4c02ee823b9a12</anchor>
      <arglist>(const Identifier &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromXmlAttributes</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a24d5f91b609b274f1c6f9ac2e2dba2ff</anchor>
      <arglist>(const XmlElement &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToXmlAttributes</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a6770b9b01d38beb5a0a5888a59558239</anchor>
      <arglist>(XmlElement &amp;xml) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NativeImageType</name>
    <filename>classNativeImageType.html</filename>
    <base>ImageType</base>
    <member kind="function">
      <type></type>
      <name>NativeImageType</name>
      <anchorfile>classNativeImageType.html</anchorfile>
      <anchor>a55b2d128303a0a60a8a44490c64b87b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NativeImageType</name>
      <anchorfile>classNativeImageType.html</anchorfile>
      <anchor>a4693a40068bb9c18e2c76b9ee5d43d63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ImagePixelData *</type>
      <name>create</name>
      <anchorfile>classNativeImageType.html</anchorfile>
      <anchor>aebeee9c8acd83a5cca8f06cb45d7d715</anchor>
      <arglist>(Image::PixelFormat, int width, int height, bool clearImage) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTypeID</name>
      <anchorfile>classNativeImageType.html</anchorfile>
      <anchor>ac5b4dba740b3adf19dd209787c458920</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NativeMessageBox</name>
    <filename>classNativeMessageBox.html</filename>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>showMessageBoxAsync</name>
      <anchorfile>classNativeMessageBox.html</anchorfile>
      <anchor>a426e0c4004372a4bdc3caee486584870</anchor>
      <arglist>(AlertWindow::AlertIconType iconType, const String &amp;title, const String &amp;message, Component *associatedComponent=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>showOkCancelBox</name>
      <anchorfile>classNativeMessageBox.html</anchorfile>
      <anchor>ae72c4205e185098490f80d08d369d766</anchor>
      <arglist>(AlertWindow::AlertIconType iconType, const String &amp;title, const String &amp;message, Component *associatedComponent, ModalComponentManager::Callback *callback)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int JUCE_CALLTYPE</type>
      <name>showYesNoCancelBox</name>
      <anchorfile>classNativeMessageBox.html</anchorfile>
      <anchor>aab0aca5c960cf8185314c4302e60c2df</anchor>
      <arglist>(AlertWindow::AlertIconType iconType, const String &amp;title, const String &amp;message, Component *associatedComponent, ModalComponentManager::Callback *callback)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NewLine</name>
    <filename>classNewLine.html</filename>
    <member kind="function">
      <type></type>
      <name>operator String</name>
      <anchorfile>classNewLine.html</anchorfile>
      <anchor>ad55b998afedeb2eb8b99335e8c43d94f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getDefault</name>
      <anchorfile>classNewLine.html</anchorfile>
      <anchor>ab07d21b3c535b0bf3897893cc87b765e</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NSViewComponent</name>
    <filename>classNSViewComponent.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>NSViewComponent</name>
      <anchorfile>classNSViewComponent.html</anchorfile>
      <anchor>a47f7a2b57ee9175115e1d8c5206e191f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NSViewComponent</name>
      <anchorfile>classNSViewComponent.html</anchorfile>
      <anchor>a8b7861229080258227eba895b5925bac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setView</name>
      <anchorfile>classNSViewComponent.html</anchorfile>
      <anchor>a8768c07d38bf12419b1a77cd42625e8e</anchor>
      <arglist>(void *nsView)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getView</name>
      <anchorfile>classNSViewComponent.html</anchorfile>
      <anchor>a45bc5a9f0a80c60342bd0fd93814feb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeToFitView</name>
      <anchorfile>classNSViewComponent.html</anchorfile>
      <anchor>a3d7466089ae77b3428df1986f89ad949</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classNSViewComponent.html</anchorfile>
      <anchor>aa0aa6e02e2b9fe5979c33b04079daec0</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReferenceCountedObject *</type>
      <name>attachViewToComponent</name>
      <anchorfile>classNSViewComponent.html</anchorfile>
      <anchor>a5b009937017986682dea33c7d8f4290c</anchor>
      <arglist>(Component &amp;, void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OggVorbisAudioFormat</name>
    <filename>classOggVorbisAudioFormat.html</filename>
    <base>AudioFormat</base>
    <member kind="function">
      <type></type>
      <name>OggVorbisAudioFormat</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a069365393c5a09e13e0042f4660d8cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OggVorbisAudioFormat</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a0aa819bec4c3a8187581859a2d104f2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleSampleRates</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>af0143029ae84af173ee4a9995e7e5469</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleBitDepths</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>ac35ce864b3108466333a44c7b1ae583a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoStereo</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a37803a62de64e1e66fd7dd46779a87b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoMono</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a0175b820d411c525193092b624f500ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a436e1078eeef3c51cc79821687265bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getQualityOptions</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a837a572007d3bc809f94e997d5a2919c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>estimateOggFileQuality</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>aa9f91556cc01ecd9583c85d398d43ccb</anchor>
      <arglist>(const File &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>aa5043ce81c40a5341f37d18e8e40a888</anchor>
      <arglist>(InputStream *sourceStream, bool deleteStreamIfOpeningFails)</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatWriter *</type>
      <name>createWriterFor</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a87b8c15723851a409183055e9b21871f</anchor>
      <arglist>(OutputStream *streamToWriteTo, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>encoderName</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a1c97a40ce37de0766efdaec9b1d4fcb5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OldSchoolLookAndFeel</name>
    <filename>classOldSchoolLookAndFeel.html</filename>
    <base>LookAndFeel</base>
    <member kind="function">
      <type></type>
      <name>OldSchoolLookAndFeel</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>a932c5dd22c37bafac5c0d37efcb36e4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OldSchoolLookAndFeel</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>a26c5c0f7c91dcef50cf71f99717f8131</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawButtonBackground</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>a6a4222a184f07b37370e186cc9a47b7b</anchor>
      <arglist>(Graphics &amp;g, Button &amp;button, const Colour &amp;backgroundColour, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawToggleButton</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>a046e825e7f86e11ed92d9e4f78cec30d</anchor>
      <arglist>(Graphics &amp;g, ToggleButton &amp;button, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawTickBox</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>a4982b967305de6030149daa290489004</anchor>
      <arglist>(Graphics &amp;g, Component &amp;component, float x, float y, float w, float h, bool ticked, bool isEnabled, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawProgressBar</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>a2dfcc7dc9af86a66cfbbcd4b32fc9657</anchor>
      <arglist>(Graphics &amp;g, ProgressBar &amp;progressBar, int width, int height, double progress, const String &amp;textToShow)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawScrollbarButton</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>a28db27368dccce5514eda05d0776a7df</anchor>
      <arglist>(Graphics &amp;g, ScrollBar &amp;scrollbar, int width, int height, int buttonDirection, bool isScrollbarVertical, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawScrollbar</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>ac4d100fc1a7b55d9a4b90637dde9c670</anchor>
      <arglist>(Graphics &amp;g, ScrollBar &amp;scrollbar, int x, int y, int width, int height, bool isScrollbarVertical, int thumbStartPosition, int thumbSize, bool isMouseOver, bool isMouseDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ImageEffectFilter *</type>
      <name>getScrollbarEffect</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>a78ecb06a6b72a19498ba0219dd82aff1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawTextEditorOutline</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>a68fcc1b9b94ac20326ce3b431c41f310</anchor>
      <arglist>(Graphics &amp;g, int width, int height, TextEditor &amp;textEditor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawPopupMenuBackground</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>aea8ed31c8ca9a471305202100e4c0eb4</anchor>
      <arglist>(Graphics &amp;g, int width, int height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawMenuBarBackground</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>aa700a92577590a67ebaa0b367b3bb155</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isMouseOverBar, MenuBarComponent &amp;menuBar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawComboBox</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>ade7d4f86e3f891a150f1d08d04ef6999</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isButtonDown, int buttonX, int buttonY, int buttonW, int buttonH, ComboBox &amp;box)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Font</type>
      <name>getComboBoxFont</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>af59ba53c408b3ed008cd8ae5fe767137</anchor>
      <arglist>(ComboBox &amp;box)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawLinearSlider</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>aed94be7dc3dd3ace3a591c3832f2ecb4</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle style, Slider &amp;slider)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSliderThumbRadius</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>a2512848fd19630b5fb7879ca6488d8e9</anchor>
      <arglist>(Slider &amp;slider)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Button *</type>
      <name>createSliderButton</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>ac748dec1d571490be5b37cf60589a8e7</anchor>
      <arglist>(bool isIncrement)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ImageEffectFilter *</type>
      <name>getSliderEffect</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>a4abcefc57ac29ec5c0491ff7bb6d8672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawCornerResizer</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>a1c403174e2d8e1f43536095e3affe1eb</anchor>
      <arglist>(Graphics &amp;g, int w, int h, bool isMouseOver, bool isMouseDragging)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Button *</type>
      <name>createDocumentWindowButton</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>a5965e67f47fa425476658a68a0f64a07</anchor>
      <arglist>(int buttonType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>positionDocumentWindowButtons</name>
      <anchorfile>classOldSchoolLookAndFeel.html</anchorfile>
      <anchor>a5d72da56e91ad876d6189370684f3f51</anchor>
      <arglist>(DocumentWindow &amp;window, int titleBarX, int titleBarY, int titleBarW, int titleBarH, Button *minimiseButton, Button *maximiseButton, Button *closeButton, bool positionTitleBarButtonsOnLeft)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLContext</name>
    <filename>classOpenGLContext.html</filename>
    <member kind="function">
      <type></type>
      <name>OpenGLContext</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a9be23e3642f28848a26cd00669f0b4d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpenGLContext</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>ac1f6be39c9063b52dcfa60b94a2e5407</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a86200f93699fb5003290409ca78834cd</anchor>
      <arglist>(OpenGLRenderer *rendererToUse) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComponentPaintingEnabled</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>aaa4cf6bbdb662b106cd44c203b8abb1a</anchor>
      <arglist>(bool shouldPaintComponent) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixelFormat</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>aeb49920c5ee4e4694fa4cbd1700b2acb</anchor>
      <arglist>(const OpenGLPixelFormat &amp;preferredPixelFormat) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNativeSharedContext</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a0129ecf603a0cc3034e4809a23812e4a</anchor>
      <arglist>(void *nativeContextToShareWith) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachTo</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>ac2ea1a7ce8af65c40b5b8ab757cd7d38</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>detach</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a7504aa8928c854732090ee9583e9f37d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAttached</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>ac2a9392e74c56fd8a0ee45d1a845b0f0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getTargetComponent</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a0079c44b081f30fb0ace2396a95df343</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triggerRepaint</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>acc0fc11c02ebbe4af1cc234eb5d8b84a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWidth</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>ab0dbe65f07e7c58e8d201cb2c9a5cf5b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeight</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a54c0ce3fdb77c5daa797f964292e94ea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getFrameBufferID</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a39b86efe11ffe091002d530d302e14bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areShadersAvailable</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>ab0bb8babf0f652ea2b7b10f0fec9f6e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedObject *</type>
      <name>getAssociatedObject</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a0ffa091388991ffc98bbb5800fd27c6f</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAssociatedObject</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a51ee6e2d70c172820a4fb26722497892</anchor>
      <arglist>(const char *name, ReferenceCountedObject *newObject)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeActive</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a318c8cc5821b9b2b2a9f726c623385f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a5c5bce957be244229d9293d3303bff40</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapBuffers</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a909377fc5880a61d28db1909b8d09e03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setSwapInterval</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a046fe0f0de71000ee940d825d5dc57e0</anchor>
      <arglist>(int numFramesPerSwap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSwapInterval</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a232ce6c0583e57a2de19293a1d8f2b53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getRawContext</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a9b9d12cc339f3f12124f4a3e54d5502c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyTexture</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a741c7ec4a5663cb1262b5866e474051d</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;targetClipArea, const Rectangle&lt; int &gt; &amp;anchorPosAndTextureSize, int contextWidth, int contextHeight)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OpenGLContext *</type>
      <name>getCurrentContext</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>af7e84e07e6f1228a865915ca21500f7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deactivateCurrentContext</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a5a3ece9be728d97e0343ae17a71f6562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>OpenGLExtensionFunctions</type>
      <name>extensions</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a3e204724fd78bbc272023525226caad7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLFrameBuffer</name>
    <filename>classOpenGLFrameBuffer.html</filename>
    <member kind="function">
      <type></type>
      <name>OpenGLFrameBuffer</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>af5f4e38ebde519cfc622c2974a178fa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpenGLFrameBuffer</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a0353b27f81bcbfce7c082edb92113c87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialise</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a9c82878ad5e372520f54850ad003e70b</anchor>
      <arglist>(OpenGLContext &amp;context, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialise</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a3a86ab42869faddff776592237f8b75d</anchor>
      <arglist>(OpenGLContext &amp;context, const Image &amp;content)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialise</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>aeb1ae1995cba538bb80eb641002284dc</anchor>
      <arglist>(OpenGLFrameBuffer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>ad0fb8042d11e0f5ef21fe849a49934c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveAndRelease</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a305620bbc8c79ddd56eac1f86f5ad83f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reloadSavedCopy</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a576d1098a75f4920154f3a86aca674e2</anchor>
      <arglist>(OpenGLContext &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a758216848531f9efba00b9de0db2b115</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWidth</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a64e6b7be4b8c0c7ef193cbc4f9048bac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeight</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>aef7b0a24ea20cb2aeba691438774f2eb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>getTextureID</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a0922e9dba74f72e5872ac084d66899bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeCurrentRenderingTarget</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a12be24f97f7201217e15c938976c1d9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseAsRenderingTarget</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a355580e4de5033cc12fdfd533cced6e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>getFrameBufferID</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a079b045226ca5c89a2f6c0ebbba2b043</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>aadaa274c7a7dff776d8472949165754d</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCurrentAndClear</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a7b3c717399bd4e547c7197566a4e8f4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readPixels</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a9445383f62fc16bcee3ffe536fa1840a</anchor>
      <arglist>(PixelARGB *targetData, const Rectangle&lt; int &gt; &amp;sourceArea)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writePixels</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a9ed7bad2e3b33d265d9795460bb65a0f</anchor>
      <arglist>(const PixelARGB *srcData, const Rectangle&lt; int &gt; &amp;targetArea)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GLuint</type>
      <name>getCurrentFrameBufferTarget</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a25a1660bed811455d7236778d47cf558</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLHelpers</name>
    <filename>classOpenGLHelpers.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetErrorState</name>
      <anchorfile>classOpenGLHelpers.html</anchorfile>
      <anchor>acad5e92d97154f3df22079b7d457b946</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isContextActive</name>
      <anchorfile>classOpenGLHelpers.html</anchorfile>
      <anchor>aeb9c20e316e3aa59046a4fe4cb2562f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clear</name>
      <anchorfile>classOpenGLHelpers.html</anchorfile>
      <anchor>a334292fc4e4e1057af0d0a619b4adc4b</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableScissorTest</name>
      <anchorfile>classOpenGLHelpers.html</anchorfile>
      <anchor>afac7dc44d740ad66e63ca542e634ffb7</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;clip)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isExtensionSupported</name>
      <anchorfile>classOpenGLHelpers.html</anchorfile>
      <anchor>aacd6d5297748a8691b42851f094a161c</anchor>
      <arglist>(const char *extensionName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getExtensionFunction</name>
      <anchorfile>classOpenGLHelpers.html</anchorfile>
      <anchor>a6004f344c666ff693af0b3cc773379e4</anchor>
      <arglist>(const char *functionName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLImageType</name>
    <filename>classOpenGLImageType.html</filename>
    <base>ImageType</base>
    <member kind="function">
      <type></type>
      <name>OpenGLImageType</name>
      <anchorfile>classOpenGLImageType.html</anchorfile>
      <anchor>a9158fe7f0de1aa2e13621c364cfb026f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpenGLImageType</name>
      <anchorfile>classOpenGLImageType.html</anchorfile>
      <anchor>a8db6145ec52246c98d648ded1212e776</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ImagePixelData *</type>
      <name>create</name>
      <anchorfile>classOpenGLImageType.html</anchorfile>
      <anchor>a30b4d8d38bec8cbbf3e12a86c4aab381</anchor>
      <arglist>(Image::PixelFormat, int width, int height, bool shouldClearImage) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTypeID</name>
      <anchorfile>classOpenGLImageType.html</anchorfile>
      <anchor>ad0a481e876b3d6df8d7987efdaeaf534</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OpenGLFrameBuffer *</type>
      <name>getFrameBufferFrom</name>
      <anchorfile>classOpenGLImageType.html</anchorfile>
      <anchor>aa214a2830f6d276ef8052d9101b64be4</anchor>
      <arglist>(const Image &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLPixelFormat</name>
    <filename>classOpenGLPixelFormat.html</filename>
    <member kind="function">
      <type></type>
      <name>OpenGLPixelFormat</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>a84d896731b8af1e1382217504f27489f</anchor>
      <arglist>(int bitsPerRGBComponent=8, int alphaBits=8, int depthBufferBits=16, int stencilBufferBits=0) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>a378a5f981c01edb64d8b6da98268f247</anchor>
      <arglist>(const OpenGLPixelFormat &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>af51efcde60a4dfccb855d58421704f22</anchor>
      <arglist>(const OpenGLPixelFormat &amp;) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>redBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>ae35395197ac66ebfed1a94d1748a20b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>greenBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>a75cc537f0d7ad936b3353426735515dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>blueBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>a309d74a66aa876591508d76573597a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>alphaBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>a4d947e7a9831d9158f2a0b519d7d3497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>depthBufferBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>a9783fd7c1c9d5ade28eac2eb7c710be4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stencilBufferBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>aa94f3f667e41465ea29b6f259d9abf8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>accumulationBufferRedBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>a1b07ee8f12cbb9c8b4671fa29c326490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>accumulationBufferGreenBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>a473582e91fe1a2c9c1585185ee57e03c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>accumulationBufferBlueBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>abc38758c1e8b54f5002a0518c78c328d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>accumulationBufferAlphaBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>aa3bfc867775483eed692c117c44c4da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>multisamplingLevel</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>afa2032cde8affb7698f038ba5784365a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLRenderer</name>
    <filename>classOpenGLRenderer.html</filename>
    <member kind="function">
      <type></type>
      <name>OpenGLRenderer</name>
      <anchorfile>classOpenGLRenderer.html</anchorfile>
      <anchor>a90d45fb2cbf2da8cb3c08a37017e4e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenGLRenderer</name>
      <anchorfile>classOpenGLRenderer.html</anchorfile>
      <anchor>ab6fd461baede4109c301bccf72b393e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>newOpenGLContextCreated</name>
      <anchorfile>classOpenGLRenderer.html</anchorfile>
      <anchor>a59d6279104b47109cf2042b13ae5b61d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>renderOpenGL</name>
      <anchorfile>classOpenGLRenderer.html</anchorfile>
      <anchor>a34077b4eaeb3207814b9e4302f724912</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>openGLContextClosing</name>
      <anchorfile>classOpenGLRenderer.html</anchorfile>
      <anchor>ad943c5ed2b9962d5de71f668d1ddf0d7</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLShaderProgram</name>
    <filename>classOpenGLShaderProgram.html</filename>
    <class kind="struct">OpenGLShaderProgram::Attribute</class>
    <class kind="struct">OpenGLShaderProgram::Uniform</class>
    <member kind="function">
      <type></type>
      <name>OpenGLShaderProgram</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a4b7d074fc9555e8211e1f97c1d51c3db</anchor>
      <arglist>(const OpenGLContext &amp;context) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpenGLShaderProgram</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>ab26f88e24d7a98c01ad9f5e437032934</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addShader</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a6e6acb04b6359c5945d3c5697db7e58d</anchor>
      <arglist>(const char *const shaderSourceCode, GLenum shaderType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>link</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a930959c2890c748a91cb8a72aee9814a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getLastError</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a946971889421f0d006b0618aa12efc5b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>use</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a13af8ca28514261f1ca5252300d3c620</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getLanguageVersion</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a77d9d36da09b9cc5b19439bb1215886b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GLuint</type>
      <name>programID</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a38ef3b4dabb242d53c470fe5464895c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenGLShaderProgram::Attribute</name>
    <filename>structOpenGLShaderProgram_1_1Attribute.html</filename>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>structOpenGLShaderProgram_1_1Attribute.html</anchorfile>
      <anchor>a949a6c57085f3560a269f6980df43bfe</anchor>
      <arglist>(const OpenGLShaderProgram &amp;program, const char *attributeName)</arglist>
    </member>
    <member kind="variable">
      <type>GLint</type>
      <name>attributeID</name>
      <anchorfile>structOpenGLShaderProgram_1_1Attribute.html</anchorfile>
      <anchor>a6b26b5a68acd30c40d2eb18861178f71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenGLShaderProgram::Uniform</name>
    <filename>structOpenGLShaderProgram_1_1Uniform.html</filename>
    <member kind="function">
      <type></type>
      <name>Uniform</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a1c2e8f310fb8b3a45f60d3958567d922</anchor>
      <arglist>(const OpenGLShaderProgram &amp;program, const char *uniformName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a551ac717f9a07475a90a946fcee4b678</anchor>
      <arglist>(GLfloat n1) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a9e9a72c89c17177058e7cc1dac62fa4e</anchor>
      <arglist>(GLint n1) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a792601dce4900e051a3a307f4e847c81</anchor>
      <arglist>(GLfloat n1, GLfloat n2) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a63840b8d3c88fef18f6874aef4e2aba2</anchor>
      <arglist>(GLfloat n1, GLfloat n2, GLfloat n3) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a826fc9e0ec6724c838364b437fa89381</anchor>
      <arglist>(GLfloat n1, GLfloat n2, GLfloat n3, float n4) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a71fa625325e9803862e19c99ce8bd4e5</anchor>
      <arglist>(GLint n1, GLint n2, GLint n3, GLint n4) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a67b7aef1b7fb35f9e41e7ce5d3659321</anchor>
      <arglist>(const GLfloat *values, int numValues) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>GLint</type>
      <name>uniformID</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>ab2cb023f92dbba1890dea2f659a1a2be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLTexture</name>
    <filename>classOpenGLTexture.html</filename>
    <member kind="function">
      <type></type>
      <name>OpenGLTexture</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>ab3e52d6d7280b58ea59b44d0f25276ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpenGLTexture</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a82ab7632d24a0e3944081da73b6ebe48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadImage</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a93c27d490ac810bc0faef0796aa05bc4</anchor>
      <arglist>(const Image &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadARGB</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a37149e28fdc88f6b035d69a8f2aa8cd1</anchor>
      <arglist>(const PixelARGB *pixels, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadARGBFlipped</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a7b59d2d5bca69d574c2c5a5ec7d231c6</anchor>
      <arglist>(const PixelARGB *pixels, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadAlpha</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a7340ece8acc539716217e3aed7019c33</anchor>
      <arglist>(const uint8 *pixels, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>aa840e7e3f919cc5f0999e1b5678b32e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a3f2cf791f05bf2e1a6aa74f772db3bb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unbind</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a1965be2042f9295215da58be76fc4b18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>getTextureID</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a9db86d4e3c10d150a02c51fc0cbfd0a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWidth</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a3c1625836c8fdbbba8703e7d5a523a67</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeight</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>afd26edbf065e2d8e1bd60263be1b9893</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidSize</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>ac24eef177f28a924d45f66c5b4121da6</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLTextureFromImage</name>
    <filename>classOpenGLTextureFromImage.html</filename>
    <member kind="function">
      <type></type>
      <name>OpenGLTextureFromImage</name>
      <anchorfile>classOpenGLTextureFromImage.html</anchorfile>
      <anchor>a28983fd100832d5e2d58994a49476829</anchor>
      <arglist>(const Image &amp;image)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpenGLTextureFromImage</name>
      <anchorfile>classOpenGLTextureFromImage.html</anchorfile>
      <anchor>a5a3a6aa29defb00ce8814f831cdeb536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GLuint</type>
      <name>textureID</name>
      <anchorfile>classOpenGLTextureFromImage.html</anchorfile>
      <anchor>accd4019f24dad0cdbac308f39582aa02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>imageWidth</name>
      <anchorfile>classOpenGLTextureFromImage.html</anchorfile>
      <anchor>a08dd0a5e0054911e111754a0d396c193</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>imageHeight</name>
      <anchorfile>classOpenGLTextureFromImage.html</anchorfile>
      <anchor>adb466272b48daf5b2677f0a436c1f150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fullWidthProportion</name>
      <anchorfile>classOpenGLTextureFromImage.html</anchorfile>
      <anchor>aa4ed56bf93012c120ed64c2101ab1fe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fullHeightProportion</name>
      <anchorfile>classOpenGLTextureFromImage.html</anchorfile>
      <anchor>a6ed4364b74838dd77850d37a86aa58b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OptionalScopedPointer</name>
    <filename>classOptionalScopedPointer.html</filename>
    <templarg>ObjectType</templarg>
    <member kind="function">
      <type></type>
      <name>OptionalScopedPointer</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a8b96c6f59b68c8fe8880bc986fe90458</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalScopedPointer</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a3ea2cd6ce97953c223ac0ab3789f9127</anchor>
      <arglist>(ObjectType *objectToHold, bool takeOwnership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalScopedPointer</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a3c0f0be46c674d4b4082ed6c56ad41d8</anchor>
      <arglist>(OptionalScopedPointer &amp;objectToTransferFrom)</arglist>
    </member>
    <member kind="function">
      <type>OptionalScopedPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a8f773129ee4e44990551b34faf5d0dd5</anchor>
      <arglist>(OptionalScopedPointer &amp;objectToTransferFrom)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OptionalScopedPointer</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a0e0508d3dc7dd9603e001cb72191ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ObjectType *</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a45f1f538ffab217fabca41e5271593cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>get</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a0424e95b5edea332aadada60cb1296ed</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType &amp;</type>
      <name>operator*</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>af1d540a292b283a1c72cba4e59d11a19</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a0f713a23c5a7c8ee6d668109441d0d09</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>release</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>acf99bfb609b72988d875d1091af6cb42</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>ae30fe3a7e3ff51f427056ab155dbafd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>ae526986fb0292d7b3623687e52b96fb7</anchor>
      <arglist>(ObjectType *newObject, bool takeOwnership)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>willDeleteObject</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a0eb696aae75b039bc1309dc7125bda7a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a378381bc4cb56b452de6eb198a796fbb</anchor>
      <arglist>(OptionalScopedPointer&lt; ObjectType &gt; &amp;other) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OutputStream</name>
    <filename>classOutputStream.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutputStream</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a3c3286bd6c6c8fb6b16ce7f88745075b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a2b731aef87084c3779bea292f85e800d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setPosition</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>ae95d7b4edfe5eac6a0913b079684572a</anchor>
      <arglist>(int64 newPosition)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>getPosition</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a84ec99ccacf0326e79070d34f178e3d3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a1faf408b0fb2a78154a2a91b5fdd0707</anchor>
      <arglist>(const void *dataToWrite, int numberOfBytes)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeByte</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>af6e56ede656380fcf5c626cf7e2ab53e</anchor>
      <arglist>(char byte)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeBool</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a44a60476e253aa1c09672ed44345f67a</anchor>
      <arglist>(bool boolValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeShort</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a7a717c783d754a41476010d2d6d3ecce</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeShortBigEndian</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a2a4b014cd119b55b31a35f1f36bb11ef</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeInt</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a9d610fb0f6ef5ad5a6f5378ff2fed680</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeIntBigEndian</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>abbc6cb41c28adc80a397a81b8fac7376</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeInt64</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a29dd180c396618746b61ac4cc107f85e</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeInt64BigEndian</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a346aaac04d10b2fc263633ef9400f8dd</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeFloat</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>ae5253c705bf7f6c8ae241a5a33c4fcd8</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeFloatBigEndian</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>aa64f2fbd1cec9af26ead7b9eb02e6d2a</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeDouble</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>ab74ebfcb8ad65c0001353e9ddfb31633</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeDoubleBigEndian</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>ac620a6cf19e9a61192b87ba538d236cf</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeRepeatedByte</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a70e12fb0fce676c54c0a02c4554fa09c</anchor>
      <arglist>(uint8 byte, int numTimesToRepeat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeCompressedInt</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>ada214fdc1ba772b581d7870d922d5ef8</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeString</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a2f984842a154af3fe119cb40e1bb6c66</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeText</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>ad525b35f10ad7e23695a2d867f7d9c38</anchor>
      <arglist>(const String &amp;text, bool asUTF16, bool writeUTF16ByteOrderMark)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>writeFromInputStream</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a220fce5b31ad69ecdb896980a615dbf0</anchor>
      <arglist>(InputStream &amp;source, int64 maxNumBytesToWrite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNewLineString</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a3cd9133af8d3e6a04b8c983290649909</anchor>
      <arglist>(const String &amp;newLineString)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getNewLineString</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a9ca663ec96b69491053385b6c26e6572</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OutputStream</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a1159b7032e052493fdec603a3deeff70</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OwnedArray</name>
    <filename>classOwnedArray.html</filename>
    <templarg>ObjectClass</templarg>
    <templarg>TypeOfCriticalSectionToUse</templarg>
    <member kind="typedef">
      <type>TypeOfCriticalSectionToUse::ScopedLockType</type>
      <name>ScopedLockType</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a3a6262c77a9ca75c746c3d98410ce356</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OwnedArray</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>aaef9b9d43ed2ac8568ba73ef0c4805f9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OwnedArray</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>aab8ed18b03ab56e465433b32f84c9e59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ae4c109b75802bbab97d861b182346dc8</anchor>
      <arglist>(const bool deleteObjects=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a5db444e91e2abcdcf222f5ec2a90e1ac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>operator[]</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ad358d1fb116053ba1e3c46d6177ecef6</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>getUnchecked</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ae633303198df0e9aaa594b9d1d0b8137</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>getFirst</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ac3099192ad968d749e95f8e05335f83c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>getLast</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>aef141763468bd638b8a266a215e3d7d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass **</type>
      <name>getRawDataPointer</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a71f6d7bb563b11f49d68a57a538ef7a2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass **</type>
      <name>begin</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ae68d94c70c6c25246336bb30ba63d27c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass **</type>
      <name>end</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>af24125ef9d6f24c35be21b37c8c945ea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a6067bc24c3982430af0e6a6205581b99</anchor>
      <arglist>(const ObjectClass *const objectToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a0383ab462e8ba5d2598d7812fae90072</anchor>
      <arglist>(const ObjectClass *const objectToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>adab39dbf2aa8d23fa6d678021c7d7ecb</anchor>
      <arglist>(const ObjectClass *const newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>aae6986493146739cdb0cd464b9c802e4</anchor>
      <arglist>(int indexToInsertAt, const ObjectClass *const newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addIfNotAlreadyThere</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a1a6ebddf5fe026a9151e0f9c74f5f15a</anchor>
      <arglist>(const ObjectClass *const newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a78294c9352069dc6ac0ed41ac03f19d5</anchor>
      <arglist>(const int indexToChange, const ObjectClass *const newObject, const bool deleteOldElement=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArray</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>aa2bd0b49686d083cd67d63da1a690dc7</anchor>
      <arglist>(const OtherArrayType &amp;arrayToAddFrom, int startIndex=0, int numElementsToAdd=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCopiesOf</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a5168676f4e3de540247025ceaec8ad32</anchor>
      <arglist>(const OtherArrayType &amp;arrayToAddFrom, int startIndex=0, int numElementsToAdd=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSorted</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ac87e81838149b9d541f6afe605a81b43</anchor>
      <arglist>(ElementComparator &amp;comparator, ObjectClass *const newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfSorted</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a70e007f781979fd82e1fa7dcd9c3fe87</anchor>
      <arglist>(ElementComparator &amp;comparator, const ObjectClass *const objectToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>aa5868e53b5a1b21b0c13970e41012531</anchor>
      <arglist>(const int indexToRemove, const bool deleteObject=true)</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>removeAndReturn</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a702a8ced8cee58dc9f5acbcc13d6218b</anchor>
      <arglist>(const int indexToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObject</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a4674b4f25da43f8fde80c487a673d6b6</anchor>
      <arglist>(const ObjectClass *const objectToRemove, const bool deleteObject=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRange</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ad75c0c6727ebca3e2866c78d967c9ca1</anchor>
      <arglist>(int startIndex, const int numberToRemove, const bool deleteObjects=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLast</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ad1350744bcaedfd9dd2b054dac7946fa</anchor>
      <arglist>(int howManyToRemove=1, const bool deleteObjects=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a8f3849590ee35cde6fb5d71e06ea4482</anchor>
      <arglist>(const int index1, const int index2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ae06db3c50aaf08fd5d2021425efea9ac</anchor>
      <arglist>(const int currentIndex, int newIndex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWithArray</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a86d2bdea3b510bf9486ca0c254391011</anchor>
      <arglist>(OwnedArray &amp;otherArray) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minimiseStorageOverheads</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a77037209056e7c62634819bd274b88ab</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureStorageAllocated</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a3618db021fb44a7e146bd969c43d61ed</anchor>
      <arglist>(const int minNumElements) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>af0cdef04b3c45c6e6f684ca56c1349dc</anchor>
      <arglist>(ElementComparator &amp;comparator, const bool retainOrderOfEquivalentItems=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TypeOfCriticalSectionToUse &amp;</type>
      <name>getLock</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>aff26d401a3ec729ba369a13276dd32e2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Path</name>
    <filename>classPath.html</filename>
    <class kind="class">Path::Iterator</class>
    <member kind="function">
      <type></type>
      <name>Path</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>af26cfab021ddf49af73da3b2beca85ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Path</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a0208ff3549e5de3be8d906d774cea709</anchor>
      <arglist>(const Path &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Path</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a141da9ff89c85e0ba410b5a73864c267</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Path &amp;</type>
      <name>operator=</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a7748d88f32531336ad5f8dac8057ea6b</anchor>
      <arglist>(const Path &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a42025d21c0e88b8b39a377f2cdb986ed</anchor>
      <arglist>(const Path &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a799f7e95b639a89608352d9fe34192e6</anchor>
      <arglist>(const Path &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a89f5009bba5ce65b71cc8072f18c4775</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getBounds</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ab5059c0564fb8303d6d87dd09ef54ca5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getBoundsTransformed</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a6e2d36b20feaf2cd1b95c7ff84b13e55</anchor>
      <arglist>(const AffineTransform &amp;transform) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a0b11770f1d5e8aee3d0251f712ac8901</anchor>
      <arglist>(float x, float y, float tolerance=1.0f) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>abf04e00429df388c75a58cb98bbd9c08</anchor>
      <arglist>(const Point&lt; float &gt; &amp;point, float tolerance=1.0f) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectsLine</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a58919b7e0a5d57558c75d8814c31ef0e</anchor>
      <arglist>(const Line&lt; float &gt; &amp;line, float tolerance=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>Line&lt; float &gt;</type>
      <name>getClippedLine</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a15526d31bbe73610ef2453ce509ffa3b</anchor>
      <arglist>(const Line&lt; float &gt; &amp;line, bool keepSectionOutsidePath) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLength</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a295e7859e772235be0bdc88ad6bc9bc4</anchor>
      <arglist>(const AffineTransform &amp;transform=AffineTransform::identity) const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; float &gt;</type>
      <name>getPointAlongPath</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ac7dc49c18db731fb6b82e45d09b8e272</anchor>
      <arglist>(float distanceFromStart, const AffineTransform &amp;transform=AffineTransform::identity) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getNearestPoint</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>aeaf7a50287033c22baa01738bbdde6d3</anchor>
      <arglist>(const Point&lt; float &gt; &amp;targetPoint, Point&lt; float &gt; &amp;pointOnPath, const AffineTransform &amp;transform=AffineTransform::identity) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a69d4fda65a46a1f1f32cbec49ebc0910</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startNewSubPath</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a9c24222b2226b0e082069dbf789dca07</anchor>
      <arglist>(float startX, float startY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startNewSubPath</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a2a377d0d74d82d64929e3365983c9320</anchor>
      <arglist>(const Point&lt; float &gt; &amp;start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeSubPath</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a3fb7879fd6e09ce7657260c7b2934162</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineTo</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a6cfdf1dea900089ffee8eea61385062e</anchor>
      <arglist>(float endX, float endY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineTo</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a6c5169e9293253f9b9f6a9a6c981fdfe</anchor>
      <arglist>(const Point&lt; float &gt; &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quadraticTo</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ab50510cf385b9ea3fe64fef6be45f85b</anchor>
      <arglist>(float controlPointX, float controlPointY, float endPointX, float endPointY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quadraticTo</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a522767bea3a34450204ec8791db85011</anchor>
      <arglist>(const Point&lt; float &gt; &amp;controlPoint, const Point&lt; float &gt; &amp;endPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cubicTo</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a654df5afb3c113c0f6c5391a88d21811</anchor>
      <arglist>(float controlPoint1X, float controlPoint1Y, float controlPoint2X, float controlPoint2Y, float endPointX, float endPointY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cubicTo</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a716b547509720b6cb970f777a935b03b</anchor>
      <arglist>(const Point&lt; float &gt; &amp;controlPoint1, const Point&lt; float &gt; &amp;controlPoint2, const Point&lt; float &gt; &amp;endPoint)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; float &gt;</type>
      <name>getCurrentPosition</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ab7cb57ade4414ae7d9503bede1b6977b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRectangle</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>af63b8419acedc43ced5c79578be0f0ea</anchor>
      <arglist>(float x, float y, float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRectangle</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>adddc02efd034e8d1af46cb586e221204</anchor>
      <arglist>(const Rectangle&lt; ValueType &gt; &amp;rectangle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRoundedRectangle</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a501f83b0e323fe86d33c047f83451065</anchor>
      <arglist>(float x, float y, float width, float height, float cornerSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRoundedRectangle</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a4f06d92e26aa83cca9e96110711ffa6a</anchor>
      <arglist>(float x, float y, float width, float height, float cornerSizeX, float cornerSizeY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRoundedRectangle</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a8e76921426b35e65345bc76ca462ecf8</anchor>
      <arglist>(const Rectangle&lt; ValueType &gt; &amp;rectangle, float cornerSizeX, float cornerSizeY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRoundedRectangle</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a1999a0be77548a8624eeb3ce7486256e</anchor>
      <arglist>(const Rectangle&lt; ValueType &gt; &amp;rectangle, float cornerSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTriangle</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a1508e0d3dd2048dc5304721bee6ee2c1</anchor>
      <arglist>(float x1, float y1, float x2, float y2, float x3, float y3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addQuadrilateral</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>aced2dafcb8a12f73fcffe032def577be</anchor>
      <arglist>(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEllipse</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a7514c5eaa928b64121490a7f0ce3088c</anchor>
      <arglist>(float x, float y, float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArc</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a1486b650a586f1be84e2decc47bcc844</anchor>
      <arglist>(float x, float y, float width, float height, float fromRadians, float toRadians, bool startAsNewSubPath=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCentredArc</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ad72e6b6e7a058d521f26443bbddca420</anchor>
      <arglist>(float centreX, float centreY, float radiusX, float radiusY, float rotationOfEllipse, float fromRadians, float toRadians, bool startAsNewSubPath=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPieSegment</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a6c09cddf0316e722af69129c6738be34</anchor>
      <arglist>(float x, float y, float width, float height, float fromRadians, float toRadians, float innerCircleProportionalSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLineSegment</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a93c4d70100bed1ea07518fea36267035</anchor>
      <arglist>(const Line&lt; float &gt; &amp;line, float lineThickness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArrow</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a6ff040e1113e2dd7c397511afdfd421a</anchor>
      <arglist>(const Line&lt; float &gt; &amp;line, float lineThickness, float arrowheadWidth, float arrowheadLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPolygon</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a5b7af4934f210ed155c05447d0dda5c3</anchor>
      <arglist>(const Point&lt; float &gt; &amp;centre, int numberOfSides, float radius, float startAngle=0.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStar</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ad80a7129c4583e170931a95ec33b68d0</anchor>
      <arglist>(const Point&lt; float &gt; &amp;centre, int numberOfPoints, float innerRadius, float outerRadius, float startAngle=0.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBubble</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ae3cb819923fd986f9101fd0097ffb023</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;bodyArea, const Rectangle&lt; float &gt; &amp;maximumArea, const Point&lt; float &gt; &amp;arrowTipPosition, const float cornerSize, const float arrowBaseWidth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPath</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ad2d6833a36f348ab33a83309e3956c00</anchor>
      <arglist>(const Path &amp;pathToAppend)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPath</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a12aa38ff3ea67622b43bac7791257865</anchor>
      <arglist>(const Path &amp;pathToAppend, const AffineTransform &amp;transformToApply)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWithPath</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a46561902cabde0f99c01cc7fe28128c7</anchor>
      <arglist>(Path &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTransform</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>afad2558a4296d94b9f5640281ec3c0c3</anchor>
      <arglist>(const AffineTransform &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleToFit</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a0df6ffa4073301eb8e2b0436fc3a1359</anchor>
      <arglist>(float x, float y, float width, float height, bool preserveProportions) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>getTransformToScaleToFit</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>aed300583a9533515b3a2f37c693434b3</anchor>
      <arglist>(float x, float y, float width, float height, bool preserveProportions, const Justification &amp;justificationType=Justification::centred) const </arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>createPathWithRoundedCorners</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a6fb9449e40a0ed3f86c31d538e8777ef</anchor>
      <arglist>(float cornerRadius) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsingNonZeroWinding</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a30f7bc89e2300f810a12f41bf76c5e9a</anchor>
      <arglist>(bool isNonZeroWinding) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingNonZeroWinding</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ab820b1a4efce998fe33b3959e985f0be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadPathFromStream</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a00e0e38020c035feb29e498a0ab93433</anchor>
      <arglist>(InputStream &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadPathFromData</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a1f89b06ebcaac3150d8e6a1483ce1e28</anchor>
      <arglist>(const void *data, size_t numberOfBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePathToStream</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>aba2eb076252eb29a04205182d6384726</anchor>
      <arglist>(OutputStream &amp;destination) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a77b7868359fbdc220e6326789e96f2d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreFromString</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a3eed3ba259fd44165c2fe9360f8c3f5e</anchor>
      <arglist>(const String &amp;stringVersion)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Path::Iterator</name>
    <filename>classPath_1_1Iterator.html</filename>
    <member kind="enumeration">
      <name>PathElementType</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>startNewSubPath</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfdaebfff5dcac5415d6c7274ad2ef633215</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lineTo</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfdabbd031b257d50abb77ee0c755f31b8e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>quadraticTo</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfda3a092657aa2dec64c33926a6528c9f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cubicTo</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfda564006cee15d99bd97abe4a506231d87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>closePath</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfda38a8ed95a6ef321e0a558c3807bac952</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a53108f853b4af5f975d870f24ad79f83</anchor>
      <arglist>(const Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Iterator</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a35875e3d45947d7815da4a769a0a44c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a1100558e4ab2610789a95606a116fbbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>PathElementType</type>
      <name>elementType</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a3b33636d181ff130a4c0e475da2824db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>x1</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a0041a7b85083e9083c570b8b46a96d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>y1</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a38ababca84bdd463b75eadb408406c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>x2</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a2f5da180f00bd2e9356d65b2c241d52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>y2</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a84aee9a5927e034627c1fb4366ee9aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>x3</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>afb477336904d08b7869a536444071df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>y3</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a3981516b86cfb813b61d4a737be307ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PathFlatteningIterator</name>
    <filename>classPathFlatteningIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>PathFlatteningIterator</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>a4f77a3104caf90823cad4c9cfdc9f358</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform=AffineTransform::identity, float tolerance=defaultTolerance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PathFlatteningIterator</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>a907158adef4ad38fd4899142b237106f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>a39a62cacf05fae6d38a0df4f250e5538</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLastInSubpath</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>a5f446bc9d137f2d04dbbfbebebce0267</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>x1</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>aeb4902696a4f694a69eb7c48b274b2ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>y1</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>a6c4a3280b8b9504e38bc1cb739ab07e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>x2</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>a88aeb6be633806b5b6e2e8cc7172e1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>y2</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>ad2ae4ff40b30bcc1c4704542d2c93003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>closesSubPath</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>ac102af0a5ac3dfd026488c1efea1b8ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>subPathIndex</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>a96ac386608cfe18dde7de5a433aac417</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>defaultTolerance</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>af803d3dccc84d7e2a71d77fcbadcd650</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PathStrokeType</name>
    <filename>classPathStrokeType.html</filename>
    <member kind="enumeration">
      <name>JointStyle</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>af1cf21018ccb9aa84572c1da4ae513b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mitered</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>af1cf21018ccb9aa84572c1da4ae513b8ae51af2220424cff8ab85409c4f7659b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>curved</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>af1cf21018ccb9aa84572c1da4ae513b8aa0e50e387cbe6533b830061006cb3747</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>beveled</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>af1cf21018ccb9aa84572c1da4ae513b8a957c356587532b49af11000b024bd38b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EndCapStyle</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a9050e37133047ab699b44b704e4f96cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>butt</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a9050e37133047ab699b44b704e4f96cfa05f422ecf6a99eb2eed32a6d67795b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>square</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a9050e37133047ab699b44b704e4f96cfabed6afb274b3942d54f510ba65281cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rounded</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a9050e37133047ab699b44b704e4f96cfa6b01d7b3e9809f0b62dcb151d552a96f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathStrokeType</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a7385ad105b67ebe3251499822a8fa7ed</anchor>
      <arglist>(float strokeThickness, JointStyle jointStyle=mitered, EndCapStyle endStyle=butt) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathStrokeType</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a3a1ddf2fe6f55fac79fd7b46b7f02156</anchor>
      <arglist>(const PathStrokeType &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PathStrokeType &amp;</type>
      <name>operator=</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>ac880a488f79708bbc4c0a308b02fad2a</anchor>
      <arglist>(const PathStrokeType &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PathStrokeType</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a54a82633fb4ad911609e40fcd555b5c9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createStrokedPath</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>ab5439d64b3a032356e234c1aaead4f3c</anchor>
      <arglist>(Path &amp;destPath, const Path &amp;sourcePath, const AffineTransform &amp;transform=AffineTransform::identity, float extraAccuracy=1.0f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createDashedStroke</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a4eca56bfcdc41f774fcde1c8e34b70af</anchor>
      <arglist>(Path &amp;destPath, const Path &amp;sourcePath, const float *dashLengths, int numDashLengths, const AffineTransform &amp;transform=AffineTransform::identity, float extraAccuracy=1.0f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createStrokeWithArrowheads</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a0b4cfc279210796faa54ed16a1f25b4e</anchor>
      <arglist>(Path &amp;destPath, const Path &amp;sourcePath, float arrowheadStartWidth, float arrowheadStartLength, float arrowheadEndWidth, float arrowheadEndLength, const AffineTransform &amp;transform=AffineTransform::identity, float extraAccuracy=1.0f) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStrokeThickness</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>aeb4e2cdb110b24beec90fb06c4741976</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrokeThickness</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a0289f7d29acd4d3653bafb1e0f6ba911</anchor>
      <arglist>(float newThickness) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointStyle</type>
      <name>getJointStyle</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>ad6f447c1bea224d4bdbb7e65f5735f20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointStyle</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>abf96f987f1412f4910faa6836ab2300f</anchor>
      <arglist>(JointStyle newStyle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EndCapStyle</type>
      <name>getEndStyle</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a603606adc2f4d50791cc33b731a4fee9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEndStyle</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a7302b4ab3dd8e55cd1fa7660e5d01245</anchor>
      <arglist>(EndCapStyle newStyle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a8a2f2433902f6a94e20efbecdcc61b7d</anchor>
      <arglist>(const PathStrokeType &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>af5f320708f1ad6317213bc096fe5cb19</anchor>
      <arglist>(const PathStrokeType &amp;other) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PerformanceCounter</name>
    <filename>classPerformanceCounter.html</filename>
    <member kind="function">
      <type></type>
      <name>PerformanceCounter</name>
      <anchorfile>classPerformanceCounter.html</anchorfile>
      <anchor>ac0232ef8c716c685bca97f0ac99002e8</anchor>
      <arglist>(const String &amp;counterName, int runsPerPrintout=100, const File &amp;loggingFile=File::nonexistent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PerformanceCounter</name>
      <anchorfile>classPerformanceCounter.html</anchorfile>
      <anchor>a6f6a2cf85ae09a5e61c7ed7bb9027b4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classPerformanceCounter.html</anchorfile>
      <anchor>a68620a2f6e6c3d54c950c939862f0294</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classPerformanceCounter.html</anchorfile>
      <anchor>ade8d5b5b9f4b8187bccfd9b6b1f76b76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStatistics</name>
      <anchorfile>classPerformanceCounter.html</anchorfile>
      <anchor>a4be98835cd71c8b7bdd6bf93f9b83000</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PixelAlpha</name>
    <filename>classPixelAlpha.html</filename>
    <member kind="enumvalue">
      <name>indexA</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a890de282dcb881090e46c379e15e63b2a31d54b036f46396c28eb848b84ee6ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PixelAlpha</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a5f467ee3b9b2765c16e3fc6c604b74ed</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PixelAlpha</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a5cb873b11b1fe59592a6d8db19736d3b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PixelAlpha</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a1ebea0c7a6bee568fce0684754fc9400</anchor>
      <arglist>(const uint32 argb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getARGB</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a178fb52d6dacc52bb45ed7fb05e2e5a3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getUnpremultipliedARGB</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>af5abe54d7a380a6071e23a5475096ef2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getRB</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>afb457b6d11dc91b7ddf468dff72812f3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getAG</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a8dc11fc92fbd4ca469554eca0d0eb242</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getAlpha</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>af52357a6af759e4c14f2241ee65658db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getRed</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>abe09f7dca64ace709f4549d4d7f52a6b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getGreen</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a20e33bf48279362d6b97cea62fb8e686</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getBlue</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a0b34ddebf90051d609abbb19955e7d8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>blend</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a6e5ce1211bea45d35d14ef55c0471901</anchor>
      <arglist>(const Pixel &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>blend</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a68dd6a81bb823df97c9770d423a295b5</anchor>
      <arglist>(const Pixel &amp;src, uint32 extraAlpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>tween</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>ae3b6ad3857a462fceb79ad782fb8022d</anchor>
      <arglist>(const Pixel &amp;src, const uint32 amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>set</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>ae7576d9af15ae35b0f39c8b89a9368a4</anchor>
      <arglist>(const Pixel &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>setAlpha</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>ae59b4356756b130d16b27652bc0395c4</anchor>
      <arglist>(const uint8 newAlpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>multiplyAlpha</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a1e5cac4a57706aee687dbe57c65db42e</anchor>
      <arglist>(int multiplier) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>multiplyAlpha</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a06a335fd58ea3b0240baf4685421c5d1</anchor>
      <arglist>(const float multiplier) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>setARGB</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>acf7b41af1aa8dad22c33bb34830f3b15</anchor>
      <arglist>(const uint8 a_, const uint8, const uint8, const uint8) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>premultiply</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>afc74783ac4f996a4f41df985c107ed52</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>unpremultiply</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a739f660b3d4b93d86bf99e791aea1999</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>desaturate</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>adfb09bc7b34321939d9ad6b07b76c220</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PixelARGB</name>
    <filename>classPixelARGB.html</filename>
    <member kind="enumvalue">
      <name>indexA</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>aacb94d9d49db4feae316eb2c1d3900c1ae2c758a6eebfdf52dde60687f68a68ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>indexR</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>aacb94d9d49db4feae316eb2c1d3900c1a5d38bdd8f5ffaa9917b6fff622ddb23f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>indexG</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>aacb94d9d49db4feae316eb2c1d3900c1a9f00e7f7cddc8b6d27053806abb1630a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>indexB</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>aacb94d9d49db4feae316eb2c1d3900c1a7eab5933695a1fcdfee5a25cb5ef60ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PixelARGB</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>ad7650037b9e9534c11eb6a4b2a80d402</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PixelARGB</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>ae961efe730a71c5eae1197d908be61a8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PixelARGB</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>abd950dafba1a83081c94a7a9e1cc320f</anchor>
      <arglist>(const uint32 argb_) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PixelARGB</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>ae81116d72bd66ae84f2a4893f8704dd5</anchor>
      <arglist>(const uint8 a, const uint8 r, const uint8 g, const uint8 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getARGB</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a945190c12111989cb4c892b249f4bf0e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getUnpremultipliedARGB</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a672ca596f6691225002efaa1e8a1bf5d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getRB</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>ac65af7a1163e4263c79d1e3b20a9b26c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getAG</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a8c8e01bca1dc24207d83c94349cb1d00</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getAlpha</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a578d8073cc8fc06b02bf5376c0fb3769</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getRed</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>afbe911418e1dd168d01d287376ea89fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getGreen</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>aba1cdf360beb38ab4ee87d686e356171</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getBlue</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a7dbf874cf5e5e876c87ed25c65014e59</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>blend</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a2bd4f6bc1869f0f6b60468746e4beece</anchor>
      <arglist>(const Pixel &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>blend</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a006c34af1e2daeb77f44953ccab569bc</anchor>
      <arglist>(const PixelRGB &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>blend</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a84ded96012732f73dfcbf8fd763239dd</anchor>
      <arglist>(const Pixel &amp;src, uint32 extraAlpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>tween</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>ae9961674c67b52486549b336095811da</anchor>
      <arglist>(const Pixel &amp;src, const uint32 amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>set</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a5c72335f6ca8533026d8b484f7a995b2</anchor>
      <arglist>(const Pixel &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>setAlpha</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a66ca919eb4c95dd4e7489038dac2f2d8</anchor>
      <arglist>(const uint8 newAlpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>multiplyAlpha</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>aa7ee03257f712ffdfb80cc1d90a863ef</anchor>
      <arglist>(int multiplier) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>multiplyAlpha</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a15a7ef1dbfa4f44753da1bc57a91f0b1</anchor>
      <arglist>(const float multiplier) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setARGB</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a1ba9a0e56449373b863e8b683f5ef590</anchor>
      <arglist>(const uint8 a, const uint8 r, const uint8 g, const uint8 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>premultiply</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a825c18e92a2159d93687b4b161ade875</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>unpremultiply</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a6270aec4f8b98a22f3487be2b8db4dc2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>desaturate</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a4ee58dea3b504fcae39680bbd3b54106</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getInRGBAMemoryOrder</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a2974e691b43769540530b4acbf74aed0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PixelRGB</name>
    <filename>classPixelRGB.html</filename>
    <member kind="enumvalue">
      <name>indexR</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a9a48e245f98306471df3cf47997c9648a2725faa86a75bea4242137ab8b9fb128</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>indexG</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a9a48e245f98306471df3cf47997c9648ae889bdfe358ad3b6395e1bf584e198f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>indexB</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a9a48e245f98306471df3cf47997c9648a59222359427902da4ec4353ee7d7c431</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PixelRGB</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>ac9fd216e3cccf8f222388b7d18548a8c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PixelRGB</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>adc6f2c4fbfdb9af6cb06a283f0b0fcd7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PixelRGB</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>ab661ad8202fe26cc3e7829bd17afa8e1</anchor>
      <arglist>(const uint32 argb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getARGB</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>af678e0b2e711a369d5c5a782c598402d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getUnpremultipliedARGB</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a032e01a6ae0f05564a85713d5589a61e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getRB</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a715347b287b4cc91af3becb903e0adb8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getAG</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>aaf8eeba610360d3561e872d44c229231</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getAlpha</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a932cebd81f75f0ff9f13c7b8e0339b82</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getRed</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a19df8a6d101bb795b7ed25057c964711</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getGreen</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a44b8873d8fd580206df89bac652a21c2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getBlue</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a415a25dcd36ef2c0d569b39d603487ac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>blend</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a51ac813b207fd2e900672d76ba02d546</anchor>
      <arglist>(const Pixel &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>blend</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a2c7d034967f236a48406719971b0e8f4</anchor>
      <arglist>(const PixelRGB &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>blend</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a5e78165deed6b6da89391ec6b8a9f272</anchor>
      <arglist>(const Pixel &amp;src, uint32 extraAlpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>tween</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>aa348334f49c9b85d88fb79d0332b1b90</anchor>
      <arglist>(const Pixel &amp;src, const uint32 amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>set</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a1179e367308d07f57857c7c4707d7c3f</anchor>
      <arglist>(const Pixel &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>setAlpha</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a3d1d18b10119f24d98b268e3a574a6d8</anchor>
      <arglist>(const uint8) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>multiplyAlpha</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a3ae04d64a7112d6159da2efec4889582</anchor>
      <arglist>(int) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>multiplyAlpha</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a12973ec4edb0adbd721e0a7d653362e2</anchor>
      <arglist>(float) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setARGB</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a8e3ff22c903405eb543e1aea82bec234</anchor>
      <arglist>(const uint8, const uint8 r_, const uint8 g_, const uint8 b_) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>premultiply</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a8e2419282f881f6823d7899f747c122c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>unpremultiply</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a43bd818ac8d55e02b8b3e14cc865a1b7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>desaturate</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>ac2918e55bfa1c745ad3e169b9b342a34</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PluginDescription</name>
    <filename>classPluginDescription.html</filename>
    <member kind="function">
      <type></type>
      <name>PluginDescription</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a494fe1c041359c47d40f8211ae7c9729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PluginDescription</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a11a5a158654b97b3606c1e103af113fe</anchor>
      <arglist>(const PluginDescription &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PluginDescription &amp;</type>
      <name>operator=</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a982fea38b2787923c696556c3d5cdc2a</anchor>
      <arglist>(const PluginDescription &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PluginDescription</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a730e10660aab4aa5ec0ca483180db481</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDuplicateOf</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>ad92a173ac6878934071fe6e9a9ad1d03</anchor>
      <arglist>(const PluginDescription &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>createIdentifierString</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a8afe64a22fd2715edbc22f034f754a1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>createXml</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a4e23eb3d5d991893aec610dbf2b1072b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadFromXml</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a5fae3bea93cc8398b3c114dfd52bfd42</anchor>
      <arglist>(const XmlElement &amp;xml)</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>name</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>aea9757db9385b9398598bb65f07667fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>descriptiveName</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a93ddf8b86e68316fc4746eb89c00b52c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>pluginFormatName</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a619a03af08e3904725e0255a28388a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>category</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a744b7d9bd85c5b670905ce6c411fa815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>manufacturerName</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>aa8c02c784dc999a1043877b29795fff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>version</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>ad5d55de3c1ad1646e5cc49d04e5c41e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>fileOrIdentifier</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a067e44c64faac07ff146f65b375cec22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>lastFileModTime</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>aa7143b1df0c657008ab9f3f196e63471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>uid</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a6bddaeaf4147bb0827c18724cbc7bd4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isInstrument</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>ada0d12fe7d191f7cd315721f7b965720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numInputChannels</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>aae10fb65ec4fcbfcf35aed5d46b98932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numOutputChannels</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a3b04bfe9e7ede6557b7de388c70a8888</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PluginDirectoryScanner</name>
    <filename>classPluginDirectoryScanner.html</filename>
    <member kind="function">
      <type></type>
      <name>PluginDirectoryScanner</name>
      <anchorfile>classPluginDirectoryScanner.html</anchorfile>
      <anchor>af945acd58828079d587de38019064d51</anchor>
      <arglist>(KnownPluginList &amp;listToAddResultsTo, AudioPluginFormat &amp;formatToLookFor, FileSearchPath directoriesToSearch, bool searchRecursively, const File &amp;deadMansPedalFile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PluginDirectoryScanner</name>
      <anchorfile>classPluginDirectoryScanner.html</anchorfile>
      <anchor>af3132c1ed58ed03d255dde0e649f8be7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scanNextFile</name>
      <anchorfile>classPluginDirectoryScanner.html</anchorfile>
      <anchor>a15cc1a5bc08f4f30f56b8ac1f4dc383f</anchor>
      <arglist>(bool dontRescanIfAlreadyInList)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skipNextFile</name>
      <anchorfile>classPluginDirectoryScanner.html</anchorfile>
      <anchor>a85ef4f6094d91b010e79c3790018b539</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getNextPluginFileThatWillBeScanned</name>
      <anchorfile>classPluginDirectoryScanner.html</anchorfile>
      <anchor>a30ca8a1a58c6a646aa61f3322b17406f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getProgress</name>
      <anchorfile>classPluginDirectoryScanner.html</anchorfile>
      <anchor>a21d26809a8f97109c1107557f7a43f24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getFailedFiles</name>
      <anchorfile>classPluginDirectoryScanner.html</anchorfile>
      <anchor>a9cdb08d046b0223dccc6501e99ff755a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PluginHostType</name>
    <filename>classPluginHostType.html</filename>
    <member kind="enumeration">
      <name>HostType</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnknownHost</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a1c752bc3862092e36ae81d35612e0763</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AbletonLive6</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a5e62acd132677eeadafbe3e3c2d75bad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AbletonLive7</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a4b14200efbb17b2dd8b0b623a361829e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AbletonLive8</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8aed7585b06435b87dfc13fa5745482994</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AbletonLiveGeneric</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a665226cd0a77007d5e3a8673f6e91dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdobePremierePro</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8aba59eb46b76ef7fb9b0d2b0a5a370e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AppleLogic</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a1d085d65da9faf511f3f2ae6335812c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CakewalkSonar8</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a9346912590305747f0c38d7c3208de17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CakewalkSonarGeneric</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a0b64ed512c677bef44381479de35c425</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DigidesignProTools</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a98abcd7b565c269a115d7f419114bb9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EmagicLogic</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a80d4f48afc7a55bd087144b92e27bc88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reaper</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8aec2843d65058124f4d29e70027f06e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MackieTracktion3</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8ac57e527b72c781b910b58905f57637ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MackieTracktionGeneric</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a3fc756719630af4f4c404f5a20d3b87d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SteinbergCubase4</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8ac364901a67009772e9870bfcae9d7090</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SteinbergCubase5</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8afddd08fe15ce7ccf7781dd0dd4cd0cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SteinbergCubase5Bridged</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a5f89e0578cf0b6bbfc5d90460890c2eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SteinbergCubaseGeneric</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a5b569e91a90410048fe9103eb9187d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SteinbergWavelab5</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a64bf12c0c44b9f5ec70c1c140f8e7f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SteinbergWavelab6</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8af3715fe76036928476bec3b649f533dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SteinbergWavelab7</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a0c93392fd80fa3a8fdf97e7d60be30b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SteinbergWavelabGeneric</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8ad187a256a91e0a3815a2b0a61ee70d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MuseReceptorGeneric</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8ac44eee1f6720c9ef9296f0c655526230</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MagixSamplitude</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a93ac4b1eea045db98d9ab7fbcd7207c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FruityLoops</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8aafe10f6ddbe74f8f788f29312fa5b2b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WaveBurner</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a5b8f0d97918ff781b19310b2b5db3a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DigitalPerformer</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a5fc16668f994993c5f9a7276cd840f4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PluginHostType</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>ab9be0922becd097860f5687fc202b2d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAbletonLive</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a5e8e18d29f342509daa11d8a66923eeb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCubase</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a53d84c0cc0837d8be7587cefc66eff38</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCubaseBridged</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a0100b8f60844c4f03e67cb17522c3d1e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTracktion</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>ad0ecde6e33e2dc003ac414823856f982</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSonar</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a36909a79f575dcce2a2febcf95469ceb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWavelab</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a52fdad69a0dedce71fec4ff7195110ed</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWavelabLegacy</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a591f61217cba17ba34356e5918fd8eef</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPremiere</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a4078ef040e2e224988848c8a1da0df71</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLogic</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>ae6737ec4dc2d34aabb934915e16ef7e4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReceptor</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>ad57c21e7a2c57d95e10a3ad63c1e9eda</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSamplitude</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>acd76a6928845056299cad69a0f4cc030</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFruityLoops</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>acb3da24fa5f5a10937112d4bf57f2151</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWaveBurner</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a375b6011c769dfb0001c9b9a429c2b9a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDigitalPerformer</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a4e4b15c2bc66b521ae348abf939124fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getHostPath</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a6060f772f5cb2c53589c1acc43815426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const HostType</type>
      <name>type</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a68445668ee6eb3a17a260550e9354e78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PluginListComponent</name>
    <filename>classPluginListComponent.html</filename>
    <base>Component</base>
    <base>FileDragAndDropTarget</base>
    <base>ListBoxModel</base>
    <base protection="private">ChangeListener</base>
    <base protection="private">Timer</base>
    <member kind="function">
      <type></type>
      <name>PluginListComponent</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>a7c2a7e42374dad1122f10b846e0c0300</anchor>
      <arglist>(KnownPluginList &amp;listToRepresent, const File &amp;deadMansPedalFile, PropertiesFile *propertiesToUse)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PluginListComponent</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>aef6c55ec27a6ab86d2d769ea5ce00b3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>a661a3dd07efb9576e96ea0dc78a41103</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInterestedInFileDrag</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>a5aaca98194b10ea5fa70b9dbfcaef938</anchor>
      <arglist>(const StringArray &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filesDropped</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>a37574de73cf3a97f4f68dff07aea994e</anchor>
      <arglist>(const StringArray &amp;, int, int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRows</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>a8a3b252f0a937a869f3e8af44a5f732d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintListBoxItem</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>aa2fec06ef86635461a2bd4de28363851</anchor>
      <arglist>(int row, Graphics &amp;, int width, int height, bool rowIsSelected)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteKeyPressed</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>abbeef0c29cb282137f45c7d43380fc39</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PNGImageFormat</name>
    <filename>classPNGImageFormat.html</filename>
    <base>ImageFileFormat</base>
    <member kind="function">
      <type></type>
      <name>PNGImageFormat</name>
      <anchorfile>classPNGImageFormat.html</anchorfile>
      <anchor>a4db2e108ed60a66f02dee961912772ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PNGImageFormat</name>
      <anchorfile>classPNGImageFormat.html</anchorfile>
      <anchor>a00158061cea93fadc82821591bba8d8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getFormatName</name>
      <anchorfile>classPNGImageFormat.html</anchorfile>
      <anchor>a0abcc06eb764767219f75415e77b7308</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canUnderstand</name>
      <anchorfile>classPNGImageFormat.html</anchorfile>
      <anchor>a898aeff02c886e2a26ddfffe2dbe7eee</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>decodeImage</name>
      <anchorfile>classPNGImageFormat.html</anchorfile>
      <anchor>a03c777dac5d5e0e9f82b8930e396871e</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeImageToStream</name>
      <anchorfile>classPNGImageFormat.html</anchorfile>
      <anchor>ae2dcd3a90cf8d395e1d6cf43c0d09fdc</anchor>
      <arglist>(const Image &amp;sourceImage, OutputStream &amp;destStream)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Point</name>
    <filename>classPoint.html</filename>
    <templarg>ValueType</templarg>
    <member kind="typedef">
      <type>TypeHelpers::SmallestFloatType&lt; ValueType &gt;::type</type>
      <name>FloatType</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a81e5862bbe44912a39cb87042bea7c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>aa49f24cf697521e99c4f887bcea8c629</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>aea339bd3ce794ee6ddcb49c8427536a1</anchor>
      <arglist>(const Point &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>adcc79a0f47517756667910dd2edec635</anchor>
      <arglist>(const ValueType initialX, const ValueType initialY) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Point</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a2b98a444350b06362e6a7c8f8fc480a2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator=</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>aa512c038dc5e7c2a07f54e418e410dec</anchor>
      <arglist>(const Point &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a85aa676d44ebf9297d99a9c1affe3a8b</anchor>
      <arglist>(const Point &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a83df37f32ae54e13f7d0cabae7102326</anchor>
      <arglist>(const Point &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrigin</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a8a04a1b716ac0b9618dd1a6c42ffbb09</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getX</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>abcd6bc035cd3b4e2157523310af66483</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getY</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a44158bfdccfc65a41b2cab6c0cfb6990</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a88be5ca4cece4a829658c2c81f773939</anchor>
      <arglist>(const ValueType newX) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a0a3497770f0aef70062fe179ac315168</anchor>
      <arglist>(const ValueType newY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>withX</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>adbb0fcaf4ed125113467453f229e0bd0</anchor>
      <arglist>(const ValueType newX) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>withY</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a86e751c47aadad9acd0ede4cb793c2e1</anchor>
      <arglist>(const ValueType newY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXY</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a6ee7fd1d4763fd41596993a842a0abc6</anchor>
      <arglist>(const ValueType newX, const ValueType newY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addXY</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a8aa469e96468d049f83faacc23a2d8c4</anchor>
      <arglist>(const ValueType xToAdd, const ValueType yToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>translated</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>aa6c58e63ecbb225c75702f0cfb036653</anchor>
      <arglist>(const ValueType xDelta, const ValueType yDelta) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator+</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>ab2e4c8bc3f2e556366ee7821f3af2e3e</anchor>
      <arglist>(const Point &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator+=</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>afd0901083454385cf39b8980a9b87e96</anchor>
      <arglist>(const Point &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator-</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a98a0c9dc87e5af970039109c40a1c9ca</anchor>
      <arglist>(const Point &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator-=</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a06a4e8f92f608babfd55237781d677f8</anchor>
      <arglist>(const Point &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator*</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>ad834e3af7aa48f190084dca4501e7738</anchor>
      <arglist>(const ValueType multiplier) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator*=</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a889fa932c3aeaa3fff43e1b2d2e15416</anchor>
      <arglist>(const ValueType multiplier) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator/</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>ac1bb455f5df35c11dec9303a03e599cf</anchor>
      <arglist>(const ValueType divisor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator/=</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a3c63828959b0b9f3bb82ed60fc8abda7</anchor>
      <arglist>(const ValueType divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator-</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>afc3a047945ffd6e5e41049a6775c9c24</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getDistanceFromOrigin</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>ac4ceeae6b4a33d7f604d8714423b42c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getDistanceFrom</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>ae931deaeadf711093ec361e0be2c03c2</anchor>
      <arglist>(const Point &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FloatType</type>
      <name>getAngleToPoint</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>ac9abf15d18241300e34f8d460b1fcee1</anchor>
      <arglist>(const Point &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; FloatType &gt;</type>
      <name>getPointOnCircumference</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a0f5c281b84d55ddad144c5ec9554108e</anchor>
      <arglist>(const float radius, const float angle) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; FloatType &gt;</type>
      <name>getPointOnCircumference</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a5a4b9aa7dd246e0af7303edecd0e9f5f</anchor>
      <arglist>(const float radiusX, const float radiusY, const float angle) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTransform</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a1f25a1e3e1e4217301e776cb8454a619</anchor>
      <arglist>(const AffineTransform &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>transformedBy</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>aa30fec65a5bea3c630f2e6b2cd356ba4</anchor>
      <arglist>(const AffineTransform &amp;transform) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>toInt</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>ab9baec905a57c6d59fb827422ab02d9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; float &gt;</type>
      <name>toFloat</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a2d27c721e09caa04d89434c3095a0f9b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; double &gt;</type>
      <name>toDouble</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>ab30b19304bf09c2a8c9d01904585738e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>aee4d94cc4645d5dca2bfc41fb758c050</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>x</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>aba3ea63445b55dec2d740776b1059065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>y</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>aa8d5487ccd439dd2d4b0fe87021a32c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PopupMenu</name>
    <filename>classPopupMenu.html</filename>
    <class kind="class">PopupMenu::CustomComponent</class>
    <class kind="class">PopupMenu::MenuItemIterator</class>
    <class kind="class">PopupMenu::Options</class>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a0888091ddab0f599bb9d2fab28153f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a0888091ddab0f599bb9d2fab28153f6baf598840a9e3f2137df45179367323b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textColourId</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a0888091ddab0f599bb9d2fab28153f6ba00636235348246a1bd2bad0cb66f307a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>headerTextColourId</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a0888091ddab0f599bb9d2fab28153f6ba964cf665c7c5a26b63866e537e9bfed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>highlightedBackgroundColourId</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a0888091ddab0f599bb9d2fab28153f6ba6a9ce95ec115c9def5903d25b5ed2f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>highlightedTextColourId</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a0888091ddab0f599bb9d2fab28153f6ba1ec81989e7186fa2dff6b57bb057f834</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PopupMenu</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a75f519bff4ab374bf2e00fe5d93f96f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PopupMenu</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>ac5b1738cc16508249628b174e6827522</anchor>
      <arglist>(const PopupMenu &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PopupMenu</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>aabdf2cc11c5e3cb57049041c459082fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PopupMenu &amp;</type>
      <name>operator=</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a89e61dea91a2f6e943cf7e4a2ae09bae</anchor>
      <arglist>(const PopupMenu &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>ab4af03082fd727b395481a64ad940654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>ae7cea826221af9e05f99406fe6057962</anchor>
      <arglist>(int itemResultId, const String &amp;itemText, bool isEnabled=true, bool isTicked=false, const Image &amp;iconToUse=Image::null)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCommandItem</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a5b76a06d3eafc98921e99461d88b57ba</anchor>
      <arglist>(ApplicationCommandManager *commandManager, int commandID, const String &amp;displayName=String::empty)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addColouredItem</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a4948280ff994d458294121c64a630ed0</anchor>
      <arglist>(int itemResultId, const String &amp;itemText, const Colour &amp;itemTextColour, bool isEnabled=true, bool isTicked=false, const Image &amp;iconToUse=Image::null)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCustomItem</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>aa46db86411df083f051bc0f16ff6c53b</anchor>
      <arglist>(int itemResultId, Component *customComponent, int idealWidth, int idealHeight, bool triggerMenuItemAutomaticallyWhenClicked)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSubMenu</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>aaa016bb4dc1a37e042f7cf4bdbf7c4dc</anchor>
      <arglist>(const String &amp;subMenuName, const PopupMenu &amp;subMenu, bool isEnabled=true, const Image &amp;iconToUse=Image::null, bool isTicked=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSeparator</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a9c411d5c29fe887e4e961a402dd43944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSectionHeader</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>ab41473f7b9ca9bb4a1e6ad13c5d24ec0</anchor>
      <arglist>(const String &amp;title)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumItems</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a66988abcfc9795fc7775cd0bb3bd9135</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsCommandItem</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a4f31eae38d8b51bb8ea6717e5e2a42ee</anchor>
      <arglist>(int commandID) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsAnyActiveItems</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>ab6c29dcb038fcc9920db08e3a959b11a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showMenuAsync</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>aafe397e60357ab6a12ffcc3f896ed4a7</anchor>
      <arglist>(const Options &amp;options, ModalComponentManager::Callback *callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLookAndFeel</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a449653121fdc2a2b7f3e77d663266d00</anchor>
      <arglist>(LookAndFeel *newLookAndFeel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCustomItem</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>ab29d248b3ab77e2a7be201aa113bbc4d</anchor>
      <arglist>(int itemResultId, CustomComponent *customComponent)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>dismissAllActiveMenus</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a16f1d36e74b8dcf83738b1fcbdbe8166</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PopupMenu::CustomComponent</name>
    <filename>classPopupMenu_1_1CustomComponent.html</filename>
    <base>Component</base>
    <base>SingleThreadedReferenceCountedObject</base>
    <member kind="function">
      <type></type>
      <name>CustomComponent</name>
      <anchorfile>classPopupMenu_1_1CustomComponent.html</anchorfile>
      <anchor>af169523e1b2ad37980916902658ae3be</anchor>
      <arglist>(bool isTriggeredAutomatically=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomComponent</name>
      <anchorfile>classPopupMenu_1_1CustomComponent.html</anchorfile>
      <anchor>af84aeb528d021dd82781898a70e81550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getIdealSize</name>
      <anchorfile>classPopupMenu_1_1CustomComponent.html</anchorfile>
      <anchor>a18b614b5463a3ff680885a8cafa49e79</anchor>
      <arglist>(int &amp;idealWidth, int &amp;idealHeight)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triggerMenuItem</name>
      <anchorfile>classPopupMenu_1_1CustomComponent.html</anchorfile>
      <anchor>aadc39460fada2a60624f5ffc00daa296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isItemHighlighted</name>
      <anchorfile>classPopupMenu_1_1CustomComponent.html</anchorfile>
      <anchor>aba23af1d4e4160283949be9e5c196e27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTriggeredAutomatically</name>
      <anchorfile>classPopupMenu_1_1CustomComponent.html</anchorfile>
      <anchor>a302fa7c66c7e5c1d83842815030171d9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHighlighted</name>
      <anchorfile>classPopupMenu_1_1CustomComponent.html</anchorfile>
      <anchor>a02baf9ef459fb52b53450d519dbaf40f</anchor>
      <arglist>(bool shouldBeHighlighted)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PopupMenu::MenuItemIterator</name>
    <filename>classPopupMenu_1_1MenuItemIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>MenuItemIterator</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>a34b8540e94b2b0c91c08d6ae31c08feb</anchor>
      <arglist>(const PopupMenu &amp;menu)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MenuItemIterator</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>afd9c761456a9b68530278866b5dffae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>abac12feb2943d217501fc92d4a6009a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>itemName</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>a75e8d47cfdf5781ff07a08b4838d15e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PopupMenu *</type>
      <name>subMenu</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>afb6d899fe8d2ac3244c81df9c5f41868</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>itemId</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>ab696747fd973bc5c35afe47906ed98c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isSeparator</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>a045bdc21c4ad9b8911e0ac2c421c1d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isTicked</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>a9e22397470a1baaf9834faad6738585a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>aea11ebbb2a4b53e733a53364bf706270</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isCustomComponent</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>a01ff00f5ed747469652ab57f7baba10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isSectionHeader</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>adbb4b8e329bc0ab1836c4d9d2fadb915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Colour *</type>
      <name>customColour</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>ab69ce90b18c954507602611d43bf9543</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Image</type>
      <name>customImage</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>a281b49645b5fdf4e4468d21f574d06e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ApplicationCommandManager *</type>
      <name>commandManager</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>aaef3a6f46c6e2986d8878d4f6dd799d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PopupMenu::Options</name>
    <filename>classPopupMenu_1_1Options.html</filename>
    <member kind="function">
      <type></type>
      <name>Options</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>afa01c4782579817c0e7059defa9569c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Options</type>
      <name>withTargetComponent</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>a8ff3f9ff03ba6a13c48f409f5ea9248a</anchor>
      <arglist>(Component *targetComponent) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Options</type>
      <name>withTargetScreenArea</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>ae0d1ff87304351c47edd8149f27e1731</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;targetArea) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Options</type>
      <name>withMinimumWidth</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>adf3eaaefe656d722ed9f5109394ee7b7</anchor>
      <arglist>(int minWidth) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Options</type>
      <name>withMaximumNumColumns</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>abb16386044ca59674d944b9856ec84ac</anchor>
      <arglist>(int maxNumColumns) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Options</type>
      <name>withStandardItemHeight</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>afe291d92f59711ed51fa0d13d21faa26</anchor>
      <arglist>(int standardHeight) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Options</type>
      <name>withItemThatMustBeVisible</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>aa01304044d9a3081d8515ddfdb6885bc</anchor>
      <arglist>(int idOfItemToBeVisible) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PositionableAudioSource</name>
    <filename>classPositionableAudioSource.html</filename>
    <base>AudioSource</base>
    <member kind="function">
      <type></type>
      <name>~PositionableAudioSource</name>
      <anchorfile>classPositionableAudioSource.html</anchorfile>
      <anchor>aa81c6f032ae672549050b0985a665cf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setNextReadPosition</name>
      <anchorfile>classPositionableAudioSource.html</anchorfile>
      <anchor>a1d8360d66e08d9491eb1b27c37a330ed</anchor>
      <arglist>(int64 newPosition)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>getNextReadPosition</name>
      <anchorfile>classPositionableAudioSource.html</anchorfile>
      <anchor>a93fffbfa30a0470c246f6dd2ae8597c6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>getTotalLength</name>
      <anchorfile>classPositionableAudioSource.html</anchorfile>
      <anchor>aa32269d1013b829bb7585e65ce80f08c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isLooping</name>
      <anchorfile>classPositionableAudioSource.html</anchorfile>
      <anchor>a4e59a6b4cfcfb6e8afeea42c25379849</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLooping</name>
      <anchorfile>classPositionableAudioSource.html</anchorfile>
      <anchor>a8fba6ce7ef75cfc66c3176a37cda3ba9</anchor>
      <arglist>(bool shouldLoop)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PositionableAudioSource</name>
      <anchorfile>classPositionableAudioSource.html</anchorfile>
      <anchor>a53821ed920c27c8e81a6695041dd1dca</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PositionedGlyph</name>
    <filename>classPositionedGlyph.html</filename>
    <member kind="function">
      <type></type>
      <name>PositionedGlyph</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a20e870cfa8b3cd35b934a6d56ae118a6</anchor>
      <arglist>(const Font &amp;font, juce_wchar character, int glyphNumber, float anchorX, float baselineY, float width, bool isWhitespace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionedGlyph</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a8d9033dbee0d12cfa3b9d970bce0c818</anchor>
      <arglist>(const PositionedGlyph &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PositionedGlyph &amp;</type>
      <name>operator=</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>ab3ea14575193a2eb4699a56a03be858e</anchor>
      <arglist>(const PositionedGlyph &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PositionedGlyph</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a2503532e0d603f7d3e114f41859cffdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getCharacter</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a489149f9bb1d8f17d4090f860f1ea343</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWhitespace</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a20dee4c6af9ea1757eb7e6110396bb45</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLeft</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>ac57d608c41e100e0e516bd9ae781119f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRight</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a4ce5cbc492437e5aba051cd26460c131</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getBaselineY</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a232cec33d0a4ba95cd7a2397b2ca2d36</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTop</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a9e15e717afc304cc88fb0235ca02ad70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getBottom</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a9a29497b36fe35bc422acc57a3d292dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getBounds</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>ac0474d5658ad4e00ea9c2514ed8e96cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveBy</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a798015c7bca78e38eea27249e74ff1ca</anchor>
      <arglist>(float deltaX, float deltaY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a1654c29086fb4624b3fb2142cd435f89</anchor>
      <arglist>(const Graphics &amp;g) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a374c1e157eb015cc7f13c3fdbe8aaf09</anchor>
      <arglist>(const Graphics &amp;g, const AffineTransform &amp;transform) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPath</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>ad4e15d194800b4448c0f176970d1a655</anchor>
      <arglist>(Path &amp;path) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>ac9649bacb9137536e12ed2052d05ce49</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PreferencesPanel</name>
    <filename>classPreferencesPanel.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>PreferencesPanel</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>a06f7a3b4fb49f4ac96961cf8d23b5baf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PreferencesPanel</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>a8abacfd2931eecd7935f6160e6004a30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSettingsPage</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>ab01ab7aead6da192a57857ab89a381ad</anchor>
      <arglist>(const String &amp;pageTitle, const Drawable *normalIcon, const Drawable *overIcon, const Drawable *downIcon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSettingsPage</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>a0303471a50d590d9df84116ad4b2fcf3</anchor>
      <arglist>(const String &amp;pageTitle, const void *imageData, int imageDataSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showInDialogBox</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>a9d3648fe237cc0dbcec6e49cd780f251</anchor>
      <arglist>(const String &amp;dialogTitle, int dialogWidth, int dialogHeight, const Colour &amp;backgroundColour=Colours::white)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Component *</type>
      <name>createComponentForPage</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>a8ab89869d859f9ef7493f5bdf10ee9aa</anchor>
      <arglist>(const String &amp;pageName)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentPage</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>ab29e97b5c691d7104831393fd81e9de1</anchor>
      <arglist>(const String &amp;pageName)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getButtonSize</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>a16f9c292f25f65249a6fbd09990248a4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setButtonSize</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>aac32a515e5c4d317ad31aa5d215706f3</anchor>
      <arglist>(int newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>a6cf34a120677e1cf553843083dc42d51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>aeba5e31cfcdb8558639a3510a7fb8194</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonClicked</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>ac39141bc52cd0e632f03b60e799e2ce7</anchor>
      <arglist>(Button *button)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Primes</name>
    <filename>classPrimes.html</filename>
    <member kind="function" static="yes">
      <type>static BigInteger</type>
      <name>createProbablePrime</name>
      <anchorfile>classPrimes.html</anchorfile>
      <anchor>a0dd92a07f6f866b70f1837b8a5b1f25b</anchor>
      <arglist>(int bitLength, int certainty, const int *randomSeeds=0, int numRandomSeeds=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isProbablyPrime</name>
      <anchorfile>classPrimes.html</anchorfile>
      <anchor>a7c44c5417163632b7d207f9c94270c4e</anchor>
      <arglist>(const BigInteger &amp;number, int certainty)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Process</name>
    <filename>classProcess.html</filename>
    <member kind="enumeration">
      <name>ProcessPriority</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>ad7b18ceb7a8c0a2b6b71856894feb6ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LowPriority</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>ad7b18ceb7a8c0a2b6b71856894feb6efad7f3e46785b41d6d5db5e7afab065281</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NormalPriority</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>ad7b18ceb7a8c0a2b6b71856894feb6efab8355050d1e4ef5af4c057abc20259be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HighPriority</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>ad7b18ceb7a8c0a2b6b71856894feb6efaa72f09a6d0e30d394c6fe7095372a711</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RealtimePriority</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>ad7b18ceb7a8c0a2b6b71856894feb6efa1ab071c1d49e25fc1df3c9663177927e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setPriority</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>a5df93ffa82753982119a033d8a0018b8</anchor>
      <arglist>(const ProcessPriority priority)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>terminate</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>a3b22cbfbc52842975770de5d3e3d96e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isForegroundProcess</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>aabc25470371b03373c7b3ca0704b545e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>raisePrivilege</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>aaa4816a26a8c37b9a84e63c6e3d2415f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lowerPrivilege</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>ac1c5bf1ab8c9b7b4cdd88203bdc10102</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>isRunningUnderDebugger</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>a7a58a2b37beda4343bc1da6a8744ae12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>openDocument</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>aa37ab9ff2d8fe6469bcb7a15b7066384</anchor>
      <arglist>(const String &amp;documentURL, const String &amp;parameters)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>openEmailWithAttachments</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>a09fc35e2a9ad62620478db44e6d7ef69</anchor>
      <arglist>(const String &amp;targetEmailAddress, const String &amp;emailSubject, const String &amp;bodyText, const StringArray &amp;filesToAttach)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *JUCE_CALLTYPE</type>
      <name>getCurrentModuleInstanceHandle</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>a89a3cbef850679516bccdab10e9a5305</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>setCurrentModuleInstanceHandle</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>a82a86c921a568fe5af4968de5c42adb7</anchor>
      <arglist>(void *newHandle) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProgressBar</name>
    <filename>classProgressBar.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base protection="private">Timer</base>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>a3486234bde4b1095a948fea269635d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>a3486234bde4b1095a948fea269635d42a9c73104f0198a1a6e33c1a0135b4d310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>foregroundColourId</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>a3486234bde4b1095a948fea269635d42a92bc4a65179b4e85dff89b628f5a6e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProgressBar</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>afe06d2a756619d38e007f1c3bb408f7a</anchor>
      <arglist>(double &amp;progress)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProgressBar</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>aa0ced60c0ade467a4602c35443e7bc78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPercentageDisplay</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>a19dceb0dc2c110512d0fd7dcec3fc50c</anchor>
      <arglist>(bool shouldDisplayPercentage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextToDisplay</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>a3487f138651d8bc5a29a2586d4862b55</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>a1dd7253a47213468105b035f640a5233</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>aaba558f0f79da898c6140cf5ca6d9c88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>visibilityChanged</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>a433f03dd95119512d097dd32c5befade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>a7623834d2858ad8024ce1a528b513def</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertiesFile</name>
    <filename>classPropertiesFile.html</filename>
    <base>PropertySet</base>
    <base>ChangeBroadcaster</base>
    <base protection="private">Timer</base>
    <class kind="struct">PropertiesFile::Options</class>
    <member kind="enumeration">
      <name>StorageFormat</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>ac4d1ac9a6b624f7e0de7787de46dc05e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>storeAsBinary</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>ac4d1ac9a6b624f7e0de7787de46dc05eadd1552fd266d926522dfa0e162de5328</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>storeAsCompressedBinary</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>ac4d1ac9a6b624f7e0de7787de46dc05eab1ddcaf9fc8d45b4141749e325844f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>storeAsXML</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>ac4d1ac9a6b624f7e0de7787de46dc05eab0145370e12c4174bd36dc6ac6ccc147</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertiesFile</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>a8e47a02c7600f3758f600ed2376589a4</anchor>
      <arglist>(const Options &amp;options)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertiesFile</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>acf3dbec910950b70fe405cc51f7a10e6</anchor>
      <arglist>(const File &amp;file, const Options &amp;options)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PropertiesFile</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>a449b6cc48f72e8d14c73dd4ac9964635</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidFile</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>a31ca79cdb1a4b7c9863d981c9b438904</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveIfNeeded</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>a61b439f35faf3f1add5cdfdd49a85d49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>ad0c24e1809b203c8347ee07cfb599250</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needsToBeSaved</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>af9e77e3bde952ed5face05c19cd51ed4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNeedsToBeSaved</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>a205cb3e66cef5d064578dc22b8b205cb</anchor>
      <arglist>(bool needsToBeSaved)</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getFile</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>a8c42d4ae2b3c11517c8c734de5067815</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>propertyChanged</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>a2f54f9f82dbe5def4f0fc53c412979a8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PropertiesFile::Options</name>
    <filename>structPropertiesFile_1_1Options.html</filename>
    <member kind="function">
      <type></type>
      <name>Options</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>ab70c4b14c608861170e784bfa4d0c5fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getDefaultFile</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>aab9b6617d18ae226217c49f747550de7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>applicationName</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>a6222c4cfec8124ae0af33398a61f2517</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>filenameSuffix</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>a02ba3c3eee660d6ed9a8ce6637791f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>folderName</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>ad5db314e117ec06d23b08aca130500cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>osxLibrarySubFolder</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>aacd8c9dc10f8cce35824410940d04ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>commonToAllUsers</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>a1b4a530664906ebeadce842431f6f681</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ignoreCaseOfKeyNames</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>a430d4a3168ac0be324f7a5c8a40f514a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>millisecondsBeforeSaving</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>a35be64ba2da1b72b6b8b599e8ddb0924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StorageFormat</type>
      <name>storageFormat</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>aed68b3ff89a6943aeac93af26effec2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InterProcessLock *</type>
      <name>processLock</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>a65881e8a7c6e90fbaca03dd2f00a34a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertyComponent</name>
    <filename>classPropertyComponent.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <member kind="function">
      <type></type>
      <name>PropertyComponent</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>abcc554f33995e1b424ac1a0858198f21</anchor>
      <arglist>(const String &amp;propertyName, int preferredHeight=25)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PropertyComponent</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>a34f299f31134464667b23ff94d5afd2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPreferredHeight</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>a733270fac94b39b4db089d79c71a66cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreferredHeight</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>a7a1419d38e6281bc7fef79c89656024a</anchor>
      <arglist>(int newHeight) noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>refresh</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>a0ce62ead3836df49c63e253cf33f83c0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>add0bd23deef904e26b2cedb497c5a00c</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>a223695b8e2bdf8bbf9b0e843d51a72ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>a94e2ff9e536a12d68aa95f12b6f34e54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>preferredHeight</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>ae912e7f6c12e76cf3dc2a9f0d210e4ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertyPanel</name>
    <filename>classPropertyPanel.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>PropertyPanel</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a765b12e87a55fc10508a6ce1933a7951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PropertyPanel</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a54f029a1fc11eebd39945592c021032c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>aaf4d011fa44b1c1ae69f3837df967c30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addProperties</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a304e2a044d426e027a3b98856f83fcde</anchor>
      <arglist>(const Array&lt; PropertyComponent * &gt; &amp;newPropertyComponents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSection</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a55ed5f17f69921324a75c32c9540f4d8</anchor>
      <arglist>(const String &amp;sectionTitle, const Array&lt; PropertyComponent * &gt; &amp;newPropertyComponents, bool shouldSectionInitiallyBeOpen=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshAll</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a4879227d607dc41ac4f767f27299570c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getSectionNames</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a62970c587b749da9e7847b453536ebc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSectionOpen</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a1e6203d3944d38363567f171e79eb4d7</anchor>
      <arglist>(int sectionIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSectionOpen</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>ab16be3f10d266c39eb68eefff0c5d7c7</anchor>
      <arglist>(int sectionIndex, bool shouldBeOpen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSectionEnabled</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a1fe2441419859069d012425dd137dc47</anchor>
      <arglist>(int sectionIndex, bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getOpennessState</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a64d64045e5da843e3c4b159adec28420</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreOpennessState</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>aed72746ba6c25b392fa70dd3af4a60bd</anchor>
      <arglist>(const XmlElement &amp;newState)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMessageWhenEmpty</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a0f20bbec2111121821004b62634baf21</anchor>
      <arglist>(const String &amp;newMessage)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getMessageWhenEmpty</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>ae9189da1201b13604026aecf257e6f9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a870b8c8ff9857d80722ba0bb9a822b57</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a32fc62ba32120f2bc4d3d40aef701640</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertySet</name>
    <filename>classPropertySet.html</filename>
    <member kind="function">
      <type></type>
      <name>PropertySet</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a8e91a4cff9a69a96f7957c038b919870</anchor>
      <arglist>(bool ignoreCaseOfKeyNames=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertySet</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a85f11257e712b1fc4074a9e2dbc24e71</anchor>
      <arglist>(const PropertySet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PropertySet &amp;</type>
      <name>operator=</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a11163a300c9d6d483f073f9e004fe89b</anchor>
      <arglist>(const PropertySet &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PropertySet</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a9243fb6fb5a71e6795f3bbda95f009e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getValue</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>ab74bde494c4548bf77a509d1a931cdf2</anchor>
      <arglist>(const String &amp;keyName, const String &amp;defaultReturnValue=String::empty) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntValue</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a215adecbf27b88b13ccf41787c8d333b</anchor>
      <arglist>(const String &amp;keyName, const int defaultReturnValue=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleValue</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a1e4476bd0e1b376ac8145749806457cd</anchor>
      <arglist>(const String &amp;keyName, const double defaultReturnValue=0.0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBoolValue</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a2b7fe4c1c381370777fae1b4f0b1b7ec</anchor>
      <arglist>(const String &amp;keyName, const bool defaultReturnValue=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getXmlValue</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a9dbf8f8da046721e1a28e513b7c21004</anchor>
      <arglist>(const String &amp;keyName) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a696515de52c7310117e7914a02b58e57</anchor>
      <arglist>(const String &amp;keyName, const var &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a64fb29cf07186f48e599afe7108f85e5</anchor>
      <arglist>(const String &amp;keyName, const XmlElement *xml)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAllPropertiesFrom</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a340892a4bda637623401fe97035c1eb5</anchor>
      <arglist>(const PropertySet &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeValue</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a98cfaa19583819e6fcae0dda8ff49ba8</anchor>
      <arglist>(const String &amp;keyName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsKey</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a1ecc530614b9535bba94b806b7c75f28</anchor>
      <arglist>(const String &amp;keyName) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a17bc35d7608a5dcce584d2eace3096d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StringPairArray &amp;</type>
      <name>getAllProperties</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>ae8323d944277335563739d934de3cc9d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const CriticalSection &amp;</type>
      <name>getLock</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a3b371714834842b485583c305f2d5602</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>createXml</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>ae2fa02a9f1a1d41c0b32fc5d0c4e31fb</anchor>
      <arglist>(const String &amp;nodeName) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreFromXml</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>aeb4db0338ee4d9d121427990306d8101</anchor>
      <arglist>(const XmlElement &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFallbackPropertySet</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a624ae2f6c294510397957dd0dc2e1bd2</anchor>
      <arglist>(PropertySet *fallbackProperties) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PropertySet *</type>
      <name>getFallbackPropertySet</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a1fb12c22b6568c72ed6d46dd57927e87</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>propertyChanged</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a1f7586bf00529d3981f4576a44a6d4b0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Quaternion</name>
    <filename>classQuaternion.html</filename>
    <templarg>Type</templarg>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>ab6cfa17954ad0cf303877c8b7d578cc2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a55df57ee8430a9b1b1581ace70e105e3</anchor>
      <arglist>(const Quaternion &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a07b610b5cb16d11da218c438ebfcede1</anchor>
      <arglist>(const Vector3D&lt; Type &gt; &amp;vector_, const Type &amp;scalar_) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>af1c1022f177cdffb91abd24fa98d465a</anchor>
      <arglist>(const Type &amp;x, const Type &amp;y, const Type &amp;z, const Type &amp;w) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Quaternion &amp;</type>
      <name>operator=</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a7adb3fc224e1a1bde05cd76126a9b2b1</anchor>
      <arglist>(const Quaternion &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Quaternion &amp;</type>
      <name>operator*=</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a7d587b0360066e38471702911cb46b9e</anchor>
      <arglist>(const Quaternion &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>length</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>aef1e525b9ed4bc89a21b4fadf1e4f54a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>normal</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a27069720d50f0b9851eba38bf4339def</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>normalised</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a8cb6b7c2c79ecc69a5116b84d29e8fb2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Matrix3D&lt; Type &gt;</type>
      <name>getRotationMatrix</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a14dee0a7b0f7a7a79fdd0c6741b49131</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion</type>
      <name>fromAngle</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a3428b4a8d50876ed90cc3fba46d49eca</anchor>
      <arglist>(const Type &amp;angle, const Vector3D&lt; Type &gt; &amp;axis) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Vector3D&lt; Type &gt;</type>
      <name>vector</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>aea2b69403fdef5dfde9c62c9aeac3925</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>scalar</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>adfe519277223a4cb9321dc7f0d3b5cca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QuickTimeMovieComponent</name>
    <filename>classQuickTimeMovieComponent.html</filename>
    <member kind="function">
      <type></type>
      <name>QuickTimeMovieComponent</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>affdb8f0235f6256d8330c4d336818ea7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QuickTimeMovieComponent</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>ad9544fe017c34bf3f8c57b8b17bcd5f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadMovie</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>af5ad86dd1c238eba1b350f849dddd297</anchor>
      <arglist>(const File &amp;movieFile, bool isControllerVisible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadMovie</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>a7d9e0e14943e239e941506b62e85b412</anchor>
      <arglist>(const URL &amp;movieURL, bool isControllerVisible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadMovie</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>ae322fa999f66f292cfdc820675cec6a1</anchor>
      <arglist>(InputStream *movieStream, bool isControllerVisible)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeMovie</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>a2c5b3eb61e7b700e776f7751142404d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getCurrentMovieFile</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>a9243b52372b7737130e42fb7193516ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMovieOpen</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>a6c02b21654dfb79d4caa475a0cba2bf5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMovieDuration</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>ad0e80d03d8f81bc749c5fb2725b48df0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMovieNormalSize</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>a48b1a2bca7e10f365096933eb392f25b</anchor>
      <arglist>(int &amp;width, int &amp;height) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsWithCorrectAspectRatio</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>ad886c1052ff746bc1f906880b2280111</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;spaceToFitWithin, const RectanglePlacement &amp;placement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>a414a24a5fc5ceb0316a5f0a4db4949c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>a72c16a9fa545bfbb6f6a1b91aa42397b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPlaying</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>a5a4d08fb8a56f446ef12208f43bad432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>goToStart</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>adc3f68a11f3443403a1b7ae33d0e9dc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>aa00c45eb934fc6606314039475742d2f</anchor>
      <arglist>(double seconds)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPosition</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>a59488ced8277c90b53c0e66061ba9bb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>a270f3d77ddf38d0d913b00e5e01bd08f</anchor>
      <arglist>(float newSpeed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMovieVolume</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>a205e05453c0231a6c7cadfe543e8a634</anchor>
      <arglist>(float newVolume)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMovieVolume</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>a3d6f4e0f46be3c4aad6812a075e7a140</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLooping</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>ae2f15e35b4bb67a08f6bb15531618dd1</anchor>
      <arglist>(bool shouldLoop)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLooping</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>ae0045796fb46b2c8b771638274c37925</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isControllerVisible</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>a9c03bfcb38de3e4aae653f0b9f193b9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>a4008dc9d5480b7720d3118957eae44a1</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isQuickTimeAvailable</name>
      <anchorfile>classQuickTimeMovieComponent.html</anchorfile>
      <anchor>a4ca312e8d39b325fc3b5a66b3ffdf46a</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Random</name>
    <filename>classRandom.html</filename>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a510ef17add8a962faf696cf0f434d8f8</anchor>
      <arglist>(int64 seedValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>acb76b49c3903a3c4fb67fd216341f08d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Random</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a98b1bf7fbd8c122c08c9f35b9e603923</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nextInt</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a69dd2014564478eb13ca41c03679c8f9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nextInt</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a6ba948a9d1935253f9770d848f57412f</anchor>
      <arglist>(int maxValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>nextInt64</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>aa78fa923adb76a168c5c67d072cfcef3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>nextFloat</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>aec88d4e5cf44faaa038f6cfb41e96406</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nextDouble</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a764eba8fe3386554268f395ff1c4e7ea</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextBool</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>aa360f04c653725ec92b3173af338ed37</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>nextLargeNumber</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>af9aacfc547bfcdba8aa2fa8f04022896</anchor>
      <arglist>(const BigInteger &amp;maximumValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBitsRandomly</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a212bf60fe480e13ea468ba4db1de3329</anchor>
      <arglist>(BigInteger &amp;arrayToChange, int startBit, int numBits)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a09bc3dbf46b852575593fa732dcbb824</anchor>
      <arglist>(int64 newSeed) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>combineSeed</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>af8a7c8f1f8aa96b761c441f34382cd4a</anchor>
      <arglist>(int64 seedValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeedRandomly</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a2b697677bd4fef05082e7c036366289d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Random &amp;</type>
      <name>getSystemRandom</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>ab28f53c256fcd938cd86137c5c44c5fc</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Range</name>
    <filename>classRange.html</filename>
    <templarg>ValueType</templarg>
    <member kind="function">
      <type></type>
      <name>Range</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a83a189600c18bec7299c3e66423a640d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Range</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a55d4a6e6a9b5baa908e2adeb574585f5</anchor>
      <arglist>(const ValueType start_, const ValueType end_) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Range</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a3a9eaa9e1d16af81b0afe4454ff21b4a</anchor>
      <arglist>(const Range &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range &amp;</type>
      <name>operator=</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a1d7f38fbde25bfcaf5b8f4b81dcb9391</anchor>
      <arglist>(const Range &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Range</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a8b6dd7dcdbbc6b3ccd60e4e60b9b42dd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getStart</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a3709db921df3cf8d170bb7f983b1f05c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getLength</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>af1bac15b46a7d40c7b136c1075553171</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getEnd</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a74c09ef37d18ee8bbd1fdaaeb1d0fcf2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>ad0b11c4ca306ab0ca552e5bca6b91523</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a6dc2c7d34ff6b3ac8de07efe2274b366</anchor>
      <arglist>(const ValueType newStart) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>withStart</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a967f3f5dca8f6c21b809b800c5617969</anchor>
      <arglist>(const ValueType newStart) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>movedToStartAt</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>ac43518af962bee4118ff13df4f176cf6</anchor>
      <arglist>(const ValueType newStart) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnd</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a720abbdd9cc650ef1927f35822865ee0</anchor>
      <arglist>(const ValueType newEnd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>withEnd</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a9287e31c3329ff73598414814a015574</anchor>
      <arglist>(const ValueType newEnd) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>movedToEndAt</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a5ea22f43dcf5400fa812ef86f0b2b237</anchor>
      <arglist>(const ValueType newEnd) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLength</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a30634e64e7b97081134a96465bb9d1b9</anchor>
      <arglist>(const ValueType newLength) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>withLength</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>af1c3c27187978044ce66611d572cbd60</anchor>
      <arglist>(const ValueType newLength) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Range &amp;</type>
      <name>operator+=</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a60673daf9f777b45e9262c48825b9cea</anchor>
      <arglist>(const ValueType amountToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Range &amp;</type>
      <name>operator-=</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a69df39c2b88a6bcf961cb04928337c05</anchor>
      <arglist>(const ValueType amountToSubtract) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>operator+</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a5df07a0205fb16865411244b5c6fbe83</anchor>
      <arglist>(const ValueType amountToAdd) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>operator-</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a41de372355de47a0f991f8079add45bf</anchor>
      <arglist>(const ValueType amountToSubtract) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a2a1fa51f1e59f4d2369187763683e7eb</anchor>
      <arglist>(const Range &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>accb2fb3f7317ce85c87dd0fa2a4e1234</anchor>
      <arglist>(const Range &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a23fa32169a76c2d3c44b2576c2b9e2d9</anchor>
      <arglist>(const ValueType position) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>clipValue</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a67ae86bf19391b172c5a942e17a8270b</anchor>
      <arglist>(const ValueType value) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a5d981058ad1418a17f7353524830cc7c</anchor>
      <arglist>(const Range &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a2ccf6a6a8743302a0cf62ea60add0b57</anchor>
      <arglist>(const Range &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>getIntersectionWith</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a4d159a72bdb6e882a3440f29cb956542</anchor>
      <arglist>(const Range &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>getUnionWith</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a2623daf4b361bd21dd7eae11429c7e2e</anchor>
      <arglist>(const Range &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>constrainRange</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a13a9b2afc51dc2bba36a49f0e5e9cb08</anchor>
      <arglist>(const Range &amp;rangeToConstrain) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Range</type>
      <name>between</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>aa0165f9820b176b5df903e19c8a2a88b</anchor>
      <arglist>(const ValueType position1, const ValueType position2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Range</type>
      <name>emptyRange</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>ad7d026bfc44eaa1dc8725fd13bfe8d77</anchor>
      <arglist>(const ValueType start) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadWriteLock</name>
    <filename>classReadWriteLock.html</filename>
    <member kind="function">
      <type></type>
      <name>ReadWriteLock</name>
      <anchorfile>classReadWriteLock.html</anchorfile>
      <anchor>ac4d03ea1fd3a24c1813492b8487134af</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReadWriteLock</name>
      <anchorfile>classReadWriteLock.html</anchorfile>
      <anchor>af57fd41f09be7654f33cc0e4aa458e5a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enterRead</name>
      <anchorfile>classReadWriteLock.html</anchorfile>
      <anchor>ae69612d80a6abdccfd0f911eea78bec7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exitRead</name>
      <anchorfile>classReadWriteLock.html</anchorfile>
      <anchor>a4f84fd4d0560d01674922e650c0ca4bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enterWrite</name>
      <anchorfile>classReadWriteLock.html</anchorfile>
      <anchor>a680913272878d262ab8dff16b3b5a4e7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryEnterWrite</name>
      <anchorfile>classReadWriteLock.html</anchorfile>
      <anchor>ac7f0b0aefca34943957ac1623b97a8a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exitWrite</name>
      <anchorfile>classReadWriteLock.html</anchorfile>
      <anchor>a3368936be01cf4eb129838230098abe8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RecentlyOpenedFilesList</name>
    <filename>classRecentlyOpenedFilesList.html</filename>
    <member kind="function">
      <type></type>
      <name>RecentlyOpenedFilesList</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>a1be25db49e1770f3f294121d7a407537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RecentlyOpenedFilesList</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>afdd6264636158fdecd942bc522336dd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumberOfItems</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>aa022b3b01d6d0af7c9ef63ce543924d3</anchor>
      <arglist>(int newMaxNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxNumberOfItems</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>a9620dfc3f2ce6a9d8ddf25020b650cd5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFiles</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>af8ee782e0440ed9c9ecb1c7f199268bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getFile</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>a982bf4d1a993b582df76850ed0d4fffa</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getAllFilenames</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>af59ea122b4e9837f897b2fc2f4071e72</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>aefd50d336abfb51a10ea37dc55362848</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFile</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>a06acf3ddf28eb9ac3bb71d66adfadc11</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFile</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>a391a9c9b097104eb2ab5848bf26bdcdb</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeNonExistentFiles</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>abd9dfb078ad5a95455c2db116b4d7c8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>createPopupMenuItems</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>a5ca3c3d1efd27beacd331b950cd30269</anchor>
      <arglist>(PopupMenu &amp;menuToAddItemsTo, int baseItemId, bool showFullPaths, bool dontAddNonExistentFiles, const File **filesToAvoid=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>a1415a5e0a07cdb3ff5186707546c8fcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreFromString</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>ac1c8310d4a13cba8c0b7168b980e7e09</anchor>
      <arglist>(const String &amp;stringifiedVersion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerRecentFileNatively</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>a8e4455fedda03b94a62fadec4a643cec</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Rectangle</name>
    <filename>classRectangle.html</filename>
    <templarg>ValueType</templarg>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a714de88b89a1750213007bee523186c1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ad08f352cfd36d1b41954624b4689ad5d</anchor>
      <arglist>(const Rectangle &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ac5a00559f3a14f15d05fe30df9d1a7e2</anchor>
      <arglist>(const ValueType initialX, const ValueType initialY, const ValueType width, const ValueType height) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a4d68dfcfbbe5f15c5dc07132538b143f</anchor>
      <arglist>(const ValueType width, const ValueType height) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a4e3a60fbc11830a1fe41fca6395c3d92</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;corner1, const Point&lt; ValueType &gt; &amp;corner2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle &amp;</type>
      <name>operator=</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a3a5b58053b811e4cbc9406ab5010491d</anchor>
      <arglist>(const Rectangle &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Rectangle</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ae4f36d6e7f37a57ec4a557a67679f114</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ad079632253a625cf014bc52cf26485f4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getX</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a4b8223fb659d6c7f95a72e8d3fbe793d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getY</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a3050042669b496be5f029b1ab6fc1f52</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getWidth</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a76c51bd8fcbdd3ac5d8f6dff3cf4a57e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getHeight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a92fff07d827126d92607d0d7c395c323</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getRight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aeea826946e996fc0b3d8f44d21b181c0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getBottom</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>af6b325feb4f7b107bcc51aee56a5fbc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getCentreX</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>af59d74140460070d2dace797d8a984ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getCentreY</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a5259e814b4ff2265beffecb4d76c7f0c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getCentre</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a77e28cc95dab05e0a3740fd45bd554f9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getAspectRatio</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a3cd7f05d45a8dff3dbd033434497f8ee</anchor>
      <arglist>(const bool widthOverHeight=true) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Point&lt; ValueType &gt; &amp;</type>
      <name>getPosition</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ac323373fa1d0858ecf9062f702bb7160</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a035c238526ea7c9216c69f90ddbaf722</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;newPos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a22be35b33287eda5e4da8973352dc7b7</anchor>
      <arglist>(const ValueType newX, const ValueType newY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Point&lt; ValueType &gt; &amp;</type>
      <name>getTopLeft</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a8f4f57ac2e2b37b79c55fc43d7c42b55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getTopRight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a7551d1036a0b73ffed81ff1b82a2d6b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getBottomLeft</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a3552707d8d5712d749653efc2a117592</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getBottomRight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a227c5996016fa75ccc9745aa72b22b97</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aafcc07c9f2143bcb9ab4d9d30f63f2f6</anchor>
      <arglist>(const ValueType newWidth, const ValueType newHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a4d9944675c324ae9ed093ccd15943508</anchor>
      <arglist>(const ValueType newX, const ValueType newY, const ValueType newWidth, const ValueType newHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ab32d305cc520d6e16792316e56ff4e28</anchor>
      <arglist>(const ValueType newX) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>acbacd03ba0802db2878b9c18b127a755</anchor>
      <arglist>(const ValueType newY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ae1969a795273cc799c26895442e2a77d</anchor>
      <arglist>(const ValueType newWidth) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a1c7becb195bba4ce3c8f751dd3493988</anchor>
      <arglist>(const ValueType newHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withX</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a7d845715b755180419603f61ff2329ad</anchor>
      <arglist>(const ValueType newX) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withY</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>acd9fb0641be5b306792f97a275aaf6a1</anchor>
      <arglist>(const ValueType newY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withPosition</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a536dd687b3882eb6c0e76b8009328797</anchor>
      <arglist>(const ValueType newX, const ValueType newY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withPosition</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a2896c59e139a261cc4c157eb0a979295</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;newPos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withZeroOrigin</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a37748fcf8ae61d1aa31ab49aa5cc787c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withWidth</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a988f59278bf82bd22c7ef0223b346e3c</anchor>
      <arglist>(const ValueType newWidth) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withHeight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a3039fd3174b3ac868ef87107b113b3c5</anchor>
      <arglist>(const ValueType newHeight) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withSize</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aa6ddbf701f8d299190fcf4d89e0353d0</anchor>
      <arglist>(const ValueType newWidth, const ValueType newHeight) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLeft</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aba8390a7109c7867e9a232affc964009</anchor>
      <arglist>(const ValueType newLeft) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withLeft</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a251a8abab9c44e5f069e317a0b0e73d4</anchor>
      <arglist>(const ValueType newLeft) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTop</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a60e7926b7b38472dba24f84173204d81</anchor>
      <arglist>(const ValueType newTop) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withTop</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a30b3f581e96929631e2a557d74e44700</anchor>
      <arglist>(const ValueType newTop) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a6d18e11a59defbe5729be1533db1964e</anchor>
      <arglist>(const ValueType newRight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withRight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a0719d2319805d1196fad3b149a6fa329</anchor>
      <arglist>(const ValueType newRight) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBottom</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>acc190d108843198d3ed77fe90a88162a</anchor>
      <arglist>(const ValueType newBottom) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withBottom</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a9a2caa80567a4aa6360d1e4e4b43211f</anchor>
      <arglist>(const ValueType newBottom) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a11bc5bd1c9719097801f593c4fdab7dd</anchor>
      <arglist>(const ValueType deltaX, const ValueType deltaY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>translated</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aa8a09fd1fa5b2ce43d77ecacf3981f05</anchor>
      <arglist>(const ValueType deltaX, const ValueType deltaY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>operator+</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a86c96b9d8f2189b4ac0cafcf062b1a9a</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;deltaPosition) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle &amp;</type>
      <name>operator+=</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a7d815c3d7d3a3805e0417e49b27d5bc0</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;deltaPosition) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>operator-</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a32e6889629bfe58636ef90256718ee6c</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;deltaPosition) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle &amp;</type>
      <name>operator-=</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a7b2569786135d79bba71f8dee5ff7a36</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;deltaPosition) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a438d27a0850e9af450376dc0444e7509</anchor>
      <arglist>(const ValueType deltaX, const ValueType deltaY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>expanded</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aef5d52ca6d0374cad679174067513cb4</anchor>
      <arglist>(const ValueType deltaX, const ValueType deltaY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aa19b50beadd6b93bb1ba6e91b7610b6f</anchor>
      <arglist>(const ValueType deltaX, const ValueType deltaY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>reduced</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a3944059d01cbe84fd6e826a9ae478135</anchor>
      <arglist>(const ValueType deltaX, const ValueType deltaY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>removeFromTop</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a6e1fc3d8668683234c2284b9ea12c7bf</anchor>
      <arglist>(const ValueType amountToRemove) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>removeFromLeft</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ae84d6639ce7a5e72aa1369ba1a973635</anchor>
      <arglist>(const ValueType amountToRemove) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>removeFromRight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a67c1ae2bf4753bda71894271dc94b4f6</anchor>
      <arglist>(ValueType amountToRemove) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>removeFromBottom</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a6f7d3a88adfc3b3bf699ca4ce5b9e6c0</anchor>
      <arglist>(ValueType amountToRemove) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a73b0d6132398d4c2530ef6ba13d706fd</anchor>
      <arglist>(const Rectangle &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aab19e84fc33b5bfb641b2989b6cc29f8</anchor>
      <arglist>(const Rectangle &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ac34948bc383d65145f4df2143f1c488f</anchor>
      <arglist>(const ValueType xCoord, const ValueType yCoord) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aef8b68f4cdce445b111b2c926ac2d732</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a1897bfd827a2194af6b125110e022706</anchor>
      <arglist>(const Rectangle &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getConstrainedPoint</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ae8c31259b4537d09e65e56857b224456</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a55ba80762b504054c3aaa02ae833f350</anchor>
      <arglist>(const Rectangle &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>getIntersection</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a28a09961d9ad8b60909fd7d946521db9</anchor>
      <arglist>(const Rectangle &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectRectangle</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a7f81c03f0a7d413f28a6f1a2ba65560d</anchor>
      <arglist>(ValueType &amp;otherX, ValueType &amp;otherY, ValueType &amp;otherW, ValueType &amp;otherH) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>getUnion</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>af8cd7e93ec67369fd194202a27e992c1</anchor>
      <arglist>(const Rectangle &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enlargeIfAdjacent</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a2c3c2823f8e96240cde13789760de52b</anchor>
      <arglist>(const Rectangle &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduceIfPartlyContainedIn</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>afeb73325b68201f34d2e51502ba286e6</anchor>
      <arglist>(const Rectangle &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>transformed</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a9d9a2c2b0464a69e14d43da14724ab07</anchor>
      <arglist>(const AffineTransform &amp;transform) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getSmallestIntegerContainer</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>acbf2014087b3c3772848e868f98aaf33</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>toFloat</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aa39fc9127d088428ead1cb72a95d652a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a4f17a228cbf98c4bdc9af577687abb56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rectangle</type>
      <name>leftTopRightBottom</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ad07557331c5ca8c5597aed498558cefc</anchor>
      <arglist>(const ValueType left, const ValueType top, const ValueType right, const ValueType bottom) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rectangle</type>
      <name>findAreaContainingPoints</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>afd26907ad3c7deb3bb9cf8b298e774ae</anchor>
      <arglist>(const Point&lt; ValueType &gt; *const points, const int numPoints) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>intersectRectangles</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ab8097b9c1774aebde29eb84fc3d1072c</anchor>
      <arglist>(ValueType &amp;x1, ValueType &amp;y1, ValueType &amp;w1, ValueType &amp;h1, const ValueType x2, const ValueType y2, const ValueType w2, const ValueType h2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rectangle</type>
      <name>fromString</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a1c76b1a985681788a2e3244a130b5d8f</anchor>
      <arglist>(const String &amp;stringVersion)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RectangleList</name>
    <filename>classRectangleList.html</filename>
    <class kind="class">RectangleList::Iterator</class>
    <member kind="function">
      <type></type>
      <name>RectangleList</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a88c6d97ef8151b5877f196a80a916eb6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectangleList</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a0ae1a74271a47a5630210aebf873e899</anchor>
      <arglist>(const RectangleList &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectangleList</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a5719565ccdf8a5d6226b76c5db6d316b</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>RectangleList &amp;</type>
      <name>operator=</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>ada1a34c855b3710a47ab6127b38c9f22</anchor>
      <arglist>(const RectangleList &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RectangleList</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>ae5fd08d0c262225635d9016f7bfa5360</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a546cbe75fdb06ca9bb40563ec4e8e909</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRectangles</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a08aa27e677332443cd34d4347293a1a6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getRectangle</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a6995d8f9aa1946f22f87c8dd2471cf58</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a9e5973d238266c4230f02ac37db8bf52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>acc20cb620fe58f85ab24c25c84b7ff2f</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a8a01f9c8b2530b465b76e1bf9556bbca</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addWithoutMerging</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>ac6b46bf77b0d13fadacece1d712f56d8</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a567ec13612153e22d9dd37e721fff48e</anchor>
      <arglist>(const RectangleList &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>afb236b90b645436b30bed41a2d5d59d8</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>subtract</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a64c96e07453c3c6030f10f461347f5ba</anchor>
      <arglist>(const RectangleList &amp;otherList)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipTo</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a608183aa941b4825fe10a58673b7b58d</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipTo</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a2adc353c63d00e507a71914f2778c930</anchor>
      <arglist>(const RectangleList &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIntersectionWith</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a6738e0378ffc0fa514270f6ae20722eb</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rect, RectangleList &amp;destRegion) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>aad909002458f9bea03e0d58c82400d86</anchor>
      <arglist>(RectangleList &amp;otherList) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsPoint</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a218a01d5d1a909a70dd519159b8dc2d3</anchor>
      <arglist>(int x, int y) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsRectangle</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a4008b493f77bc4e901604289127e50c8</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rectangleToCheck) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectsRectangle</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>ab14b4d4801dd53dc23ce2826867952d0</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rectangleToCheck) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a80f23a1a38e993397b044d79aa2a8fc4</anchor>
      <arglist>(const RectangleList &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getBounds</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>ad6a1cde113116f49093325d2b7f5d226</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>consolidate</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a686a33633161c4bfa4f9edb8b006ef5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>offsetAll</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>ac5f3ae4d7faddaf5ec042b4f39038d0b</anchor>
      <arglist>(int dx, int dy) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>toPath</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a577e67a56c9c7b17afe3c2c3fe30d7a5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RectangleList::Iterator</name>
    <filename>classRectangleList_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classRectangleList_1_1Iterator.html</anchorfile>
      <anchor>a02f527d1bad199fa04a9a1f3ce8a3148</anchor>
      <arglist>(const RectangleList &amp;list) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Iterator</name>
      <anchorfile>classRectangleList_1_1Iterator.html</anchorfile>
      <anchor>af57babfc6ca0fd242c0dfecb18b1f2b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classRectangleList_1_1Iterator.html</anchorfile>
      <anchor>a0e1ee3741ed6b633f02d4abdee4a7654</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Rectangle&lt; int &gt; *</type>
      <name>getRectangle</name>
      <anchorfile>classRectangleList_1_1Iterator.html</anchorfile>
      <anchor>addf2ffeb8d6f411b242079642fc1137e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RectanglePlacement</name>
    <filename>classRectanglePlacement.html</filename>
    <member kind="enumvalue">
      <name>xLeft</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa57d215a0f6418947d8b45ba039c842cae2539f35e48e3c7396cffeb8079e27dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xRight</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa57d215a0f6418947d8b45ba039c842ca72a92773894d10ec3b4ff55b56d08915</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xMid</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa57d215a0f6418947d8b45ba039c842cad1348e06780084037a29fc0621d10392</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>yTop</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa57d215a0f6418947d8b45ba039c842ca1b650115227b059f9eb2c07ecdfcb3ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>yBottom</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa57d215a0f6418947d8b45ba039c842ca467435011959541ca61cc362640db547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>yMid</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa57d215a0f6418947d8b45ba039c842ca8bfb9c8cceb359b4f00a9839168a7769</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>stretchToFit</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa57d215a0f6418947d8b45ba039c842ca592b34ff9ad1d85db16f2e02c6252b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fillDestination</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa57d215a0f6418947d8b45ba039c842caace05e9cfe83bb3dbbef781d3622cd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>onlyReduceInSize</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa57d215a0f6418947d8b45ba039c842ca32d2c8f0142b82c188af878548f4d238</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>onlyIncreaseInSize</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa57d215a0f6418947d8b45ba039c842ca54aea49f09ca4f2ac6e5c81859067b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>doNotResize</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa57d215a0f6418947d8b45ba039c842ca1b4035a6dd90fd7ecf4b2014f33bf16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>centred</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa57d215a0f6418947d8b45ba039c842cadf52ee04f4f43cfcc6049d49833dd946</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectanglePlacement</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>a7c0287e45535fcd281f8a0ea4c5aac85</anchor>
      <arglist>(int flags_) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectanglePlacement</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>a2f86c6e0ad96e6b0b69fb96674b45263</anchor>
      <arglist>(const RectanglePlacement &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RectanglePlacement &amp;</type>
      <name>operator=</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>af031a1561d0f78ee1d1a4ef63594896f</anchor>
      <arglist>(const RectanglePlacement &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>a6ef36e72013fe02de89126058fabbc33</anchor>
      <arglist>(const RectanglePlacement &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>ad3a8a35506d394ec077ce52e0135883a</anchor>
      <arglist>(const RectanglePlacement &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFlags</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa1e343a06d0a81d560093dd27ecd560f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testFlags</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa1e542a01a80f5f7a53399dd2ee385a6</anchor>
      <arglist>(int flagsToTest) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTo</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>a1d2340aa383cee6dc141805ae680369d</anchor>
      <arglist>(double &amp;sourceX, double &amp;sourceY, double &amp;sourceW, double &amp;sourceH, double destinationX, double destinationY, double destinationW, double destinationH) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Rectangle&lt; ValueType &gt;</type>
      <name>appliedTo</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>a633155110b234e84a5f381b9f5fd75ee</anchor>
      <arglist>(const Rectangle&lt; ValueType &gt; &amp;source, const Rectangle&lt; ValueType &gt; &amp;destination) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const AffineTransform</type>
      <name>getTransformToFit</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>a86311fd8cff2e4ca2940616434610743</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;source, const Rectangle&lt; float &gt; &amp;destination) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReferenceCountedArray</name>
    <filename>classReferenceCountedArray.html</filename>
    <templarg>ObjectClass</templarg>
    <templarg>TypeOfCriticalSectionToUse</templarg>
    <member kind="typedef">
      <type>ReferenceCountedObjectPtr&lt; ObjectClass &gt;</type>
      <name>ObjectClassPtr</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a5aeb8e0e9bc7f0cb0f19237edf286f64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeOfCriticalSectionToUse::ScopedLockType</type>
      <name>ScopedLockType</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a7298683e2cae9520f1b34a4d6679053d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCountedArray</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a3026e9cca0a8b1d63751f3fbb930bf17</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCountedArray</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ace310eb210683601fd6aac301795111c</anchor>
      <arglist>(const ReferenceCountedArray &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCountedArray</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a8966c5b4b7871123035f41fd4b7b530d</anchor>
      <arglist>(const ReferenceCountedArray&lt; OtherObjectClass, OtherCriticalSection &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ab9fd36e38317591da957d13be587aeba</anchor>
      <arglist>(const ReferenceCountedArray &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedArray&lt; ObjectClass, TypeOfCriticalSectionToUse &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>af2ed6c93d85a8254447cd4289fef7caf</anchor>
      <arglist>(const ReferenceCountedArray&lt; OtherObjectClass, TypeOfCriticalSectionToUse &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReferenceCountedArray</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a22c778cc2086117da5ac870485cb34e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a6dc6a1c3540a6f30456db545edb0486d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ad4865c477b65f161105ded613856de64</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClassPtr</type>
      <name>operator[]</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a28d5adcb50aff95ba86562c42718d39f</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClassPtr</type>
      <name>getUnchecked</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a2f89994333ed33a20efc36e216939c58</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>getObjectPointer</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ac9c63ba3ddc186c6e9fb0c3c97d1eb57</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>getObjectPointerUnchecked</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a8da693cf7dedfda5bb8a8e7331c4bf1f</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClassPtr</type>
      <name>getFirst</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ab352b571e4ee02eedad655bba6434725</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClassPtr</type>
      <name>getLast</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a906fbb190a57a893faa951949b93418b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass **</type>
      <name>getRawDataPointer</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>abad2570544706d399a2b0b65d1ea2f6f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass **</type>
      <name>begin</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a32aac83fe214508e442f1de390ff8e54</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass **</type>
      <name>end</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a73c8d0ba66862dfe70e584c2efd41ccf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a034cad62a8ebb5854db4db2ff4afbf71</anchor>
      <arglist>(const ObjectClass *const objectToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a5660a4dab2e9765784f1c5af73d7c303</anchor>
      <arglist>(const ObjectClass *const objectToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a2196969a54abfa3214a7ca9afaa1933e</anchor>
      <arglist>(ObjectClass *const newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a6402190c48d707e2cd072850a4aed1a7</anchor>
      <arglist>(int indexToInsertAt, ObjectClass *const newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addIfNotAlreadyThere</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a6bfe477012adf753bca5b32053d2ffbf</anchor>
      <arglist>(ObjectClass *const newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ab091a80b766a24ba4915a10c1d71cd81</anchor>
      <arglist>(const int indexToChange, ObjectClass *const newObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArray</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a6e3aa5375dce143b69a467ad405c2867</anchor>
      <arglist>(const ReferenceCountedArray&lt; ObjectClass, TypeOfCriticalSectionToUse &gt; &amp;arrayToAddFrom, int startIndex=0, int numElementsToAdd=-1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSorted</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>afb1a9958a818b6c410d79fc65b23432e</anchor>
      <arglist>(ElementComparator &amp;comparator, ObjectClass *newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOrReplaceSorted</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ae4d087d8723db7a39fb876d419d9f960</anchor>
      <arglist>(ElementComparator &amp;comparator, ObjectClass *newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfSorted</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>aba887431a64561282cdbabafe27e70e8</anchor>
      <arglist>(ElementComparator &amp;comparator, const ObjectClass *const objectToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>aea193b7f41ffc381f1c12440f997ccdd</anchor>
      <arglist>(const int indexToRemove)</arglist>
    </member>
    <member kind="function">
      <type>ObjectClassPtr</type>
      <name>removeAndReturn</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a8fc0a717f91f4ff3b144f0224afdc5dd</anchor>
      <arglist>(const int indexToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObject</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a3413cc68e78418918d69bf7ae132c894</anchor>
      <arglist>(ObjectClass *const objectToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRange</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a9430ab8bb81848ef46507d2ed2eb40c2</anchor>
      <arglist>(const int startIndex, const int numberToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLast</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a2f2ff002f4ca7a7062b449ade2b61307</anchor>
      <arglist>(int howManyToRemove=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a53122fe07050eef2918538d0b4d90804</anchor>
      <arglist>(const int index1, const int index2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>acd40cae01b2a34720491bf4cd462ad80</anchor>
      <arglist>(const int currentIndex, int newIndex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWithArray</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a1541c503104264e47c3d63a71c9e2734</anchor>
      <arglist>(ReferenceCountedArray &amp;otherArray) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a16715eb28fe22682d87c33b02a6ed882</anchor>
      <arglist>(const ReferenceCountedArray &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a42ad63db85d37f3c649f21bf3b03a950</anchor>
      <arglist>(const ReferenceCountedArray&lt; ObjectClass, TypeOfCriticalSectionToUse &gt; &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a51248166d0e546e8f6ba9f831a835a7a</anchor>
      <arglist>(ElementComparator &amp;comparator, const bool retainOrderOfEquivalentItems=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minimiseStorageOverheads</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ad09860891de2b9faaa19e42b8007bca7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureStorageAllocated</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>abf520344fa2d864f0f54809429a3bb3f</anchor>
      <arglist>(const int minNumElements)</arglist>
    </member>
    <member kind="function">
      <type>const TypeOfCriticalSectionToUse &amp;</type>
      <name>getLock</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>aa1ee427821c41587e15391bf7edc2b60</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReferenceCountedObject</name>
    <filename>classReferenceCountedObject.html</filename>
    <member kind="function">
      <type>void</type>
      <name>incReferenceCount</name>
      <anchorfile>classReferenceCountedObject.html</anchorfile>
      <anchor>a878ca594f89f757d29af5a42ee51161f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decReferenceCount</name>
      <anchorfile>classReferenceCountedObject.html</anchorfile>
      <anchor>a523f06d996130f24b36996b28b83d802</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReferenceCount</name>
      <anchorfile>classReferenceCountedObject.html</anchorfile>
      <anchor>a0111caf12d101fc74abd832d44fbfa4f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReferenceCountedObject</name>
      <anchorfile>classReferenceCountedObject.html</anchorfile>
      <anchor>a86c1a0791cb6e98e63f7c1f7812c6eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ReferenceCountedObject</name>
      <anchorfile>classReferenceCountedObject.html</anchorfile>
      <anchor>a7ed87d7f91e5ae51c620947c61291375</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetReferenceCount</name>
      <anchorfile>classReferenceCountedObject.html</anchorfile>
      <anchor>a9bbeeab431755e2be8ff09dfe9ea4c4d</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReferenceCountedObjectPtr</name>
    <filename>classReferenceCountedObjectPtr.html</filename>
    <templarg>ReferenceCountedObjectClass</templarg>
    <member kind="typedef">
      <type>ReferenceCountedObjectClass</type>
      <name>ReferencedType</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>aeb4a0ddf04087aa15cf7b607f00c076a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCountedObjectPtr</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a95c5feac915f1b6731c69a9a44031bba</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCountedObjectPtr</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>ae392e9fc38034efddfa051eb5b1dd302</anchor>
      <arglist>(ReferenceCountedObjectClass *const refCountedObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCountedObjectPtr</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a48de50419a9cff7dafd67ab1571d5eb8</anchor>
      <arglist>(const ReferenceCountedObjectPtr &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCountedObjectPtr</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a601462a7ccb7e94aacd6144a42b92d1b</anchor>
      <arglist>(const ReferenceCountedObjectPtr&lt; DerivedClass &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedObjectPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>aab2ebf3f70f318e4392afdb803f9e3e9</anchor>
      <arglist>(const ReferenceCountedObjectPtr &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedObjectPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a07d0014669d6d3684113d6096dabc12d</anchor>
      <arglist>(const ReferenceCountedObjectPtr&lt; DerivedClass &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedObjectPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a35ea0e3c78a303aa7fec3ba62366d623</anchor>
      <arglist>(ReferenceCountedObjectClass *const newObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReferenceCountedObjectPtr</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a90c9a9a2cf6e4767e2008b81ef9c8bca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ReferenceCountedObjectClass *</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a01fcbe4292ce03cf988aa55996dabaab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedObjectClass *</type>
      <name>operator-&gt;</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>aa053a26ba9a570e1be9687f38b1de901</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedObjectClass *</type>
      <name>get</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a2b6c2b16063894a07460d0cf02d8ab81</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedObjectClass *</type>
      <name>getObject</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a59d586eb8a3dcb9b64a5ac8bae1e8171</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativeCoordinate</name>
    <filename>classRelativeCoordinate.html</filename>
    <class kind="struct">RelativeCoordinate::StandardStrings</class>
    <class kind="struct">RelativeCoordinate::Strings</class>
    <member kind="function">
      <type></type>
      <name>RelativeCoordinate</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a2a361f6a466bb575140226ee578f2f9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeCoordinate</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a08660df4611e9bfc1ce5273646fcbbcf</anchor>
      <arglist>(const Expression &amp;expression)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeCoordinate</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a5f4a557ea7179d5c7f55ebf1970a59c5</anchor>
      <arglist>(const RelativeCoordinate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RelativeCoordinate &amp;</type>
      <name>operator=</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a7152a5847d2469cb13fb1d5658406872</anchor>
      <arglist>(const RelativeCoordinate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeCoordinate</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a2e27136bad494334484b3d7045560bf6</anchor>
      <arglist>(double absoluteDistanceFromOrigin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeCoordinate</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a0b3bb7a6224234e60bd7aaeb2b4af1e2</anchor>
      <arglist>(const String &amp;stringVersion)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RelativeCoordinate</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a81ee941aef4ec69d77624df7cd5e5655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a4f4385470cb3bba26a1deb2fd2a9fe77</anchor>
      <arglist>(const RelativeCoordinate &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a786e27bb633f9226277f27662b0380c2</anchor>
      <arglist>(const RelativeCoordinate &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>resolve</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a3f41920dc7782e0eea4d91e83b3b4bed</anchor>
      <arglist>(const Expression::Scope *evaluationScope) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>references</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>ab56b37e8c1e548f620e48498bf92d583</anchor>
      <arglist>(const String &amp;coordName, const Expression::Scope *evaluationScope) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRecursive</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a2d58621a8ad2997cf50dc6c89c2b8a69</anchor>
      <arglist>(const Expression::Scope *evaluationScope) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDynamic</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>adcbadfb50b0b41f27af344ff6db39f50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToAbsolute</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>aeb0b2ff1ac54cb6cd697c9345d579af2</anchor>
      <arglist>(double absoluteTargetPosition, const Expression::Scope *evaluationScope)</arglist>
    </member>
    <member kind="function">
      <type>const Expression &amp;</type>
      <name>getExpression</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a513cfe760d6bd60b9f97586e9e4ec7fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a18a25424f6c5aa1c5cb9777e3bc88ba5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RelativeCoordinate::StandardStrings</name>
    <filename>structRelativeCoordinate_1_1StandardStrings.html</filename>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>left</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65babf8a8b5180838dd792d600e75b69265f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>right</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65badaac1346cf275256a828314869f1bec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>top</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65ba58b5065868914aaa4f9fac93306793ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bottom</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65bafc1bb72a21d2a99a30df488a9ac34763</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>x</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65baa6aefb11eeb4d008103545f7a991f42a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>y</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65bafdca86daac70d04b33cae212284fc83b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>width</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65bad5d1db5e302ec4b7038f0fd6b4f73f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>height</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65baeb31efdb32a2c853ec60f5ad453afbdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>parent</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65ba92a52dc9adf30b102a7b4a20f2876fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unknown</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65ba2d62eaf1459a818a13429d7acfdfbde2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>getTypeOf</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a9ccc4b22b96aef47d29cac1fba6b25ab</anchor>
      <arglist>(const String &amp;s) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RelativeCoordinate::Strings</name>
    <filename>structRelativeCoordinate_1_1Strings.html</filename>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>parent</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>a590be4a90e9e7b7ffd12b4ff5f7c667d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>left</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>ad3b2d7198a43883ea4c4b64f44e0faf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>right</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>a39fa56a500b153b8bf66a8eaa56d72cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>top</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>a1765fc4476e6ebd41d49746c5e3a9546</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>bottom</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>a1926a95dd993f12e970056199edb70fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>x</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>a5607965ea686d15ac7e85933b7fc3203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>y</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>ae589870f75311e381cfe5e55dd030e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>width</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>a287d3fb774b46a3bb1e74ffc4b3cb95d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>height</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>a35375bd34335440a8b494eeb1fddf99d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativeCoordinatePositionerBase</name>
    <filename>classRelativeCoordinatePositionerBase.html</filename>
    <base>Component::Positioner</base>
    <base>ComponentListener</base>
    <base>MarkerList::Listener</base>
    <class kind="class">RelativeCoordinatePositionerBase::ComponentScope</class>
    <member kind="function">
      <type></type>
      <name>RelativeCoordinatePositionerBase</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>a5710b13058cb269e6bb409df6786eac4</anchor>
      <arglist>(Component &amp;component_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RelativeCoordinatePositionerBase</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>a5989a641850bc2c29ef82dd6d84cb30e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentMovedOrResized</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>afaeca4b21ee70305901bf16eedbbf2bc</anchor>
      <arglist>(Component &amp;, bool, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentParentHierarchyChanged</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>ae379c184e5fb5e17c327c27c7e2ae29e</anchor>
      <arglist>(Component &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentChildrenChanged</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>ade53c31ce54308d1aa761a9ef21039c4</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentBeingDeleted</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>a57fda2d9c419477973066d56c609d75f</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markersChanged</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>a538512e8c28ca2ee8f722e2946579818</anchor>
      <arglist>(MarkerList *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markerListBeingDeleted</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>ad5fc1026853001dfdcbb5e7b0de4df33</anchor>
      <arglist>(MarkerList *markerList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>ade8880abbddebcb48ee7e113902ee40a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addCoordinate</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>aa296c39de3913289e780cf7338a84520</anchor>
      <arglist>(const RelativeCoordinate &amp;coord)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addPoint</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>a45607fa0e9eee050d44bde9cbb0963f6</anchor>
      <arglist>(const RelativePoint &amp;point)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>registerCoordinates</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>af9ad5effca1449100076cf005f011d70</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>applyToComponentBounds</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>af9b4fb41d22a46f023ea69c0eefcd701</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativeCoordinatePositionerBase::ComponentScope</name>
    <filename>classRelativeCoordinatePositionerBase_1_1ComponentScope.html</filename>
    <base>Expression::Scope</base>
    <member kind="function">
      <type></type>
      <name>ComponentScope</name>
      <anchorfile>classRelativeCoordinatePositionerBase_1_1ComponentScope.html</anchorfile>
      <anchor>a288b622e4011d65d5f68855f6385c0e3</anchor>
      <arglist>(Component &amp;component_)</arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>getSymbolValue</name>
      <anchorfile>classRelativeCoordinatePositionerBase_1_1ComponentScope.html</anchorfile>
      <anchor>a26ee9a352f4728bcc3e7aa4d0e39721d</anchor>
      <arglist>(const String &amp;symbol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitRelativeScope</name>
      <anchorfile>classRelativeCoordinatePositionerBase_1_1ComponentScope.html</anchorfile>
      <anchor>a88bd1695823c980a0d82c1233d7ecc0b</anchor>
      <arglist>(const String &amp;scopeName, Visitor &amp;visitor) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getScopeUID</name>
      <anchorfile>classRelativeCoordinatePositionerBase_1_1ComponentScope.html</anchorfile>
      <anchor>a769d585629f4338302c40586a34a14fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Component *</type>
      <name>findSiblingComponent</name>
      <anchorfile>classRelativeCoordinatePositionerBase_1_1ComponentScope.html</anchorfile>
      <anchor>aa7c3d9765984a3b96fe7075f0c8d865e</anchor>
      <arglist>(const String &amp;componentID) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Component &amp;</type>
      <name>component</name>
      <anchorfile>classRelativeCoordinatePositionerBase_1_1ComponentScope.html</anchorfile>
      <anchor>a26a2cebf33c19aebbfccddaba42e81cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativeParallelogram</name>
    <filename>classRelativeParallelogram.html</filename>
    <member kind="function">
      <type></type>
      <name>RelativeParallelogram</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a6a9ba0649f32f049c5ed92466e41a32f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeParallelogram</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>aea7e8142ce0c6ed5017c9812e5c91b03</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;simpleRectangle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeParallelogram</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a9171f9ec16232f1f828041a9f323a192</anchor>
      <arglist>(const RelativePoint &amp;topLeft, const RelativePoint &amp;topRight, const RelativePoint &amp;bottomLeft)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeParallelogram</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a79996061d4415f96854ccde2b675e4f0</anchor>
      <arglist>(const String &amp;topLeft, const String &amp;topRight, const String &amp;bottomLeft)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RelativeParallelogram</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a1d1b03b4f0694477b14af81d10af604e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resolveThreePoints</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a940e39998c909b64b0c8b3c518964414</anchor>
      <arglist>(Point&lt; float &gt; *points, Expression::Scope *scope) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resolveFourCorners</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a507aad3af1a02ac27a5d228dafc3386b</anchor>
      <arglist>(Point&lt; float &gt; *points, Expression::Scope *scope) const </arglist>
    </member>
    <member kind="function">
      <type>const Rectangle&lt; float &gt;</type>
      <name>getBounds</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>acddcdc05e9ec73c51f90481baa3eb663</anchor>
      <arglist>(Expression::Scope *scope) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPath</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>af2c5bbae33d6c1029014553ca671d26b</anchor>
      <arglist>(Path &amp;path, Expression::Scope *scope) const </arglist>
    </member>
    <member kind="function">
      <type>const AffineTransform</type>
      <name>resetToPerpendicular</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a88b67f61355d633309e4ffb51a459ae0</anchor>
      <arglist>(Expression::Scope *scope)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDynamic</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>ae5cf41bc893ffc476d1e30f9c8c31046</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>adbc6b1b76ec5774397bfd7768047b930</anchor>
      <arglist>(const RelativeParallelogram &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a6a9e4c3f39b20eec369a49afb825324c</anchor>
      <arglist>(const RelativeParallelogram &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Point&lt; float &gt;</type>
      <name>getInternalCoordForPoint</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a1b3211166f8f454e92cc611a3fcd8fd3</anchor>
      <arglist>(const Point&lt; float &gt; *parallelogramCorners, Point&lt; float &gt; point) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Point&lt; float &gt;</type>
      <name>getPointForInternalCoord</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>afe7828a19166bd2ed268cfe304f01d8e</anchor>
      <arglist>(const Point&lt; float &gt; *parallelogramCorners, const Point&lt; float &gt; &amp;internalPoint) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Rectangle&lt; float &gt;</type>
      <name>getBoundingBox</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a01575cf7961ad6b62162ce8498764dd8</anchor>
      <arglist>(const Point&lt; float &gt; *parallelogramCorners) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>topLeft</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a898c46d7fdcd9fd510de0e5ddfed7597</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>topRight</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>abd27c46b0528c96f90a4254b21e5b680</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>bottomLeft</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a511fddacbb033a3c4afb228aa664e603</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativePoint</name>
    <filename>classRelativePoint.html</filename>
    <member kind="function">
      <type></type>
      <name>RelativePoint</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>a557626fd3b549c85f02a76233843fdba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativePoint</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>a81f5ece42d6b0f2098a2717b79ede837</anchor>
      <arglist>(const Point&lt; float &gt; &amp;absolutePoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativePoint</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>ac645e54182d0bdb1dbdcfd10e19e6ca1</anchor>
      <arglist>(float absoluteX, float absoluteY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativePoint</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>add6f17ccd018d6adcdc284ed55cafb73</anchor>
      <arglist>(const RelativeCoordinate &amp;x, const RelativeCoordinate &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativePoint</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>aba0ecd812bdd044ca880193ce56d00ab</anchor>
      <arglist>(const String &amp;stringVersion)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>ab5ce3e3392f6748e7dc0881dbff3cb02</anchor>
      <arglist>(const RelativePoint &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>ab0972ab5cc71b12d8efa9d55ca06654b</anchor>
      <arglist>(const RelativePoint &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Point&lt; float &gt;</type>
      <name>resolve</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>a99ce07d742a3cd0829014f7d58d4891d</anchor>
      <arglist>(const Expression::Scope *evaluationContext) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToAbsolute</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>a63494e10f98e6f1c694b41d9fb52059e</anchor>
      <arglist>(const Point&lt; float &gt; &amp;newPos, const Expression::Scope *evaluationContext)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>a504ceafaf87ecffe3fc3d5e778277eda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDynamic</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>a73e22eaec4e0925ed75f86207921faa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>RelativeCoordinate</type>
      <name>x</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>acaa3243ea9f7839e929e968e37348259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativeCoordinate</type>
      <name>y</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>a6bddbbadab5ddc673318dff154c75dce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativePointPath</name>
    <filename>classRelativePointPath.html</filename>
    <class kind="class">RelativePointPath::CloseSubPath</class>
    <class kind="class">RelativePointPath::CubicTo</class>
    <class kind="class">RelativePointPath::ElementBase</class>
    <class kind="class">RelativePointPath::LineTo</class>
    <class kind="class">RelativePointPath::QuadraticTo</class>
    <class kind="class">RelativePointPath::StartSubPath</class>
    <member kind="enumeration">
      <name>ElementType</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a741fbc9bca4a156a84514f20987483e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nullElement</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a741fbc9bca4a156a84514f20987483e9ae971a25058687b29600ebb7c9a038437</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>startSubPathElement</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a741fbc9bca4a156a84514f20987483e9aacd2c47de9bdc570838c943b21b058e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>closeSubPathElement</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a741fbc9bca4a156a84514f20987483e9a60ad7fe5cfbf04c489c878ce5e6cbeb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lineToElement</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a741fbc9bca4a156a84514f20987483e9a8cb9d49f56ecf8367671130fc2a838d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>quadraticToElement</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a741fbc9bca4a156a84514f20987483e9a8494c007547e881252ae413d840908ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cubicToElement</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a741fbc9bca4a156a84514f20987483e9a52369502d5292f097e27a5f499e95a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativePointPath</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a035e5124f11c1a818f5edd66fcb5bfb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativePointPath</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a64c61563d3097b2221e0c3a4f7e53742</anchor>
      <arglist>(const RelativePointPath &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativePointPath</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a07a33cecd622632c96ac502391d05594</anchor>
      <arglist>(const Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RelativePointPath</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a593d1c22c68523a4bec1d459d8fceeaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a8eab12a7ed6e2a050fab3ca2d2027592</anchor>
      <arglist>(const RelativePointPath &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>ad08b95edd519fc8699505ba2ae18c56a</anchor>
      <arglist>(const RelativePointPath &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPath</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>abe5bf0aea78fcad35a1f5f13b79bd2f7</anchor>
      <arglist>(Path &amp;path, Expression::Scope *scope) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsAnyDynamicPoints</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a800b69f396f54677a29b9978a30dc20f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>af5b58a579d1c7edb0ae2a108b69df44a</anchor>
      <arglist>(RelativePointPath &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a8c6fd911def77df783dfd16b8c086049</anchor>
      <arglist>(ElementBase *newElement)</arglist>
    </member>
    <member kind="variable">
      <type>OwnedArray&lt; ElementBase &gt;</type>
      <name>elements</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a975cc963b8500afa8d33dac6d7c7ac50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usesNonZeroWinding</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a31bd56da083920346e1f0742bd77ae8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativePointPath::CloseSubPath</name>
    <filename>classRelativePointPath_1_1CloseSubPath.html</filename>
    <base>RelativePointPath::ElementBase</base>
    <member kind="function">
      <type></type>
      <name>CloseSubPath</name>
      <anchorfile>classRelativePointPath_1_1CloseSubPath.html</anchorfile>
      <anchor>a06cc20d4d28f01c18c94306f62f607d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createTree</name>
      <anchorfile>classRelativePointPath_1_1CloseSubPath.html</anchorfile>
      <anchor>a6d2cb1fbc7470a27337f1393d08fdfe7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToPath</name>
      <anchorfile>classRelativePointPath_1_1CloseSubPath.html</anchorfile>
      <anchor>aae5756f27754e08c11e47c3b639da0da</anchor>
      <arglist>(Path &amp;path, Expression::Scope *) const </arglist>
    </member>
    <member kind="function">
      <type>RelativePoint *</type>
      <name>getControlPoints</name>
      <anchorfile>classRelativePointPath_1_1CloseSubPath.html</anchorfile>
      <anchor>ac88c7c733230c967ebd0098bf9315963</anchor>
      <arglist>(int &amp;numPoints)</arglist>
    </member>
    <member kind="function">
      <type>ElementBase *</type>
      <name>clone</name>
      <anchorfile>classRelativePointPath_1_1CloseSubPath.html</anchorfile>
      <anchor>a706ce465a403bcdb9792d79bd31b07f6</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativePointPath::CubicTo</name>
    <filename>classRelativePointPath_1_1CubicTo.html</filename>
    <base>RelativePointPath::ElementBase</base>
    <member kind="function">
      <type></type>
      <name>CubicTo</name>
      <anchorfile>classRelativePointPath_1_1CubicTo.html</anchorfile>
      <anchor>a0d326bd6f40d3ffdd697b2a44009b16c</anchor>
      <arglist>(const RelativePoint &amp;controlPoint1, const RelativePoint &amp;controlPoint2, const RelativePoint &amp;endPoint)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createTree</name>
      <anchorfile>classRelativePointPath_1_1CubicTo.html</anchorfile>
      <anchor>a78ea75d8dc395ad64879cff87157b3de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToPath</name>
      <anchorfile>classRelativePointPath_1_1CubicTo.html</anchorfile>
      <anchor>ac141025e05292f78573e431ee643eef7</anchor>
      <arglist>(Path &amp;path, Expression::Scope *) const </arglist>
    </member>
    <member kind="function">
      <type>RelativePoint *</type>
      <name>getControlPoints</name>
      <anchorfile>classRelativePointPath_1_1CubicTo.html</anchorfile>
      <anchor>a013e51ed2dffae56ca3fe03879ab7d20</anchor>
      <arglist>(int &amp;numPoints)</arglist>
    </member>
    <member kind="function">
      <type>ElementBase *</type>
      <name>clone</name>
      <anchorfile>classRelativePointPath_1_1CubicTo.html</anchorfile>
      <anchor>a66a85325152e0d92a418e2cf55beb421</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>controlPoints</name>
      <anchorfile>classRelativePointPath_1_1CubicTo.html</anchorfile>
      <anchor>a6651df5d1d55b5b8cf5bfff380fe40ec</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativePointPath::ElementBase</name>
    <filename>classRelativePointPath_1_1ElementBase.html</filename>
    <member kind="function">
      <type></type>
      <name>ElementBase</name>
      <anchorfile>classRelativePointPath_1_1ElementBase.html</anchorfile>
      <anchor>a984c9e13c832207c94420fcffc2d4de6</anchor>
      <arglist>(ElementType type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ElementBase</name>
      <anchorfile>classRelativePointPath_1_1ElementBase.html</anchorfile>
      <anchor>ab9a7b6619bc610376575f47d6be35299</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ValueTree</type>
      <name>createTree</name>
      <anchorfile>classRelativePointPath_1_1ElementBase.html</anchorfile>
      <anchor>ae23cb0b272a4911c3d152a6d7096e4b4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addToPath</name>
      <anchorfile>classRelativePointPath_1_1ElementBase.html</anchorfile>
      <anchor>a4bc365f11c098cd24f70df0c99904595</anchor>
      <arglist>(Path &amp;path, Expression::Scope *) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RelativePoint *</type>
      <name>getControlPoints</name>
      <anchorfile>classRelativePointPath_1_1ElementBase.html</anchorfile>
      <anchor>a588e8a6195b6d785547e0a22cbca7337</anchor>
      <arglist>(int &amp;numPoints)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ElementBase *</type>
      <name>clone</name>
      <anchorfile>classRelativePointPath_1_1ElementBase.html</anchorfile>
      <anchor>af947314fc34b10d3f60319a6b91aa69d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDynamic</name>
      <anchorfile>classRelativePointPath_1_1ElementBase.html</anchorfile>
      <anchor>affd90037e32b259b0bb6ce20fa34528c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const ElementType</type>
      <name>type</name>
      <anchorfile>classRelativePointPath_1_1ElementBase.html</anchorfile>
      <anchor>abe70425cff02542da9a97ac678de34d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativePointPath::LineTo</name>
    <filename>classRelativePointPath_1_1LineTo.html</filename>
    <base>RelativePointPath::ElementBase</base>
    <member kind="function">
      <type></type>
      <name>LineTo</name>
      <anchorfile>classRelativePointPath_1_1LineTo.html</anchorfile>
      <anchor>a6bcf220db2a245413ad50a68af3f3f71</anchor>
      <arglist>(const RelativePoint &amp;endPoint)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createTree</name>
      <anchorfile>classRelativePointPath_1_1LineTo.html</anchorfile>
      <anchor>a83912ee1a8baf2e524d3ae51db329fa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToPath</name>
      <anchorfile>classRelativePointPath_1_1LineTo.html</anchorfile>
      <anchor>a920ad925d655cfecd7d6c1e1d950d49f</anchor>
      <arglist>(Path &amp;path, Expression::Scope *) const </arglist>
    </member>
    <member kind="function">
      <type>RelativePoint *</type>
      <name>getControlPoints</name>
      <anchorfile>classRelativePointPath_1_1LineTo.html</anchorfile>
      <anchor>a049e93ca769f5fa087d128adba20491b</anchor>
      <arglist>(int &amp;numPoints)</arglist>
    </member>
    <member kind="function">
      <type>ElementBase *</type>
      <name>clone</name>
      <anchorfile>classRelativePointPath_1_1LineTo.html</anchorfile>
      <anchor>a217410eb1c7ea7c837733b81c6613c10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>endPoint</name>
      <anchorfile>classRelativePointPath_1_1LineTo.html</anchorfile>
      <anchor>a947b4b9d2bf6208e8955eca0e6c5c66c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativePointPath::QuadraticTo</name>
    <filename>classRelativePointPath_1_1QuadraticTo.html</filename>
    <base>RelativePointPath::ElementBase</base>
    <member kind="function">
      <type></type>
      <name>QuadraticTo</name>
      <anchorfile>classRelativePointPath_1_1QuadraticTo.html</anchorfile>
      <anchor>aba89135707082499521af4acc13d8182</anchor>
      <arglist>(const RelativePoint &amp;controlPoint, const RelativePoint &amp;endPoint)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createTree</name>
      <anchorfile>classRelativePointPath_1_1QuadraticTo.html</anchorfile>
      <anchor>a848c42fa02f7626fb8b2575ec35c9706</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToPath</name>
      <anchorfile>classRelativePointPath_1_1QuadraticTo.html</anchorfile>
      <anchor>a20d3ab7a016769296dff17f48cded66b</anchor>
      <arglist>(Path &amp;path, Expression::Scope *) const </arglist>
    </member>
    <member kind="function">
      <type>RelativePoint *</type>
      <name>getControlPoints</name>
      <anchorfile>classRelativePointPath_1_1QuadraticTo.html</anchorfile>
      <anchor>a2c225ca77163792d51e0c3ea5bc3d6e0</anchor>
      <arglist>(int &amp;numPoints)</arglist>
    </member>
    <member kind="function">
      <type>ElementBase *</type>
      <name>clone</name>
      <anchorfile>classRelativePointPath_1_1QuadraticTo.html</anchorfile>
      <anchor>a1fcd333ca097fe9841490fc0b8ad0039</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>controlPoints</name>
      <anchorfile>classRelativePointPath_1_1QuadraticTo.html</anchorfile>
      <anchor>af52f78c292c1e148972929b2493c33fe</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativePointPath::StartSubPath</name>
    <filename>classRelativePointPath_1_1StartSubPath.html</filename>
    <base>RelativePointPath::ElementBase</base>
    <member kind="function">
      <type></type>
      <name>StartSubPath</name>
      <anchorfile>classRelativePointPath_1_1StartSubPath.html</anchorfile>
      <anchor>a3f78eb4652eacc75a751a047e1a37eda</anchor>
      <arglist>(const RelativePoint &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createTree</name>
      <anchorfile>classRelativePointPath_1_1StartSubPath.html</anchorfile>
      <anchor>a4605c1e2f6926c154e3ac6d916067261</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToPath</name>
      <anchorfile>classRelativePointPath_1_1StartSubPath.html</anchorfile>
      <anchor>a0a4b20a3106c12e85deb382ee2d6243a</anchor>
      <arglist>(Path &amp;path, Expression::Scope *) const </arglist>
    </member>
    <member kind="function">
      <type>RelativePoint *</type>
      <name>getControlPoints</name>
      <anchorfile>classRelativePointPath_1_1StartSubPath.html</anchorfile>
      <anchor>a40d72b20cdeea1dd4e4666601ac107ac</anchor>
      <arglist>(int &amp;numPoints)</arglist>
    </member>
    <member kind="function">
      <type>ElementBase *</type>
      <name>clone</name>
      <anchorfile>classRelativePointPath_1_1StartSubPath.html</anchorfile>
      <anchor>a99a7a1a272a2df24532b7910d9ea2f6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>startPos</name>
      <anchorfile>classRelativePointPath_1_1StartSubPath.html</anchorfile>
      <anchor>afcaa4975b6ef2fcc78e99b873a38d2d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativeRectangle</name>
    <filename>classRelativeRectangle.html</filename>
    <member kind="function">
      <type></type>
      <name>RelativeRectangle</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a6a2fa4fcfd1bc26742b261d93b572566</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeRectangle</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>af3c65d26dabe9863042ae112233b880f</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeRectangle</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>acaef9895af247a408b0d62218d04af74</anchor>
      <arglist>(const RelativeCoordinate &amp;left, const RelativeCoordinate &amp;right, const RelativeCoordinate &amp;top, const RelativeCoordinate &amp;bottom)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeRectangle</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>adbf13b28c72bd79bbe198f07b18574b0</anchor>
      <arglist>(const String &amp;stringVersion)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a7093f7886a857f45897f1b2fc726e7e9</anchor>
      <arglist>(const RelativeRectangle &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>aed436dd9835dc534b9e2721e2e832d05</anchor>
      <arglist>(const RelativeRectangle &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Rectangle&lt; float &gt;</type>
      <name>resolve</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a697db976cfd6376b2e4eb4a650182be8</anchor>
      <arglist>(const Expression::Scope *scope) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToAbsolute</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>af76a1248976d6b6e04d24ae3d93e3654</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;newPos, const Expression::Scope *scope)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDynamic</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a13428846edd533fe4b8ad9a3cce912a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a0b67771b721f909d04226458a76e4ce8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renameSymbol</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a8070db7b52deb2c44045a4d8dd4a7ac9</anchor>
      <arglist>(const Expression::Symbol &amp;oldSymbol, const String &amp;newName, const Expression::Scope &amp;scope)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyToComponent</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a0d9275a20a583b7ead83b154101d8cc6</anchor>
      <arglist>(Component &amp;component) const </arglist>
    </member>
    <member kind="variable">
      <type>RelativeCoordinate</type>
      <name>left</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a4418206ad8d8830d55d37a3bdefbe085</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativeCoordinate</type>
      <name>right</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>aa5d7a81e56ebaa8101aa23d43e652dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativeCoordinate</type>
      <name>top</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>accb0421b6997f1cadd8b8c7d76b4bd49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativeCoordinate</type>
      <name>bottom</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a9575cf18e56f073da861de4b55ae9d57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativeTime</name>
    <filename>classRelativeTime.html</filename>
    <member kind="function">
      <type></type>
      <name>RelativeTime</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a36a36103979d947a1164298f77172d04</anchor>
      <arglist>(double seconds=0.0) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeTime</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a6c5407d639ff5386c824689724418c2d</anchor>
      <arglist>(const RelativeTime &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RelativeTime &amp;</type>
      <name>operator=</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>ae78c8045b5c6b6acd53b4fb39b77c02c</anchor>
      <arglist>(const RelativeTime &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RelativeTime</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>ac13a30a86834ecf1b1ec61ec2ea651f9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>inMilliseconds</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a3909da105dad93272d5762ae8dca4f99</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inSeconds</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a298559bc0ea14c840c349b4bebc261b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inMinutes</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>adf84956f22f66cd060ea0498924d9739</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inHours</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a8235c2bbac468501dfd95d0503fb7e0d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inDays</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a16c4cef37f23b1a2dfc10b91ca99243f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inWeeks</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>ae95369d30541c6f45e794a6854e89d41</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getDescription</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>ac02f8e8efec157136589f65a8688bd5f</anchor>
      <arglist>(const String &amp;returnValueForZeroTime=&quot;0&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>const RelativeTime &amp;</type>
      <name>operator+=</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a55f4d20cf6e4190bf62230ada9ac6b1a</anchor>
      <arglist>(const RelativeTime &amp;timeToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const RelativeTime &amp;</type>
      <name>operator-=</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>af63d0fc8c57a32b10997841ffa3ab555</anchor>
      <arglist>(const RelativeTime &amp;timeToSubtract) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const RelativeTime &amp;</type>
      <name>operator+=</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a2a5dc527b6847c2120fc49a73312f1b4</anchor>
      <arglist>(double secondsToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const RelativeTime &amp;</type>
      <name>operator-=</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a6bce4e2be238050a4abe522f5294bf74</anchor>
      <arglist>(double secondsToSubtract) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RelativeTime</type>
      <name>milliseconds</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a018382db1621e22a7eea3d8d9f758789</anchor>
      <arglist>(int milliseconds) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RelativeTime</type>
      <name>milliseconds</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>aa6fa4d6244d0509eb31ae7447374c763</anchor>
      <arglist>(int64 milliseconds) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RelativeTime</type>
      <name>minutes</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>ad7af4d5aae414771fbdaf47073b6ec20</anchor>
      <arglist>(double numberOfMinutes) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RelativeTime</type>
      <name>hours</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a5f8d83af9397fe34a11ab28bdedf646a</anchor>
      <arglist>(double numberOfHours) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RelativeTime</type>
      <name>days</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a1ccb0e098d93a68fe37b90c61608dd99</anchor>
      <arglist>(double numberOfDays) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RelativeTime</type>
      <name>weeks</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a3716770d0d29edd5c8ed0b6aae0bc6e2</anchor>
      <arglist>(double numberOfWeeks) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResamplingAudioSource</name>
    <filename>classResamplingAudioSource.html</filename>
    <base>AudioSource</base>
    <member kind="function">
      <type></type>
      <name>ResamplingAudioSource</name>
      <anchorfile>classResamplingAudioSource.html</anchorfile>
      <anchor>a05d6ab55db4fe93572d4801e4c547220</anchor>
      <arglist>(AudioSource *inputSource, bool deleteInputWhenDeleted, int numChannels=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ResamplingAudioSource</name>
      <anchorfile>classResamplingAudioSource.html</anchorfile>
      <anchor>a3bcbb3a49e217faf8fa66f69dd7e85ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResamplingRatio</name>
      <anchorfile>classResamplingAudioSource.html</anchorfile>
      <anchor>aa7d888e41873f6e395baa1eb179c15ad</anchor>
      <arglist>(double samplesInPerOutputSample)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getResamplingRatio</name>
      <anchorfile>classResamplingAudioSource.html</anchorfile>
      <anchor>af868951e30847cecd5f0729cecab722c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classResamplingAudioSource.html</anchorfile>
      <anchor>a771e14cf17371267b6adef1ce69bd235</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classResamplingAudioSource.html</anchorfile>
      <anchor>ab28fb3c4fde928bcfb047d415900c296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classResamplingAudioSource.html</anchorfile>
      <anchor>ab180bc2bf8b6afa41a6c856a16467cac</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResizableBorderComponent</name>
    <filename>classResizableBorderComponent.html</filename>
    <base>Component</base>
    <class kind="class">ResizableBorderComponent::Zone</class>
    <member kind="function">
      <type></type>
      <name>ResizableBorderComponent</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a7ac45de1070370a02e6d641cffd7dc35</anchor>
      <arglist>(Component *componentToResize, ComponentBoundsConstrainer *constrainer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ResizableBorderComponent</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a544ec6f29fe70d170e241ede49dc086f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderThickness</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a65670ed4d9358d0d83979371d540bb87</anchor>
      <arglist>(const BorderSize&lt; int &gt; &amp;newBorderSize)</arglist>
    </member>
    <member kind="function">
      <type>BorderSize&lt; int &gt;</type>
      <name>getBorderThickness</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a4c5c60470bd14064a89f360227967c89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a2d74e51357be6c15cf835ad73d1f8bd3</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseEnter</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>ad035dbf8fd40da5f1b07753ba8c71ff2</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseMove</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a4235039d169427cc3e1d8a8d66ac8117</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a5475d08ad57d76c9ad00dd60760306a1</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a4afe650608fb08523b6b81b17f119d74</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>ab7db208eb34ec3dd49dae240803004b3</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a3d5ce9120f2d218e6127b524925bbc04</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResizableBorderComponent::Zone</name>
    <filename>classResizableBorderComponent_1_1Zone.html</filename>
    <member kind="enumeration">
      <name>Zones</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>centre</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881eabb95f72d0c8f0a7f1067d10eabd9dcf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>left</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881eaaed2e03ece3b1ad56f93cb6d318107c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>top</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881eaade8c46acd8d0763312af993d4a0c338</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>right</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881ead78b7d524dca9da5cd0d8576041ff84b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bottom</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881eaa21beed256039ab04e501c4bae4ba67b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Zone</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ae906c8aac6ce476975c5cc1ce3194ec5</anchor>
      <arglist>(int zoneFlags=0) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Zone</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>a5a1c28775598032e8832b1dc60b3cc5c</anchor>
      <arglist>(const Zone &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Zone &amp;</type>
      <name>operator=</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>acb1a287c593a490396f7cca2333f4a7d</anchor>
      <arglist>(const Zone &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ae2228ab1e4777bb628d9cc8ce5eb99ab</anchor>
      <arglist>(const Zone &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>a061ece5b3f1b60e787f943344cd3ef13</anchor>
      <arglist>(const Zone &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MouseCursor</type>
      <name>getMouseCursor</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>a5ff6ae1427853fe62e1a8bbd04194e0d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDraggingWholeObject</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>a34c629632747476411260528c91eaf14</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDraggingLeftEdge</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ab27a11d0fc43a2ef5a8cdecbd401adda</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDraggingRightEdge</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>a164eb5b4457257ec1ed6a7e0918724d4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDraggingTopEdge</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>af1d582e7d92a1c51ef8a469df85ad680</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDraggingBottomEdge</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>aaa416b3eb1a4a03e242db0a44105a0f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Rectangle&lt; ValueType &gt;</type>
      <name>resizeRectangleBy</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>a8dede75108a25b27e2ec186e00cecd73</anchor>
      <arglist>(Rectangle&lt; ValueType &gt; original, const Point&lt; ValueType &gt; &amp;distance) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getZoneFlags</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ad45bad50151fda1a0d102ea0073bc566</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Zone</type>
      <name>fromPositionOnBorder</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>af6508ede43a4a9d078ccb19255be395b</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;totalSize, const BorderSize&lt; int &gt; &amp;border, const Point&lt; int &gt; &amp;position)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResizableCornerComponent</name>
    <filename>classResizableCornerComponent.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>ResizableCornerComponent</name>
      <anchorfile>classResizableCornerComponent.html</anchorfile>
      <anchor>a3706073ab81c9dcf5161bc570b2c1226</anchor>
      <arglist>(Component *componentToResize, ComponentBoundsConstrainer *constrainer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ResizableCornerComponent</name>
      <anchorfile>classResizableCornerComponent.html</anchorfile>
      <anchor>ab55ab24ef93bc37f7afcc41ed37eccde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classResizableCornerComponent.html</anchorfile>
      <anchor>a469e17a3d9767c22139672a127583b94</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classResizableCornerComponent.html</anchorfile>
      <anchor>a7c9bd6061f867ca8ed486e7ef5dcd9d6</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classResizableCornerComponent.html</anchorfile>
      <anchor>a973cb2b485292de1121caab3571d96fd</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classResizableCornerComponent.html</anchorfile>
      <anchor>af430c183133631a2971d5c9b9cef21b0</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classResizableCornerComponent.html</anchorfile>
      <anchor>ad5297f17c136a3ff8a60bc4a2313d83c</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResizableEdgeComponent</name>
    <filename>classResizableEdgeComponent.html</filename>
    <base>Component</base>
    <member kind="enumeration">
      <name>Edge</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a5dfd6990713a931c4411f4ab89b51e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>leftEdge</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a5dfd6990713a931c4411f4ab89b51e25ad49e513b9ece9e62cbb2a663e7f4d589</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rightEdge</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a5dfd6990713a931c4411f4ab89b51e25ac7c8c54bfed40fbe58dbb8745371bc41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>topEdge</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a5dfd6990713a931c4411f4ab89b51e25a2680b4787015c0aa2c92ddc8218cc3d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bottomEdge</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a5dfd6990713a931c4411f4ab89b51e25a0b55203e426589ff7ae67c750889ad41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResizableEdgeComponent</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a50df447594f67bdb95d5d334c4f97889</anchor>
      <arglist>(Component *componentToResize, ComponentBoundsConstrainer *constrainer, Edge edgeToResize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ResizableEdgeComponent</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>ab0da39a6bfe4536a2b791e2b6035b4f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVertical</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>ae282b5d542d717f6b043f61d7283ca6a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a1a88d78919bab979f84a156032384f0f</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a57f98a9126e9c47b75887c7ed3045e2b</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a589db3e9aa11920e33bffd4acf9fb6fd</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a546c30880dd3b6e8eca010c2b4edd4ce</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResizableWindow</name>
    <filename>classResizableWindow.html</filename>
    <base>TopLevelWindow</base>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a9488716cf84a6e72cf3397fa83933c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a9488716cf84a6e72cf3397fa83933c79a95839e67b4ccccc75988fc0ed38113a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResizableWindow</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a72a45d75d7e14d157e01143969e51361</anchor>
      <arglist>(const String &amp;name, bool addToDesktop)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResizableWindow</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a986e25dfad594227e1bc4531a4b66fd6</anchor>
      <arglist>(const String &amp;name, const Colour &amp;backgroundColour, bool addToDesktop)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ResizableWindow</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a9aa0f14f04a2985bab7ce5287229b0e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColour</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a11317b014f89275843625d142d86d8c7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a4dca88839b522f1c5bc4fa1f71e93bf0</anchor>
      <arglist>(const Colour &amp;newColour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResizable</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a538709f0111ad32b05d858a511bcd5be</anchor>
      <arglist>(bool shouldBeResizable, bool useBottomRightCornerResizer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isResizable</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>afa786ee064166bebe3df0843ad96b979</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResizeLimits</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a6afa3b9ddf1cd9f7fa546692074dd781</anchor>
      <arglist>(int newMinimumWidth, int newMinimumHeight, int newMaximumWidth, int newMaximumHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ComponentBoundsConstrainer *</type>
      <name>getConstrainer</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a49512bcc9fdb5df06d2412e6c7e17e72</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstrainer</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>ae386b9e5c905a04cc36cabba1798a444</anchor>
      <arglist>(ComponentBoundsConstrainer *newConstrainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsConstrained</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a4b30538447a36bd8dd88f13b85d79744</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullScreen</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a4436633b8bfef5d4bd45d05edad4d296</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFullScreen</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a08a0f1863417c80e6494d113a5c1fbd2</anchor>
      <arglist>(bool shouldBeFullScreen)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMinimised</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>add27363b06fa6704db1bcfb99313bf0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimised</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a8b3174e4cad2a85ff1405a0c22e12148</anchor>
      <arglist>(bool shouldMinimise)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToDesktop</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a84ef5e28f42d5e489f5a7240e2475722</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getWindowStateAsString</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>af5120046ac8f889a3252f1afd9d0043e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>restoreWindowStateFromString</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a462e5efd2f570fd65b0822c0ea96889b</anchor>
      <arglist>(const String &amp;previousState)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getContentComponent</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a3e00e6a9b730e6081c6ea33b24c47420</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContentOwned</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a97940f07b6014bac018cbe9330abc769</anchor>
      <arglist>(Component *newContentComponent, bool resizeToFitWhenContentChangesSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContentNonOwned</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>ad6c44adc91ca926e9c0a6ecb4cf1bfa7</anchor>
      <arglist>(Component *newContentComponent, bool resizeToFitWhenContentChangesSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearContentComponent</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a44edd8f80203fd6a44459df7ae953979</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContentComponentSize</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a756f7d17ab2e38e2733f2db0d4670f81</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BorderSize&lt; int &gt;</type>
      <name>getBorderThickness</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a2c94adad7cb9693aa69e55d897cb1c1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BorderSize&lt; int &gt;</type>
      <name>getContentComponentBorder</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a3aaa41a555bc21daa301b11c620fb7b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>abb26a60ce095d44d5a54639c977cb29a</anchor>
      <arglist>(void setContentComponent(Component *newContentComponent, bool deleteOldOne=true, bool resizeToFit=false))</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a5fece831180850865998c88a6a80e9d2</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>moved</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a58979ca0f7e0a7c5cc32f892d2590281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a80c869e583794bc6d8659b9f9393430c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a98cbc94ab2b541b8c0215f5496cac033</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>aa860470d0fe281152d528a7e9807b3e9</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a0fa860d959487f1104a12141bfee74e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>childBoundsChanged</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>ab785d864f42d4a6f83626d289aeb65f4</anchor>
      <arglist>(Component *child)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parentSizeChanged</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a72656546b6b478a26a9af43fece6ca8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>visibilityChanged</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>ac7a173f57007c8471da2c39e0664cf37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>activeWindowStatusChanged</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>ab574e83802c62e4cfa99946e17e795c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getDesktopWindowStyleFlags</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a73f0627ea9671fa9b71f07f3a45e6c16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScopedPointer&lt; ResizableCornerComponent &gt;</type>
      <name>resizableCorner</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a99d4f438dba8740a09fbeb832450013f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScopedPointer&lt; ResizableBorderComponent &gt;</type>
      <name>resizableBorder</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a4d0b53ec83fe41125b1223bb92171543</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Result</name>
    <filename>classResult.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>wasOk</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>ad1cd6e48b8f41b1c5f6377109288cffe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>failed</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>a0bca10ed2b5416e33dfd027869c849ce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>ae8e63cf847e9356f8909b4413a47e54f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>a5824bcb0172e2f9a5f664b21a7aa08f2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getErrorMessage</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>a9484065d75bd9a408e489222b8d3a318</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Result</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>aa4ff199a3a6c427badb54bebf9072101</anchor>
      <arglist>(const Result &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Result &amp;</type>
      <name>operator=</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>ae9053e11fd207513dcf1b60dc078a62c</anchor>
      <arglist>(const Result &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>abcaa1c7cf4f9fef6c0f00ab9ad43576c</anchor>
      <arglist>(const Result &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>a787a681d1c6ef37bbd8b871020b12fde</anchor>
      <arglist>(const Result &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Result</type>
      <name>ok</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>af20c96ffa94adac90e10a8395d8c8852</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Result</type>
      <name>fail</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>a2b51de8f6f8c27c3de29f9da5cce8f75</anchor>
      <arglist>(const String &amp;errorMessage) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Reverb</name>
    <filename>classReverb.html</filename>
    <class kind="struct">Reverb::Parameters</class>
    <member kind="function">
      <type></type>
      <name>Reverb</name>
      <anchorfile>classReverb.html</anchorfile>
      <anchor>a765b925557df7e43bf5ed275fc6950d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameters &amp;</type>
      <name>getParameters</name>
      <anchorfile>classReverb.html</anchorfile>
      <anchor>ab325817442b8666a819f81c8472c119a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classReverb.html</anchorfile>
      <anchor>af1b8609045ccadf2f6c4760f9a6d945a</anchor>
      <arglist>(const Parameters &amp;newParams)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSampleRate</name>
      <anchorfile>classReverb.html</anchorfile>
      <anchor>a98c91d03e4a2484123dc3d8f92896b86</anchor>
      <arglist>(const double sampleRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classReverb.html</anchorfile>
      <anchor>a5d132bb7b4edbeeedbd2d1ef7e4c87ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processStereo</name>
      <anchorfile>classReverb.html</anchorfile>
      <anchor>aba79aa61c18e8b3cf70dfd83fda7d099</anchor>
      <arglist>(float *const left, float *const right, const int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processMono</name>
      <anchorfile>classReverb.html</anchorfile>
      <anchor>a04c43dc7b91788df75f434a957499e2d</anchor>
      <arglist>(float *const samples, const int numSamples) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Reverb::Parameters</name>
    <filename>structReverb_1_1Parameters.html</filename>
    <member kind="function">
      <type></type>
      <name>Parameters</name>
      <anchorfile>structReverb_1_1Parameters.html</anchorfile>
      <anchor>a23796df8b292d4d9390a896ae2ebe29f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>roomSize</name>
      <anchorfile>structReverb_1_1Parameters.html</anchorfile>
      <anchor>a31a5e2e56f91cb29e902e045960218a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>damping</name>
      <anchorfile>structReverb_1_1Parameters.html</anchorfile>
      <anchor>afbbd3f114c878f0a864205aa66d47f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>wetLevel</name>
      <anchorfile>structReverb_1_1Parameters.html</anchorfile>
      <anchor>ae029e68c8dc8fa0acb34373237377fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>dryLevel</name>
      <anchorfile>structReverb_1_1Parameters.html</anchorfile>
      <anchor>add75191e7a163d95cd807cbc72fa192c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>width</name>
      <anchorfile>structReverb_1_1Parameters.html</anchorfile>
      <anchor>a2104c314f4804e3ff6e5cc7d524c3b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>freezeMode</name>
      <anchorfile>structReverb_1_1Parameters.html</anchorfile>
      <anchor>a394c3bfbd67ad681222410952dbed0c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReverbAudioSource</name>
    <filename>classReverbAudioSource.html</filename>
    <base>AudioSource</base>
    <member kind="function">
      <type></type>
      <name>ReverbAudioSource</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>a9bb3f69c71cf6dd49eab94c4f46de919</anchor>
      <arglist>(AudioSource *inputSource, bool deleteInputWhenDeleted)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReverbAudioSource</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>a5e5fddcb5f353b566376f26318fa78ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Reverb::Parameters &amp;</type>
      <name>getParameters</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>afda75efd33835198182fb38fb49cf967</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>abb05d4c6980825f841fabbc56d167d9b</anchor>
      <arglist>(const Reverb::Parameters &amp;newParams)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBypassed</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>a8b6f060d4f6ab72e7c9a4ddcdbf6ccd1</anchor>
      <arglist>(bool isBypassed) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBypassed</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>a930435b2b93f74d00203b6794c41ac8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>af9096eecfeb28a6367786b661513a31e</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>a496fe766ac9c8242bcbb4d00f40404d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>a2753c4c5f3aa372102be23ec4d8b24a2</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSAKey</name>
    <filename>classRSAKey.html</filename>
    <member kind="function">
      <type></type>
      <name>RSAKey</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a2a1894882100da6c8c70f8911089ef4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSAKey</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a8658a7cfe77c3565033efbd6706ee6ae</anchor>
      <arglist>(const String &amp;stringRepresentation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RSAKey</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a4ae206fafb656769aaea335383a4ffec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a55cc9849996cb7b296ddf58f412113e4</anchor>
      <arglist>(const RSAKey &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a65d813bd3797f247f969714354158c7c</anchor>
      <arglist>(const RSAKey &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>ab689528a62dabebe0cf689df29d5b7b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>applyToValue</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a66512b0a53fad1f68481b4aca050f93c</anchor>
      <arglist>(BigInteger &amp;value) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createKeyPair</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a8d69fca3bd9748a5c455f92f6da0dc6a</anchor>
      <arglist>(RSAKey &amp;publicKey, RSAKey &amp;privateKey, int numBits, const int *randomSeeds=nullptr, int numRandomSeeds=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BigInteger</type>
      <name>part1</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>af9992df31573da04eff2f95b6c215be1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BigInteger</type>
      <name>part2</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a8f404bb892955099f1495922fe43e0f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SamplerSound</name>
    <filename>classSamplerSound.html</filename>
    <base>SynthesiserSound</base>
    <member kind="function">
      <type></type>
      <name>SamplerSound</name>
      <anchorfile>classSamplerSound.html</anchorfile>
      <anchor>ad26e044243f4802000b8dcbb6dd15cee</anchor>
      <arglist>(const String &amp;name, AudioFormatReader &amp;source, const BigInteger &amp;midiNotes, int midiNoteForNormalPitch, double attackTimeSecs, double releaseTimeSecs, double maxSampleLengthSeconds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SamplerSound</name>
      <anchorfile>classSamplerSound.html</anchorfile>
      <anchor>a4e5d644cede3dd9c821e40098da01945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classSamplerSound.html</anchorfile>
      <anchor>a3614f6da386e843cf2b8f6b30943fb7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AudioSampleBuffer *</type>
      <name>getAudioData</name>
      <anchorfile>classSamplerSound.html</anchorfile>
      <anchor>a82ca8fb2e3d40dcf9cbe59eea021448e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>appliesToNote</name>
      <anchorfile>classSamplerSound.html</anchorfile>
      <anchor>a7b2947ab1129d4e850e12e1346779ca8</anchor>
      <arglist>(const int midiNoteNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>appliesToChannel</name>
      <anchorfile>classSamplerSound.html</anchorfile>
      <anchor>a2d0f87e6c5a5de4265022a19dd2589f3</anchor>
      <arglist>(const int midiChannel)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SamplerVoice</name>
    <filename>classSamplerVoice.html</filename>
    <base>SynthesiserVoice</base>
    <member kind="function">
      <type></type>
      <name>SamplerVoice</name>
      <anchorfile>classSamplerVoice.html</anchorfile>
      <anchor>aa1614529f047ba46473645216f58d9ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SamplerVoice</name>
      <anchorfile>classSamplerVoice.html</anchorfile>
      <anchor>acf89d1cb1e5c67c1daf562ec227d09ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canPlaySound</name>
      <anchorfile>classSamplerVoice.html</anchorfile>
      <anchor>abbd294b47e26ff21a413a9d6186c6110</anchor>
      <arglist>(SynthesiserSound *sound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startNote</name>
      <anchorfile>classSamplerVoice.html</anchorfile>
      <anchor>a48520f3d80a603a9ded2246978c024d7</anchor>
      <arglist>(const int midiNoteNumber, const float velocity, SynthesiserSound *sound, const int currentPitchWheelPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopNote</name>
      <anchorfile>classSamplerVoice.html</anchorfile>
      <anchor>a5a85c3a691ce581a4d92117213019f18</anchor>
      <arglist>(const bool allowTailOff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pitchWheelMoved</name>
      <anchorfile>classSamplerVoice.html</anchorfile>
      <anchor>a7e15bb27878f2267028a8f7c8a4d9936</anchor>
      <arglist>(const int newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>controllerMoved</name>
      <anchorfile>classSamplerVoice.html</anchorfile>
      <anchor>acae91334bcf3aa1beca2e2de6adf0b68</anchor>
      <arglist>(const int controllerNumber, const int newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderNextBlock</name>
      <anchorfile>classSamplerVoice.html</anchorfile>
      <anchor>a8a5dbc0cd5d2d05275e76b7745a9fa6d</anchor>
      <arglist>(AudioSampleBuffer &amp;outputBuffer, int startSample, int numSamples)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedAutoReleasePool</name>
    <filename>classScopedAutoReleasePool.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedAutoReleasePool</name>
      <anchorfile>classScopedAutoReleasePool.html</anchorfile>
      <anchor>ae1be6d4b7e677b4ec8f614ec4e962ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedAutoReleasePool</name>
      <anchorfile>classScopedAutoReleasePool.html</anchorfile>
      <anchor>adc870c53867716591a676ff039436d07</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedJuceInitialiser_GUI</name>
    <filename>classScopedJuceInitialiser__GUI.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedJuceInitialiser_GUI</name>
      <anchorfile>classScopedJuceInitialiser__GUI.html</anchorfile>
      <anchor>a1342c78002291c0ce1cf77c38fac2c9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedJuceInitialiser_GUI</name>
      <anchorfile>classScopedJuceInitialiser__GUI.html</anchorfile>
      <anchor>a689e8564ee0ea5b806340008252a1a5f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedPointer</name>
    <filename>classScopedPointer.html</filename>
    <templarg>ObjectType</templarg>
    <member kind="function">
      <type></type>
      <name>ScopedPointer</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>ac187958296e33aa057dd37478ea70400</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedPointer</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a44a7843e49c3ff719f06607b6e908f7d</anchor>
      <arglist>(ObjectType *const objectToTakePossessionOf) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedPointer</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a04688b1561dd9d861ca80c6deb63a233</anchor>
      <arglist>(ScopedPointer &amp;objectToTransferFrom) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedPointer</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a3c540f0121065aafa5f9607362fc1450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScopedPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>afefc7940828d72c056e03804cd6bea9f</anchor>
      <arglist>(ScopedPointer &amp;objectToTransferFrom)</arglist>
    </member>
    <member kind="function">
      <type>ScopedPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a88ee7f038e57471539d3181141c0390e</anchor>
      <arglist>(ObjectType *const newObjectToTakePossessionOf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ObjectType *</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>af7c241c736d79754fd6f8d305cce8bc3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>get</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>ac65fb45b9eb2d53773489fcfbc6fd740</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType &amp;</type>
      <name>operator*</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a2f48458a1656a6ef1bd35cb8452eed35</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a6eedc84349cbe629cc1abb79ffa74e87</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>release</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a10c8f696fec0cca763b067ec3e469199</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a362cd8d5a212df0ee08691b75a4ba3de</anchor>
      <arglist>(ScopedPointer&lt; ObjectType &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>createCopy</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a258f418869b47381fc7ba61becbb209c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedReadLock</name>
    <filename>classScopedReadLock.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedReadLock</name>
      <anchorfile>classScopedReadLock.html</anchorfile>
      <anchor>a656bd081a1ce9eaebaf1b612ad35ea18</anchor>
      <arglist>(const ReadWriteLock &amp;lock) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedReadLock</name>
      <anchorfile>classScopedReadLock.html</anchorfile>
      <anchor>a81becd93947c0103c2c9461e4ddbe594</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedValueSetter</name>
    <filename>classScopedValueSetter.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ScopedValueSetter</name>
      <anchorfile>classScopedValueSetter.html</anchorfile>
      <anchor>a54216f6502da8131ff2ccfd7e1865650</anchor>
      <arglist>(ValueType &amp;valueToSet, const ValueType &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedValueSetter</name>
      <anchorfile>classScopedValueSetter.html</anchorfile>
      <anchor>a52790db1057f57384a018ee09344a224</anchor>
      <arglist>(ValueType &amp;valueToSet, const ValueType &amp;newValue, const ValueType &amp;valueWhenDeleted)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedValueSetter</name>
      <anchorfile>classScopedValueSetter.html</anchorfile>
      <anchor>adb7bf2e716234b227f3c8d3a5c25827d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedWriteLock</name>
    <filename>classScopedWriteLock.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedWriteLock</name>
      <anchorfile>classScopedWriteLock.html</anchorfile>
      <anchor>ab06884cb60e1e7231cc0b16ed10d7004</anchor>
      <arglist>(const ReadWriteLock &amp;lock) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedWriteLock</name>
      <anchorfile>classScopedWriteLock.html</anchorfile>
      <anchor>a108b0a03c0b13ab6378b4ea68618d497</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScrollBar</name>
    <filename>classScrollBar.html</filename>
    <base>Component</base>
    <base>AsyncUpdater</base>
    <base protection="private">Timer</base>
    <class kind="class">ScrollBar::Listener</class>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a5cdce553497ae1b7fc7fcd3caa805167</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a5cdce553497ae1b7fc7fcd3caa805167aa46e6ad051ab6de778812cdcc86f4d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>thumbColourId</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a5cdce553497ae1b7fc7fcd3caa805167a3b2685adf5143eb1c382b71cbed677ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>trackColourId</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a5cdce553497ae1b7fc7fcd3caa805167ab32d64c0802a57b8c50d138e00a4716e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScrollBar</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a220c88af4b7d04fa9312db133fd1bf58</anchor>
      <arglist>(bool isVertical, bool buttonsAreVisible=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScrollBar</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>ae27d95eecd029b104b1e8b4795879564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVertical</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a3e3ffc36d969185c06382f98996de425</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a5676d739d423d3daeeffd3d4176ef8ef</anchor>
      <arglist>(bool shouldBeVertical)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setButtonVisibility</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a33c1faef1b0994f48c991e8726c2e874</anchor>
      <arglist>(bool buttonsAreVisible)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAutoHide</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a85f03e3ca1a3b16894152c29bd4dcff0</anchor>
      <arglist>(bool shouldHideWhenFullRange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>autoHides</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a2f638b949f8642a3a8675854c811378d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRangeLimits</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a6e4bcc566a85f36a7544c8d680a7b651</anchor>
      <arglist>(const Range&lt; double &gt; &amp;newRangeLimit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRangeLimits</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a53df34d9f883c70f31c8f139aeab2613</anchor>
      <arglist>(double minimum, double maximum)</arglist>
    </member>
    <member kind="function">
      <type>const Range&lt; double &gt;</type>
      <name>getRangeLimit</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>acf638287e3cb82ab910d2a40bb5fddf0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinimumRangeLimit</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a438704ee01c11fc84e8cbd1f766c3269</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumRangeLimit</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>aad13763a765d119a2790a9bf67a7f85a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentRange</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>ad769708041476ee2b06a2527c9f9129c</anchor>
      <arglist>(const Range&lt; double &gt; &amp;newRange)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentRange</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a4a2e6a3c0aacc2423c48665715089978</anchor>
      <arglist>(double newStart, double newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentRangeStart</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>abcaa8af283ca44bb29a9f2949716c319</anchor>
      <arglist>(double newStart)</arglist>
    </member>
    <member kind="function">
      <type>const Range&lt; double &gt;</type>
      <name>getCurrentRange</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>aa33d5eab49214156ce9e730f40523fa5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentRangeStart</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>ab7ef22412ff54aa573807a9acbf5b050</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentRangeSize</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a681e8686f439c6cc57a0426136961b5e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSingleStepSize</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a7bac17aaa9153040248fa3823b222ce4</anchor>
      <arglist>(double newSingleStepSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveScrollbarInSteps</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>af12b60e44891ea8df20e74c20f313ae6</anchor>
      <arglist>(int howManySteps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveScrollbarInPages</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a35660932575fc4f3a119ff8f04f0a184</anchor>
      <arglist>(int howManyPages)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToTop</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a4eab64006ff387591f5b2bcaa36ea606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToBottom</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a0b8db83230715f312faa9264ae74a07b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setButtonRepeatSpeed</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a65b128f173c754300cdc9db8589d2a36</anchor>
      <arglist>(int initialDelayInMillisecs, int repeatDelayInMillisecs, int minimumDelayInMillisecs=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a231620a2e529f6c1ff846d8b5faccc80</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>aef360a50049a02ffcac094507267cd5d</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>adab30aace2091a6c61b93248b4b3c344</anchor>
      <arglist>(const KeyPress &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a0798fd49fcad1772567ae6b55e083615</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>ae8384e9d82268d14fb56ba5f74de39e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleAsyncUpdate</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a5c5c5cf1f16b0f623e0ca95644556075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a337c8d99be150ca9841645b27fe2a67d</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>ad8d7ebe1ece2d73601be66e9829fbdca</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a727825401a3f0d8c39135a5064b58fff</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a8e2b61f7c34bd42f4db86eb75ecb9893</anchor>
      <arglist>(Graphics &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>abfa4e1134d8c8ee566a099b6272e43dc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScrollBar::Listener</name>
    <filename>classScrollBar_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classScrollBar_1_1Listener.html</anchorfile>
      <anchor>aca5324fddadfc52a739beccda52165aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scrollBarMoved</name>
      <anchorfile>classScrollBar_1_1Listener.html</anchorfile>
      <anchor>a2fb3f2cdec354939ba4282fc4631fc1f</anchor>
      <arglist>(ScrollBar *scrollBarThatHasMoved, double newRangeStart)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SelectedItemSet</name>
    <filename>classSelectedItemSet.html</filename>
    <templarg></templarg>
    <base>ChangeBroadcaster</base>
    <member kind="typedef">
      <type>SelectableItemType</type>
      <name>ItemType</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>adac8d78df1c308ca17aa9cbfada787fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>typedef</type>
      <name>PARAMETER_TYPE</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a80e1e81065dbc4cb307bf4dd0d41fedd</anchor>
      <arglist>(SelectableItemType) ParameterType</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelectedItemSet</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a251c959797ab80fe2e7b553a52a6b8c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelectedItemSet</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a5a44c2e8e1e7df50bdb157f3ec79cba5</anchor>
      <arglist>(const Array&lt; SelectableItemType &gt; &amp;items)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelectedItemSet</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a2f5056970053b0153c5661629e254ab5</anchor>
      <arglist>(const SelectedItemSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SelectedItemSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>af86b0e97bd91cbbd0a16bea50e3f7f0d</anchor>
      <arglist>(const SelectedItemSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectOnly</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a5c989a8cd1483b655b948aee86fb768c</anchor>
      <arglist>(ParameterType item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSelection</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a8ec6de21f75ccfa083cd702ab027f778</anchor>
      <arglist>(ParameterType item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSelectionBasedOnModifiers</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a8b085cf3b8546ef7b33936a60682e5bb</anchor>
      <arglist>(ParameterType item, const ModifierKeys &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addToSelectionOnMouseDown</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>af309cd44836536512ea5054d5be7d840</anchor>
      <arglist>(ParameterType item, const ModifierKeys &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSelectionOnMouseUp</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a95c726ad98c5ba6c1a509d39c8b1395d</anchor>
      <arglist>(ParameterType item, const ModifierKeys &amp;modifiers, const bool wasItemDragged, const bool resultOfMouseDownSelectMethod)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselect</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a657dd4d8aa7604f795c0d0d3962b410c</anchor>
      <arglist>(ParameterType item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselectAll</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a2d8c179287d5afa7e4ef0318ce779813</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSelected</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>adaf7fb93ca30bc24a130c7601cb83c49</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SelectableItemType</type>
      <name>getSelectedItem</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a028b98eaac98a9206854e15d096b844a</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSelected</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a431e7bbc3d316e1822596563b49adc73</anchor>
      <arglist>(ParameterType item) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Array&lt; SelectableItemType &gt; &amp;</type>
      <name>getItemArray</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a13ce49e6d5f91ded6be4e1520be36b82</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemSelected</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>adf66500b4e7c85b38439d3a6dbac8e11</anchor>
      <arglist>(SelectableItemType item)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemDeselected</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>aa8405b4a0f23095d8a0d94ddcc0daa27</anchor>
      <arglist>(SelectableItemType item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changed</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>aaacd60906dfc3c9c6ab9272b68a25c3f</anchor>
      <arglist>(const bool synchronous=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SettableTooltipClient</name>
    <filename>classSettableTooltipClient.html</filename>
    <base>TooltipClient</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SettableTooltipClient</name>
      <anchorfile>classSettableTooltipClient.html</anchorfile>
      <anchor>aaae46e35635da9cada96bb173f9ddda0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTooltip</name>
      <anchorfile>classSettableTooltipClient.html</anchorfile>
      <anchor>aa374ef7cc0eea80f3922f5d584da79e9</anchor>
      <arglist>(const String &amp;newTooltip)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getTooltip</name>
      <anchorfile>classSettableTooltipClient.html</anchorfile>
      <anchor>ad29ec316daeb9e424dc0813b11d38791</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SettableTooltipClient</name>
      <anchorfile>classSettableTooltipClient.html</anchorfile>
      <anchor>aa43c53d065d75a122eada74694deaca6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SHA256</name>
    <filename>classSHA256.html</filename>
    <member kind="function">
      <type></type>
      <name>SHA256</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>aca9f9e18f0fcec4403f7ba7a34d7d997</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SHA256</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>ada631ca14154b07d447d9acf4316fe0b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHA256</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>a78c36f04e7b93bceb284bc6fa1d4dc83</anchor>
      <arglist>(const SHA256 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SHA256 &amp;</type>
      <name>operator=</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>ab942ef9ca0bda08939d963b9f8b1f8fa</anchor>
      <arglist>(const SHA256 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHA256</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>a748c9b655d20cc6f231b1e6ce66fb668</anchor>
      <arglist>(const MemoryBlock &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHA256</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>a91462d2740994a2378bafd26e0c9ea17</anchor>
      <arglist>(const void *data, size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHA256</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>aa5808aa761f581dad5ecd3994079405a</anchor>
      <arglist>(InputStream &amp;input, int64 maxBytesToRead=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHA256</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>a41cdcca706b6c1534d8e60ba4291f2b1</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHA256</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>a3e74566f284ce67e04c99d0c92b3a98f</anchor>
      <arglist>(const CharPointer_UTF8 &amp;utf8Text) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MemoryBlock</type>
      <name>getRawData</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>ac77dbaeb150e8441079e8a47deafeea3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toHexString</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>a0256967ecc348e2233ad3769db27cebf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>ae18a8292c05d1896e4e54922d5b7ae83</anchor>
      <arglist>(const SHA256 &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>a3954262bdd5defd5c552a7d0fb6373fc</anchor>
      <arglist>(const SHA256 &amp;) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeButton</name>
    <filename>classShapeButton.html</filename>
    <base>Button</base>
    <member kind="function">
      <type></type>
      <name>ShapeButton</name>
      <anchorfile>classShapeButton.html</anchorfile>
      <anchor>a2317552f4b92de895ede82506acbe87a</anchor>
      <arglist>(const String &amp;name, const Colour &amp;normalColour, const Colour &amp;overColour, const Colour &amp;downColour)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ShapeButton</name>
      <anchorfile>classShapeButton.html</anchorfile>
      <anchor>a5a3275bba2b41d705d107236ea28e251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShape</name>
      <anchorfile>classShapeButton.html</anchorfile>
      <anchor>a40b9a0a8f4a181b06e88bb51b311ec9c</anchor>
      <arglist>(const Path &amp;newShape, bool resizeNowToFitThisShape, bool maintainShapeProportions, bool hasDropShadow)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColours</name>
      <anchorfile>classShapeButton.html</anchorfile>
      <anchor>a94c1bd77c30d1edc41b7a10d7887c532</anchor>
      <arglist>(const Colour &amp;normalColour, const Colour &amp;overColour, const Colour &amp;downColour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutline</name>
      <anchorfile>classShapeButton.html</anchorfile>
      <anchor>ad0e04a24dd13d84076db8e6579aa4569</anchor>
      <arglist>(const Colour &amp;outlineColour, float outlineStrokeWidth)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classShapeButton.html</anchorfile>
      <anchor>a9796c0407cf4ebfb518132aa50aac694</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleThreadedReferenceCountedObject</name>
    <filename>classSingleThreadedReferenceCountedObject.html</filename>
    <member kind="function">
      <type>void</type>
      <name>incReferenceCount</name>
      <anchorfile>classSingleThreadedReferenceCountedObject.html</anchorfile>
      <anchor>ab372c9117f9352a7da5a3c9a7583091d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decReferenceCount</name>
      <anchorfile>classSingleThreadedReferenceCountedObject.html</anchorfile>
      <anchor>aa690489ec6e529bf4588c46092d09156</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReferenceCount</name>
      <anchorfile>classSingleThreadedReferenceCountedObject.html</anchorfile>
      <anchor>a84247db36d71ed860876941ed2045c85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SingleThreadedReferenceCountedObject</name>
      <anchorfile>classSingleThreadedReferenceCountedObject.html</anchorfile>
      <anchor>a33487e345c10684a13f90bfeb6756fe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SingleThreadedReferenceCountedObject</name>
      <anchorfile>classSingleThreadedReferenceCountedObject.html</anchorfile>
      <anchor>abf19dff5e45014675c24ab5c5235cb90</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Slider</name>
    <filename>classSlider.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <class kind="struct">Slider::Ids</class>
    <class kind="class">Slider::Listener</class>
    <member kind="enumeration">
      <name>SliderStyle</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LinearHorizontal</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a0fa5cefcd508c8f26ac9a458272844f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LinearVertical</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a31f9134048fa90fbc4a72b69c6f553d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LinearBar</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a0092c810419dab80d4692363d9564c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Rotary</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a2043125f6f74c8ceae38baf3fb514f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RotaryHorizontalDrag</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a8c359e2cb456e39665bec067273df5fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RotaryVerticalDrag</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a46ac50fdae2ac4df9a2f3ad630589224</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IncDecButtons</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888adcb7bc12a443e3c6cdf598ab3c5e2171</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TwoValueHorizontal</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a2ce77695813bb317c2d1863d2e71213b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TwoValueVertical</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a7477c3163edc14c8740d464e523e5ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ThreeValueHorizontal</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888ad74f46a4848b6c1b3e3cc59da103f504</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ThreeValueVertical</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888aa2c50364a9dd891a0e5e8022570c8e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TextEntryBoxPosition</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoTextBox</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412fad0badf0233a956017621f284e3e30fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TextBoxLeft</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412fa66ab77e721cd147f54097b8bed8c6d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TextBoxRight</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412fae50f30d7062c602b8f8b465346f79a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TextBoxAbove</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412fa382d14dbd222edf95fdf2836acc33fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TextBoxBelow</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412fa9a20474ba0850feb957b8cea91c6a456</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>IncDecButtonMode</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0ceaddd29269b6ec5a41f35bbb2ff74a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>incDecButtonsNotDraggable</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0ceaddd29269b6ec5a41f35bbb2ff74aabc5b1657cd94c709c9086a463b1d7094</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>incDecButtonsDraggable_AutoDirection</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0ceaddd29269b6ec5a41f35bbb2ff74aa4877104d807899962ee036571ca93f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>incDecButtonsDraggable_Horizontal</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0ceaddd29269b6ec5a41f35bbb2ff74aa19d0b1bdc13c1c673e382045c023868b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>incDecButtonsDraggable_Vertical</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0ceaddd29269b6ec5a41f35bbb2ff74aae8e58e3ebb5b43e67e7de0071ba68ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44a7479f5409d832c1fc97697450c00bb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>thumbColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44aee563b22e0033b0ed4f38e5296889835</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>trackColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44a1a7a91f54b703cf78f028edc0ed7786b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rotarySliderFillColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44ad6ece790078ea74733dfa2a0d99905a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rotarySliderOutlineColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44abc955b1201e3f12967cb3ff472ba86d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textBoxTextColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44a6e5d3f5c91a314d510d9fc553c881e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textBoxBackgroundColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44ac1eb5559c6e1c8ef115259ceabfd771b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textBoxHighlightColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44aa70515f09dbc0ca6a7250100b35e47f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textBoxOutlineColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44ae65fdadb3e607a23c074074d64a61ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slider</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a535033fada8e25ef7291d2a52e6e437b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slider</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ae2c907adc5de6f127138f3f869f683ae</anchor>
      <arglist>(const String &amp;componentName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slider</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ad0d654d54372b23671bfc28f179c339d</anchor>
      <arglist>(SliderStyle style, TextEntryBoxPosition textBoxPosition)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Slider</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>aaca12abbe07a83f925d66339aa332028</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSliderStyle</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a6b6917dd3753c7552778977733f0b9ef</anchor>
      <arglist>(SliderStyle newStyle)</arglist>
    </member>
    <member kind="function">
      <type>SliderStyle</type>
      <name>getSliderStyle</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a5fe7b4917ead20eb9c180de81c46b41f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotaryParameters</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a6fad4379a38262e28820213c7ffd26fb</anchor>
      <arglist>(float startAngleRadians, float endAngleRadians, bool stopAtEnd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseDragSensitivity</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a4bdd8cdb79dcdb06b1e97a21ff2a6c4b</anchor>
      <arglist>(int distanceForFullScaleDrag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMouseDragSensitivity</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a9bf33100be78b96ce03cd2c50f613cb8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVelocityBasedMode</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a59b616e79738d3adb83093dc532822d0</anchor>
      <arglist>(bool isVelocityBased)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getVelocityBasedMode</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a807ee244e5a714a8db257e102ec5496d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVelocityModeParameters</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>add6fe31d11f1c783aafeca6294b13858</anchor>
      <arglist>(double sensitivity=1.0, int threshold=1, double offset=0.0, bool userCanPressKeyToSwapMode=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVelocitySensitivity</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a547bab3deb827a47e12d90a47c957c10</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVelocityThreshold</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a52d5cbe2e3676060cdb58cea2b797f24</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVelocityOffset</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>adc2df4c66975945ef9aca9eeb350ee86</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getVelocityModeIsSwappable</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af15caa58f5f70c0f9b52aa5d07604580</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkewFactor</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a3253bce613f1770688380e4fcc91b964</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkewFactorFromMidPoint</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a2d948c662c1f636810d3125d8b3f0d47</anchor>
      <arglist>(double sliderValueToShowAtMidPoint)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSkewFactor</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a803021cfc12e4ff54e9b598dabdd8761</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIncDecButtonsMode</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a188fa57db0d90f931529dc367e76b9f5</anchor>
      <arglist>(IncDecButtonMode mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextBoxStyle</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a5bc748a21e72fe14153bc9fe5ac03e77</anchor>
      <arglist>(TextEntryBoxPosition newPosition, bool isReadOnly, int textEntryBoxWidth, int textEntryBoxHeight)</arglist>
    </member>
    <member kind="function">
      <type>TextEntryBoxPosition</type>
      <name>getTextBoxPosition</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a6910e59cbc2aa25a8499a9c7e6593bb1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTextBoxWidth</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>aaa9719f67d8c819957a5262f2430c4a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTextBoxHeight</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a8258ee0e1222f3e02a696243a3468578</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextBoxIsEditable</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a59e3fd9bc86e488070c12889747e7bbe</anchor>
      <arglist>(bool shouldBeEditable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextBoxEditable</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>acd1590a901ef4a8240c8aae05c52e824</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showTextBox</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a3a8e500dc05a6afc52fc61f9001e7a1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideTextBox</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0780c7da80f4d487703e8247e92bea21</anchor>
      <arglist>(bool discardCurrentEditorContents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a9efb9aa7aaea458abea6cd9a572d62e4</anchor>
      <arglist>(double newValue, bool sendUpdateMessage=true, bool sendMessageSynchronously=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ace4fffe8ad4e2b2c4cd2cda06dedc848</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getValueObject</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a40ceae44fd94f912fc10d8a5803b9b01</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a9fbc23e67deb4a18d172c357a7cff14c</anchor>
      <arglist>(double newMinimum, double newMaximum, double newInterval=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximum</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a9eb087c868550c699da26ee3df9ecd68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinimum</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>acb7c7f0ca87e34da986ac7f9e732bab1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInterval</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a8b666bae0c68ff8af0bdb2381b97e89e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a518e19d02009336a5bbe3b9df1f8bd90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getMinValueObject</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>adeedf0e9e8a3402e7003bd637f04e167</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a10f66ef4eb820d189bc4c2c8514dfecf</anchor>
      <arglist>(double newValue, bool sendUpdateMessage=true, bool sendMessageSynchronously=false, bool allowNudgingOfOtherValues=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>aae0148780396fffa80ef45bfa5e21f0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getMaxValueObject</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>acb8fa9ed28c5760bb095b74086a31eac</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>aed820d12ac34b22fa996d8c8339d2dbc</anchor>
      <arglist>(double newValue, bool sendUpdateMessage=true, bool sendMessageSynchronously=false, bool allowNudgingOfOtherValues=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinAndMaxValues</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>affadadcf36f64c4993bf294bc57b3779</anchor>
      <arglist>(double newMinValue, double newMaxValue, bool sendUpdateMessage=true, bool sendMessageSynchronously=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a261f4886ed27ab0f94b1cfb6e9f44011</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a846b68f0fe1624563399e540e38b4609</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDoubleClickReturnValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ab2a3be00576cc708efbd58c98ee4cf51</anchor>
      <arglist>(bool isDoubleClickEnabled, double valueToSetOnDoubleClick)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleClickReturnValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0a68020b86485a6fc38e5124f31591b2</anchor>
      <arglist>(bool &amp;isEnabled) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChangeNotificationOnlyOnRelease</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ab41e52ab8941619028a8d57103975029</anchor>
      <arglist>(bool onlyNotifyOnRelease)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSliderSnapsToMousePosition</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>acf58b7346a74cfc0a8c809567836df61</anchor>
      <arglist>(bool shouldSnapToMouse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSliderSnapsToMousePosition</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a8548287936ea455e23036222367df4aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPopupDisplayEnabled</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0d27965d2fde911bd2a5032402be843f</anchor>
      <arglist>(bool isEnabled, Component *parentComponentToUse)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getCurrentPopupDisplay</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1b264e454184d57c69e1ab986eb15d7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPopupMenuEnabled</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a5dc957ba7c141dab961f0b3d46d46bb7</anchor>
      <arglist>(bool menuEnabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollWheelEnabled</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0061698886ebcc9e2fc9233398383a3c</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getThumbBeingDragged</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>aed1a4658f31db573dd8073afb603cef9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startedDragging</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a3f63934b274f0f49bcd38530ca3de80b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stoppedDragging</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ada61c1382dfcc8a956029f883ad5f83e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>valueChanged</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a5988f8e1b98cb0b28330522117d46c1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValueFromText</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a532774d3294a058784f7d4291b33b720</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getTextFromValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a5a1693166d0815f812202b1a3a6eb202</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextValueSuffix</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ac416a101b5d9a504f61e2f50dc593f61</anchor>
      <arglist>(const String &amp;suffix)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextValueSuffix</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af40e1d4c27e5414bf21e838b073940df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>proportionOfLengthToValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a6762e2206ad7e41cb8d6189b244d91f5</anchor>
      <arglist>(double proportion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>valueToProportionOfLength</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0549ec352b8dca4ca4ba1afa43263370</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPositionOfValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a566a2ce3de4d712b1c19408674f5ab15</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>snapValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a5177f26b97f9f6ea320b7831c268301e</anchor>
      <arglist>(double attemptedValue, bool userIsDragging)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateText</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>acec04f6f7cca814b66c23ae5cf4a7b6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHorizontal</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a72da5afa45bfdcc642a53eb04c993f1e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVertical</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a105d005078031e28d8e23d52d194bcde</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a98bd534b780c99b2fbe7878dfe50b2f9</anchor>
      <arglist>(const ValueTree &amp;, ComponentBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0d99114ab8dac759d06583726076f933</anchor>
      <arglist>(Graphics &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0aa99144eb939ffd68c7849410067e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>acf9834207bfa5ad4caf2d96bc37a3396</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ac2b461a37e087d6e04ee0dcdf886ab0a</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ad39e4dbc45c746e8337784d650494263</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDoubleClick</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a57a74559c84517cb52d1dba45465ab27</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a09e8afb03036d1ffe8de3e25221267ae</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>modifierKeysChanged</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a2e7c60b6e5ab7e160be293c6cff05b51</anchor>
      <arglist>(const ModifierKeys &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a8655306c7d410d02b4531458de51b666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a57d0b08c020cf7d71b9e5b028d859e59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>focusOfChildComponentChanged</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ab7bdb36d126d55d54bd7a80f83347666</anchor>
      <arglist>(FocusChangeType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af9be12d2a11def84232f868bbcaa6d25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getNumDecimalPlacesToDisplay</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>aa5bb046cc2276f034f8ad8a67054057b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Slider::Ids</name>
    <filename>structSlider_1_1Ids.html</filename>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>tagType</name>
      <anchorfile>structSlider_1_1Ids.html</anchorfile>
      <anchor>a413608eec50b448a17ee0ed964279068</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>min</name>
      <anchorfile>structSlider_1_1Ids.html</anchorfile>
      <anchor>a4b4fb8c7d73fb9390158f5c07a355d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>max</name>
      <anchorfile>structSlider_1_1Ids.html</anchorfile>
      <anchor>aded87e993ab131dd276c34a88742f218</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>interval</name>
      <anchorfile>structSlider_1_1Ids.html</anchorfile>
      <anchor>a4ef66c6bc65214938c35bf7767fad9f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>type</name>
      <anchorfile>structSlider_1_1Ids.html</anchorfile>
      <anchor>a993ac1a32b05096b14dc529ea45525e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>editable</name>
      <anchorfile>structSlider_1_1Ids.html</anchorfile>
      <anchor>affaa68793efb32ad09f80514a2258fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>textBoxPos</name>
      <anchorfile>structSlider_1_1Ids.html</anchorfile>
      <anchor>a2ed3d114f38ed706ad7935511b6281ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>textBoxWidth</name>
      <anchorfile>structSlider_1_1Ids.html</anchorfile>
      <anchor>ac837382ce9713d5e88a96d927c3f8031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>textBoxHeight</name>
      <anchorfile>structSlider_1_1Ids.html</anchorfile>
      <anchor>a908d5b0b741ed3c84d3be5140e2346c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>skew</name>
      <anchorfile>structSlider_1_1Ids.html</anchorfile>
      <anchor>a49dbf6c5cf39305558bf3d44360fd2f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Slider::Listener</name>
    <filename>classSlider_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classSlider_1_1Listener.html</anchorfile>
      <anchor>a16bff39b45d9d9eb712e450a4c9b155a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sliderValueChanged</name>
      <anchorfile>classSlider_1_1Listener.html</anchorfile>
      <anchor>a127bfe68835dc3e584cf3c2a427a27e5</anchor>
      <arglist>(Slider *slider)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sliderDragStarted</name>
      <anchorfile>classSlider_1_1Listener.html</anchorfile>
      <anchor>abad9702105e67184e685f838697f6dd7</anchor>
      <arglist>(Slider *slider)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sliderDragEnded</name>
      <anchorfile>classSlider_1_1Listener.html</anchorfile>
      <anchor>a43b0b7cee6180fb98924cb708c6bae53</anchor>
      <arglist>(Slider *slider)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SliderPropertyComponent</name>
    <filename>classSliderPropertyComponent.html</filename>
    <base>PropertyComponent</base>
    <base protection="private">Slider::Listener</base>
    <member kind="function">
      <type></type>
      <name>SliderPropertyComponent</name>
      <anchorfile>classSliderPropertyComponent.html</anchorfile>
      <anchor>ad8d1e32b02182fc9def5bcb02a9a0aa1</anchor>
      <arglist>(const Value &amp;valueToControl, const String &amp;propertyName, double rangeMin, double rangeMax, double interval, double skewFactor=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SliderPropertyComponent</name>
      <anchorfile>classSliderPropertyComponent.html</anchorfile>
      <anchor>a62dca91705c2af7c440327ebf4f9b627</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classSliderPropertyComponent.html</anchorfile>
      <anchor>a9b4e58d9a44de072a3674dbdbd1366f0</anchor>
      <arglist>(double newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classSliderPropertyComponent.html</anchorfile>
      <anchor>ae199f29142e97f6f1fd4b4987d17500f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classSliderPropertyComponent.html</anchorfile>
      <anchor>ac8bfacd03f933004c83a8dd409636656</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sliderValueChanged</name>
      <anchorfile>classSliderPropertyComponent.html</anchorfile>
      <anchor>a7cd9f4d3a7c681e642b4d461302a55ac</anchor>
      <arglist>(Slider *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SliderPropertyComponent</name>
      <anchorfile>classSliderPropertyComponent.html</anchorfile>
      <anchor>aa0734f6f8abc891f7d830b033e183fe6</anchor>
      <arglist>(const String &amp;propertyName, double rangeMin, double rangeMax, double interval, double skewFactor=1.0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Slider</type>
      <name>slider</name>
      <anchorfile>classSliderPropertyComponent.html</anchorfile>
      <anchor>ae379d1c2bbcdab0d687697c9dfc36f9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoftwareImageType</name>
    <filename>classSoftwareImageType.html</filename>
    <base>ImageType</base>
    <member kind="function">
      <type></type>
      <name>SoftwareImageType</name>
      <anchorfile>classSoftwareImageType.html</anchorfile>
      <anchor>a5f5beb2f6f0c7b4f63eef95eff97bdd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoftwareImageType</name>
      <anchorfile>classSoftwareImageType.html</anchorfile>
      <anchor>aeb786d026cf2d88e836726351a287e4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ImagePixelData *</type>
      <name>create</name>
      <anchorfile>classSoftwareImageType.html</anchorfile>
      <anchor>a8a3db615052fc56b37ebb1bb1b3261b7</anchor>
      <arglist>(Image::PixelFormat, int width, int height, bool clearImage) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTypeID</name>
      <anchorfile>classSoftwareImageType.html</anchorfile>
      <anchor>a0b9890b26072ac64d7d61cbe9cfef671</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SortedSet</name>
    <filename>classSortedSet.html</filename>
    <templarg>ElementType</templarg>
    <templarg>TypeOfCriticalSectionToUse</templarg>
    <member kind="typedef">
      <type>TypeOfCriticalSectionToUse::ScopedLockType</type>
      <name>ScopedLockType</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>ae626f3b066a888141799190c37f35d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SortedSet</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a32a61b722cdb83c4a91eb99b82a3583b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SortedSet</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>af8461e46cb255507bf2650240a63e4a4</anchor>
      <arglist>(const SortedSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SortedSet</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a3a3337e308c30652d555df85949aa73f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>SortedSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>ac25e3122d81c9a82216cca1b385fc8c6</anchor>
      <arglist>(const SortedSet &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a0c7eea00d2ac22afa1fcd70aa0d7d920</anchor>
      <arglist>(const SortedSet&lt; ElementType &gt; &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>afd108e9b2b728bc3ea22428add3f99e6</anchor>
      <arglist>(const SortedSet&lt; ElementType &gt; &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a0cc4c313458f6d87513fda77d31eaa71</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuick</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a792064a68e61905a9ee6968e2cbc4ee6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>aae5daa157bd06da7e89ac7abde60ff68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>operator[]</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a06f73ea7834733c5697e87644b60341b</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>getUnchecked</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a931d3c86921cd13c2ca30316eb5dc8c2</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType &amp;</type>
      <name>getReference</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>aee801e5bbc1d6fc894156e102237ca14</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>getFirst</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a44bdd0240e337b2f8197629aa1334230</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>getLast</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a2289698c4c183d6554f99760c1348d02</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType *</type>
      <name>begin</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a4546d1c39aca9b8105b1934c0546774b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType *</type>
      <name>end</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>ac616e72c4fad8919f19b486320555326</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>ac51e0a933c5902a55f68ee8eef9cba00</anchor>
      <arglist>(const ElementType &amp;elementToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>ae1e68e73d12e73d1cd4d63b4ee7fa791</anchor>
      <arglist>(const ElementType &amp;elementToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>acfa575e890f94ebc4e06113a53cb3ef3</anchor>
      <arglist>(const ElementType &amp;newElement) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArray</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a8b84c2248ee6e7bc18a3cb6bd235e4ea</anchor>
      <arglist>(const ElementType *elementsToAdd, int numElementsToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSet</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>ad0879c462c30f89f5c09458f46b8d35f</anchor>
      <arglist>(const OtherSetType &amp;setToAddFrom, int startIndex=0, int numElementsToAdd=-1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>remove</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a86602918644c684fd72d239980a83d84</anchor>
      <arglist>(const int indexToRemove) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeValue</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a21b0da9c6e547485feecc3b91d28164c</anchor>
      <arglist>(const ElementType valueToRemove) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeValuesIn</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a87ad10e1f49afe6fbcbf4170e84bf95e</anchor>
      <arglist>(const OtherSetType &amp;otherSet) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeValuesNotIn</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a44266b927f68b51086f56a8732fd3190</anchor>
      <arglist>(const OtherSetType &amp;otherSet) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a99e7648112d5120fd5954c10b6870a26</anchor>
      <arglist>(SortedSet &amp;otherSet) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minimiseStorageOverheads</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a259f41879ab086bde96eb90bbe9c4cd8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureStorageAllocated</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a8104c54b46a0ffbe8f54395f5cf44b72</anchor>
      <arglist>(const int minNumElements)</arglist>
    </member>
    <member kind="function">
      <type>const TypeOfCriticalSectionToUse &amp;</type>
      <name>getLock</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a5a0b04e366f0a1faa768d05e400208ca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSet</name>
    <filename>classSparseSet.html</filename>
    <templarg>Type</templarg>
    <member kind="function">
      <type></type>
      <name>SparseSet</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a7d68b624199ec2f71e9ec1519c4fcd3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSet</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a9db453b88c6f983047f2920412b7c559</anchor>
      <arglist>(const SparseSet&lt; Type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a7d2fc6674ce3c6c0c52d720d88752339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>ae60850392e3312144695b1bb9c999047</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>size</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>abb774559c4dd7fa498095539c22e9df1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>operator[]</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a54f3d84e61a754674f62981216013254</anchor>
      <arglist>(Type index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a012b4ce66f31a8666bd818e18a6081de</anchor>
      <arglist>(const Type valueToLookFor) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRanges</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a2cf54ba41e95ead13be4cdea090750fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Range&lt; Type &gt;</type>
      <name>getRange</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a77a4314241f40c4c3be84687eb2d61cb</anchor>
      <arglist>(const int rangeIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Range&lt; Type &gt;</type>
      <name>getTotalRange</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>aa243e3ee99df5bfe41983c031d4b148a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRange</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a2f2756296a624525b12e600bb4a5611d</anchor>
      <arglist>(const Range&lt; Type &gt; &amp;range)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRange</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a998d2921632e1135cf1983584d931181</anchor>
      <arglist>(const Range&lt; Type &gt; &amp;rangeToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertRange</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a09ed277f3709750c6f7cd0bb4c730986</anchor>
      <arglist>(const Range&lt; Type &gt; &amp;range)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlapsRange</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a46572885b4491c60c61e761b51268cb0</anchor>
      <arglist>(const Range&lt; Type &gt; &amp;range)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsRange</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>ae0677cc1437e82cbf48a6b1559385271</anchor>
      <arglist>(const Range&lt; Type &gt; &amp;range)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a24f9ec48f4d54d6e367de646b282eaee</anchor>
      <arglist>(const SparseSet&lt; Type &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>acab4f9b22f2852bc215ace7f8fe5b9ba</anchor>
      <arglist>(const SparseSet&lt; Type &gt; &amp;other) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpinLock</name>
    <filename>classSpinLock.html</filename>
    <member kind="typedef">
      <type>GenericScopedLock&lt; SpinLock &gt;</type>
      <name>ScopedLockType</name>
      <anchorfile>classSpinLock.html</anchorfile>
      <anchor>a8239db74a56ce60a114cd369ed6a41f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericScopedUnlock&lt; SpinLock &gt;</type>
      <name>ScopedUnlockType</name>
      <anchorfile>classSpinLock.html</anchorfile>
      <anchor>ae531d71996d5122e0caa8a10212cf585</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpinLock</name>
      <anchorfile>classSpinLock.html</anchorfile>
      <anchor>a204af2b708c1678699ce0a235c229c64</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SpinLock</name>
      <anchorfile>classSpinLock.html</anchorfile>
      <anchor>ae5ac2bc2ea9faeb66d861ea0b9cdc7cd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enter</name>
      <anchorfile>classSpinLock.html</anchorfile>
      <anchor>a9079933ef4fdd1527fd0bf90f1062e02</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryEnter</name>
      <anchorfile>classSpinLock.html</anchorfile>
      <anchor>a4581a24b50dad1a9803b19f65af70aaf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exit</name>
      <anchorfile>classSpinLock.html</anchorfile>
      <anchor>a13a3a2f0d2a659b493a9c6e93e8d95f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SplashScreen</name>
    <filename>classSplashScreen.html</filename>
    <base>Component</base>
    <base>Timer</base>
    <base protection="private">DeletedAtShutdown</base>
    <member kind="function">
      <type></type>
      <name>SplashScreen</name>
      <anchorfile>classSplashScreen.html</anchorfile>
      <anchor>af7cda68255a26779cb49fd7a26d11492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SplashScreen</name>
      <anchorfile>classSplashScreen.html</anchorfile>
      <anchor>aeb6a4736f6f7b9bb880d606610c2ae1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classSplashScreen.html</anchorfile>
      <anchor>ade6aa6208f77515710222e81c6b49412</anchor>
      <arglist>(const String &amp;title, const Image &amp;backgroundImage, int minimumTimeToDisplayFor, bool useDropShadow, bool removeOnMouseClick=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classSplashScreen.html</anchorfile>
      <anchor>ae893e7677d1fd7bbdb88bce1552f0473</anchor>
      <arglist>(const String &amp;title, int width, int height, int minimumTimeToDisplayFor, bool useDropShadow, bool removeOnMouseClick=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classSplashScreen.html</anchorfile>
      <anchor>a34808c6296a967dc30df803befbd95f4</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timerCallback</name>
      <anchorfile>classSplashScreen.html</anchorfile>
      <anchor>a7e815c2cd0b6db55ca65e275af05a5c8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StandaloneFilterWindow</name>
    <filename>classStandaloneFilterWindow.html</filename>
    <base>DocumentWindow</base>
    <member kind="function">
      <type></type>
      <name>StandaloneFilterWindow</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>a25483b8451fcf2680b7e8d032a57fc24</anchor>
      <arglist>(const String &amp;title, const Colour &amp;backgroundColour, PropertySet *settingsToUse)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StandaloneFilterWindow</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>aae64328faa7f0aa4ccc0099ebf4e84d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetFilter</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>a0651dd09cb5395b2fe668777373821b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveState</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>aefd4918d57d297110fb85b84a18e1153</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadState</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>a8c425537a6d18a08cf81a9478c2335aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>showAudioSettingsDialog</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>ab6b2829788f62cd54abe1670e86f26bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeButtonPressed</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>accf60951b00e598149160ffdc7df6206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonClicked</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>a0e7c6b06043ccf3930ebc27a8d3b740e</anchor>
      <arglist>(Button *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>a94a7327ac21e0b822a75b0bc04481d0e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StreamingSocket</name>
    <filename>classStreamingSocket.html</filename>
    <member kind="function">
      <type></type>
      <name>StreamingSocket</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a280e9f29da54da9a828c920d734cc580</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StreamingSocket</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>aaed4b1879a7f212cf95382b418d03210</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bindToPort</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>aa0788414f9c3f08d1c5adddf5481e17a</anchor>
      <arglist>(int localPortNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a42934b3f0d68f46f29cc7bb5d1067c33</anchor>
      <arglist>(const String &amp;remoteHostname, int remotePortNumber, int timeOutMillisecs=3000)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a22d32e5442ccae9033278729aaa3e075</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a59ad8b03c9b5ef8572f9b159d3a411d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getHostName</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a1f0908b06027d58c1070f5bf1d700959</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPort</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a27a413769755ff853ab63a6f27338cce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocal</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a47a3da922f5a1bc2d111caa38bd23d2e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>waitUntilReady</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a8c737d5e12af2540e282d159379163ba</anchor>
      <arglist>(bool readyForReading, int timeoutMsecs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>ac048823c044a47600f7f1036c730b934</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead, bool blockUntilSpecifiedAmountHasArrived)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>write</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a90721593b92401ecd20aae2c68d3d446</anchor>
      <arglist>(const void *sourceBuffer, int numBytesToWrite)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createListener</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a67541adc1ba7214be278e0c61cc40b20</anchor>
      <arglist>(int portNumber, const String &amp;localHostName=String::empty)</arglist>
    </member>
    <member kind="function">
      <type>StreamingSocket *</type>
      <name>waitForNextConnection</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a97ed9152008fc7af303330a5e5357990</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StretchableLayoutManager</name>
    <filename>classStretchableLayoutManager.html</filename>
    <member kind="function">
      <type></type>
      <name>StretchableLayoutManager</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>a1fc7dc605c628265d33d6d189df8dbdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StretchableLayoutManager</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>ac163f26b08dba15724f71e846a204e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setItemLayout</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>ad06dde1deb392bbe53d9c642302a3e01</anchor>
      <arglist>(int itemIndex, double minimumSize, double maximumSize, double preferredSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getItemLayout</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>a32ffdb00b54dabac8a4112bda1ac8448</anchor>
      <arglist>(int itemIndex, double &amp;minimumSize, double &amp;maximumSize, double &amp;preferredSize) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllItems</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>a11eb6cecef28d174591a4f638807631d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>layOutComponents</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>a8276cd18109ff9bb5220b1d91dad1c90</anchor>
      <arglist>(Component **components, int numComponents, int x, int y, int width, int height, bool vertically, bool resizeOtherDimension)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getItemCurrentPosition</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>a6f399ccd3cdd1d321eca0b30ee703b3e</anchor>
      <arglist>(int itemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getItemCurrentAbsoluteSize</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>a54e180632e051cd00e28d67e36e6efc5</anchor>
      <arglist>(int itemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getItemCurrentRelativeSize</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>a69f950ff072fcef5d6ec5d77c6290452</anchor>
      <arglist>(int itemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setItemPosition</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>a8c9f25baf3358d5b5ba1619fdac75e83</anchor>
      <arglist>(int itemIndex, int newPosition)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StretchableLayoutResizerBar</name>
    <filename>classStretchableLayoutResizerBar.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>StretchableLayoutResizerBar</name>
      <anchorfile>classStretchableLayoutResizerBar.html</anchorfile>
      <anchor>a72bc8f86edf82663bf96e0fbe9461b66</anchor>
      <arglist>(StretchableLayoutManager *layoutToUse, int itemIndexInLayout, bool isBarVertical)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StretchableLayoutResizerBar</name>
      <anchorfile>classStretchableLayoutResizerBar.html</anchorfile>
      <anchor>adc972115e568ac01a46cb8160fac541a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hasBeenMoved</name>
      <anchorfile>classStretchableLayoutResizerBar.html</anchorfile>
      <anchor>a5d834f357c63282771d060f90728f618</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classStretchableLayoutResizerBar.html</anchorfile>
      <anchor>aef7272c94bb9e414c0ee87b4d791d8d3</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classStretchableLayoutResizerBar.html</anchorfile>
      <anchor>a1198f599325ca14d76f25e97b8582fdb</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classStretchableLayoutResizerBar.html</anchorfile>
      <anchor>ab3eae1e4825fdb005b1eb60b3f717f3f</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StretchableObjectResizer</name>
    <filename>classStretchableObjectResizer.html</filename>
    <member kind="function">
      <type></type>
      <name>StretchableObjectResizer</name>
      <anchorfile>classStretchableObjectResizer.html</anchorfile>
      <anchor>ad8e6c2a4601296f009139eab0564df32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StretchableObjectResizer</name>
      <anchorfile>classStretchableObjectResizer.html</anchorfile>
      <anchor>a580207274ce3254eaab02f2781f13bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classStretchableObjectResizer.html</anchorfile>
      <anchor>a2f4ade92ab81712e4556770ecfb81cd0</anchor>
      <arglist>(double currentSize, double minSize, double maxSize, int order=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeToFit</name>
      <anchorfile>classStretchableObjectResizer.html</anchorfile>
      <anchor>ad91dce94a524b769b10c663eec6f0b4e</anchor>
      <arglist>(double targetSize)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumItems</name>
      <anchorfile>classStretchableObjectResizer.html</anchorfile>
      <anchor>a6ae31268a50a1c715e39b28bfd82f560</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getItemSize</name>
      <anchorfile>classStretchableObjectResizer.html</anchorfile>
      <anchor>aca2902b220e5ec11d050e013f2de4de9</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>String</name>
    <filename>classString.html</filename>
    <member kind="typedef">
      <type>CharPointer_UTF8</type>
      <name>CharPointerType</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a32e28d7fc3a4900c319884191d90dbf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a0225bb76bd3527b0e9ec9663c53f873d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a1b484d4f6f749e0b8bf0fe7ab6fef253</anchor>
      <arglist>(const String &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a536209bdc6da85c29369073bed2bfd45</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad6ae56068e13148c8b055020c7234966</anchor>
      <arglist>(const char *text, size_t maxChars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad0c0a09e31ab8549d633b66f05b0395d</anchor>
      <arglist>(const wchar_t *text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a89eba793432dadb723c1d476f2a28629</anchor>
      <arglist>(const wchar_t *text, size_t maxChars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a3e0eab696f99dfd56c33b1cf5d528780</anchor>
      <arglist>(const CharPointer_UTF8 &amp;text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a1bb2b84befac989c034a6589c865b6ab</anchor>
      <arglist>(const CharPointer_UTF8 &amp;text, size_t maxChars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>af470dbd04b3c1df9895ff36da65a0c05</anchor>
      <arglist>(const CharPointer_UTF8 &amp;start, const CharPointer_UTF8 &amp;end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a732fe26f0a77353c2aa1a58a814f8201</anchor>
      <arglist>(const CharPointer_UTF16 &amp;text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a79990ce49394d2956cf3f69fc9f72124</anchor>
      <arglist>(const CharPointer_UTF16 &amp;text, size_t maxChars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a7f7ff722ba3c1a89c7bf67b4dad9f73a</anchor>
      <arglist>(const CharPointer_UTF16 &amp;start, const CharPointer_UTF16 &amp;end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a0e1902c2606c5e72224097dee938f149</anchor>
      <arglist>(const CharPointer_UTF32 &amp;text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a9053959a1697c1dde7c6b420e08d8962</anchor>
      <arglist>(const CharPointer_UTF32 &amp;text, size_t maxChars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae69d64e3c0fe505e3df4dd2f39e3e806</anchor>
      <arglist>(const CharPointer_UTF32 &amp;start, const CharPointer_UTF32 &amp;end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a0a431235e2a8a08fdce7ea492daad589</anchor>
      <arglist>(const CharPointer_ASCII &amp;text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ab6559a8751051579ef090c2c9193654e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hashCode</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad8ca5cb11984df03ff9697442da5ae4b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>hashCode64</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad71be66a9c181abae185b84f7cec5f17</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a468027b0c1096af325a7df60b21e8feb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a397c27215142bd7e21fc45ad04d945ba</anchor>
      <arglist>(const String &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a2db09f6036aa16fb8853049c31ebae72</anchor>
      <arglist>(const String &amp;stringToAppend)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>af6b0df65654d33a35dcae4e45a384ec4</anchor>
      <arglist>(const char *textToAppend)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>af6df59a0045e60d1c72c18e10c0a946f</anchor>
      <arglist>(const wchar_t *textToAppend)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae19f504049d540cd2dd23021584143df</anchor>
      <arglist>(int numberToAppend)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a9eac6350a4e708212a953fd4d7a08046</anchor>
      <arglist>(char characterToAppend)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a5bfc4d8a1f65666048f5025e5520d070</anchor>
      <arglist>(wchar_t characterToAppend)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ade7558187c97f7ac17e9e7ffbc8b2bb2</anchor>
      <arglist>(const String &amp;textToAppend, size_t maxCharsToTake)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendCharPointer</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>adf6b25c44307e548fa8c9cc5bc3fc5b0</anchor>
      <arglist>(const CharPointer &amp;textToAppend, size_t maxCharsToTake)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendCharPointer</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a6dd115349d59fa7bbffc6e3be545d7b8</anchor>
      <arglist>(const CharPointer &amp;textToAppend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ab31a36bda8c789ba3c0ed37bb16c978c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNotEmpty</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a46001a29fcbd7c867f0f3a42598a1495</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aca8d661734f261887a8e60fffaf9aa97</anchor>
      <arglist>(const String &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a180131623117d752e2c33d1febf2429e</anchor>
      <arglist>(const wchar_t *other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aaf4cf8386032038ca88b1d517893c7c2</anchor>
      <arglist>(const char *other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>acb884bac77c4f5ab27ed6182587bff2d</anchor>
      <arglist>(const String &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>adc7f1c9c3413c5a5900f96bbe345df48</anchor>
      <arglist>(const char *other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>af5421eb93f2f44448301374a9aa04b7d</anchor>
      <arglist>(const wchar_t *other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a5583f2341626093e2c373497e2d9758a</anchor>
      <arglist>(const String &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareLexicographically</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae00df4891c6be7ecda6b1a8f9b202f90</anchor>
      <arglist>(const String &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startsWith</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a63b870ebac45d656afdf491c17b05e45</anchor>
      <arglist>(const String &amp;text) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startsWithChar</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aa38dd3b48f5de6ed4106da5b42dd4044</anchor>
      <arglist>(juce_wchar character) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startsWithIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a264d7955e18dc8fe816c6cd851e06420</anchor>
      <arglist>(const String &amp;text) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>endsWith</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a05b29e87faf104e416023bbc8be41c8d</anchor>
      <arglist>(const String &amp;text) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>endsWithChar</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aa3a1b7342852de158b1229a3582f1b22</anchor>
      <arglist>(juce_wchar character) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>endsWithIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a233c9e9e614d5fd623943a08d4d4c991</anchor>
      <arglist>(const String &amp;text) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a28ce7c500f92ce6375edf13c2cec0c8b</anchor>
      <arglist>(const String &amp;text) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsChar</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a913cc63503feccb1c229678c370f3354</anchor>
      <arglist>(juce_wchar character) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae7cec9d1208de3785f261be66914c86f</anchor>
      <arglist>(const String &amp;text) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsWholeWord</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ab417b3a15bbaa5e79a403a4646aa8b55</anchor>
      <arglist>(const String &amp;wordToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsWholeWordIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae24d9ec3cdfc6ceb9872d03bf8cd7bae</anchor>
      <arglist>(const String &amp;wordToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfWholeWord</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a06455d7c51bc26634042f7491330a44a</anchor>
      <arglist>(const String &amp;wordToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfWholeWordIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a5e25be88499120df58845e8c14f183cb</anchor>
      <arglist>(const String &amp;wordToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsAnyOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a5d54977497b513f875a247f8d8da4cbc</anchor>
      <arglist>(const String &amp;charactersItMightContain) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsOnly</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad1012845602816c875fb0f4452b350b6</anchor>
      <arglist>(const String &amp;charactersItMightContain) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsNonWhitespaceChars</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a71ebee1094650e80b02a20040f4fdc8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matchesWildcard</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a6c84a6ab07bdee109559af196713b5dc</anchor>
      <arglist>(const String &amp;wildcard, bool ignoreCase) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfChar</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae47807810f99d10d0cb02f3941141249</anchor>
      <arglist>(juce_wchar characterToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfChar</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a39e731460ea27286bd31096e4e508202</anchor>
      <arglist>(int startIndex, juce_wchar characterToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfAnyOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a1d540b1fc0f14443c6546578f7a6cc6c</anchor>
      <arglist>(const String &amp;charactersToLookFor, int startIndex=0, bool ignoreCase=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>abee256ae40ef6922aecfc2e38c31261e</anchor>
      <arglist>(const String &amp;textToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a81c0cd70c13822ed32277d079a5671c9</anchor>
      <arglist>(int startIndex, const String &amp;textToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aaa49a31a38770a6c8606f036847f8160</anchor>
      <arglist>(const String &amp;textToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae2ad74676f0abf904deb880d8558ef41</anchor>
      <arglist>(int startIndex, const String &amp;textToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lastIndexOfChar</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a0ced47fc04dd1be838e1e45dbeb8454f</anchor>
      <arglist>(juce_wchar character) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lastIndexOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a041996f899e9ed8e0ef3d06a85bfc784</anchor>
      <arglist>(const String &amp;textToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lastIndexOfIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad5f33aa34769eea379ac1bcdb4eddd66</anchor>
      <arglist>(const String &amp;textToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lastIndexOfAnyOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a30142dae7b2f2b22c6f43e323a669ba2</anchor>
      <arglist>(const String &amp;charactersToLookFor, bool ignoreCase=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const juce_wchar</type>
      <name>operator[]</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a143f6a77c19b9b50bef380be85da51e0</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getLastCharacter</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a601ee2751c6ba60b70875de52ef86a90</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>substring</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a43434e38d6300080500510a5afba4747</anchor>
      <arglist>(int startIndex, int endIndex) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>substring</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aaff623ca4e4d03db790907e97be0419b</anchor>
      <arglist>(int startIndex) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>dropLastCharacters</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a10b73eaa851a966058b59946b29b7142</anchor>
      <arglist>(int numberToDrop) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getLastCharacters</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a69d8401edbef61b3e2254a06fca8485e</anchor>
      <arglist>(int numCharacters) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>fromFirstOccurrenceOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a614e51e259787ac2595dec1c28ea1763</anchor>
      <arglist>(const String &amp;substringToStartFrom, bool includeSubStringInResult, bool ignoreCase) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>fromLastOccurrenceOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a189f72a3e94f540b77e91d39fff9a8a1</anchor>
      <arglist>(const String &amp;substringToFind, bool includeSubStringInResult, bool ignoreCase) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>upToFirstOccurrenceOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ac40a17190e633f51c64d27e9a1bac386</anchor>
      <arglist>(const String &amp;substringToEndWith, bool includeSubStringInResult, bool ignoreCase) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>upToLastOccurrenceOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a9f9b52dc0f06e3c7fbdd9e39d0fbff70</anchor>
      <arglist>(const String &amp;substringToFind, bool includeSubStringInResult, bool ignoreCase) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>trim</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad3853992f01ae00f2e6ed2d4eda85fb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>trimStart</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>afc8c1ef8badb8787ca6057506ad9b742</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>trimEnd</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a87ccf2ec72c1a478e69d44495c367194</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>trimCharactersAtStart</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ac3bdde7a065dbc84c72ea965a9937113</anchor>
      <arglist>(const String &amp;charactersToTrim) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>trimCharactersAtEnd</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ab4c2befda36b4746aaaae2c0584da92e</anchor>
      <arglist>(const String &amp;charactersToTrim) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toUpperCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a1be059135eecd087baca2174ed403516</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toLowerCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a17f872d6422e11d2b9c3902f800dc19c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>replaceSection</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a74c0e6c0891abc938b43c9d67f873fdf</anchor>
      <arglist>(int startIndex, int numCharactersToReplace, const String &amp;stringToInsert) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>replace</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>af8e93d4960a6a9e0de207fe4c0f882cf</anchor>
      <arglist>(const String &amp;stringToReplace, const String &amp;stringToInsertInstead, bool ignoreCase=false) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>replaceCharacter</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a9ea2aecb5316d2777e7911dae3c74d01</anchor>
      <arglist>(juce_wchar characterToReplace, juce_wchar characterToInsertInstead) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>replaceCharacters</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a541c5012e8d1c77b0d40327108700081</anchor>
      <arglist>(const String &amp;charactersToReplace, const String &amp;charactersToInsertInstead) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>retainCharacters</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a09303e2cbf8700ffe387bfa61a9c88ea</anchor>
      <arglist>(const String &amp;charactersToRetain) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>removeCharacters</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aede17baeff46d87d3af4284bf3389f2c</anchor>
      <arglist>(const String &amp;charactersToRemove) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>initialSectionContainingOnly</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aecf242207e581b291e28572a3fd48f33</anchor>
      <arglist>(const String &amp;permittedCharacters) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>initialSectionNotContaining</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ab1a9bb0255ccb6409970b8ff1c4e9f11</anchor>
      <arglist>(const String &amp;charactersToStopAt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isQuotedString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad7383efa79a52af75128879bfbde4f62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>unquoted</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a3f11c24fd2d9f5d2ba5d964a7f69dd63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>quoted</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>adca0932895bcd08c3b3c489a5c564b4b</anchor>
      <arglist>(juce_wchar quoteCharacter= &apos;&quot;&apos;) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>paddedLeft</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a4ccbd5dbd87dab746beacb665cd16664</anchor>
      <arglist>(juce_wchar padCharacter, int minimumLength) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>paddedRight</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aa9f8d9ac6f2b8ed68a948d407bb0a484</anchor>
      <arglist>(juce_wchar padCharacter, int minimumLength) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad7ee58d05b03f2b8cfe72baf238534c3</anchor>
      <arglist>(int decimalInteger)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a0415a1afd9ce1b22782e17f3e4b8a0d2</anchor>
      <arglist>(unsigned int decimalInteger)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a936b34985edfafa5b9534c7fbfb3fba3</anchor>
      <arglist>(short decimalInteger)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a154fd82b5d27d12a4fd5897571064720</anchor>
      <arglist>(unsigned short decimalInteger)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a09febd27242ddf3a4c686174d555ce32</anchor>
      <arglist>(int64 largeIntegerValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a2f79c46cac832786e093c534be743041</anchor>
      <arglist>(uint64 largeIntegerValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a8c2c5a09bec903f4c1ea4262f7a89b5c</anchor>
      <arglist>(float floatValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a560dc69649820575d4766bbb35a0d42d</anchor>
      <arglist>(double doubleValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a2bb93103a892202c99c051bce7fc1aa5</anchor>
      <arglist>(float floatValue, int numberOfDecimalPlaces)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae9c57b8842616c5689c63aa95161ca5b</anchor>
      <arglist>(double doubleValue, int numberOfDecimalPlaces)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntValue</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>accbe0d347261658661458bad2c63dbe1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getLargeIntValue</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a6dccbaf8b50ab06bf2f26cf0559c9950</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTrailingIntValue</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>abd616012b8acd59d71e99bada2d7a107</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloatValue</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a2ec3f03e88700a5ff13f5b61857003f4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleValue</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a6d747e66888a9c7ee562ab5b67e78c3b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHexValue32</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aabd5ab574e90ad82058de70b01ed0843</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getHexValue64</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a9266203eddcdfec35140fcb6e7535745</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const CharPointerType &amp;</type>
      <name>getCharPointer</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aab54e1ce9a7aa1f54ba3425e18bd6f24</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>toUTF8</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae9e2c87c3ff8410e4f70a02288ece2dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>toUTF16</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a42615fce86848058d0234dbc157d0529</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>toUTF32</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aeaee566db302127fdea2d93f5464ccc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const wchar_t *</type>
      <name>toWideCharPointer</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae79ca95309b6b8a7987e8b2f2efef297</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBytesAsUTF8</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a6255d6ebbb5e77bdf5c525790b868053</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyToUTF8</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a558fbd27c469a16f166fd9e84b562f2f</anchor>
      <arglist>(CharPointer_UTF8::CharType *destBuffer, int maxBufferSizeBytes) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyToUTF16</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a20a63dd4bf746d36c86341a9fca34faf</anchor>
      <arglist>(CharPointer_UTF16::CharType *destBuffer, int maxBufferSizeBytes) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyToUTF32</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a616e9e69736ebc64a60f248314caea23</anchor>
      <arglist>(CharPointer_UTF32::CharType *destBuffer, int maxBufferSizeBytes) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preallocateBytes</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a050a97b5afa6e3dd774f10f1c616ee58</anchor>
      <arglist>(size_t numBytesNeeded)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a3c9d0c0fa36976d1714e84ecd4be1156</anchor>
      <arglist>(String &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CFStringRef</type>
      <name>toCFString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a3d3927f416d704b9d1878b379aafdc84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>convertToPrecomposedUnicode</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>adbd232e1d2a0f160837ffe08a716cf30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>charToString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad8e46a02123c89fcd055b189d97c4557</anchor>
      <arglist>(juce_wchar character)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>repeatedString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a5b68db5c72f3d4bdc57a9ee63cff0891</anchor>
      <arglist>(const String &amp;stringToRepeat, int numberOfTimesToRepeat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>createStringFromData</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ab04851d4bb0e7c36e20202541ab6fdf0</anchor>
      <arglist>(const void *data, int size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>formatted</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ac42e4a0dee272e886879685dc0c83387</anchor>
      <arglist>(const String formatString,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>toHexString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>af8791d592b21b466cf040c1728b92dac</anchor>
      <arglist>(int number)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>toHexString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a4d4129cbdaaa1ead05285c46290e0329</anchor>
      <arglist>(int64 number)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>toHexString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a43b4c11f55b69aae296bfa8671a82e97</anchor>
      <arglist>(short number)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>toHexString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aa75e1ef8ccb4c326e9dab9de960c7d85</anchor>
      <arglist>(const void *data, int size, int groupSize=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>fromUTF8</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aa0116dc51d7bdd363d14c72bba60060a</anchor>
      <arglist>(const char *utf8buffer, int bufferSizeBytes=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>fromCFString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a080d955ce1e06ea976077db710bb83a6</anchor>
      <arglist>(CFStringRef cfString)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>empty</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>afd02116a5571fcc8bc1e6fdabe132a85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringArray</name>
    <filename>classStringArray.html</filename>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a8f49223d5dc3b3297041ebb1f521afc8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a7b89edabb76709dec47993070c8f1620</anchor>
      <arglist>(const StringArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ae6f14ef13b38675c347588118e0c8292</anchor>
      <arglist>(const String &amp;firstValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a0d5646cc1cb01041160f6ff69554798f</anchor>
      <arglist>(const char *const *strings, int numberOfStrings)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a72c3f712791ceedb1a84f657aa977946</anchor>
      <arglist>(const char *const *strings)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a09861edeec2b2a18cf33df653ca79415</anchor>
      <arglist>(const wchar_t *const *strings)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ae27a0ecbaf5dfd7328fa884ded90aac3</anchor>
      <arglist>(const wchar_t *const *strings, int numberOfStrings)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>af1fc945005ae8a218d30c3281e0b64bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StringArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ab8e3f64e6c4d318b7fa7f9e79217fe41</anchor>
      <arglist>(const StringArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a507efe01bdda5e1bc492145b53e18fba</anchor>
      <arglist>(StringArray &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>aa6f6b1af57bbe062ed660f5b2058207f</anchor>
      <arglist>(const StringArray &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a4fd90a094c0c026ee975bc69b1d46d5b</anchor>
      <arglist>(const StringArray &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>af1eb48dd90938eb34d9f43cf7d81510b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>operator[]</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a4e1e61c92ae6fc44c3a6226584c09db1</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>getReference</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a9fcafc44085fa930f009adfabad70faf</anchor>
      <arglist>(int index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>String *</type>
      <name>begin</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a8b297798829a0196e0c45abf75b7cc4c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String *</type>
      <name>end</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>aed7e07d0f7c696caa7f62be5416d66e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>adc4da83582a4b67981d97c5e568b8e59</anchor>
      <arglist>(const String &amp;stringToLookFor, bool ignoreCase=false) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>aaad95afdc99eb15d43a3cd7ad18cccb2</anchor>
      <arglist>(const String &amp;stringToLookFor, bool ignoreCase=false, int startIndex=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ac0e8e4b0c3d3345b9ee429c00571bb6e</anchor>
      <arglist>(const String &amp;stringToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a29578712f416e2fd49c201e81aecf7a6</anchor>
      <arglist>(int index, const String &amp;stringToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addIfNotAlreadyThere</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ad5747b79e404fc96a5cd83074dba74da</anchor>
      <arglist>(const String &amp;stringToAdd, bool ignoreCase=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a89bafb28cdb58cf763fd31d46be4fcb2</anchor>
      <arglist>(int index, const String &amp;newString)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a8956efc061115a5e6a6942e23bb54e94</anchor>
      <arglist>(const StringArray &amp;other, int startIndex=0, int numElementsToAdd=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTokens</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a4db768027b40abe822ffb3d381038be4</anchor>
      <arglist>(const String &amp;stringToTokenise, bool preserveQuotedStrings)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTokens</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a574a8ab997035c80db9814a3201eeef7</anchor>
      <arglist>(const String &amp;stringToTokenise, const String &amp;breakCharacters, const String &amp;quoteCharacters)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addLines</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a0aaf4354a3acec6c6bde90c1328d0064</anchor>
      <arglist>(const String &amp;stringToBreakUp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a8fd0efd89f558e84cda917aa3ecc3525</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ae27471eb302af1a8d7b6c926f3ea1493</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeString</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ad4b81b9cdbf6bd2beac62abb9ee0d71b</anchor>
      <arglist>(const String &amp;stringToRemove, bool ignoreCase=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRange</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a2216e379f5d770af94d4d6c2fec4cee3</anchor>
      <arglist>(int startIndex, int numberToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeDuplicates</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a7b58a0f51932aac6b39becff596d45fe</anchor>
      <arglist>(bool ignoreCase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeEmptyStrings</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>aa2e6e609b16c3169e07d8668bf2b7a52</anchor>
      <arglist>(bool removeWhitespaceStrings=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>aeab89baddf070e90bdfb5c320a054ed8</anchor>
      <arglist>(int currentIndex, int newIndex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trim</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ad490560fcac30925d422ad98709ca361</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendNumbersToDuplicates</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a9a2b916e858c3f5d941c751220216387</anchor>
      <arglist>(bool ignoreCaseWhenComparing, bool appendNumberToFirstInstance, CharPointer_UTF8 preNumberString=CharPointer_UTF8(nullptr), CharPointer_UTF8 postNumberString=CharPointer_UTF8(nullptr))</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>joinIntoString</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a43a4cb54bc23ac770db7ea28bcd84045</anchor>
      <arglist>(const String &amp;separatorString, int startIndex=0, int numberOfElements=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a4ff31dc08e6e33f3ba95ebdc296e3659</anchor>
      <arglist>(bool ignoreCase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minimiseStorageOverheads</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ad918c336c4ce47a405e1f718e1e8215d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringPairArray</name>
    <filename>classStringPairArray.html</filename>
    <member kind="function">
      <type></type>
      <name>StringPairArray</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a606a520b01b1c8505ae5bba847ac0d85</anchor>
      <arglist>(bool ignoreCaseWhenComparingKeys=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringPairArray</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>ae9d7222fa917d07fa51815681bd61f50</anchor>
      <arglist>(const StringPairArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StringPairArray</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a0e01064c8cd1ae16f106673552306d99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StringPairArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a2d261429821952f6a05d4b198c921486</anchor>
      <arglist>(const StringPairArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a186c24a07562694f96648eb289c0ef1a</anchor>
      <arglist>(const StringPairArray &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a07d7939477e62a9c5662a1099efe581e</anchor>
      <arglist>(const StringPairArray &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>operator[]</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>aba6436a243cbe56589bebb157631aba6</anchor>
      <arglist>(const String &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getValue</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a574404978893778ea025522e024366c1</anchor>
      <arglist>(const String &amp;key, const String &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getAllKeys</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>afe09f8163564ff39529f5c942977b691</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getAllValues</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a3a82ff57a56741ebe88729e926f593af</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>ae488d0a644afedc40004d37c938f3e8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a1a9a1f077d33f143b50628bd35f69516</anchor>
      <arglist>(const String &amp;key, const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArray</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a15be7425b909b9aded5eddf69f096466</anchor>
      <arglist>(const StringPairArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a79f8a87870700e5cb53a5a4f5d05658f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a72585f509542e1d89b62d7d3dee3d5bd</anchor>
      <arglist>(const String &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>aafc00fcda71c9832f6f77f0fba7c781e</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnoresCase</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a6d884d5d61f3617e2290bba08fa4effa</anchor>
      <arglist>(bool shouldIgnoreCase)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getDescription</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a050b30ffdf7ad821229a92d5a5cec2a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minimiseStorageOverheads</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a35917c28f68b33afe84e2a22a373a67d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringPool</name>
    <filename>classStringPool.html</filename>
    <member kind="function">
      <type></type>
      <name>StringPool</name>
      <anchorfile>classStringPool.html</anchorfile>
      <anchor>aab1fd1101bfe15304bd618b3eeedfc0e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StringPool</name>
      <anchorfile>classStringPool.html</anchorfile>
      <anchor>a890f0cea498819f637aff75d32e8f0dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String::CharPointerType</type>
      <name>getPooledString</name>
      <anchorfile>classStringPool.html</anchorfile>
      <anchor>af3099c29a96386630250cd4a5d221e3f</anchor>
      <arglist>(const String &amp;original)</arglist>
    </member>
    <member kind="function">
      <type>String::CharPointerType</type>
      <name>getPooledString</name>
      <anchorfile>classStringPool.html</anchorfile>
      <anchor>a7c9ef2df0702ffaf7918d5a2e12271da</anchor>
      <arglist>(const char *original)</arglist>
    </member>
    <member kind="function">
      <type>String::CharPointerType</type>
      <name>getPooledString</name>
      <anchorfile>classStringPool.html</anchorfile>
      <anchor>a5391da11197abea5110abdcc6011ba63</anchor>
      <arglist>(const wchar_t *original)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classStringPool.html</anchorfile>
      <anchor>ababb9bc8eac46d6cdb4978bbc046c316</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String::CharPointerType</type>
      <name>operator[]</name>
      <anchorfile>classStringPool.html</anchorfile>
      <anchor>ae67e8e7caee073c0078883fc6a3c4e31</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubregionStream</name>
    <filename>classSubregionStream.html</filename>
    <base>InputStream</base>
    <member kind="function">
      <type></type>
      <name>SubregionStream</name>
      <anchorfile>classSubregionStream.html</anchorfile>
      <anchor>adc9f6200b4539e1e22f5a2560c4af0cc</anchor>
      <arglist>(InputStream *sourceStream, int64 startPositionInSourceStream, int64 lengthOfSourceStream, bool deleteSourceWhenDestroyed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SubregionStream</name>
      <anchorfile>classSubregionStream.html</anchorfile>
      <anchor>a7729cd20a29f61514753c33992fda24f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classSubregionStream.html</anchorfile>
      <anchor>a47140edfd2f582525a2971025ac75277</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classSubregionStream.html</anchorfile>
      <anchor>a785b39add7d101ed5ecde3c16bf119f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classSubregionStream.html</anchorfile>
      <anchor>a011b4bb0fd01d80e3901696005ab5975</anchor>
      <arglist>(int64 newPosition)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classSubregionStream.html</anchorfile>
      <anchor>a14cb61311f6d9fc4a1c514093a25d4c3</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExhausted</name>
      <anchorfile>classSubregionStream.html</anchorfile>
      <anchor>a1d936df160f191fd241af35668cc64c6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Synthesiser</name>
    <filename>classSynthesiser.html</filename>
    <member kind="function">
      <type></type>
      <name>Synthesiser</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a8c313d6f1fa875790e5c79dc621ee437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Synthesiser</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>af92647b0dced33f5c3a99be3ddcfcd8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearVoices</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a94391dd12deab56c0fa8079fd97e7f55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumVoices</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>afb3f01b6730e9e7c659c194f3a3d8650</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SynthesiserVoice *</type>
      <name>getVoice</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>aa8987eca90d45f239d929b9f9fd47f45</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVoice</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>af19e0c5d014f90b449b1cb181a62c2eb</anchor>
      <arglist>(SynthesiserVoice *newVoice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeVoice</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a5478d766609fad27af17ed011f2422dd</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearSounds</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>af6dc83c7e8c7ce8e06a5fe08ae2e3018</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSounds</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a74e51216670aab1b6255f7dcc32e8e65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SynthesiserSound *</type>
      <name>getSound</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ac483b3cd5d3b88af644f2a7666e00d89</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSound</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>aebe84b667dc03e30e022733107e9271f</anchor>
      <arglist>(const SynthesiserSound::Ptr &amp;newSound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSound</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a4e90dec472345cac6c827fb402fd382f</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoteStealingEnabled</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ae0bbfe2c3819167dc5d98b27b21843eb</anchor>
      <arglist>(bool shouldStealNotes)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNoteStealingEnabled</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a0900d9d16f30c26bd379095aefc1b38b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>noteOn</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a488dbf4f02973011c95656eefc1fb862</anchor>
      <arglist>(int midiChannel, int midiNoteNumber, float velocity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>noteOff</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a3fbf0e129c3e48b67b71b6438fc07fbc</anchor>
      <arglist>(int midiChannel, int midiNoteNumber, bool allowTailOff)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>allNotesOff</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ac39e7b038c545b92e9f69b47bce54934</anchor>
      <arglist>(int midiChannel, bool allowTailOff)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePitchWheel</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>aab0454e1b68d82aada5b7d4561b3af49</anchor>
      <arglist>(int midiChannel, int wheelValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleController</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ae2dc8a91aff04f2e23b6ac22b4dd80a8</anchor>
      <arglist>(int midiChannel, int controllerNumber, int controllerValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSustainPedal</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a393f210a6c793d6d38221a346e961a23</anchor>
      <arglist>(int midiChannel, bool isDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSostenutoPedal</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a7876cd621f700a1500cfc026f082f2a4</anchor>
      <arglist>(int midiChannel, bool isDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSoftPedal</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ab543d69d50273a8adce9b54b145a28eb</anchor>
      <arglist>(int midiChannel, bool isDown)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentPlaybackSampleRate</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a4a7d7d7efeb1ad90488d36c35c530f10</anchor>
      <arglist>(double sampleRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderNextBlock</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a6ef0f7f6a4b46a8f425dbadd976cf29f</anchor>
      <arglist>(AudioSampleBuffer &amp;outputAudio, const MidiBuffer &amp;inputMidi, int startSample, int numSamples)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SynthesiserVoice *</type>
      <name>findFreeVoice</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>af1e89b81afbd33e270cdf1fdd257ae03</anchor>
      <arglist>(SynthesiserSound *soundToPlay, const bool stealIfNoneAvailable) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>startVoice</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a7004a46197236e29ae67916f8932d0a4</anchor>
      <arglist>(SynthesiserVoice *voice, SynthesiserSound *sound, int midiChannel, int midiNoteNumber, float velocity)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CriticalSection</type>
      <name>lock</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ab55f2810b6455736110264625a25c4a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OwnedArray&lt; SynthesiserVoice &gt;</type>
      <name>voices</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a260d964d6764a51b2315233e0bf76980</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReferenceCountedArray&lt; SynthesiserSound &gt;</type>
      <name>sounds</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ac64f99f204a1d5a567422cd9d5217081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lastPitchWheelValues</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>acceafe04420ce625e025e4a73c370ce4</anchor>
      <arglist>[16]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SynthesiserSound</name>
    <filename>classSynthesiserSound.html</filename>
    <base>ReferenceCountedObject</base>
    <member kind="typedef">
      <type>ReferenceCountedObjectPtr&lt; SynthesiserSound &gt;</type>
      <name>Ptr</name>
      <anchorfile>classSynthesiserSound.html</anchorfile>
      <anchor>a602e767cdfca63dd73df1f0d5c723ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SynthesiserSound</name>
      <anchorfile>classSynthesiserSound.html</anchorfile>
      <anchor>a1565fcdfa4362d7b25c29178b4d39b76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>appliesToNote</name>
      <anchorfile>classSynthesiserSound.html</anchorfile>
      <anchor>aba3bfbf894573d983c828226f0caa866</anchor>
      <arglist>(const int midiNoteNumber)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>appliesToChannel</name>
      <anchorfile>classSynthesiserSound.html</anchorfile>
      <anchor>a8d8563fe005747b7204af21338031577</anchor>
      <arglist>(const int midiChannel)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SynthesiserSound</name>
      <anchorfile>classSynthesiserSound.html</anchorfile>
      <anchor>a7446eb4d78aa0ce2dcd37ca1ff48dd3a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SynthesiserVoice</name>
    <filename>classSynthesiserVoice.html</filename>
    <member kind="function">
      <type></type>
      <name>SynthesiserVoice</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a365e31ac75ed304f623cb20d3dcc31fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SynthesiserVoice</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a34687ca1d7fc823ad27b64eb4b508c07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentlyPlayingNote</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a8881a4bc61717bcd30e3e6cd98db60a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SynthesiserSound::Ptr</type>
      <name>getCurrentlyPlayingSound</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a6293352a57964281d9d00cf88de841d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canPlaySound</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a4dc1c03e1dd594ce63dbf0b6e8b57645</anchor>
      <arglist>(SynthesiserSound *sound)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startNote</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a487f9f2b47ae9ae51c2e5196b4c09484</anchor>
      <arglist>(const int midiNoteNumber, const float velocity, SynthesiserSound *sound, const int currentPitchWheelPosition)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stopNote</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a67a8d3e3cba87c2d2c6e7ac61b6ce48b</anchor>
      <arglist>(const bool allowTailOff)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pitchWheelMoved</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a3b43eff5b1bc125d3fb6ca7ab30d8510</anchor>
      <arglist>(const int newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>controllerMoved</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>adfd27a266319d8c47badfa3f093ba0e8</anchor>
      <arglist>(const int controllerNumber, const int newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>renderNextBlock</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>ad4ed4a1a2017669531b4cef59a158b9a</anchor>
      <arglist>(AudioSampleBuffer &amp;outputBuffer, int startSample, int numSamples)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPlayingChannel</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a86c76ca9275f70ca743532b59e405647</anchor>
      <arglist>(int midiChannel) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentPlaybackSampleRate</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a120b8249ea838a47008e9c51f14e3586</anchor>
      <arglist>(double newRate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getSampleRate</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>aa3ab26685e42bf78e239870bc8e77dd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearCurrentNote</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a55d1e7a062f8dc9a6cd78526b0da049c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SystemClipboard</name>
    <filename>classSystemClipboard.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copyTextToClipboard</name>
      <anchorfile>classSystemClipboard.html</anchorfile>
      <anchor>ab0efb785d53db6f2986950d591313ba5</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getTextFromClipboard</name>
      <anchorfile>classSystemClipboard.html</anchorfile>
      <anchor>abb8b831e62131579349453074661c87b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SystemStats</name>
    <filename>classSystemStats.html</filename>
    <member kind="enumeration">
      <name>OperatingSystemType</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnknownOS</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa5c49c960dbbdd90f196e55237d268f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MacOSX</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa7b97455dbb0979156c038ccf4bebe545</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Linux</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa2d87a056c510cc59626e6df7be6fe72d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Android</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaaa0089aa962589d46e66ed22556284f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Win95</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa3f11da9304cdc767e3e9dfcd9e9c8099</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Win98</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaac292d976b319648c6b7afc9163685614</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WinNT351</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa2b72add67b0109c203085ed82f31b335</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WinNT40</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaaa9d6a3f43519091d606c5aed1ac2dbf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Win2000</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaadb327146f33f20e0c62b58a3d11de431</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WinXP</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaad72958e105bc6eb69321f2696a74aa51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WinVista</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaae9197b9bc532344d2641a414036a35f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Windows7</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaad260305d49564b976ea39d057c71d490</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Windows</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaae300f2fc8f4c69f639d7b066ccdc6a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WindowsNT</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa46b8cd255af2f2255cb4657d1693fa1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getJUCEVersion</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a59b2a0ca0ab347f50675730e042c62fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OperatingSystemType</type>
      <name>getOperatingSystemType</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a53f8f07716d123c91924a49c658774ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getOperatingSystemName</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a3b75e507637a4cb20490954bb98fed6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isOperatingSystem64Bit</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a89a9be444a16742b03c66a525baa6061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getOSXMinorVersionNumber</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>aa13fa950a6863b7e915aab91cfed4645</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getLogonName</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a49ba1a8f55ab9331a036658c363fd28e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getFullUserName</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a61c5b29c388c6cbc3bc6354f1be3c48d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getComputerName</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>adac7b811d3c19571859a86087e720f67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getUserLanguage</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a6c845872735666a30a2a055d9b8607ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getUserRegion</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a4ba9a4cd9c199ee1534d1edea8e786a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumCpus</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a2fa9257a60a26848174b2b8bd6cbb970</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getCpuSpeedInMegaherz</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a50852f1e0c28d06eeebbd18af4559770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getCpuVendor</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a4fa74fdae2721d03bb25d48fd7cfaa6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasMMX</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a245726d89f0a6cf232b70ff7d89652e5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasSSE</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>ad5f3b624e4b0d32db1c5702ee039a765</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasSSE2</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a55e24b924d9c64e019f1efe1888d2963</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has3DNow</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a1879ae7e393b289d3f5a62f673bfc031</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getMemorySizeInMegabytes</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a77b0a6c165e59b8c15f8f0a2f037a584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getPageSize</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>ad2c08e39f167e01100d17cd910e7028b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SystemTrayIconComponent</name>
    <filename>classSystemTrayIconComponent.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>SystemTrayIconComponent</name>
      <anchorfile>classSystemTrayIconComponent.html</anchorfile>
      <anchor>a7e46f4b374a917b7d899128d1d35bcaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SystemTrayIconComponent</name>
      <anchorfile>classSystemTrayIconComponent.html</anchorfile>
      <anchor>a00a7c36ac22d6dcb251f4a0b61dafab0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIconImage</name>
      <anchorfile>classSystemTrayIconComponent.html</anchorfile>
      <anchor>ac27871e1c71277804b16c6fc91941d8e</anchor>
      <arglist>(const Image &amp;newImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIconTooltip</name>
      <anchorfile>classSystemTrayIconComponent.html</anchorfile>
      <anchor>a9df2a1a73814eb73b577090bce9425b9</anchor>
      <arglist>(const String &amp;tooltip)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classSystemTrayIconComponent.html</anchorfile>
      <anchor>aa7890ecec6fd8e29aba7882759c2d096</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TabBarButton</name>
    <filename>classTabBarButton.html</filename>
    <base>Button</base>
    <member kind="function">
      <type></type>
      <name>TabBarButton</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>af55efe7acea31b4e5cc4ef7063297fd2</anchor>
      <arglist>(const String &amp;name, TabbedButtonBar &amp;ownerBar)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TabBarButton</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>af8eaf5f5e850408b584be1631f52865a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getBestTabLength</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a6bedc5c7ef08a437b7575bfcafd481fd</anchor>
      <arglist>(int depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>aad8666f920df985c250238a2163a4ed3</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clicked</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>ab292704fd4b9ddf07b7d9901a66b0565</anchor>
      <arglist>(const ModifierKeys &amp;mods)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>aa6138221e3b2143d1f8dfb18b2874674</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Rectangle&lt; int &gt;</type>
      <name>getActiveArea</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a52a9fb6be8189c2a2aa93407376ba5a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>aecb89633a27186956d116a1099a57bb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TabbedButtonBar &amp;</type>
      <name>owner</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a67052f9de125edd4a5c5c4976076a798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>overlapPixels</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a8eb442941d7072f18f85769824e03ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DropShadowEffect</type>
      <name>shadow</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>ac4fdae8ea4ef5a1196befdb6fdcb3963</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TabbedButtonBar</name>
    <filename>classTabbedButtonBar.html</filename>
    <base>Component</base>
    <base>ChangeBroadcaster</base>
    <member kind="enumeration">
      <name>Orientation</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a63e34dd62f1b80ec99412c6115b39afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TabsAtTop</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a63e34dd62f1b80ec99412c6115b39afbae2743948018b19a1834ec236df4876b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TabsAtBottom</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a63e34dd62f1b80ec99412c6115b39afba9bbe9d943d7603fc6f91ba22782bc778</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TabsAtLeft</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a63e34dd62f1b80ec99412c6115b39afba7427a5794acbad73fd4c824b260b00b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TabsAtRight</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a63e34dd62f1b80ec99412c6115b39afba931a140f221ead7f73af06e4f0610f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a1193bcbd9622a87f4dbdee8db8f9806d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tabOutlineColourId</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a1193bcbd9622a87f4dbdee8db8f9806dac8e8988271f790db93c90250027412d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tabTextColourId</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a1193bcbd9622a87f4dbdee8db8f9806dadb8a4e934db005c7e683ae01b5ab1981</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>frontOutlineColourId</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a1193bcbd9622a87f4dbdee8db8f9806dab1821bb1f7b2d4055a1e8e035649cc3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>frontTextColourId</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a1193bcbd9622a87f4dbdee8db8f9806da53c37ddad54ae89b891b438e9e94ec0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TabbedButtonBar</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a6daef9753356e71accab672577947992</anchor>
      <arglist>(Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TabbedButtonBar</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a4fbf98a176d5239f95b973e8e194c12f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>af3ab3b5919eae222903e948ca85e3bd9</anchor>
      <arglist>(Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>getOrientation</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a098c87b282112a9dbf6246a17a3bc954</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumTabScaleFactor</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a80abbd24572569d9c3442665161d2b77</anchor>
      <arglist>(double newMinimumScale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearTabs</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a984f83d6e5a2e33cffa4772c838b2ecb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTab</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a22e484173a42134924bfce754d8a5d30</anchor>
      <arglist>(const String &amp;tabName, const Colour &amp;tabBackgroundColour, int insertIndex=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabName</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a81bb9c90e85698fbc3ffc713954a6151</anchor>
      <arglist>(int tabIndex, const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTab</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a076010c009909a444f84129a69ac61d4</anchor>
      <arglist>(int tabIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveTab</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>abb664821ffabbd76c0282ae05bec5875</anchor>
      <arglist>(int currentIndex, int newIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTabs</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a6cf9104837e23cdba611da68705a44e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getTabNames</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a5f1cf9b29bc844a9ff178962d2e372e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentTabIndex</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>aac30b6472d94b57198623499feeba069</anchor>
      <arglist>(int newTabIndex, bool sendChangeMessage=true)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getCurrentTabName</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a0810b11474333835b8ab2f92efe52d89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentTabIndex</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a665e8ce4f10dcceffc1d129293f2f24d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TabBarButton *</type>
      <name>getTabButton</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a5bf021062300f303666793479d7536b0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfTabButton</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a23d24dd7c9e527d11539a059a31f57f4</anchor>
      <arglist>(const TabBarButton *button) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>currentTabChanged</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a6a11f71e857b122419ed70066b8d4cda</anchor>
      <arglist>(int newCurrentTabIndex, const String &amp;newCurrentTabName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popupMenuClickOnTab</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a2f07653c26063fd52f7d91d6455664d4</anchor>
      <arglist>(int tabIndex, const String &amp;tabName)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTabBackgroundColour</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a4835727f2e8eda1a09694c3eb46baa32</anchor>
      <arglist>(int tabIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabBackgroundColour</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a4a1ea7b2615859015c2b90eead39f247</anchor>
      <arglist>(int tabIndex, const Colour &amp;newColour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a05eb6b00c2d1293960abc06657404cfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>aebc6f9af7c5af6bef2d7ebae5296bdd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TabBarButton *</type>
      <name>createTabButton</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a9e43a7a5671e8d9e03241053a692f1f2</anchor>
      <arglist>(const String &amp;tabName, int tabIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TabbedComponent</name>
    <filename>classTabbedComponent.html</filename>
    <base>Component</base>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>ab154d5fdf269af82dfbe6e77b2f716cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>ab154d5fdf269af82dfbe6e77b2f716ccaf220bcdf6bf79838e058ac1edc408e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>outlineColourId</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>ab154d5fdf269af82dfbe6e77b2f716cca16a39be0a38f0544cba6c68051536b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TabbedComponent</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a1702331b2ec7a34ebbfaf418f31415dd</anchor>
      <arglist>(TabbedButtonBar::Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TabbedComponent</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>af831d2d345f8a1284e665be502f405c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>ad982540d7f5a188fa012550971ebb4d5</anchor>
      <arglist>(TabbedButtonBar::Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <type>TabbedButtonBar::Orientation</type>
      <name>getOrientation</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a91e6b4caa94e36a2824e8a71788b6bf9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabBarDepth</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a06e222e02207dc35e297c236e175d46f</anchor>
      <arglist>(int newDepth)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTabBarDepth</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a997accbfa03ce9b6273e67eea537c249</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutline</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a685c149db58fefdf7894cd3ed378e0e2</anchor>
      <arglist>(int newThickness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndent</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a4b2ca2d5cb00208f7383455c5143fcad</anchor>
      <arglist>(int indentThickness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearTabs</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a0c55d2ebde6cc67c693a607a91221ee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTab</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a089f7fef98c1f0b4a80796c40d1bd11e</anchor>
      <arglist>(const String &amp;tabName, const Colour &amp;tabBackgroundColour, Component *contentComponent, bool deleteComponentWhenNotNeeded, int insertIndex=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabName</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>acbe9e10b90d011aa9d75ed0bef64103e</anchor>
      <arglist>(int tabIndex, const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTab</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>ac9a7f7fc03a69fa286772fb0589d9388</anchor>
      <arglist>(int tabIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTabs</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>ac94ea283f6904ef077d55d547fdd21d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getTabNames</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a9de655b6c4448a5d412bb61c22f669ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getTabContentComponent</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>aa9eb0f888c932f1d2cf64ec59a9dee37</anchor>
      <arglist>(int tabIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTabBackgroundColour</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>acad26c68307c4d42730e9fd80c1ca2d1</anchor>
      <arglist>(int tabIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabBackgroundColour</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>aa11e4c338111df7d5475b5199d90da5e</anchor>
      <arglist>(int tabIndex, const Colour &amp;newColour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentTabIndex</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>aff9209321e3c2993775a56edae31c026</anchor>
      <arglist>(int newTabIndex, bool sendChangeMessage=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentTabIndex</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a855543f61c40125be6ab34fb23e11984</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getCurrentTabName</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a34955ad3357d8cb569a7aba3d6fecabb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getCurrentContentComponent</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a7f3971f6451356b95318ccc47b06d1d3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>currentTabChanged</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>acb0ec8ee87c29825f9326aadb8302b72</anchor>
      <arglist>(int newCurrentTabIndex, const String &amp;newCurrentTabName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popupMenuClickOnTab</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a5f938165e7ccc943c4503b817c31d89f</anchor>
      <arglist>(int tabIndex, const String &amp;tabName)</arglist>
    </member>
    <member kind="function">
      <type>TabbedButtonBar &amp;</type>
      <name>getTabbedButtonBar</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>adc33f7646d65444aed8fa6e02413ebdd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a5827a8cfc3881a7ea1cbd6866c21a684</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>afc4c6c4183b5ebeedec65a9d5a0344d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a6a2d9006dc83b22be300f6a9411f1d01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TabBarButton *</type>
      <name>createTabButton</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>af6d13ea3c6b9dc73ffc8dea8d74099da</anchor>
      <arglist>(const String &amp;tabName, int tabIndex)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScopedPointer&lt; TabbedButtonBar &gt;</type>
      <name>tabs</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a7bc26c338bf06c47c28165f5b891c87d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TableHeaderComponent</name>
    <filename>classTableHeaderComponent.html</filename>
    <base>Component</base>
    <base protection="private">AsyncUpdater</base>
    <class kind="class">TableHeaderComponent::Listener</class>
    <member kind="enumeration">
      <name>ColumnPropertyFlags</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>visible</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831a7f601c3d9bc982c5e1ba5797dc9e1973</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>resizable</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831ae21b31a36ae1a8a25aed0c8cc5301720</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>draggable</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831acc6c3bf14f3e100d490d1e9cd307e1fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>appearsOnColumnMenu</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831ac8737d3f19bf93c607240f6a3035aa4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sortable</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831acb2ae4c6ff02d7f6d9621f70340c2012</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sortedForwards</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831a87fb777f6e42c8e3c8b8234bb0291951</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sortedBackwards</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831aa7e7f97460075ebf9666f89dca7b9983</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>defaultFlags</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831aaf583dc5f74b08d98dc901bdb91bdc9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>notResizable</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831a47ed9632de25c7632a34942aa1b266bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>notResizableOrSortable</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831a722f75fc5f1b33f07ee2ca106bd0e9f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>notSortable</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831abd10990c4c70636a0b969b7dcdad112d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TableHeaderComponent</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>aef4b0bf0dfc1d5c7b91cb72ac96aed95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TableHeaderComponent</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a812f66a1f733cd90e788a6d135aa382e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addColumn</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>af6bf8a2bb896b74ed6afd6f667a4a959</anchor>
      <arglist>(const String &amp;columnName, int columnId, int width, int minimumWidth=30, int maximumWidth=-1, int propertyFlags=defaultFlags, int insertIndex=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeColumn</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a6642d29de80979c31d0b5ee6bd399730</anchor>
      <arglist>(int columnIdToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllColumns</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a87cef13bc2cc1b6463af7f4286fc9642</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumColumns</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>aedd425a88dcbf1e4c1ed58f184908c2e</anchor>
      <arglist>(bool onlyCountVisibleColumns) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getColumnName</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a802afebf5ff7e7e595ffefe46b6bda08</anchor>
      <arglist>(int columnId) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumnName</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a4f3269b9f69aa75a9d7387c97408c138</anchor>
      <arglist>(int columnId, const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveColumn</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a183bd15db8f1b3cc61ef612cbcc2aa8f</anchor>
      <arglist>(int columnId, int newVisibleIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getColumnWidth</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>ac3b55abb94e6ce11a90e515baced3160</anchor>
      <arglist>(int columnId) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumnWidth</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a777fe28faa03d04b9d46105516eb1f8c</anchor>
      <arglist>(int columnId, int newWidth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumnVisible</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>ac91853f78f09564e887b98b481bae95f</anchor>
      <arglist>(int columnId, bool shouldBeVisible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isColumnVisible</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a31b007b035502ed064d1a44eeac72446</anchor>
      <arglist>(int columnId) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSortColumnId</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a51558625c4ed006561e5bf468d5af605</anchor>
      <arglist>(int columnId, bool sortForwards)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSortColumnId</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a91d18fde74e1ff62412a9c1ee7bb4c5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSortedForwards</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a9bfdcfbaaa24b3ca4884807c0c030fb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reSortTable</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a39a03757452b664a3645c55a02e6d76a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalWidth</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a71dfcadef252b0567955cd3c477acbbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexOfColumnId</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a2b8d480388b7eacdb57f1ef80b3e210f</anchor>
      <arglist>(int columnId, bool onlyCountVisibleColumns) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getColumnIdOfIndex</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>aca8196dc760b733766c0273fce5e7cec</anchor>
      <arglist>(int index, bool onlyCountVisibleColumns) const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getColumnPosition</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a7621ad722d67d2af98276653018ec474</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getColumnIdAtX</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>ab9f4217af539536ca7508b391fa322f5</anchor>
      <arglist>(int xToFind) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStretchToFitActive</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>ae338d49514b8c120db62fbd9ad3be4c7</anchor>
      <arglist>(bool shouldStretchToFit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStretchToFitActive</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a01f9763aa85a7f4262672505c1d60948</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeAllColumnsToFit</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abccd726884264ed9fed54b23c55c3b94</anchor>
      <arglist>(int targetTotalWidth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPopupMenuActive</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a5a4f382bea75073d84cf93afbbf3fdc6</anchor>
      <arglist>(bool hasMenu)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPopupMenuActive</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>aceec9cfa178cfe2476a8936872233d5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>ad551ec63876a4536f96bfb1cac8a265f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreFromString</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>ae4a9ef600e4187d86a3c4f6567ebe14c</anchor>
      <arglist>(const String &amp;storedVersion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>aad34038b492dbba89a4e0683e0e73dd4</anchor>
      <arglist>(Listener *newListener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>aeada8b63822d57cb5169316c9b336388</anchor>
      <arglist>(Listener *listenerToRemove)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>columnClicked</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a5208c784a0fa38581aa512323c4be183</anchor>
      <arglist>(int columnId, const ModifierKeys &amp;mods)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addMenuItems</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a15df2bd39e5225c2838b82404b10b1b5</anchor>
      <arglist>(PopupMenu &amp;menu, int columnIdClicked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reactToMenuItem</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a6d73ed05285a4386b50472710e10ad3d</anchor>
      <arglist>(int menuReturnId, int columnIdClicked)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a7e5181d571fc6b115453e69a25338b35</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a90874de4b222c92103688ac2358555b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseMove</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a6e190d9f1af9875b9b5594bff4fc98e7</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseEnter</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a160ecb2bd38b81135c5c8828774783b1</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseExit</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>aab44c025d1935e82e810f004faa81304</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a0ab0723f92404064eb1d5e1cb5437f82</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a133164a6b35cda8d9f7ea1de35d124fb</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>aef86c1e05c21a754bdc01f89ac09b94e</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MouseCursor</type>
      <name>getMouseCursor</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a3361826f7abc818d92a2a339dc794bb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>showColumnChooserMenu</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>ae479aaba67ffcb18e6abd7ec0686d20a</anchor>
      <arglist>(int columnIdClicked)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TableHeaderComponent::Listener</name>
    <filename>classTableHeaderComponent_1_1Listener.html</filename>
    <member kind="function">
      <type></type>
      <name>Listener</name>
      <anchorfile>classTableHeaderComponent_1_1Listener.html</anchorfile>
      <anchor>ad164f7c24f94c566af2caac1afea1e77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classTableHeaderComponent_1_1Listener.html</anchorfile>
      <anchor>a1e274cbaa4377ca2c7d97438c80c26a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>tableColumnsChanged</name>
      <anchorfile>classTableHeaderComponent_1_1Listener.html</anchorfile>
      <anchor>ae70ef4e1a9974456be0fb28aee95d21d</anchor>
      <arglist>(TableHeaderComponent *tableHeader)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>tableColumnsResized</name>
      <anchorfile>classTableHeaderComponent_1_1Listener.html</anchorfile>
      <anchor>a146a7c7f933beb75b863993f1af7989c</anchor>
      <arglist>(TableHeaderComponent *tableHeader)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>tableSortOrderChanged</name>
      <anchorfile>classTableHeaderComponent_1_1Listener.html</anchorfile>
      <anchor>a6d48b82741757d13ad2d75257292d615</anchor>
      <arglist>(TableHeaderComponent *tableHeader)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tableColumnDraggingChanged</name>
      <anchorfile>classTableHeaderComponent_1_1Listener.html</anchorfile>
      <anchor>a5e8c0b7fb86c3c91764c00a5c55fe357</anchor>
      <arglist>(TableHeaderComponent *tableHeader, int columnIdNowBeingDragged)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TableListBox</name>
    <filename>classTableListBox.html</filename>
    <base>ListBox</base>
    <base protection="private">ListBoxModel</base>
    <base protection="private">TableHeaderComponent::Listener</base>
    <member kind="function">
      <type></type>
      <name>TableListBox</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>abb0aec0d6d9c0fa33cd89515ba7603b7</anchor>
      <arglist>(const String &amp;componentName=String::empty, TableListBoxModel *model=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TableListBox</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a4329c84e3a80806ea1614be35f3ebb79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModel</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a0ec78e27679edffd4995543819eb6795</anchor>
      <arglist>(TableListBoxModel *newModel)</arglist>
    </member>
    <member kind="function">
      <type>TableListBoxModel *</type>
      <name>getModel</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>aaeeccf160a00d0ffd9817f93b7a146b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TableHeaderComponent &amp;</type>
      <name>getHeader</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a5c3f5a2871c1434b9fccbaf0ea00e532</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeader</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a886796417fdc7db6fb31248cfcb92c3f</anchor>
      <arglist>(TableHeaderComponent *newHeader)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeaderHeight</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a51ccf41c12897d58e13d4b7be7cbdff3</anchor>
      <arglist>(int newHeight)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeaderHeight</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a3495f4861a73c3b711e56e8aab97a788</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoSizeColumn</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a64d4c5c4a49a07c9dddb5e9def2157a7</anchor>
      <arglist>(int columnId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoSizeAllColumns</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>ad007aa31ee166a0d4d69fbe101cb9be8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAutoSizeMenuOptionShown</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>ae80826be484b5ac0d2ff425c7650621f</anchor>
      <arglist>(bool shouldBeShown)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAutoSizeMenuOptionShown</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a20c6b88967088e259830aeb747b32f0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getCellPosition</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>af9362171c76ddcca08cce8fdbd869f1a</anchor>
      <arglist>(int columnId, int rowNumber, bool relativeToComponentTopLeft) const </arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getCellComponent</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a7ccaf7f38e747e7ced9203caabaf7267</anchor>
      <arglist>(int columnId, int rowNumber) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToEnsureColumnIsOnscreen</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a6beb66e94224409499b86a01e45a59f7</anchor>
      <arglist>(int columnId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRows</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a0c4ec5150a2a2ea10a100727a4d6cde2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintListBoxItem</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>ae526dd61208735758ecf91b4ac74cc6f</anchor>
      <arglist>(int, Graphics &amp;, int, int, bool)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>refreshComponentForRow</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>afb3e0d4dd6244908e273bff1e60c6408</anchor>
      <arglist>(int rowNumber, bool isRowSelected, Component *existingComponentToUpdate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectedRowsChanged</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>af336c3cac04ace8c916a3cb289b69c29</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteKeyPressed</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>ac65e79d06d14585a157b0c265a1d4fa6</anchor>
      <arglist>(int currentSelectedRow)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>returnKeyPressed</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a9b1bbaceefb1ac41ff4774e91f38b5a2</anchor>
      <arglist>(int currentSelectedRow)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backgroundClicked</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a9a2d0f92803c770378aa299516156db6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listWasScrolled</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>aec55b05f54e4cfb834b88baea4f1180b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tableColumnsChanged</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>af21de50609e005854089e0399b021caa</anchor>
      <arglist>(TableHeaderComponent *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tableColumnsResized</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a8791cf422e4cb96d2c2290f53acc2e65</anchor>
      <arglist>(TableHeaderComponent *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tableSortOrderChanged</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a420f56656024fc9242ed81150fc9027a</anchor>
      <arglist>(TableHeaderComponent *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tableColumnDraggingChanged</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a269dcd64d3fc3b3af21ba0c289341e29</anchor>
      <arglist>(TableHeaderComponent *, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>ab6b73d03667c60cbb3f0507ad1dd688c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TableListBoxModel</name>
    <filename>classTableListBoxModel.html</filename>
    <member kind="function">
      <type></type>
      <name>TableListBoxModel</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>ab5794e70e60fd8a20e9a7727b58a55d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TableListBoxModel</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a69fce53074484eb5388bf99239b1c9a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRows</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>ae7ff7c6523e8113ff1c13b39f7144bf2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>paintRowBackground</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a9004032dd5340b31c8d4f2b37dcf3184</anchor>
      <arglist>(Graphics &amp;g, int rowNumber, int width, int height, bool rowIsSelected)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>paintCell</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>ae39def19eac43197c45d6f1e1aaadbd5</anchor>
      <arglist>(Graphics &amp;g, int rowNumber, int columnId, int width, int height, bool rowIsSelected)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Component *</type>
      <name>refreshComponentForCell</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a07767e4e5a3812e486c187705b0921bd</anchor>
      <arglist>(int rowNumber, int columnId, bool isRowSelected, Component *existingComponentToUpdate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cellClicked</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a4aff1b6737036ccc7d115ce78363153a</anchor>
      <arglist>(int rowNumber, int columnId, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cellDoubleClicked</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>ab2e56617913183ba054d7a67c64578f5</anchor>
      <arglist>(int rowNumber, int columnId, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>backgroundClicked</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>ab0fdbd2e308ab507fd5ab14cbb1594bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sortOrderChanged</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a7941c048bd8e10841dcf7f2acace3656</anchor>
      <arglist>(int newSortColumnId, bool isForwards)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getColumnAutoSizeWidth</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a625b6fcb1118fbfc63aeade25786eb0b</anchor>
      <arglist>(int columnId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getCellTooltip</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a711cb4107a067102737f558711bfe714</anchor>
      <arglist>(int rowNumber, int columnId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectedRowsChanged</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a918995d04263035e52b5e9ca174e7ab6</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteKeyPressed</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a5f17bdc591ef08f7b89e65275e22e46f</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>returnKeyPressed</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a1c622b283ff2dec56f5373ca223544ae</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>listWasScrolled</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a4793a06a4dc4f88a2049360f6cd34f83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual var</type>
      <name>getDragSourceDescription</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a18d18a78f51b26b29a416c1905f31470</anchor>
      <arglist>(const SparseSet&lt; int &gt; &amp;currentlySelectedRows)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemporaryFile</name>
    <filename>classTemporaryFile.html</filename>
    <member kind="enumeration">
      <name>OptionFlags</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>af04f4ef2ea1bee0b20cdb4c072442e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>useHiddenFile</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>af04f4ef2ea1bee0b20cdb4c072442e8da5a8f2dba38db83ba22b75362598feaf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>putNumbersInBrackets</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>af04f4ef2ea1bee0b20cdb4c072442e8da756fae13005d397744383ecd04539914</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TemporaryFile</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>a4f70f8859f286ba4c934c6a06e4e9f09</anchor>
      <arglist>(const String &amp;suffix=String::empty, int optionFlags=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TemporaryFile</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>a7039b78139b7d1c0661a4e1307929127</anchor>
      <arglist>(const File &amp;targetFile, int optionFlags=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TemporaryFile</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>a7a0f828343c95d3a7e81d6d3587ad116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getFile</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>a1a572896153a2dda306100603e039454</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getTargetFile</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>ae3c0550e3bf9fadc2964c44239563ab8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overwriteTargetFileWithTemporary</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>aaf1c2513c6bd7b1ba343fe53cddd0fd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteTemporaryFile</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>a3a79444415eba12ba52fb9dc86d126a0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextButton</name>
    <filename>classTextButton.html</filename>
    <base>Button</base>
    <class kind="struct">TextButton::Ids</class>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>afb6c1da587aebb63b58a2569bed70c2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>buttonColourId</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>afb6c1da587aebb63b58a2569bed70c2caf54542fa0ebadc194ffebbf3f26f5413</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>buttonOnColourId</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>afb6c1da587aebb63b58a2569bed70c2cab5c464bb61172a02ca81f629bbb42ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textColourOffId</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>afb6c1da587aebb63b58a2569bed70c2ca4f6e7bf61b38241121bd84a28698e768</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textColourOnId</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>afb6c1da587aebb63b58a2569bed70c2ca196c13a00ea89562ec1fdeccb59ffdb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextButton</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>a3cf94c7f0c6fdc469a30f3623fd2235c</anchor>
      <arglist>(const String &amp;buttonName=String::empty, const String &amp;toolTip=String::empty)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TextButton</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>a497a17bb110e249c7eb88a98dad12192</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeWidthToFitText</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>a1fec687cf46d8c22b4e527b4e1caa34e</anchor>
      <arglist>(int newHeight=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Font</type>
      <name>getFont</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>aa1969f340ae950686d022ea89f93404c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>a782af0085adb8c87049dbd0c151623a0</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>a311cf753304d4b145e3091c1523bf434</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TextButton::Ids</name>
    <filename>structTextButton_1_1Ids.html</filename>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>tagType</name>
      <anchorfile>structTextButton_1_1Ids.html</anchorfile>
      <anchor>a7310f2646051e269410c02f8663dd5a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextDragAndDropTarget</name>
    <filename>classTextDragAndDropTarget.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TextDragAndDropTarget</name>
      <anchorfile>classTextDragAndDropTarget.html</anchorfile>
      <anchor>a4fb1cc79ab921c63098cec4827af4c62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInterestedInTextDrag</name>
      <anchorfile>classTextDragAndDropTarget.html</anchorfile>
      <anchor>a43d8905fbfba1fbf2e1fb1ab5d0c9183</anchor>
      <arglist>(const String &amp;text)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>textDragEnter</name>
      <anchorfile>classTextDragAndDropTarget.html</anchorfile>
      <anchor>a1512abd580d1c2c4098dafebafb837ec</anchor>
      <arglist>(const String &amp;text, int x, int y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>textDragMove</name>
      <anchorfile>classTextDragAndDropTarget.html</anchorfile>
      <anchor>a9cbd6cd4e3e7549dbb10e89f1388b982</anchor>
      <arglist>(const String &amp;text, int x, int y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>textDragExit</name>
      <anchorfile>classTextDragAndDropTarget.html</anchorfile>
      <anchor>a6aca30f40684c602a5f4b43e25574f56</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>textDropped</name>
      <anchorfile>classTextDragAndDropTarget.html</anchorfile>
      <anchor>ab8d586cc52a71021c4fe1629b6410e69</anchor>
      <arglist>(const String &amp;text, int x, int y)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextEditor</name>
    <filename>classTextEditor.html</filename>
    <base>Component</base>
    <base>TextInputTarget</base>
    <base>SettableTooltipClient</base>
    <class kind="struct">TextEditor::Ids</class>
    <class kind="class">TextEditor::Listener</class>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa805220923c93cd808a92fff0e3fb71d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa805220923c93cd808a92fff0e3fb71daa28cd01c2a077370b4143ad67d00985b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textColourId</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa805220923c93cd808a92fff0e3fb71daf840969fe4a492f0e5fbe30f5948c8ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>highlightColourId</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa805220923c93cd808a92fff0e3fb71da6308b1f46eba9b07247588f1d313ae09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>highlightedTextColourId</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa805220923c93cd808a92fff0e3fb71da85b3b328db89b6946cda395dae78ebad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>outlineColourId</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa805220923c93cd808a92fff0e3fb71dadb665df86c504955085dcb75524a96d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>focusedOutlineColourId</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa805220923c93cd808a92fff0e3fb71da590a3ad72115412061fdfbbb089609fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shadowColourId</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa805220923c93cd808a92fff0e3fb71dab6ed00bbcce56fef5ff92d6bb705f988</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextEditor</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a3424ad2eb6fe2540de745865cdc3da94</anchor>
      <arglist>(const String &amp;componentName=String::empty, juce_wchar passwordCharacter=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TextEditor</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aba5c4c4c412a24be39845b5a30bb555e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMultiLine</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a939bf23c983f695379a92f9612928160</anchor>
      <arglist>(bool shouldBeMultiLine, bool shouldWordWrap=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMultiLine</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>af19a278e34583bc8aabf63ace216132d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReturnKeyStartsNewLine</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a60e99221178fe5510edcfcd246a8bf2c</anchor>
      <arglist>(bool shouldStartNewLine)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getReturnKeyStartsNewLine</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ab9735a543701ac065cfc9c6d56893d77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabKeyUsedAsCharacter</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ac2ac11e5eab2ec09cf47a26d84f5bf85</anchor>
      <arglist>(bool shouldTabKeyBeUsed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTabKeyUsedAsCharacter</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a71c61570fe0974966d94bc7e0a805136</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReadOnly</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a046d359a0f6709b02a21d45c5958817a</anchor>
      <arglist>(bool shouldBeReadOnly)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReadOnly</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a30d837f2545c1d5ee6de5545733e3b16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCaretVisible</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a4b23a8397f2d4741b10bda03ef4d1b12</anchor>
      <arglist>(bool shouldBeVisible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCaretVisible</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a257371f72c0cdcc0d792fd70c68ad046</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollbarsShown</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aea30c7c5e684898eb2cac76983c38b48</anchor>
      <arglist>(bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areScrollbarsShown</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ac03200efc2166a2df1365c97b5a594e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPasswordCharacter</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a8978b1e9eecf1c1ac3576f024bb7bde0</anchor>
      <arglist>(juce_wchar passwordCharacter)</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getPasswordCharacter</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a1dacee4d819cb06af6b868b049d1a7f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPopupMenuEnabled</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>abe2b07aad6f2a7d95f9a31d672964d52</anchor>
      <arglist>(bool menuEnabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPopupMenuEnabled</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a52bd87caec3707bd6d664d80befed562</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPopupMenuCurrentlyActive</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a3ab25788df359c70698c8151f08bd121</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a92819cc8faf1b9755d23c3757948f1c7</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyFontToAllText</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>acaea31f07a346e26627cf2744f2a702f</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <type>const Font &amp;</type>
      <name>getFont</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a488e9dbe9fda0fcc3a8fdd8fc7d2620f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectAllWhenFocused</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a8b3de01c35af2c92adf5f11c7c9d6d5e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputRestrictions</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>af101f034f249b577345b948d4d3db21c</anchor>
      <arglist>(int maxTextLength, const String &amp;allowedCharacters=String::empty)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextToShowWhenEmpty</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a4fc815ad155677be82c8205f0009be21</anchor>
      <arglist>(const String &amp;text, const Colour &amp;colourToUse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollBarThickness</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a9f71873e9e95c27cf8d5ef8b3c12b1e0</anchor>
      <arglist>(int newThicknessPixels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollBarButtonVisibility</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a62c667a7b38f6ada99afaa2c689ae68d</anchor>
      <arglist>(bool buttonsVisible)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a393bac9005237b946c8ef81bd783477d</anchor>
      <arglist>(Listener *newListener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>af3008955686b9efd7cbb723646260f06</anchor>
      <arglist>(Listener *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getText</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa8284e364e8592094991dd62adb9d534</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextInRange</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a7704381c6c4126d513566eb95e1e7c72</anchor>
      <arglist>(const Range&lt; int &gt; &amp;textRange) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a483367aa9441aa1aab74309f362f1673</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a9fd6243466c8122ccfffc03fa39f6c4f</anchor>
      <arglist>(const String &amp;newText, bool sendTextChangeMessage=true)</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getTextValue</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a6bffbe3d437e3d8144ef9a9cb9bcaade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertTextAtCaret</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a79719d6cdcff46f8d682dd7b57f4ffbf</anchor>
      <arglist>(const String &amp;textToInsert)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a63f9bab8dcbec46cf840bf199e7768a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cut</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>acbdfebceaf8ba07a6242078c2da7473c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>afed2255126c654d5936c242233c9153b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paste</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a2a8829c00507b8747ae6ffe71b8e18cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCaretPosition</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a4eb79165443145bf31bc64100c590684</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCaretPosition</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ae83d8245dfe738d0b2d05d0501c5e39e</anchor>
      <arglist>(int newIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveCaretToEnd</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>af6410ba48e5c16b668d83e2f661a6b54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollEditorToPositionCaret</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a98c2a07e4f2d75014005ea2a343d30e8</anchor>
      <arglist>(int desiredCaretX, int desiredCaretY)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getCaretRectangle</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a329ce100de4c807e16f228affe75c5da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHighlightedRegion</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a98f6f27c2d12a541ff89e49a7a2d9203</anchor>
      <arglist>(const Range&lt; int &gt; &amp;newSelection)</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; int &gt;</type>
      <name>getHighlightedRegion</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a3bc8b195943da36f1739be271e3981c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getHighlightedText</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>adc5fa4c2877a1389d9155f5e0909f4b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTextIndexAt</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a31d3bc0ae108c2991b4160f6ba894913</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNumChars</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a4f2aac41d4bccb00c95f992996435bef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTextWidth</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>afeeb66311110da4f210ee4067451bbac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTextHeight</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a80b0f4c59f567aede0ceff64b2156d98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndents</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a33de8e25ff72f21f74fa4cb22343e3bf</anchor>
      <arglist>(int newLeftIndent, int newTopIndent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorder</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa45936ba54c60455af7cd65a4238652a</anchor>
      <arglist>(const BorderSize&lt; int &gt; &amp;border)</arglist>
    </member>
    <member kind="function">
      <type>BorderSize&lt; int &gt;</type>
      <name>getBorder</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a248878c91365a6244ba6be35afaeb27f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollToShowCursor</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ac263b589275580c0a2a89de9e02f0061</anchor>
      <arglist>(bool shouldScrollToShowCaret)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a57096adad12dd494b376fe52a7238b72</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintOverChildren</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a5e1267facaee9350c9bce6ed693b456b</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a191a572d43603cfe9a11ff265f98a1d8</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ab20245851c152d488c01a7b01fe3900e</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a28dec1f37373401d9e4c253ec049eeef</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDoubleClick</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ab2aba4989001da32ba205ec24937a351</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a0c66aa10d4e8dc7eff7eac39d7cdd08e</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aaff4916bb211609884f60f46fc4a9a03</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyStateChanged</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a945d8203649fbe39fd4968c36180ad25</anchor>
      <arglist>(bool isKeyDown)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>focusGained</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>abff01c5d96b88a81116ab5ec6349fe5f</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>focusLost</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a7a5eeded9a541d00314ecc053d66b63e</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a9b69edcc74257d7193f5347da9d76acf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa63b1dc3f533db8b6d637ee832f32f27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a103f49d397c32c29e948ede41e595d15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a250916b71e6d567ebdb0c884d374d2c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextInputActive</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ae97078d1e77664170bff2265f4f25c8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemporaryUnderlining</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a2e60eb0b17c0ed33f447beec80c605de</anchor>
      <arglist>(const Array&lt; Range&lt; int &gt; &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretLeft</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ab707c995a249a259d27d86c271ed2822</anchor>
      <arglist>(bool moveInWholeWordSteps, bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretRight</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a4020204e5c9bb2afbca36981d396b9de</anchor>
      <arglist>(bool moveInWholeWordSteps, bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretUp</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ac823fa08b0a21a2edb100f91e3c82d57</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretDown</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>adc5ff1f6ecad74fc03e702f44be6397f</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pageUp</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a0df48900d231dc9d0551894ddce5dbea</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pageDown</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a58f8c5dbdcc028969013c0c16159b1df</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scrollDown</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a9e7f388d8583124959d48c8c7e1a28da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scrollUp</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>af48c91e4f02e28779a7fb94689b67ad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretToTop</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a8a76b9fa0e44840f19dfbac6c291a868</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretToStartOfLine</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a2089a2c71524d5c384924e5b0b8f928c</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretToEnd</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a92c7bd8c9a78c55195f287c13b3e5a0e</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretToEndOfLine</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a243ae1922d80f422222799e011a678f4</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteBackwards</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a7779055c39661e834c359f6fcb5cf6b3</anchor>
      <arglist>(bool moveInWholeWordSteps)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteForwards</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a855bfe3297879cdb7000e23f1f4d3695</anchor>
      <arglist>(bool moveInWholeWordSteps)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copyToClipboard</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a6765bf476a80e6e69351a4971466be6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cutToClipboard</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa2591b146a4707830cbd607323fd77e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pasteFromClipboard</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a15edfe8b94924ad79c517b5810955f35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>selectAll</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a1a7c8738491f129f8811fe969b5ecaa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>undo</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a66fea7cc1a783ab14dd5a6386afc53e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>redo</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a864db67116dd13ed7a29d1d99353458c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPopupMenuItems</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a5887eae43a0517c2c986d54b0f02e9bd</anchor>
      <arglist>(PopupMenu &amp;menuToAddTo, const MouseEvent *mouseClickEvent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>performPopupMenuAction</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ac90236dab0312511ba8bc38b2507a575</anchor>
      <arglist>(int menuItemID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ac17bdfcd4d1c1a9432423733e2543bcc</anchor>
      <arglist>(const ValueTree &amp;, ComponentBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scrollToMakeSureCursorIsVisible</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa8f2e41661dec5b6584cb655b3622475</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>moveCaret</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aee391f5db9b0ffd4306656f69a67a5da</anchor>
      <arglist>(int newCaretPos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>moveCaretTo</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a1f01aefd3688a18f149052e9a46b083c</anchor>
      <arglist>(int newPosition, bool isSelecting)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>textChanged</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a34e3b8ad5395d493da6fee6ce9775dc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>newTransaction</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ac1cdc461e88ca484f3528d74a7e1d27c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doUndoRedo</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>abec9c336069b13b8274216d5d16b0de9</anchor>
      <arglist>(bool isRedo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>returnPressed</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aea9150456f5680f7a83c54e1aa561155</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>escapePressed</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a113d5961e0129c872f606492dc0e8fab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleCommandMessage</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>abd1d897359ee82289b967648c54ca90c</anchor>
      <arglist>(int commandId)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TextEditor::Ids</name>
    <filename>structTextEditor_1_1Ids.html</filename>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>tagType</name>
      <anchorfile>structTextEditor_1_1Ids.html</anchorfile>
      <anchor>ae3aa4f24495e3683b0f8c1cfca007a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>text</name>
      <anchorfile>structTextEditor_1_1Ids.html</anchorfile>
      <anchor>a51e2b2a9910082282b4a4dd1d374a5e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>font</name>
      <anchorfile>structTextEditor_1_1Ids.html</anchorfile>
      <anchor>a788110cc39254e0f70bc17bbf1ef66eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>mode</name>
      <anchorfile>structTextEditor_1_1Ids.html</anchorfile>
      <anchor>a7b29112eaa9f60d5f7b8220db863364a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>readOnly</name>
      <anchorfile>structTextEditor_1_1Ids.html</anchorfile>
      <anchor>a2bb3f3e704de6b8eedf9472692638fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>scrollbarsShown</name>
      <anchorfile>structTextEditor_1_1Ids.html</anchorfile>
      <anchor>afedb95e013d9f6e06c4ee05467f949b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>caretVisible</name>
      <anchorfile>structTextEditor_1_1Ids.html</anchorfile>
      <anchor>a9d11ba2351971f1eeeaba41b78c67ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>popupMenuEnabled</name>
      <anchorfile>structTextEditor_1_1Ids.html</anchorfile>
      <anchor>ac72425af10acbab40c7e16ba6984b192</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextEditor::Listener</name>
    <filename>classTextEditor_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classTextEditor_1_1Listener.html</anchorfile>
      <anchor>af26fd4a47039d06e28e9663e717e7bc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>textEditorTextChanged</name>
      <anchorfile>classTextEditor_1_1Listener.html</anchorfile>
      <anchor>a9d84785f9a180b7bdd30837d66907cda</anchor>
      <arglist>(TextEditor &amp;editor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>textEditorReturnKeyPressed</name>
      <anchorfile>classTextEditor_1_1Listener.html</anchorfile>
      <anchor>a2b2caa48427df509dc1cd895f107bb05</anchor>
      <arglist>(TextEditor &amp;editor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>textEditorEscapeKeyPressed</name>
      <anchorfile>classTextEditor_1_1Listener.html</anchorfile>
      <anchor>af889338a71c5343266277721f157c4f5</anchor>
      <arglist>(TextEditor &amp;editor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>textEditorFocusLost</name>
      <anchorfile>classTextEditor_1_1Listener.html</anchorfile>
      <anchor>a71a87606767e3ae2f7749e1d9a92c8c3</anchor>
      <arglist>(TextEditor &amp;editor)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TextEditorKeyMapper</name>
    <filename>structTextEditorKeyMapper.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>invokeKeyFunction</name>
      <anchorfile>structTextEditorKeyMapper.html</anchorfile>
      <anchor>a34f96379252e9c5eb112ec09c6935d9d</anchor>
      <arglist>(CallbackClass &amp;target, const KeyPress &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextInputTarget</name>
    <filename>classTextInputTarget.html</filename>
    <member kind="function">
      <type></type>
      <name>TextInputTarget</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a49747e7bca27c213004a89460543b139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TextInputTarget</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a77845e997bbe85a68ad77407a8f5bdfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isTextInputActive</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a8dbdf96f7d6980207dde86edbd24455f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Range&lt; int &gt;</type>
      <name>getHighlightedRegion</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>ae1cab69d8e1a8ac375a73d1229cd64ba</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setHighlightedRegion</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a4f28305922bb146295ed2decb63abf1b</anchor>
      <arglist>(const Range&lt; int &gt; &amp;newRange)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTemporaryUnderlining</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a294a750fd25dce6cc2b4d14bbbff2f3b</anchor>
      <arglist>(const Array&lt; Range&lt; int &gt; &gt; &amp;underlinedRegions)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getTextInRange</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a6e420204e80413ae54bfb387f9c7f152</anchor>
      <arglist>(const Range&lt; int &gt; &amp;range) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertTextAtCaret</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a009241c97fa452d53671a00a6a5caea7</anchor>
      <arglist>(const String &amp;textToInsert)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rectangle&lt; int &gt;</type>
      <name>getCaretRectangle</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>afeb7bb2e326dbefacc31d181004a6c9e</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextLayout</name>
    <filename>classTextLayout.html</filename>
    <class kind="class">TextLayout::Glyph</class>
    <class kind="class">TextLayout::Line</class>
    <class kind="class">TextLayout::Run</class>
    <member kind="function">
      <type></type>
      <name>TextLayout</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>ad3d06a6b81095f80ab31f0beecf706fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextLayout</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a98abb8c75101bef8c14ee7d521cff350</anchor>
      <arglist>(const TextLayout &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TextLayout &amp;</type>
      <name>operator=</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>af3aea2bf39a2d713120ada2be59ea280</anchor>
      <arglist>(const TextLayout &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TextLayout</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a2bbf2978fd2447c09adb2438185edd45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createLayout</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a6008bd6b868ec76b259b674b25b03a86</anchor>
      <arglist>(const AttributedString &amp;text, float maxWidth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createLayoutWithBalancedLineLengths</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a7f7e1c6039ccbdc7234351eb729598f2</anchor>
      <arglist>(const AttributedString &amp;text, float maxWidth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>ae0fea8e0d15bff938ccb3650ddaca919</anchor>
      <arglist>(Graphics &amp;g, const Rectangle&lt; float &gt; &amp;area) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getWidth</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>aae206340e3734f0f9aa5f5b5f3f81c68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getHeight</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>af4364d09c1a3518cd35761df3d9ebebe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLines</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a87cf3ad96a71fcfb49a349bc54a5f0ec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Line &amp;</type>
      <name>getLine</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>ae82de68e1ff183dc6ab8e4eac8e01e97</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLine</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a243161ed10d86a9d17c046c275989d21</anchor>
      <arglist>(Line *line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureStorageAllocated</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a569592a231fae556bca49c195294a25b</anchor>
      <arglist>(int numLinesNeeded)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextLayout::Glyph</name>
    <filename>classTextLayout_1_1Glyph.html</filename>
    <member kind="function">
      <type></type>
      <name>Glyph</name>
      <anchorfile>classTextLayout_1_1Glyph.html</anchorfile>
      <anchor>a80befb4c1678368411d4a1d2dced4c6d</anchor>
      <arglist>(int glyphCode, const Point&lt; float &gt; &amp;anchor, float width) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Glyph</name>
      <anchorfile>classTextLayout_1_1Glyph.html</anchorfile>
      <anchor>a8a65971ba1d7ad45521d08981d6e8fc3</anchor>
      <arglist>(const Glyph &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Glyph &amp;</type>
      <name>operator=</name>
      <anchorfile>classTextLayout_1_1Glyph.html</anchorfile>
      <anchor>a9466713778c7559166bb1ccb1f49657c</anchor>
      <arglist>(const Glyph &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Glyph</name>
      <anchorfile>classTextLayout_1_1Glyph.html</anchorfile>
      <anchor>a3a4ac36125aef996113f63a01aa07352</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>glyphCode</name>
      <anchorfile>classTextLayout_1_1Glyph.html</anchorfile>
      <anchor>abb803cc04147b2094e02b773f6aaeb92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point&lt; float &gt;</type>
      <name>anchor</name>
      <anchorfile>classTextLayout_1_1Glyph.html</anchorfile>
      <anchor>a5ed7fd244c70a76748ced04c222cfb87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>width</name>
      <anchorfile>classTextLayout_1_1Glyph.html</anchorfile>
      <anchor>a3c24f2ea2314f119c3d9e38882c83bf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextLayout::Line</name>
    <filename>classTextLayout_1_1Line.html</filename>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>a57461be318997af7ef22f068c369e05b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>a9aee7db8a2a894759fb550499e7c1005</anchor>
      <arglist>(const Line &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>a75758b9840ebd8ff28de33ec2579c0a0</anchor>
      <arglist>(const Range&lt; int &gt; &amp;stringRange, const Point&lt; float &gt; &amp;lineOrigin, float ascent, float descent, float leading, int numRunsToPreallocate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Line</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>ad58da98b9097db5235020dcf440b45f5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; float &gt;</type>
      <name>getLineBoundsX</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>aff77a6ee57f12a7d4b83cb6634763d86</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>OwnedArray&lt; Run &gt;</type>
      <name>runs</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>a77c79b53611e1897fbc3d0ed40d7e0e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Range&lt; int &gt;</type>
      <name>stringRange</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>a2980388305522b3a4595196e7bbf09a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point&lt; float &gt;</type>
      <name>lineOrigin</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>a12a2bd00c15e016262513495600e1a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>ascent</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>ac356b4c8bd159161ac80438457471d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>descent</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>af361532452a96a85ccd9098e5269fbcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>leading</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>a9ff2dde46ca08de8bfd9f69a3b4409ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextLayout::Run</name>
    <filename>classTextLayout_1_1Run.html</filename>
    <member kind="function">
      <type></type>
      <name>Run</name>
      <anchorfile>classTextLayout_1_1Run.html</anchorfile>
      <anchor>a80912a38013f0ba4b116a8b8be55455c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Run</name>
      <anchorfile>classTextLayout_1_1Run.html</anchorfile>
      <anchor>a3c228b9d44e780b3ada848d4e8b8ab0f</anchor>
      <arglist>(const Run &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Run</name>
      <anchorfile>classTextLayout_1_1Run.html</anchorfile>
      <anchor>a2eebb6193a19bdb16349259b52022086</anchor>
      <arglist>(const Range&lt; int &gt; &amp;stringRange, int numGlyphsToPreallocate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Run</name>
      <anchorfile>classTextLayout_1_1Run.html</anchorfile>
      <anchor>a4685c193f15da88c23f63b7dc3b003c8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Font</type>
      <name>font</name>
      <anchorfile>classTextLayout_1_1Run.html</anchorfile>
      <anchor>a692e70e5e5ce8d78be5ecfe3c8591d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Colour</type>
      <name>colour</name>
      <anchorfile>classTextLayout_1_1Run.html</anchorfile>
      <anchor>a0740a8644c5933b52c89dbe459bbaf3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; Glyph &gt;</type>
      <name>glyphs</name>
      <anchorfile>classTextLayout_1_1Run.html</anchorfile>
      <anchor>ade86d06f39c2bec790e049a053b8de2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Range&lt; int &gt;</type>
      <name>stringRange</name>
      <anchorfile>classTextLayout_1_1Run.html</anchorfile>
      <anchor>a5e78255b382519784f9950efeae14f57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextPropertyComponent</name>
    <filename>classTextPropertyComponent.html</filename>
    <base>PropertyComponent</base>
    <member kind="function">
      <type></type>
      <name>TextPropertyComponent</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>acd3ee1e753b1f854efd8d58f8b1d2fe9</anchor>
      <arglist>(const Value &amp;valueToControl, const String &amp;propertyName, int maxNumChars, bool isMultiLine)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TextPropertyComponent</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>a6939a16ffd859b2a1c1198286912da7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>ae4d8eadfcc3efa418facfef1e2cda0a0</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getText</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>a2055bb8ae26911d57524d05c2ef95646</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>acf48da948233b0d10435cc2a4a7c52f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textWasEdited</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>a8c5ef860b25f29f1f69c4571cd39a4ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TextPropertyComponent</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>ab11b2849c68bcf275f931e2b847389b0</anchor>
      <arglist>(const String &amp;propertyName, int maxNumChars, bool isMultiLine)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Thread</name>
    <filename>classThread.html</filename>
    <member kind="typedef">
      <type>void *</type>
      <name>ThreadID</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a077e20855a3c974c2fc6f9e7caa8412c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Thread</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>ae696c3b7ca36394cd214288cee31eaba</anchor>
      <arglist>(const String &amp;threadName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Thread</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a026b23628e1727050e864e00489c0baf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>aae90dfabab3e1776cf01a26e7ee3a620</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startThread</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a5502205d727c00752f95af27a063d983</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startThread</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>acc4aff2ceb97b0f16a0a08132315a900</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopThread</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a7814b4dfaa6935f418c2baeb25c08cc0</anchor>
      <arglist>(int timeOutMilliseconds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isThreadRunning</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>ab02ad2d11a2dacfea4a78b06224a3e87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signalThreadShouldExit</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>affe168e27c6ee50b0d10522810772268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>threadShouldExit</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a0a8fdce313d3c0db6c5adbb78c4352b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>waitForThreadToExit</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a277e5e91d52626bbdac85b44972dd46a</anchor>
      <arglist>(int timeOutMilliseconds) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPriority</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a0975d9ee9f403f5f82287fcce4a7168f</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAffinityMask</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a614605563fceeac6f03d507bc35bdce4</anchor>
      <arglist>(uint32 affinityMask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a17aca9c9609310f830298d6a0206d18d</anchor>
      <arglist>(int timeOutMilliseconds) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>ae0e6408f187557bb06c8fff07c4100b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ThreadID</type>
      <name>getThreadId</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a39ca822734b9b20ab32eeba774c9a803</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getThreadName</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a88d88d5b8246418b568a1e6d50dddeb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setCurrentThreadPriority</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a9a777202bb5aa9ce7f57605674b100f4</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setCurrentThreadAffinityMask</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>ad8e6da0fe8303bfa1b171cad33a9a640</anchor>
      <arglist>(uint32 affinityMask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>sleep</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a4ee1ddee32aa82ac90bc567cb7427926</anchor>
      <arglist>(int milliseconds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>yield</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>aaf47a344b3b715e49ffcbc6119c72cdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ThreadID</type>
      <name>getCurrentThreadId</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a89d304681a5f94b8556b37c47e19913c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>getCurrentThread</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>ac2bcc5bdee3d6ecd721022afc3f2629e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setCurrentThreadName</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a59989b54a00e4f93619cad563bd1db1a</anchor>
      <arglist>(const String &amp;newThreadName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadLocalValue</name>
    <filename>classThreadLocalValue.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ThreadLocalValue</name>
      <anchorfile>classThreadLocalValue.html</anchorfile>
      <anchor>a6cfe38fdd495adcfdad8dc3dc736f371</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreadLocalValue</name>
      <anchorfile>classThreadLocalValue.html</anchorfile>
      <anchor>a5f84ce8c97c0c3d76be387b0d9cd5feb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Type &amp;</type>
      <name>operator*</name>
      <anchorfile>classThreadLocalValue.html</anchorfile>
      <anchor>a8681a3805c7023574a7c8e8905e7bbcb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Type *</name>
      <anchorfile>classThreadLocalValue.html</anchorfile>
      <anchor>acbe0fe7fcfbd6511094512d01d3cdd16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classThreadLocalValue.html</anchorfile>
      <anchor>a6112bf0cd51dcaa7cad94268984836a6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ThreadLocalValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classThreadLocalValue.html</anchorfile>
      <anchor>aa218704cf23c89a7a68b283f2d623e57</anchor>
      <arglist>(const Type &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>Type &amp;</type>
      <name>get</name>
      <anchorfile>classThreadLocalValue.html</anchorfile>
      <anchor>a0350ab3d9b5d1877dec3244d5b4e71e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseCurrentThreadStorage</name>
      <anchorfile>classThreadLocalValue.html</anchorfile>
      <anchor>a78af45671b2b057f0f584a75f79ff5b5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadPool</name>
    <filename>classThreadPool.html</filename>
    <class kind="class">ThreadPool::JobSelector</class>
    <member kind="function">
      <type></type>
      <name>ThreadPool</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>af59341f9ab24fda771109bc3ee8cdef2</anchor>
      <arglist>(int numberOfThreads)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadPool</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a3225e86aa7835545b3f6c2c8d363d5e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreadPool</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a44d3d2ab618970605e684efc216655eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addJob</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>ad46e866e912868092fff107dc555443b</anchor>
      <arglist>(ThreadPoolJob *job, bool deleteJobWhenFinished)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeJob</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a10da7494ab922d7157a5929d0689bf54</anchor>
      <arglist>(ThreadPoolJob *job, bool interruptIfRunning, int timeOutMilliseconds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeAllJobs</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a621253ea8de07a09a6c18238f8d33ced</anchor>
      <arglist>(bool interruptRunningJobs, int timeOutMilliseconds, JobSelector *selectedJobsToRemove=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumJobs</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a9e9ba7e536f1978a255a36bc54f641ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ThreadPoolJob *</type>
      <name>getJob</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>aa52987dfd5d41443a914c4c20045c12c</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a86ec36868d7215a33a5658f8ca8797c8</anchor>
      <arglist>(const ThreadPoolJob *job) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isJobRunning</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a6aa5595e971322109a2eeef2f1bdda2b</anchor>
      <arglist>(const ThreadPoolJob *job) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>waitForJobToFinish</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>ada78c3d08d41bb195006b5c96a6514f5</anchor>
      <arglist>(const ThreadPoolJob *job, int timeOutMilliseconds) const </arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getNamesOfAllJobs</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a520f25cf327b0f000f2edff89b07aff2</anchor>
      <arglist>(bool onlyReturnActiveJobs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setThreadPriorities</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a3f69128c07cb778cf6ab981b1b9be650</anchor>
      <arglist>(int newPriority)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadPool::JobSelector</name>
    <filename>classThreadPool_1_1JobSelector.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JobSelector</name>
      <anchorfile>classThreadPool_1_1JobSelector.html</anchorfile>
      <anchor>a6fa333da0ce4d127f262a55db247cc8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isJobSuitable</name>
      <anchorfile>classThreadPool_1_1JobSelector.html</anchorfile>
      <anchor>ad128c100151aad34bc5f28ace01ad839</anchor>
      <arglist>(ThreadPoolJob *job)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadPoolJob</name>
    <filename>classThreadPoolJob.html</filename>
    <member kind="enumeration">
      <name>JobStatus</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>a534c077f3c60168d88555ade062420b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>jobHasFinished</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>a534c077f3c60168d88555ade062420b3a390a063ef5f8b769a682f1daefc64e72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>jobNeedsRunningAgain</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>a534c077f3c60168d88555ade062420b3a42789d58048631dd96008ce23911a545</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadPoolJob</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>a701138425809122d1271561fcfa1c20d</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadPoolJob</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>a519d648535cefc3aed07455dd5dd9e5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getJobName</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>ab786cc3b8eeb4de3ec3ab30e67280155</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJobName</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>a0005910260394539b8117a858f5b4cfb</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual JobStatus</type>
      <name>runJob</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>aec49c01680e563257c79088dc87bc0d9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>a807c21e00f00548037cd10d4bab64347</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shouldExit</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>a441a94cba7ec96242fd7268371d9c5ea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signalJobShouldExit</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>acf58a7de172ae74d6ebb4a9fb59ed4d3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadWithProgressWindow</name>
    <filename>classThreadWithProgressWindow.html</filename>
    <base>Thread</base>
    <base protection="private">Timer</base>
    <member kind="function">
      <type></type>
      <name>ThreadWithProgressWindow</name>
      <anchorfile>classThreadWithProgressWindow.html</anchorfile>
      <anchor>accaf17146b5ae598f6bea243b3502468</anchor>
      <arglist>(const String &amp;windowTitle, bool hasProgressBar, bool hasCancelButton, int timeOutMsWhenCancelling=10000, const String &amp;cancelButtonText=&quot;Cancel&quot;, Component *componentToCentreAround=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreadWithProgressWindow</name>
      <anchorfile>classThreadWithProgressWindow.html</anchorfile>
      <anchor>a04c322fd5b4eb2612ab5118565ee4d29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runThread</name>
      <anchorfile>classThreadWithProgressWindow.html</anchorfile>
      <anchor>a5337ebd946038ac2a2dc36b7939db9cd</anchor>
      <arglist>(int threadPriority=5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProgress</name>
      <anchorfile>classThreadWithProgressWindow.html</anchorfile>
      <anchor>a607960c4dca64ea8e6193cc5e94d8c76</anchor>
      <arglist>(double newProgress)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatusMessage</name>
      <anchorfile>classThreadWithProgressWindow.html</anchorfile>
      <anchor>a3f85676fc78cb05eecaf93f5d47eeaa5</anchor>
      <arglist>(const String &amp;newStatusMessage)</arglist>
    </member>
    <member kind="function">
      <type>AlertWindow *</type>
      <name>getAlertWindow</name>
      <anchorfile>classThreadWithProgressWindow.html</anchorfile>
      <anchor>a0e5317249298095d572ca993649f444f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Time</name>
    <filename>classTime.html</filename>
    <member kind="function">
      <type></type>
      <name>Time</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a53999bba9e1e32f01b05356d055d638f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Time</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>aef828f5ec1ae48f7f92ad3f8d488d4ee</anchor>
      <arglist>(int64 millisecondsSinceEpoch) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Time</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a1ae5f3db5459bf5518aeb49bc94f1daf</anchor>
      <arglist>(int year, int month, int day, int hours, int minutes, int seconds=0, int milliseconds=0, bool useLocalTime=true) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Time</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a6c676b46dab069e84e40c243ed7626c2</anchor>
      <arglist>(const Time &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Time</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>ac9ff14c4772123281758acbe65ce29a1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Time &amp;</type>
      <name>operator=</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>ae5bcf5fea5f13c51e54744f731c03887</anchor>
      <arglist>(const Time &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>toMilliseconds</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>ad1581903aeaa659db034c169c2df54c9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getYear</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a076f935b3953dc9af953e8ed79d85e6a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMonth</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a50230e3a7285ba9f81ab0fd41a95b22e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getMonthName</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>ab19eaae83be3800e1dafdbf81ebc356c</anchor>
      <arglist>(bool threeLetterVersion) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDayOfMonth</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>aa26595c43c171c5454681403c443f7d0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDayOfWeek</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a6e9991fa052e5656f658f8073c25b935</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDayOfYear</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a4966bd179982c52ecc1eb017dba69ee5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getWeekdayName</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>ab94896bc2dc4044badd1304739e6268c</anchor>
      <arglist>(bool threeLetterVersion) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHours</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>ab946ef04018a381a292448bbeb6e989e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAfternoon</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>aaeffa1bc5331837fa7243e466e36285f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHoursInAmPmFormat</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a0d3a0664160d9e6f37a7afe93df0a12b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinutes</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a8afef5dbc64bee686f3fadd4c8ea3ce0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSeconds</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a00ae85ee9d91d73508112b0ddac71904</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMilliseconds</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a280b55b2d738686ac4903e25cdb28116</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDaylightSavingTime</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a72c35ab7767a5a3193501b4c1eb62269</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTimeZone</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>ac79ef7dfcff67833ad805806c896e40f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a0eea824de2aa68f6a602897b56bc2198</anchor>
      <arglist>(bool includeDate, bool includeTime, bool includeSeconds=true, bool use24HourClock=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>formatted</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>ad89ac95bff6956f148e7abd3ca2d03d6</anchor>
      <arglist>(const String &amp;format) const </arglist>
    </member>
    <member kind="function">
      <type>Time &amp;</type>
      <name>operator+=</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a69461e993d012d84102243022147e049</anchor>
      <arglist>(const RelativeTime &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>Time &amp;</type>
      <name>operator-=</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a9c826fb3010931ec86d62e3edefb49dd</anchor>
      <arglist>(const RelativeTime &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setSystemTimeToThisTime</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>af97c92a87fc52d71c386f496096bea04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Time JUCE_CALLTYPE</type>
      <name>getCurrentTime</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>abc76e37eb137734df20c107ae94bbfee</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getWeekdayName</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>af55383bb7849e84e1db8dfe176462d42</anchor>
      <arglist>(int dayNumber, bool threeLetterVersion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getMonthName</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a387772b6efe5dbc85a5a97ec3ebc7cb6</anchor>
      <arglist>(int monthNumber, bool threeLetterVersion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int64</type>
      <name>currentTimeMillis</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a3ddd01042580e201e78e92c46b5e5f54</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>getMillisecondCounter</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a8aa2b95bb1fc2fd7a2df29736bad3a37</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getMillisecondCounterHiRes</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a3f2fcf93d44c6b3828c82f5d4c18b0e4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>waitForMillisecondCounter</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>aacdbdd9f83346c0b1d34661cf454904b</anchor>
      <arglist>(uint32 targetTime) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>getApproximateMillisecondCounter</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a5fe46552067d8e6fa6eb67b120c5a6be</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int64</type>
      <name>getHighResolutionTicks</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>af33d7295da41f2d645d8a5e93f1cfe45</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int64</type>
      <name>getHighResolutionTicksPerSecond</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a71124045a6a77003fc8d838d79688977</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>highResolutionTicksToSeconds</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a3c4d54513d5d2be78a790cfd0b8c0493</anchor>
      <arglist>(int64 ticks) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int64</type>
      <name>secondsToHighResolutionTicks</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a1690ac880d53fa9c2c76b2b5f67e776f</anchor>
      <arglist>(double seconds) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Timer</name>
    <filename>classTimer.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Timer</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>ad3c95ce902fce977d280256256856d64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>timerCallback</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>a8adc40ca0fb4170737ba12e30481b9d8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startTimer</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>a3b1a51ac348c56a55fcef4570214f057</anchor>
      <arglist>(int intervalInMilliseconds) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopTimer</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>ab918b8c1f80bf1de92dd1a5878f498bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTimerRunning</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>a11b80f425e27ea9899e05b104e2df07a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTimerInterval</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>a3515b6e7a1e3777965e35686eaeb2da7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>callPendingTimersSynchronously</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>a7074d145c7408da67fdbbe7359aa3b74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Timer</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>a3d18ff196960cc65f19ff5452ece31db</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Timer</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>a4c1afc5569ca20777fe802fce2cb5b0a</anchor>
      <arglist>(const Timer &amp;other) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeSliceClient</name>
    <filename>classTimeSliceClient.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeSliceClient</name>
      <anchorfile>classTimeSliceClient.html</anchorfile>
      <anchor>ab97fd6407f33b2004534066c0b959e61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>useTimeSlice</name>
      <anchorfile>classTimeSliceClient.html</anchorfile>
      <anchor>a272b0868c9bd0b5c281cf09dbaa69a9c</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeSliceThread</name>
    <filename>classTimeSliceThread.html</filename>
    <base>Thread</base>
    <member kind="function">
      <type></type>
      <name>TimeSliceThread</name>
      <anchorfile>classTimeSliceThread.html</anchorfile>
      <anchor>ad2fa29d3076a7c0b600e297cc18fc9d9</anchor>
      <arglist>(const String &amp;threadName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TimeSliceThread</name>
      <anchorfile>classTimeSliceThread.html</anchorfile>
      <anchor>aa4374e45b3ffabac2abd5ebc04594b8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTimeSliceClient</name>
      <anchorfile>classTimeSliceThread.html</anchorfile>
      <anchor>ac8244dfb9ed53d0c8b10d301d8897d8f</anchor>
      <arglist>(TimeSliceClient *client, int millisecondsBeforeStarting=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTimeSliceClient</name>
      <anchorfile>classTimeSliceThread.html</anchorfile>
      <anchor>a07b538bee2ba11da5b66bd59af25f153</anchor>
      <arglist>(TimeSliceClient *client)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToFrontOfQueue</name>
      <anchorfile>classTimeSliceThread.html</anchorfile>
      <anchor>a58c97295da5d454c299b9252a7a0999d</anchor>
      <arglist>(TimeSliceClient *client)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumClients</name>
      <anchorfile>classTimeSliceThread.html</anchorfile>
      <anchor>a2b440ac33a366ddc6ee8507a840d2eb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TimeSliceClient *</type>
      <name>getClient</name>
      <anchorfile>classTimeSliceThread.html</anchorfile>
      <anchor>a13a0a576b2e96543282f342a5b9b470e</anchor>
      <arglist>(int index) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToggleButton</name>
    <filename>classToggleButton.html</filename>
    <base>Button</base>
    <class kind="struct">ToggleButton::Ids</class>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>a23091ad53b2ffcf4a9c6c463180a337d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textColourId</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>a23091ad53b2ffcf4a9c6c463180a337dac6ba76c874375d1b8a3080fe6167ab92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToggleButton</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>a95eb63ad97c06a947c03afea405af09e</anchor>
      <arglist>(const String &amp;buttonText=String::empty)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ToggleButton</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>abd228753a34e12a78ced29ebcf1a98e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeWidthToFitText</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>a5b2996c62b836a05bada17312ac7361c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>ae94a4795bb53980775ea3472b65e85b4</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>a4674ff5bf92e39b55ba54a4051b01f64</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ToggleButton::Ids</name>
    <filename>structToggleButton_1_1Ids.html</filename>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>tagType</name>
      <anchorfile>structToggleButton_1_1Ids.html</anchorfile>
      <anchor>a1ca1c1b34912623bd3b823097886aee3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToneGeneratorAudioSource</name>
    <filename>classToneGeneratorAudioSource.html</filename>
    <base>AudioSource</base>
    <member kind="function">
      <type></type>
      <name>ToneGeneratorAudioSource</name>
      <anchorfile>classToneGeneratorAudioSource.html</anchorfile>
      <anchor>a474ce1bd0aef35005c8fcc7fb88ad27f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ToneGeneratorAudioSource</name>
      <anchorfile>classToneGeneratorAudioSource.html</anchorfile>
      <anchor>a7f3432b6dd5e59d5c635660cf92b5ee6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmplitude</name>
      <anchorfile>classToneGeneratorAudioSource.html</anchorfile>
      <anchor>a867ed3a9f24e981e527be49e670cb82b</anchor>
      <arglist>(float newAmplitude)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrequency</name>
      <anchorfile>classToneGeneratorAudioSource.html</anchorfile>
      <anchor>acbb84caec7c6db2f507edeb9ab70b50d</anchor>
      <arglist>(double newFrequencyHz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classToneGeneratorAudioSource.html</anchorfile>
      <anchor>a37faaeb23acb587f251f2ee3b95783cb</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classToneGeneratorAudioSource.html</anchorfile>
      <anchor>a75e86cd87ba909e0e0cf85b39e335532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classToneGeneratorAudioSource.html</anchorfile>
      <anchor>ab2e1f860b3bc61aca1b9854cb129179e</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Toolbar</name>
    <filename>classToolbar.html</filename>
    <base>Component</base>
    <base>DragAndDropContainer</base>
    <base>DragAndDropTarget</base>
    <member kind="enumeration">
      <name>ToolbarItemStyle</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a20676e8832b03e18af29fd3e009d7f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>iconsOnly</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a20676e8832b03e18af29fd3e009d7f56ade929b3efd0d4c8f02ee2fb0bd6a7f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>iconsWithText</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a20676e8832b03e18af29fd3e009d7f56a6f4995861dcf04ad6973aa52a04d40ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textOnly</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a20676e8832b03e18af29fd3e009d7f56a98e59ac60f43fabf47900bb5978252b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>CustomisationFlags</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a9036434be5b014285c69d2b87841fb3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>allowIconsOnlyChoice</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a9036434be5b014285c69d2b87841fb3fa54114d08a4d2827e71b0a40df4a235e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>allowIconsWithTextChoice</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a9036434be5b014285c69d2b87841fb3fa348c3e9d7b294f4ad034e1d6b257903c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>allowTextOnlyChoice</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a9036434be5b014285c69d2b87841fb3fa4a8564e3f78472092203f0502fd9e091</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>showResetToDefaultsButton</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a9036434be5b014285c69d2b87841fb3fa0b0997b8269ec1a5b8fb9f6da93ee2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>allCustomisationOptionsEnabled</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a9036434be5b014285c69d2b87841fb3fa52d229dd720fe17da7cffa8aec5e70c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9ac36a170aa9bdbd62a9e148a54d19d1a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>separatorColourId</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9a5af4bc29284ef81090fa15f11a0f30e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>buttonMouseOverBackgroundColourId</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9aba14bbecd41d683ad7775213c5a73254</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>buttonMouseDownBackgroundColourId</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9a33774e84fadec5b5fb421cbea794c393</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>labelTextColourId</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9a6f6e4cc767b4f37b600ddcbe58f4b55a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>editingModeOutlineColourId</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9a783c2d3c7bee40ce820b9fc1b8450d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Toolbar</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a382a894e4b7f3f82dacfb1fcaedfe716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Toolbar</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>af8e60d44a166adad046c48798646f035</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVertical</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ac3dd0cec7d3b445578a9fa4fa6519308</anchor>
      <arglist>(bool shouldBeVertical)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVertical</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a2d55c4ec24c2341c7b47714534ed5e98</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getThickness</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a2b99b5c21d3d282b1530443473c45c23</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLength</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a4f13787582bd032a2123c206b383e89b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a4c47ef0fad73a6ce0d5ca7169ad622c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>af554bdd9557b8c9107384af96a3a402c</anchor>
      <arglist>(ToolbarItemFactory &amp;factory, int itemId, int insertIndex=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeToolbarItem</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a458f8ab507f5c63b4cb0ab82f8e59ae0</anchor>
      <arglist>(int itemIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumItems</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ace6bcc43585123681e775dd538892766</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getItemId</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a4caa4124f183b85f0609e9ae837f3cbc</anchor>
      <arglist>(int itemIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ToolbarItemComponent *</type>
      <name>getItemComponent</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae3950023d93049377147cc17330afe25</anchor>
      <arglist>(int itemIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDefaultItems</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae9fdaea1b76bc158f8a9b22866911b6f</anchor>
      <arglist>(ToolbarItemFactory &amp;factoryToUse)</arglist>
    </member>
    <member kind="function">
      <type>ToolbarItemStyle</type>
      <name>getStyle</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a21e3f0e0304abbafc1d40decda8c856d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStyle</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ad5f7338537653c5e5c9d8d29482eac11</anchor>
      <arglist>(const ToolbarItemStyle &amp;newStyle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showCustomisationDialog</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a0d71a6a9f9ebb041b62c0d7d4721c21e</anchor>
      <arglist>(ToolbarItemFactory &amp;factory, int optionFlags=allCustomisationOptionsEnabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEditingActive</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ab2bdef593ea0ea565b98241072860b11</anchor>
      <arglist>(bool editingEnabled)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a3214b0e02faeee9aba0ba61e56d2abcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>restoreFromString</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>aa1a6e1e20211d3601a86a508bd2428eb</anchor>
      <arglist>(ToolbarItemFactory &amp;factoryToUse, const String &amp;savedVersion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a048d9bf461473e5bc0a34c2e7997a62e</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a365f2e386045b3b6b9ad072223074c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonClicked</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a9129fb36710cae8e817a03e091c2ce6e</anchor>
      <arglist>(Button *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>aa49d618b15fc84a398c6afb776cf500c</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInterestedInDragSource</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a0f3a2689ee3528427ce57f4ff2f3bfe7</anchor>
      <arglist>(const SourceDetails &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>itemDragMove</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a82e544022dd6ba0f31b22114bd497a66</anchor>
      <arglist>(const SourceDetails &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>itemDragExit</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>aa73bc39283997fb988aee909b575b3c9</anchor>
      <arglist>(const SourceDetails &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>itemDropped</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a498f0c48512cdb0f8d201744aacbfa17</anchor>
      <arglist>(const SourceDetails &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAllItemPositions</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a754c6bad431c7e3a2fa35c6edda41ab5</anchor>
      <arglist>(bool animate)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ToolbarItemComponent *</type>
      <name>createItem</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a6be97d7376f983903a859f6585c9e0e0</anchor>
      <arglist>(ToolbarItemFactory &amp;, int itemId)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToolbarButton</name>
    <filename>classToolbarButton.html</filename>
    <base>ToolbarItemComponent</base>
    <member kind="function">
      <type></type>
      <name>ToolbarButton</name>
      <anchorfile>classToolbarButton.html</anchorfile>
      <anchor>a65aeb251dea7845837d2c99ecd723904</anchor>
      <arglist>(int itemId, const String &amp;labelText, Drawable *normalImage, Drawable *toggledOnImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ToolbarButton</name>
      <anchorfile>classToolbarButton.html</anchorfile>
      <anchor>aeaa4033350bcbe5ed7d43638d1fa7a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getToolbarItemSizes</name>
      <anchorfile>classToolbarButton.html</anchorfile>
      <anchor>a276c60e1a828e75c5b22e9a57f961487</anchor>
      <arglist>(int toolbarDepth, bool isToolbarVertical, int &amp;preferredSize, int &amp;minSize, int &amp;maxSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintButtonArea</name>
      <anchorfile>classToolbarButton.html</anchorfile>
      <anchor>a268edc25cb32eb0e717717688bdee7c0</anchor>
      <arglist>(Graphics &amp;, int width, int height, bool isMouseOver, bool isMouseDown)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>contentAreaChanged</name>
      <anchorfile>classToolbarButton.html</anchorfile>
      <anchor>ad666c6480d0f4be771a8f749dc5d219c</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonStateChanged</name>
      <anchorfile>classToolbarButton.html</anchorfile>
      <anchor>af194bdbd33897e0607ce69cef3fa373a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classToolbarButton.html</anchorfile>
      <anchor>aef060c6668ad376a7ffb8c3db35a8fe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classToolbarButton.html</anchorfile>
      <anchor>aa18033fec63e17ecb3800ad04becc8fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToolbarItemComponent</name>
    <filename>classToolbarItemComponent.html</filename>
    <base>Button</base>
    <member kind="enumeration">
      <name>ToolbarEditingMode</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>ad499f9f48a5149685ab8da86244fd4e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>normalMode</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>ad499f9f48a5149685ab8da86244fd4e4a1541b19e132dd72861bdf1a9d73c2717</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>editableOnToolbar</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>ad499f9f48a5149685ab8da86244fd4e4a33d140eb9c5d5bc9e4ce6cd838dc30aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>editableOnPalette</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>ad499f9f48a5149685ab8da86244fd4e4a440b4d0912bbbaf54955a30814e5bd6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToolbarItemComponent</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a7af0b03ed1fd7b50cce26291e5afe8b7</anchor>
      <arglist>(int itemId, const String &amp;labelText, bool isBeingUsedAsAButton)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ToolbarItemComponent</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a6b4eb89703728a01b56ca090350aea91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getItemId</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a789df96b889f3bd582a89cd18c32a8f0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Toolbar *</type>
      <name>getToolbar</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a810281a298dd61446aeb2ab77d93c092</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isToolbarVertical</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a696908e2b6a322c01428f1899befe4d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Toolbar::ToolbarItemStyle</type>
      <name>getStyle</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>afaacab2b6a1cb805b6d6c312487b8148</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a87f11ea60f19c4dda9e019ed7b4760e8</anchor>
      <arglist>(const Toolbar::ToolbarItemStyle &amp;newStyle)</arglist>
    </member>
    <member kind="function">
      <type>const Rectangle&lt; int &gt; &amp;</type>
      <name>getContentArea</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a4b1885c4c93b6353b3bc4398eaa2238c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getToolbarItemSizes</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a8d51f7ec7319161a2cec966331c753af</anchor>
      <arglist>(int toolbarThickness, bool isToolbarVertical, int &amp;preferredSize, int &amp;minSize, int &amp;maxSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>paintButtonArea</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a72f83aef9d05179579355986d07ad78d</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isMouseOver, bool isMouseDown)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>contentAreaChanged</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a93180fe84b7a16ceafa985ece169a95d</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newBounds)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEditingMode</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>ae4647dbdbea1004901b845f0082dcd9b</anchor>
      <arglist>(const ToolbarEditingMode newMode)</arglist>
    </member>
    <member kind="function">
      <type>ToolbarEditingMode</type>
      <name>getEditingMode</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a5fba464ee5eda6ba214de497cecbeb86</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a9133b9cad2374a608e50f345e6fceee7</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOver, bool isMouseDown)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a6a271823b8b8fbeae504bbe52526f526</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToolbarItemFactory</name>
    <filename>classToolbarItemFactory.html</filename>
    <member kind="enumeration">
      <name>SpecialItemIds</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>a415ffaa38b6306574ad6777ccf6d2ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>separatorBarId</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>a415ffaa38b6306574ad6777ccf6d2ac4a38897536f81bb5f607c2b71757e1e33c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>spacerId</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>a415ffaa38b6306574ad6777ccf6d2ac4ac286d65323d1f29475107f6836416631</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>flexibleSpacerId</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>a415ffaa38b6306574ad6777ccf6d2ac4acfa608a9b717b6c24dcdfb9ba378f1cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToolbarItemFactory</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>aff4611dac37d3e945a719718b673b7fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ToolbarItemFactory</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>a596b8244e44da37f9a8f68491f00b0ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getAllToolbarItemIds</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>ad714c2b2092438075488357417e3376f</anchor>
      <arglist>(Array&lt; int &gt; &amp;ids)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getDefaultItemSet</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>a334318465c8de5333d075519f38bb0dd</anchor>
      <arglist>(Array&lt; int &gt; &amp;ids)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ToolbarItemComponent *</type>
      <name>createItem</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>ac4ba0c68fe72142f76608b0badbb290b</anchor>
      <arglist>(int itemId)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToolbarItemPalette</name>
    <filename>classToolbarItemPalette.html</filename>
    <base>Component</base>
    <base>DragAndDropContainer</base>
    <member kind="function">
      <type></type>
      <name>ToolbarItemPalette</name>
      <anchorfile>classToolbarItemPalette.html</anchorfile>
      <anchor>a0d151a95a4446df9d318cfdc541a6f83</anchor>
      <arglist>(ToolbarItemFactory &amp;factory, Toolbar *toolbar)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ToolbarItemPalette</name>
      <anchorfile>classToolbarItemPalette.html</anchorfile>
      <anchor>a024d0f39379f749babe845fa243f1fe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classToolbarItemPalette.html</anchorfile>
      <anchor>a85ba166afeb49c5b331e5cb0b1b090cc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TooltipClient</name>
    <filename>classTooltipClient.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TooltipClient</name>
      <anchorfile>classTooltipClient.html</anchorfile>
      <anchor>a1bc2223e107e4122d251f5b90049140c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getTooltip</name>
      <anchorfile>classTooltipClient.html</anchorfile>
      <anchor>a233635a4125d43bd54e9660c4ba40a90</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TooltipWindow</name>
    <filename>classTooltipWindow.html</filename>
    <base>Component</base>
    <base protection="private">Timer</base>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classTooltipWindow.html</anchorfile>
      <anchor>a84c5ba04f6f39e42fdf969f1cf37f6c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classTooltipWindow.html</anchorfile>
      <anchor>a84c5ba04f6f39e42fdf969f1cf37f6c6a28c64d55232b2dfff730222dd0c1bcb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>textColourId</name>
      <anchorfile>classTooltipWindow.html</anchorfile>
      <anchor>a84c5ba04f6f39e42fdf969f1cf37f6c6a5bf990824b485757bf9ab04fc0187eb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>outlineColourId</name>
      <anchorfile>classTooltipWindow.html</anchorfile>
      <anchor>a84c5ba04f6f39e42fdf969f1cf37f6c6a41876befabbf3948f92be5889339aefd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TooltipWindow</name>
      <anchorfile>classTooltipWindow.html</anchorfile>
      <anchor>aba10e88ecad73cfa0f0a21df1c9f9e51</anchor>
      <arglist>(Component *parentComponent=nullptr, int millisecondsBeforeTipAppears=700)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TooltipWindow</name>
      <anchorfile>classTooltipWindow.html</anchorfile>
      <anchor>a0200afb94084ac46d3f8a054402a58a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMillisecondsBeforeTipAppears</name>
      <anchorfile>classTooltipWindow.html</anchorfile>
      <anchor>ad48b272041c7561ac2fe8fc039adebc5</anchor>
      <arglist>(int newTimeMs=700) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TopLevelWindow</name>
    <filename>classTopLevelWindow.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>TopLevelWindow</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a7d52a41e30bff8d342327abc4f476112</anchor>
      <arglist>(const String &amp;name, bool addToDesktop)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TopLevelWindow</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a20277d9867a8e2fa56405a24b595e547</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActiveWindow</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a462b6b5a8b21a32645ee54b7a9676121</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>centreAroundComponent</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a24c4beccd6e394c68a2def2e38a3213a</anchor>
      <arglist>(Component *componentToCentreAround, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDropShadowEnabled</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>aed7017ec50e075cca022b5c11ce5fdff</anchor>
      <arglist>(bool useShadow)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDropShadowEnabled</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a910577a0e16f9e80cca0ac41f61e6299</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsingNativeTitleBar</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a749fbd5e688ed8c9af3d0d99b21e18c8</anchor>
      <arglist>(bool useNativeTitleBar)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingNativeTitleBar</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a18da6a0cc04d665771cfaa3137d319c5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToDesktop</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a0ae187374587e3169bbf0556a19cfeb3</anchor>
      <arglist>(int windowStyleFlags, void *nativeWindowToAttachTo=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumTopLevelWindows</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a33eeb6e6e7694cc2b2904664c60a5240</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TopLevelWindow *</type>
      <name>getTopLevelWindow</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a2ecfdbc04b0d815fe7edd44aeadac14a</anchor>
      <arglist>(int index) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TopLevelWindow *</type>
      <name>getActiveTopLevelWindow</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>af17e4d21be7d375627f6339d479ec4d4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>activeWindowStatusChanged</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a6d2a68ab02862e0dda13a5d1cf874142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>focusOfChildComponentChanged</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>ae357bf2baa7795ef96fb04b6fd3a4837</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a1e1714fde20ebe5abfa6df7ba8235822</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getDesktopWindowStyleFlags</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>ac586f72632e58fe22cf8e45b046511c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recreateDesktopWindow</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a17ae4404a23e24e2859a396bc391ffc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>visibilityChanged</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a6af5b4cae225733686ae4822ff7eaf42</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TreeView</name>
    <filename>classTreeView.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>FileDragAndDropTarget</base>
    <base>DragAndDropTarget</base>
    <member kind="enumeration">
      <name>ColourIds</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>abeebe6dbdc6ae466495aabc64eb51d6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backgroundColourId</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>abeebe6dbdc6ae466495aabc64eb51d6aafe6141938ba7ca482d4bfd990c9972a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>linesColourId</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>abeebe6dbdc6ae466495aabc64eb51d6aa129ebbdc625406f6dd26047aaa3f082a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dragAndDropIndicatorColourId</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>abeebe6dbdc6ae466495aabc64eb51d6aad580cdecf3960d0d68904675383bb2ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeView</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a25881e2dd48e2ed826d7b1c360352b4c</anchor>
      <arglist>(const String &amp;componentName=String::empty)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TreeView</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a9131ac3d332c721b2aa8e3202e7cc305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRootItem</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a14b78e4691e3155d1a55ea7edf743596</anchor>
      <arglist>(TreeViewItem *newRootItem)</arglist>
    </member>
    <member kind="function">
      <type>TreeViewItem *</type>
      <name>getRootItem</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a1cab55fed1d8dc6064307acdbbcba9b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteRootItem</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>ad5245e71c0684de6cf942238da54b9cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRootItemVisible</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a3c28114193951c8079fdfeb95738f410</anchor>
      <arglist>(bool shouldBeVisible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRootItemVisible</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a8a6f74ca5b60ecd97451e32bf386e419</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultOpenness</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a5a9030dae554634352b2c4f2ed2db5b9</anchor>
      <arglist>(bool isOpenByDefault)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areItemsOpenByDefault</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a1d29f3b4c3d964171d03744409cf5692</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMultiSelectEnabled</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>acf2e695dbd3a01343d1c69b022650e97</anchor>
      <arglist>(bool canMultiSelect)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMultiSelectEnabled</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a026e6738d51c3a40abb38438b4966fe0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpenCloseButtonsVisible</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>abe04eaa5b5df3a1d37187d002c174e24</anchor>
      <arglist>(bool shouldBeVisible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areOpenCloseButtonsVisible</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a3524e12c2137fdbee1b83b12c870b40b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearSelectedItems</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>ae64500dc9c423669798ab1bd81952f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSelectedItems</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>ac5bd87369462f67797996dc8bb9cf4e4</anchor>
      <arglist>(int maximumDepthToSearchTo=-1) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TreeViewItem *</type>
      <name>getSelectedItem</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a08a92231c68c4133a87a0ec087b3d5dc</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRowsInTree</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a352eb21745885abb3d8032d5e1469338</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TreeViewItem *</type>
      <name>getItemOnRow</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>ac5a7d7f1cbe8b4ac166ef16851c53835</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>TreeViewItem *</type>
      <name>getItemAt</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a452ed1febce895cda7a8ff50a28ac946</anchor>
      <arglist>(int yPosition) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToKeepItemVisible</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>adff5344f0cbd0053553335d2a9397fd6</anchor>
      <arglist>(TreeViewItem *item)</arglist>
    </member>
    <member kind="function">
      <type>Viewport *</type>
      <name>getViewport</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a3dc7dcc7f57e32e402ffcfae1eabbdb9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndentSize</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a8a1b7ed278bf70c0f1e36cec5b95c9e1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndentSize</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a9baf9e5fc5fa8474ba09ebbf3076a500</anchor>
      <arglist>(int newIndentSize)</arglist>
    </member>
    <member kind="function">
      <type>TreeViewItem *</type>
      <name>findItemFromIdentifierString</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>aef07872429f7bd1807ecf5c7186fa608</anchor>
      <arglist>(const String &amp;identifierString) const </arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getOpennessState</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>ae442d9c17f9dddbf745ddb57b9332919</anchor>
      <arglist>(bool alsoIncludeScrollPosition) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreOpennessState</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a0e88906665c57b672def512e355af4f8</anchor>
      <arglist>(const XmlElement &amp;newState, bool restoreStoredSelection)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>adecab139b0c47342db0c9232a522b8bb</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a16a45992d6ebdbb6f91a1a62b251b0d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>ada247895744d2fdf492879863e6f614e</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a16cd0cac60fcfd0d53bb07e5905cd114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>af8b931107d29b2a0bd7d249cdeb1dcb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInterestedInFileDrag</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>aca50fc760a2260f4198229eca74ccef8</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileDragEnter</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a96a70f0646b24a6f9a37fcec0babf79f</anchor>
      <arglist>(const StringArray &amp;files, int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileDragMove</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>ab344425b9dd497f6e3222f4fadff3768</anchor>
      <arglist>(const StringArray &amp;files, int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileDragExit</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a1fb933d90a33ca2c8888a912561a5f0c</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filesDropped</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a4a4b11ed1c5c8eadfbf73eb11da3bacc</anchor>
      <arglist>(const StringArray &amp;files, int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInterestedInDragSource</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a590b534ba8b44288a0344f4ca132e651</anchor>
      <arglist>(const SourceDetails &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>itemDragEnter</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a50a0c6112e49b231f4a025896927897c</anchor>
      <arglist>(const SourceDetails &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>itemDragMove</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>ab4c10bb95b07250620a06093af8ac50c</anchor>
      <arglist>(const SourceDetails &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>itemDragExit</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a6ca060eab3e7e7418e84ef2ecdbc1107</anchor>
      <arglist>(const SourceDetails &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>itemDropped</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a5c1732c39d0a0c92c9844ee0b282d18c</anchor>
      <arglist>(const SourceDetails &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TreeViewItem</name>
    <filename>classTreeViewItem.html</filename>
    <class kind="class">TreeViewItem::OpennessRestorer</class>
    <member kind="function">
      <type></type>
      <name>TreeViewItem</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a442058a1c6d9eef0aa6f8b918fcbf8d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TreeViewItem</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a096327dbe3300e99a80eff28f0e20a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSubItems</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ae2357524e0d096bcde729ae99b03a38c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TreeViewItem *</type>
      <name>getSubItem</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ad12c774c2434074f795ba37a5c2d1755</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearSubItems</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a3e5f73cd812c6626047d38307560aaeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSubItem</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a536e1e4edaf0b0a472c485050d54eb5a</anchor>
      <arglist>(TreeViewItem *newItem, int insertPosition=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSubItem</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a80b8910184619d952841a1b93d4b75c4</anchor>
      <arglist>(int index, bool deleteItem=true)</arglist>
    </member>
    <member kind="function">
      <type>TreeView *</type>
      <name>getOwnerView</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>af5f9ce78c2bc579d308a7048c59a0a3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TreeViewItem *</type>
      <name>getParentItem</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a2ab42bc65bc8ad845d6deea5ff4572ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpen</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>aac59d4198c7dc470ef45f705b23621e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpen</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ae1d86e63026471f8edea97f7dc5fd05f</anchor>
      <arglist>(bool shouldBeOpen)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSelected</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a96351e2c95b73bf170b8818774a63cf6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelected</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a81cd469a2a0b50e6c35827293d06267f</anchor>
      <arglist>(bool shouldBeSelected, bool deselectOtherItemsFirst)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getItemPosition</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a9263a18573cce52347899cb209d4feff</anchor>
      <arglist>(bool relativeToTreeViewTopLeft) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>treeHasChanged</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>aab2752eec271a51384fd10121a911ee1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repaintItem</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a35c45db6f6062b532825788835b542e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowNumberInTree</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ae3809bbfa55ccd973205f5580fa0776c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areAllParentsOpen</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a9c5a3bd296fe6eb6f3edc6310e723a0c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinesDrawnForSubItems</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a7d398fd97dcd6566043fd1c1da202233</anchor>
      <arglist>(bool shouldDrawLines) noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>mightContainSubItems</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a1d4dc3f8e9971147e2649a128bd0344d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getUniqueName</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a9ae7c529cc762a33ebcb4a14f8cee620</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemOpennessChanged</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ae675d65af3c2ab3455b98aa6d025d070</anchor>
      <arglist>(bool isNowOpen)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getItemWidth</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ae7800c63ef926a84f8f0e29325b9978e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getItemHeight</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a5e75b5a4c32d6ee01e32b6358547bae0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canBeSelected</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a72ffb7ddd950a76b4626e3bd280b7fe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Component *</type>
      <name>createItemComponent</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>af821a303a31a9256e00b94ff8fe2595d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>paintItem</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>adc3e3a7c09443e28b1f48fe10b9569b2</anchor>
      <arglist>(Graphics &amp;g, int width, int height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>paintOpenCloseButton</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a387bbc6f7f268498d31f17bb2aee8d63</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isMouseOver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemClicked</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a1d16cbc797adba8e7dda4db01f868f72</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemDoubleClicked</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a44f6bac320a0ed884006e25558c6b513</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemSelectionChanged</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a2b1fe5d650ef8cc31a16f1eaed03e837</anchor>
      <arglist>(bool isNowSelected)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getTooltip</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a13b0004f086cd20f212d5a33a7c48474</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual var</type>
      <name>getDragSourceDescription</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a529dcbb8ef94476d1d78c0069efa6f39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInterestedInFileDrag</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>abe8b909ba44b7eac0988b2adc6257c46</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filesDropped</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a6149fa51385ef76bfede3481d3646797</anchor>
      <arglist>(const StringArray &amp;files, int insertIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInterestedInDragSource</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a7a1d27462d3ddf1fab3dca14e16c2788</anchor>
      <arglist>(const DragAndDropTarget::SourceDetails &amp;dragSourceDetails)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemDropped</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>afade9c99b85939fe8521d55b0b2ab285</anchor>
      <arglist>(const DragAndDropTarget::SourceDetails &amp;dragSourceDetails, int insertIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDrawsInLeftMargin</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a5ad6617d063e99ca170d2726ca87c8b1</anchor>
      <arglist>(bool canDrawInLeftMargin) noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getOpennessState</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a684aff0e07a592baac86eff96ededfc2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreOpennessState</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a8c5209f463a39420bcfd759cbd345590</anchor>
      <arglist>(const XmlElement &amp;xml) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexInParent</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ad16ec5ae6dd02ed690001ac9a664fa44</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLastOfSiblings</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ab5a379de4cea292f0b66d6c9f4f3da42</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getItemIdentifierString</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a9635d6bdd8074310f468916998477397</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TreeViewItem::OpennessRestorer</name>
    <filename>classTreeViewItem_1_1OpennessRestorer.html</filename>
    <member kind="function">
      <type></type>
      <name>OpennessRestorer</name>
      <anchorfile>classTreeViewItem_1_1OpennessRestorer.html</anchorfile>
      <anchor>acdf7c357e5f90a65db05077e985f816f</anchor>
      <arglist>(TreeViewItem &amp;treeViewItem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpennessRestorer</name>
      <anchorfile>classTreeViewItem_1_1OpennessRestorer.html</anchorfile>
      <anchor>aabc1cf94c8ec00c1d3f19136e71cdee5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Typeface</name>
    <filename>classTypeface.html</filename>
    <base>ReferenceCountedObject</base>
    <member kind="typedef">
      <type>ReferenceCountedObjectPtr&lt; Typeface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a13053be679c87b7a72963e9ce60e34c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>ab1996880b3e86b59828bf070902f47f9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getStyle</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>aca511c989e285e5a338f4f00d1d567ce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Typeface</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>ae3f6929dec75f834504478b6ab33dcbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSuitableForFont</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>abb54f4e30a1e6ac3a1106c3fc20ce01b</anchor>
      <arglist>(const Font &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getAscent</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>aefd72f013b7702a719bf1532fc1f171b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getDescent</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a47d0adeb19ac659b54cad34a832192c9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getStringWidth</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>acb8c05c634392c892c0068011e888d0f</anchor>
      <arglist>(const String &amp;text)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getGlyphPositions</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>ac4b6f9b7c3555f8440a699c845ddfca4</anchor>
      <arglist>(const String &amp;text, Array&lt; int &gt; &amp;glyphs, Array&lt; float &gt; &amp;xOffsets)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getOutlineForGlyph</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a64aaf421db333c9150eaa1a5d4fd7cf8</anchor>
      <arglist>(int glyphNumber, Path &amp;path)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EdgeTable *</type>
      <name>getEdgeTableForGlyph</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a1c021c15276d4805f2a64c100fe4dcd5</anchor>
      <arglist>(int glyphNumber, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isHinted</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a0a0c1ba0a02a01e032c8f2fef2efe371</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>createSystemTypefaceFor</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a2ce51562cc51437352c4d47777185f35</anchor>
      <arglist>(const Font &amp;font)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTypefaceCacheSize</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a873c4f902b5fbfa920a4ecd3dff7ee44</anchor>
      <arglist>(int numFontsToCache)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearTypefaceCache</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a3f47a4db006dc9d8b3aaabbd35aebb78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Typeface</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>aeff4239f1343ce0f80fb30c6bd52ed07</anchor>
      <arglist>(const String &amp;name, const String &amp;style) noexcept</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Ptr</type>
      <name>getFallbackTypeface</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a867faec01233e12690a6135a6ff08feb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>String</type>
      <name>name</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>adf2787d392df086aa81c1a831d1ca3f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>String</type>
      <name>style</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a4169174330e29936cda2170a51a36df8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UIViewComponent</name>
    <filename>classUIViewComponent.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>UIViewComponent</name>
      <anchorfile>classUIViewComponent.html</anchorfile>
      <anchor>a1c3bf91efaf6bd073c4649b07f555e20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UIViewComponent</name>
      <anchorfile>classUIViewComponent.html</anchorfile>
      <anchor>abbb1e555e89da2dcc961ff8ddba5aee2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setView</name>
      <anchorfile>classUIViewComponent.html</anchorfile>
      <anchor>a385b78c654e6403ec793481c820d8c89</anchor>
      <arglist>(void *uiView)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getView</name>
      <anchorfile>classUIViewComponent.html</anchorfile>
      <anchor>a7b471b2aaed699e4c125a9d6bfc04a5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeToFitView</name>
      <anchorfile>classUIViewComponent.html</anchorfile>
      <anchor>af65552c117379c5b6fd3b7b7021c4be0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classUIViewComponent.html</anchorfile>
      <anchor>a62645b1112a38bdd7e44079072c7e809</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UndoableAction</name>
    <filename>classUndoableAction.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UndoableAction</name>
      <anchorfile>classUndoableAction.html</anchorfile>
      <anchor>ae1567cc5931e990c2a2912f47808593b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>perform</name>
      <anchorfile>classUndoableAction.html</anchorfile>
      <anchor>a6411ef8343148b52fef4bdc0290dfe06</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>undo</name>
      <anchorfile>classUndoableAction.html</anchorfile>
      <anchor>a535a5ca2bdc00edebe2b868ec7c13482</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSizeInUnits</name>
      <anchorfile>classUndoableAction.html</anchorfile>
      <anchor>a77613c64378930b1af6255ea5ec8df0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UndoableAction *</type>
      <name>createCoalescedAction</name>
      <anchorfile>classUndoableAction.html</anchorfile>
      <anchor>a7ca68fbe4905168d985c7a30a9ca266d</anchor>
      <arglist>(UndoableAction *nextAction)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UndoableAction</name>
      <anchorfile>classUndoableAction.html</anchorfile>
      <anchor>abf39d7ee8e52523f0583dd3857ad86d6</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UndoManager</name>
    <filename>classUndoManager.html</filename>
    <base>ChangeBroadcaster</base>
    <member kind="function">
      <type></type>
      <name>UndoManager</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a80479ce847ec1ac8cccb8bdf5bb5729e</anchor>
      <arglist>(int maxNumberOfUnitsToKeep=30000, int minimumTransactionsToKeep=30)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UndoManager</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a8d02b39eef79a885fb71be93ddac1115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearUndoHistory</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a14ecaa1dcab72d09ccb826bc7a0d2743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfUnitsTakenUpByStoredCommands</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a20655846f23dbbcc3401debf7c6f3866</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumberOfStoredUnits</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a371dddb00a010caf5e3bb88d4009bdfb</anchor>
      <arglist>(int maxNumberOfUnitsToKeep, int minimumTransactionsToKeep)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>perform</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>ad16c1fef7afaa7187e3b473eff03b214</anchor>
      <arglist>(UndoableAction *action, const String &amp;actionName=String::empty)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginNewTransaction</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a75ec9e2cf8049d1824fd7ebd60bae131</anchor>
      <arglist>(const String &amp;actionName=String::empty)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentTransactionName</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a920cca3e24c598a175d90b04765fe5bc</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canUndo</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a530c911b964fc6759b0b68dbf0bb2335</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getUndoDescription</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>ae1213b09873ad7b4a0ab9ecba45ed3fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>undo</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a39f45c284e8d0df1a0d378e676246931</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>undoCurrentTransactionOnly</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>ad81c6649e3acc3ab36726c280058d6bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getActionsInCurrentTransaction</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a5f174495e70457b64db51c810707a102</anchor>
      <arglist>(Array&lt; const UndoableAction * &gt; &amp;actionsFound) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumActionsInCurrentTransaction</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>aa16c6f968d74ac4b629dea6ea77464d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canRedo</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a3de157c2f343a4857c900e3f86e20304</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getRedoDescription</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>aeb54172747a5f4dc7a21bc6a3c1b5c62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>redo</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>aaea507a3b9eaea3360c0e393edf69ccb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnitTest</name>
    <filename>classUnitTest.html</filename>
    <member kind="function">
      <type></type>
      <name>UnitTest</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a3fb00e56f1df45efabba981f84e5a578</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnitTest</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a5a57054084ce200e1e92ff3eecc8420a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a2a670b333cacbe8056ebb64881009d86</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performTest</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a45ac76c71297c8d336e1503515e34232</anchor>
      <arglist>(UnitTestRunner *runner)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialise</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>ade18a56bfb0df028c03c21c158eb80d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a72b58cb2de72f299949f710a70ef5d11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>runTest</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a1a95d7f09eb80442a8099663dfb92628</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginTest</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>ae21d8c58358819742f379706b6b34753</anchor>
      <arglist>(const String &amp;testName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expect</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a402683ff949a9f3c6f2689476b90f31f</anchor>
      <arglist>(bool testResult, const String &amp;failureMessage=String::empty)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expectEquals</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>ab9ef1eb6260c9d63dd568e8fee0d6ae9</anchor>
      <arglist>(ValueType actual, ValueType expected, String failureMessage=String::empty)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMessage</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a1c91c1b7758fffd3536042238f00005b</anchor>
      <arglist>(const String &amp;message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; UnitTest * &gt; &amp;</type>
      <name>getAllTests</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a2e5b516d7976360c375e5c870e52798f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnitTestRunner</name>
    <filename>classUnitTestRunner.html</filename>
    <class kind="struct">UnitTestRunner::TestResult</class>
    <member kind="function">
      <type></type>
      <name>UnitTestRunner</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>ae0e3c870085be83f4821127b99269d78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnitTestRunner</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>a2db85705913aaee06dd1de0dc701bb48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runTests</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>a7c6631acba13450d211156f0d57bd589</anchor>
      <arglist>(const Array&lt; UnitTest * &gt; &amp;tests)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runAllTests</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>ac8324840dde5a80301fcf40f1c244497</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAssertOnFailure</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>a83ba986b7393abe2dfd72391da3da88e</anchor>
      <arglist>(bool shouldAssert) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPassesAreLogged</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>a89edce46aa5abf03afd10b227f24de6b</anchor>
      <arglist>(bool shouldDisplayPasses) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumResults</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>ab98ea2e9daa9c3710a011ad43b2926fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TestResult *</type>
      <name>getResult</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>a391b1ac857c5d74e7e917fcafb669b14</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>resultsUpdated</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>afa7f79986587d186c212af8a02f04d94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>logMessage</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>abda0a15326302c1d6ce444869e304eeb</anchor>
      <arglist>(const String &amp;message)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>shouldAbortTests</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>ae6f35d3fb59cf0ec741e31c5cbcbba6a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UnitTestRunner::TestResult</name>
    <filename>structUnitTestRunner_1_1TestResult.html</filename>
    <member kind="variable">
      <type>String</type>
      <name>unitTestName</name>
      <anchorfile>structUnitTestRunner_1_1TestResult.html</anchorfile>
      <anchor>a5bbfc3f70ca29c0b836dfc9325a328df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>subcategoryName</name>
      <anchorfile>structUnitTestRunner_1_1TestResult.html</anchorfile>
      <anchor>af0a632786980a63693a86bb9942959c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>passes</name>
      <anchorfile>structUnitTestRunner_1_1TestResult.html</anchorfile>
      <anchor>a8ad1f84de7871ffdb1d4cbf5b702d74c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>failures</name>
      <anchorfile>structUnitTestRunner_1_1TestResult.html</anchorfile>
      <anchor>aedbec24cdf2ccef537a994d18995a85c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StringArray</type>
      <name>messages</name>
      <anchorfile>structUnitTestRunner_1_1TestResult.html</anchorfile>
      <anchor>ae94f7a271e7f4a5725939036156595bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>URL</name>
    <filename>classURL.html</filename>
    <member kind="typedef">
      <type>bool(</type>
      <name>OpenStreamProgressCallback</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a24e0205b0375cff235d64cc33d8c8550</anchor>
      <arglist>)(void *context, int bytesSent, int totalBytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URL</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>ad6ecb93e145465c5b20f2e90f2f1163a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URL</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>aa00fab54fc95a6a9a468228150c034d6</anchor>
      <arglist>(const String &amp;url)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URL</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>af069bf0e7621be7f0eec3f1c80f5560a</anchor>
      <arglist>(const URL &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~URL</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a127152050325ba77075f00ee2630c33c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>URL &amp;</type>
      <name>operator=</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a0b7c692abdea0088c065a562559101f2</anchor>
      <arglist>(const URL &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>ab18c73180aa7f76a2f435d8914bfd2b5</anchor>
      <arglist>(const URL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>afd13c03a7c2e03c8212bf19e426391ca</anchor>
      <arglist>(const URL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a37d7f35615a9a20d74e5185c889cfd38</anchor>
      <arglist>(bool includeGetParameters) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWellFormed</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a6be5388bb876debe10fd8f899d8f1865</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getDomain</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a1190de2b868ce127136b3565a5bb48e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getSubPath</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>aa126b5e435550a169a788136c0135c17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getScheme</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a3900eeaf678969aab1ef8447a879786c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPort</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a956752231288358290d781e5f27eb150</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>URL</type>
      <name>withNewSubPath</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>aa3b7c064dc3834575ef77ee7db4cc239</anchor>
      <arglist>(const String &amp;newPath) const </arglist>
    </member>
    <member kind="function">
      <type>URL</type>
      <name>getChildURL</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a9a90a4094536644741ed6da1bba7a202</anchor>
      <arglist>(const String &amp;subPath) const </arglist>
    </member>
    <member kind="function">
      <type>URL</type>
      <name>withParameter</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a3974f5b9d28d360ac657df3b42082f5d</anchor>
      <arglist>(const String &amp;parameterName, const String &amp;parameterValue) const </arglist>
    </member>
    <member kind="function">
      <type>URL</type>
      <name>withFileToUpload</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a341a3e78e1b831a33cf5a8a191573725</anchor>
      <arglist>(const String &amp;parameterName, const File &amp;fileToUpload, const String &amp;mimeType) const </arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getParameterNames</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a10a2d1604d0a3d86381a4b142624c662</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getParameterValues</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a61b5ddfaf16fd5ba305c22ccd13ee7ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const StringPairArray &amp;</type>
      <name>getFilesToUpload</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a0cc39c1f6c4457e980062b3c23b51b17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StringPairArray &amp;</type>
      <name>getMimeTypesOfUploadFiles</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a055846868f227b034a3999f19a887b20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>URL</type>
      <name>withPOSTData</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a9fe9f66a50ff9f6d6d1bcb47ad3ead2a</anchor>
      <arglist>(const String &amp;postData) const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getPostData</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a80b94b49a4934bbbabe92a612791107e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launchInDefaultBrowser</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>ab56bf9814dfe828db465582b3af50c69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InputStream *</type>
      <name>createInputStream</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a6bbba58a5fdb51b5075a180003adedaf</anchor>
      <arglist>(bool usePostCommand, OpenStreamProgressCallback *progressCallback=nullptr, void *progressCallbackContext=nullptr, const String &amp;extraHeaders=String::empty, int connectionTimeOutMs=0, StringPairArray *responseHeaders=nullptr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readEntireBinaryStream</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>ade18c87d31c10cb7fea4453afeee2de6</anchor>
      <arglist>(MemoryBlock &amp;destData, bool usePostCommand=false) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>readEntireTextStream</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a7c50271fae5ecfef9e6ae625dade995f</anchor>
      <arglist>(bool usePostCommand=false) const </arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>readEntireXmlStream</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a91141cb99e805bf469b8080fc02eefd2</anchor>
      <arglist>(bool usePostCommand=false) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isProbablyAWebsiteURL</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a99df56e20fd9bf9426538571eaa06909</anchor>
      <arglist>(const String &amp;possibleURL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isProbablyAnEmailAddress</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a104e0a0539ab797a3057b19b8c531503</anchor>
      <arglist>(const String &amp;possibleEmailAddress)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>addEscapeChars</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>ac2726988a2b4c249ece1dea4216aa381</anchor>
      <arglist>(const String &amp;stringToAddEscapeCharsTo, bool isParameter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>removeEscapeChars</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>add07acc3e33e34097c2e93447f6fd0f9</anchor>
      <arglist>(const String &amp;stringToRemoveEscapeCharsFrom)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Uuid</name>
    <filename>classUuid.html</filename>
    <member kind="function">
      <type></type>
      <name>Uuid</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a55663b31db8d26c71fa1b0258ccc34f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Uuid</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a1309dbbf8098e9e2fe9a1019d5546d49</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Uuid</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a89f27814d2c3bcb6e3328fa859ea22da</anchor>
      <arglist>(const Uuid &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Uuid &amp;</type>
      <name>operator=</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>ac15a4a676d1172c3607cf799dfbab333</anchor>
      <arglist>(const Uuid &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>aa235a82db41c07260c444b0d0c9b9196</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a6e1dfadbd35c43f22eb95da3f72e01b9</anchor>
      <arglist>(const Uuid &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a150b2f5cfa3be9fa586c8ec3c945d9d1</anchor>
      <arglist>(const Uuid &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a77e752a7dab662c872befd86843324f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Uuid</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a1c1c2279f664fb5ecd1c7a40a2427659</anchor>
      <arglist>(const String &amp;uuidString)</arglist>
    </member>
    <member kind="function">
      <type>Uuid &amp;</type>
      <name>operator=</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a94d863e1d7853c72fd2a8986c52b53e0</anchor>
      <arglist>(const String &amp;uuidString)</arglist>
    </member>
    <member kind="function">
      <type>const uint8 *</type>
      <name>getRawData</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>aa49adbefce0fa9e1ce31bfa1ff6e887f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Uuid</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a4408f0dbab7c668535128731befe7a5b</anchor>
      <arglist>(const uint8 *rawData)</arglist>
    </member>
    <member kind="function">
      <type>Uuid &amp;</type>
      <name>operator=</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>ac2d2acb3301bbd3ab48cbc42d577b737</anchor>
      <arglist>(const uint8 *rawData) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Value</name>
    <filename>classValue.html</filename>
    <class kind="class">Value::Listener</class>
    <class kind="class">Value::ValueSource</class>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>abc2a5a2e6484fac66dae2539cc955667</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>acc427785c9007f762772d1dbe7535295</anchor>
      <arglist>(const Value &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>ad20df25aa8a6b58ae7220abb5abea977</anchor>
      <arglist>(const var &amp;initialValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Value</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a3a578f458da8a4ab67052dba0f7bffdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>getValue</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>ad7b4a297b144637785322cf398e04ef3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator var</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a992abe942677674611e74e2654e1bc91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>ad5825a025dd71f9da4c273f0a0fbd3ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>aad44af687acd1f62ad9231e8ae47059d</anchor>
      <arglist>(const var &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator=</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a9c968011a1af3dbe03d6f6fa272fa674</anchor>
      <arglist>(const var &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>referTo</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a127b52830b5d62b478224b670d9e78f9</anchor>
      <arglist>(const Value &amp;valueToReferTo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>refersToSameSourceAs</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>ac748fe41dba23758e8891622a0eb5443</anchor>
      <arglist>(const Value &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a593ffc8716f4950dfd404f8589994976</anchor>
      <arglist>(const Value &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a0d4b1c3a4a5b2c2ef50ca3fb6279fc1b</anchor>
      <arglist>(const Value &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a3c2c52becedfd8c85029f98412300aa5</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a90467d1b5c25f52d2152bd72057cd951</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a9ef2a029c366ec777e9485cb4aadcf8b</anchor>
      <arglist>(ValueSource *valueSource)</arglist>
    </member>
    <member kind="function">
      <type>ValueSource &amp;</type>
      <name>getValueSource</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>ad69f95e21345a423192a3e9976258c8b</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Value::Listener</name>
    <filename>classValue_1_1Listener.html</filename>
    <member kind="function">
      <type></type>
      <name>Listener</name>
      <anchorfile>classValue_1_1Listener.html</anchorfile>
      <anchor>aca4d97f9b7f5d75109df491021e8a308</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classValue_1_1Listener.html</anchorfile>
      <anchor>a10db56a1241f10e1d2497de6248f519d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>valueChanged</name>
      <anchorfile>classValue_1_1Listener.html</anchorfile>
      <anchor>ab1f072eabd128b8e9a99b4926f2231a8</anchor>
      <arglist>(Value &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Value::ValueSource</name>
    <filename>classValue_1_1ValueSource.html</filename>
    <base>SingleThreadedReferenceCountedObject</base>
    <base>AsyncUpdater</base>
    <member kind="function">
      <type></type>
      <name>ValueSource</name>
      <anchorfile>classValue_1_1ValueSource.html</anchorfile>
      <anchor>a38f5ca1d8aed95c1d5caaa9c1c461626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ValueSource</name>
      <anchorfile>classValue_1_1ValueSource.html</anchorfile>
      <anchor>a4d52ea8cc66d29d25449726557c7c4a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual var</type>
      <name>getValue</name>
      <anchorfile>classValue_1_1ValueSource.html</anchorfile>
      <anchor>a54eaab6f8ce4fd995c51d3a57e17625e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classValue_1_1ValueSource.html</anchorfile>
      <anchor>aa21be5c22b2846326b8d52cf7a79f7f9</anchor>
      <arglist>(const var &amp;newValue)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendChangeMessage</name>
      <anchorfile>classValue_1_1ValueSource.html</anchorfile>
      <anchor>a75dfc7b9a9e27384e8d22ce1b426704b</anchor>
      <arglist>(bool dispatchSynchronously)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAsyncUpdate</name>
      <anchorfile>classValue_1_1ValueSource.html</anchorfile>
      <anchor>adb417be60cfd5d5a522da7350e442ff8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</name>
      <anchorfile>classValue_1_1ValueSource.html</anchorfile>
      <anchor>a5dcecd57c59e53ea207fd252534dd7d2</anchor>
      <arglist>(ValueSource)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SortedSet&lt; Value * &gt;</type>
      <name>valuesWithListeners</name>
      <anchorfile>classValue_1_1ValueSource.html</anchorfile>
      <anchor>ac6c18c9323cbda13d3e967c1b3c7b3cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ValueTree</name>
    <filename>classValueTree.html</filename>
    <class kind="class">ValueTree::Listener</class>
    <member kind="function">
      <type></type>
      <name>ValueTree</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ad5671081941b3db9db42bf7fcbd2629c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueTree</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>af2f66bc6973b9a7561af455bd6fb331c</anchor>
      <arglist>(const Identifier &amp;type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueTree</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a685fac19f67d8138645b6ccdb37f6809</anchor>
      <arglist>(const ValueTree &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree &amp;</type>
      <name>operator=</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>abb0ec8b6af470fb80f5fb84d080cd26c</anchor>
      <arglist>(const ValueTree &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ValueTree</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a4e0b4721cb1ec7f79c59192df3b97bcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a078b2ccd7ffad9a0afd3c9d87c976aef</anchor>
      <arglist>(const ValueTree &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a855f4a7a94f247b700e15d2ff7fd6436</anchor>
      <arglist>(const ValueTree &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEquivalentTo</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ac6f5b2c18a305fcc6a89e24e5834e298</anchor>
      <arglist>(const ValueTree &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>afc7d5ea43143bafac840a8336c5301a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createCopy</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ad212f52a1dee540a97b256a57c881fed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Identifier</type>
      <name>getType</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a877bc705ae6b3973d4af1b97f5e4c557</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasType</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>aa28f5bc26e2704dc725168e54789cff2</anchor>
      <arglist>(const Identifier &amp;typeName) const </arglist>
    </member>
    <member kind="function">
      <type>const var &amp;</type>
      <name>getProperty</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ac7095a89f79cd50625e92fde56984268</anchor>
      <arglist>(const Identifier &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>getProperty</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a37c064d4411df78b7d1d8ded5cac3ce3</anchor>
      <arglist>(const Identifier &amp;name, const var &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <type>const var &amp;</type>
      <name>operator[]</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a1f5c73dc935caa6577e8e2c9a51b4c86</anchor>
      <arglist>(const Identifier &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>ValueTree &amp;</type>
      <name>setProperty</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ad236114dc2a8c41c799f1fc51d1614bd</anchor>
      <arglist>(const Identifier &amp;name, const var &amp;newValue, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProperty</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a9dcb765aacb4f0f153fea6c311952d9b</anchor>
      <arglist>(const Identifier &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeProperty</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a2a07b801bd317aa8bf1ee9da5644fc35</anchor>
      <arglist>(const Identifier &amp;name, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllProperties</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a2f750331b6a680f48751302be9313467</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumProperties</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ac83190970c072ff95edaebd1ade65c93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Identifier</type>
      <name>getPropertyName</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a14517f03840bf3fe5e2cdfc5c2f07588</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getPropertyAsValue</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>aa36d40c533583c723be757c77ade1a5c</anchor>
      <arglist>(const Identifier &amp;name, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChildren</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ab4e869902306be8d60d056a4192383c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getChild</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ae3c7ef24e903b145e7885820898240cb</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getChildWithName</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a00e9d09ad2439b9eb5cb79cb146c5a73</anchor>
      <arglist>(const Identifier &amp;type) const </arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getOrCreateChildWithName</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>aafb29876616f005939915de3e6968818</anchor>
      <arglist>(const Identifier &amp;type, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getChildWithProperty</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a99c2e890ecbed6c7fab83c1a95d824a6</anchor>
      <arglist>(const Identifier &amp;propertyName, const var &amp;propertyValue) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a93d639299ef9dfedc651544e05f06693</anchor>
      <arglist>(const ValueTree &amp;child, int index, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a52b15bdb0b4a04b81c04e7059bb926c4</anchor>
      <arglist>(const ValueTree &amp;child, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a3bee3734652dec6bb1d5c351a1268fc0</anchor>
      <arglist>(int childIndex, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllChildren</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a91f8a28e02a782b0c95f855d0c29f0d9</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveChild</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ab7d20bf6964bfc8c4a975543bca8ce53</anchor>
      <arglist>(int currentIndex, int newIndex, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAChildOf</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>af55de3861c98a6441e04891690784eff</anchor>
      <arglist>(const ValueTree &amp;possibleParent) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>aed934c5a006a21f8edf4c1b7fe39bc48</anchor>
      <arglist>(const ValueTree &amp;child) const </arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getParent</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a238a440b17653c87e1b0981515bc2bfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getSibling</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>aeaad7cad64013775bdf12b871c07abb7</anchor>
      <arglist>(int delta) const </arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>createXml</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ad4b6941292f6ba19b1f4c7a91b82f957</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToStream</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a4030330dde3b8e95e706336627d278c3</anchor>
      <arglist>(OutputStream &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a0a0d82471cb1119fc1a7b7018e3af394</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ac8930aa94cb6e3714ef9e7449d08e5f6</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendPropertyChangeMessage</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a164ff183e358b982b1a1f5dd1176ab88</anchor>
      <arglist>(const Identifier &amp;property)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>acdace65667e5bb2036310b4a91dd3a87</anchor>
      <arglist>(ElementComparator &amp;comparator, UndoManager *undoManager, bool retainOrderOfEquivalentItems)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ValueTree</type>
      <name>fromXml</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a0d2f1bdd6313e53f256ed015986f837a</anchor>
      <arglist>(const XmlElement &amp;xml)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ValueTree</type>
      <name>readFromStream</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ad41a9e45b2d15699b4e27bed3b31109c</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ValueTree</type>
      <name>readFromData</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a9481d856db653baecf76032703858ca5</anchor>
      <arglist>(const void *data, size_t numBytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ValueTree</type>
      <name>readFromGZIPData</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ab5a0858a2f15fef8b61adb6aa2aadc63</anchor>
      <arglist>(const void *data, size_t numBytes)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ValueTree</type>
      <name>invalid</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>af49e8bf1c5072d0722dff9ef81b84f68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ValueTree::Listener</name>
    <filename>classValueTree_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classValueTree_1_1Listener.html</anchorfile>
      <anchor>a46d1eba2ac9d4ce60a849696dd015606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>valueTreePropertyChanged</name>
      <anchorfile>classValueTree_1_1Listener.html</anchorfile>
      <anchor>aea6d5afc919eab727e0bdb6668f4a245</anchor>
      <arglist>(ValueTree &amp;treeWhosePropertyHasChanged, const Identifier &amp;property)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>valueTreeChildAdded</name>
      <anchorfile>classValueTree_1_1Listener.html</anchorfile>
      <anchor>abd937fd4a9a57124ff6c68bd49ce9b67</anchor>
      <arglist>(ValueTree &amp;parentTree, ValueTree &amp;childWhichHasBeenAdded)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>valueTreeChildRemoved</name>
      <anchorfile>classValueTree_1_1Listener.html</anchorfile>
      <anchor>a8d333d132218dcc301ec2754117e8587</anchor>
      <arglist>(ValueTree &amp;parentTree, ValueTree &amp;childWhichHasBeenRemoved)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>valueTreeChildOrderChanged</name>
      <anchorfile>classValueTree_1_1Listener.html</anchorfile>
      <anchor>a0cad448902df4f53a4e2056411cd738a</anchor>
      <arglist>(ValueTree &amp;parentTreeWhoseChildrenHaveMoved)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>valueTreeParentChanged</name>
      <anchorfile>classValueTree_1_1Listener.html</anchorfile>
      <anchor>a597ebac03d1095a618843fdcc3573b21</anchor>
      <arglist>(ValueTree &amp;treeWhoseParentHasChanged)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>valueTreeRedirected</name>
      <anchorfile>classValueTree_1_1Listener.html</anchorfile>
      <anchor>a0fe714c55225f9f814801f875e5d41ca</anchor>
      <arglist>(ValueTree &amp;treeWhichHasBeenChanged)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>var</name>
    <filename>classvar.html</filename>
    <member kind="typedef">
      <type>const var(DynamicObject::*</type>
      <name>MethodFunction</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a97719c009a2b23429bd0d88fbb2066ca</anchor>
      <arglist>)(const var *arguments, int numArguments)</arglist>
    </member>
    <member kind="typedef">
      <type>Identifier</type>
      <name>identifier</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a1d1d548cd14987227912704ff17b64d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a2b11ef56eefd5039182b735b496ebe4e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>af9d8ff8bbc329d0a0a39e6a051327f1b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a6a974b86936dabdfbd84bf48651960a2</anchor>
      <arglist>(const var &amp;valueToCopy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a52307f4bfcd3d1eabaaec7eac4308d66</anchor>
      <arglist>(int value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a5b5745b21f737a5a5f30137927b9a334</anchor>
      <arglist>(int64 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>aa3d805fd44cf913bdb80d2c9220b9285</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ac0d91e9a99988005f6ae7e579fb03840</anchor>
      <arglist>(double value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ac8a4731c2eeebe5db6f1cc5c84dc831b</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>abfddd045e712e6e7e60e2e00f741e770</anchor>
      <arglist>(const wchar_t *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>adac6da6937fb8b1c4d7e4834eba80a49</anchor>
      <arglist>(const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>aaee0a5c918953159d4f461db8e6f82ff</anchor>
      <arglist>(const Array&lt; var &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ab42b36078ccda5f6e8a1ef8106fada84</anchor>
      <arglist>(ReferenceCountedObject *object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a692673e4f16efe5679aa2f397d2ad2f4</anchor>
      <arglist>(MethodFunction method) noexcept</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a3517a5e573ec0fef50f8aebc6c1c7253</anchor>
      <arglist>(const var &amp;valueToCopy)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ae8b1716b035385c36097f52749bff987</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>adceb980c8819584731b1f6232658388a</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>abe4f0082fc266d3895547d7d07a46c31</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ae55dc5d3e560cfcb8538e0a675c2e799</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a4d77a47fe23cfa65b49a3363ec74810d</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a7d27d66b3d4e37ad5383f526e4089642</anchor>
      <arglist>(const wchar_t *value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a95e8f7253dae7ea355c671da8e825951</anchor>
      <arglist>(const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>af25c16f53ee21ad9824c9d0933652304</anchor>
      <arglist>(const Array&lt; var &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a1a0a04b27e8347fba0fdd6004e5ca1b8</anchor>
      <arglist>(ReferenceCountedObject *object)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ac47c3c30ed75f1dc5f1e504ab017019a</anchor>
      <arglist>(MethodFunction method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ab6d6d0432a3631c4d6d6b24811e0f9cc</anchor>
      <arglist>(var &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a19c5effedc1d005234c5bdea8d16daa6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int64</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a7d5c816f931945485ba1b32ee57bb8ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a298324288d5df8c7a316dfb86808d359</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator float</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ac8e7e94cf7662c1d08c627096e149610</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a7a271db6856e298172da0226641cc482</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator String</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a3b79e90400429b3b1d927882ef4c71be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a22dc7e16a51df35c04246eeb64a7b107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Array&lt; var &gt; *</type>
      <name>getArray</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a8db82307ae15776cc3bc206b5d46fc8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedObject *</type>
      <name>getObject</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>aee2d5e83419be04a0bb73a85f85326cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicObject *</type>
      <name>getDynamicObject</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a1d5bb2e57b5e72f8933cc5bad9a12ecf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVoid</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a09897cacaba26ba74e1f93a617fabed7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInt</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a0cc29bf1409cc5a8cbdfdf22f0b87c04</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInt64</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a84d9eae9c4470eaa8238740357728e83</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBool</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a99de9f07b4ff064a6f9f3f8d22773899</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDouble</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ad1b3fe90c8b31658e4256c6916afb625</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isString</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a2808c18f896b1283c9273608ef174aaf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isObject</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>aeded7ac8af755cc9ca8488ae04b6cdd4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isArray</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a2a6f765fc4845723607f6556191c84ad</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMethod</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a5c12783157b8b3d8b769f98e7bf31b54</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a5ba20895db4514964f089c4159543b20</anchor>
      <arglist>(const var &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsWithSameType</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ae54c3be746f033e773df4ddaba623300</anchor>
      <arglist>(const var &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a88d1ff75c60f6824ce56d97f9a26583c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const var &amp;</type>
      <name>operator[]</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a403b79dc3bf29336873dd903cc99b689</anchor>
      <arglist>(int arrayIndex) const </arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator[]</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a5f294480e2c6bfcc5a81ef3f62a27821</anchor>
      <arglist>(int arrayIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a8a3657b52bfdf1120c88851263903116</anchor>
      <arglist>(const var &amp;valueToAppend)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a1b064ae2fb28d6eab3592324e0e10dde</anchor>
      <arglist>(int index, const var &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a85691db7742e3520ec15c4db8240daf1</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a9569f9234ca0d7265d34e80704d0bfba</anchor>
      <arglist>(int numArrayElementsWanted)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ac139ef6d0cb2241eb67bdb9dac7dd902</anchor>
      <arglist>(const var &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>operator[]</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a9b32656ea162c82592c579f519aba1ee</anchor>
      <arglist>(const Identifier &amp;propertyName) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>operator[]</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>adbbc0d9e7fe45d43f56a09cd87f43592</anchor>
      <arglist>(const char *propertyName) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>getProperty</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a1ac00408a895793661e1e1f850aa1ed7</anchor>
      <arglist>(const Identifier &amp;propertyName, const var &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>call</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>af5b4e682c7ae8cfbc47ba2d357681c10</anchor>
      <arglist>(const Identifier &amp;method) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>call</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a41791eed993a191f9c75a68d9debaa69</anchor>
      <arglist>(const Identifier &amp;method, const var &amp;arg1) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>call</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a183557ee5db759512bef267cc31f8459</anchor>
      <arglist>(const Identifier &amp;method, const var &amp;arg1, const var &amp;arg2) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>call</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a23866be8f0ff8e19155e35034b00ef49</anchor>
      <arglist>(const Identifier &amp;method, const var &amp;arg1, const var &amp;arg2, const var &amp;arg3)</arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>call</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a32a3ee856a7acffe0fde8280063718ca</anchor>
      <arglist>(const Identifier &amp;method, const var &amp;arg1, const var &amp;arg2, const var &amp;arg3, const var &amp;arg4) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>call</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a2ef71a4912ef0a26aeb94836541d8a6b</anchor>
      <arglist>(const Identifier &amp;method, const var &amp;arg1, const var &amp;arg2, const var &amp;arg3, const var &amp;arg4, const var &amp;arg5) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>invoke</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a60d4a70e064a8b58e9868fb2566cc2c4</anchor>
      <arglist>(const Identifier &amp;method, const var *arguments, int numArguments) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToStream</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a0872b4cd7956230f5d8d3467be21dd5c</anchor>
      <arglist>(OutputStream &amp;output) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static var</type>
      <name>readFromStream</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>aaf0922e63a9012369524c7e1b9a710f5</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const var</type>
      <name>null</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ae1550d37bca7b33d4af3b4ebf90567ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector3D</name>
    <filename>classVector3D.html</filename>
    <templarg>Type</templarg>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>ae757048c8249a9e3cc7498f3c6f8bc69</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a865fecdab0e4767b85a025bac2f7b435</anchor>
      <arglist>(const Type &amp;xValue, const Type &amp;yValue, const Type &amp;zValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a1e8a6a200eeb5185c4e3da7dafb1e9ff</anchor>
      <arglist>(const Vector3D &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a7cc6b61d1265f9c57352912d381b8222</anchor>
      <arglist>(const Vector3D &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator+=</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>af94a2df7614511b4ab6da226665ea79f</anchor>
      <arglist>(const Vector3D &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator-=</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a1ac23d24763ef1a31676f87574df17dc</anchor>
      <arglist>(const Vector3D &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator*=</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>aa97178e606ee8719157e51143cec6cbf</anchor>
      <arglist>(const Type &amp;scaleFactor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator/=</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>aeeb828d42873c9df481d8c6416e01e6e</anchor>
      <arglist>(const Type &amp;scaleFactor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator+</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>ac00ce494d387c9f2d4158ccde0496c65</anchor>
      <arglist>(const Vector3D &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator-</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>aedb36a1c488b77cb156c2f516371faa5</anchor>
      <arglist>(const Vector3D &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator*</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a58943067e45eb890a88a99e4a03c35a8</anchor>
      <arglist>(const Type &amp;scaleFactor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator/</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a8ba2493fabaa86c07abdcd99bdc60433</anchor>
      <arglist>(const Type &amp;scaleFactor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator-</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a2147dfdac96c71c0a93fc243569eb38c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>operator*</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a0a982cdf24974de837477dea31184813</anchor>
      <arglist>(const Vector3D &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator^</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a86c4293e4de0f57509547b9a248cb6c0</anchor>
      <arglist>(const Vector3D &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>length</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a3026219401ab9d094db78c0cf479cb68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>lengthSquared</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a8df06f573da83007cd949515c940ed1f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>normalised</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>aa90015d0e69415881cb24e3f21be5a0d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lengthIsBelowEpsilon</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>ae90aaba654b769a43d5d523cf0f462c9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3D</type>
      <name>xAxis</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a686d4ba2447a671bab0cdf2e65636309</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3D</type>
      <name>yAxis</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a943292e5f362278b85bbe2389355cd94</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3D</type>
      <name>zAxis</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a645c37ceeed7b4962c27584acd56277f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>x</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>aa5d3c8c349b5603b1f71bb3eae33a882</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>y</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a49a2c9e33f95b6a7cb4147d5b9ee5e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>z</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a621ed1b40fb9605695c309355736ed9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Viewport</name>
    <filename>classViewport.html</filename>
    <base>Component</base>
    <base protection="private">ComponentListener</base>
    <base protection="private">ScrollBar::Listener</base>
    <class kind="struct">Viewport::Ids</class>
    <member kind="function">
      <type></type>
      <name>Viewport</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>aff5062b9f02046b98dfa7f6e523e7fce</anchor>
      <arglist>(const String &amp;componentName=String::empty)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Viewport</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a1e18a1ff4a52be33ef63d25034561850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewedComponent</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>af415e3f6d3461f62d61c42c446996acd</anchor>
      <arglist>(Component *newViewedComponent, bool deleteComponentWhenNoLongerNeeded=true)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getViewedComponent</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>aca2b138175387319a4605760819c6876</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewPosition</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a138c2e06be0437fbeab40542c00bbbe1</anchor>
      <arglist>(int xPixelsOffset, int yPixelsOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewPosition</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>ac89c946b84a6ef950cdcc0cd7a292e40</anchor>
      <arglist>(const Point&lt; int &gt; &amp;newPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewPositionProportionately</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a69fd47f38b5a918d38dbd545e60a904c</anchor>
      <arglist>(double proportionX, double proportionY)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>autoScroll</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a9606c7a986679ea21552075a3f6b90f3</anchor>
      <arglist>(int mouseX, int mouseY, int distanceFromEdge, int maximumSpeed)</arglist>
    </member>
    <member kind="function">
      <type>const Point&lt; int &gt; &amp;</type>
      <name>getViewPosition</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a116c7816932e961e02690bf30ab4b7da</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getViewPositionX</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a87890b3606a8710cc14aee4e78bfe9fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getViewPositionY</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a4554097af5969f13310aaae13ce81a12</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getViewWidth</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>ae2d0c8f1ab5e4ed0bdf30e0ec31b0e69</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getViewHeight</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a5aa0d2a592176ec596f93f490a77b50c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaximumVisibleWidth</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a046d2d7ca8993a38e0dcaac3a77aa017</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaximumVisibleHeight</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a6bc59733a1a9dc1ad69a6cdc670e2725</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visibleAreaChanged</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>abd21eaef2a7a3c30c238e13e60dfd778</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newVisibleArea)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>viewedComponentChanged</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a63e8ebc196483253df8573bb0034bf39</anchor>
      <arglist>(Component *newComponent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollBarsShown</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a814864377939d99f76c121d182275f34</anchor>
      <arglist>(bool showVerticalScrollbarIfNeeded, bool showHorizontalScrollbarIfNeeded)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVerticalScrollBarShown</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a395dad79d93fef08652fda138d70e345</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHorizontalScrollBarShown</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>aea89310ab0accaf7f99e8ef4b29d1f69</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollBarThickness</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a865ce481cedc67a4553d65f8e787acbb</anchor>
      <arglist>(int thickness)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getScrollBarThickness</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a3095d6e4d6fc17aba55ad27d7b3a0914</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSingleStepSizes</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a4a0510b81764f1d6899ad7be124bb56f</anchor>
      <arglist>(int stepX, int stepY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollBarButtonVisibility</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a25e8d38748090e01d092b095feca5851</anchor>
      <arglist>(bool buttonsVisible)</arglist>
    </member>
    <member kind="function">
      <type>ScrollBar *</type>
      <name>getVerticalScrollBar</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a23db9026ff24897bd0ee86e962601655</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>ScrollBar *</type>
      <name>getHorizontalScrollBar</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a32ee4e893ff1d3b67ba91c5c275f2d21</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a477f0457878aabaceccfba61ee3af8a0</anchor>
      <arglist>(const ValueTree &amp;, ComponentBuilder &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a3089beb136b24bdcfc22a18cfa290350</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollBarMoved</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a0f2d79464178fb6d5c67a0dbd0af1f1c</anchor>
      <arglist>(ScrollBar *scrollBarThatHasMoved, double newRangeStart)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a72e58f850d84b9eb93b3ad40587f8969</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>ae0e56c947104c2eef1d7bc16fa7ff8f9</anchor>
      <arglist>(const KeyPress &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentMovedOrResized</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a93357192d49f2c1f7dd196a7db388041</anchor>
      <arglist>(Component &amp;, bool wasMoved, bool wasResized)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useMouseWheelMoveIfNeeded</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a563d893ae0d00dd9b1c0e293826cdc8e</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Viewport::Ids</name>
    <filename>structViewport_1_1Ids.html</filename>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>showScrollBarV</name>
      <anchorfile>structViewport_1_1Ids.html</anchorfile>
      <anchor>aba801e0e3aed24b69157c3e5b074ceb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>showScrollBarH</name>
      <anchorfile>structViewport_1_1Ids.html</anchorfile>
      <anchor>afc82dc4b9cad82ebd7ac175333e43c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>scrollBarWidth</name>
      <anchorfile>structViewport_1_1Ids.html</anchorfile>
      <anchor>a77603dd2fc1facce298b5df9e9a1210d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WaitableEvent</name>
    <filename>classWaitableEvent.html</filename>
    <member kind="function">
      <type></type>
      <name>WaitableEvent</name>
      <anchorfile>classWaitableEvent.html</anchorfile>
      <anchor>aa3622062e48a177ec721120443ea17d2</anchor>
      <arglist>(bool manualReset=false) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WaitableEvent</name>
      <anchorfile>classWaitableEvent.html</anchorfile>
      <anchor>af071eb054ec0ce9b69eb98bd9508c2cf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait</name>
      <anchorfile>classWaitableEvent.html</anchorfile>
      <anchor>aade120bc7686f4fabfc740aff8f56dfa</anchor>
      <arglist>(int timeOutMilliseconds=-1) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal</name>
      <anchorfile>classWaitableEvent.html</anchorfile>
      <anchor>a9afdf2e8cb15c457a44e85af3bffbf72</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classWaitableEvent.html</anchorfile>
      <anchor>aa9b3db111ba17e13d5e74360367bcc9b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WavAudioFormat</name>
    <filename>classWavAudioFormat.html</filename>
    <base>AudioFormat</base>
    <member kind="function">
      <type></type>
      <name>WavAudioFormat</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a79547799ef5300f2adf2390d0cb74982</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WavAudioFormat</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a95e94be65145788e4436237e41c5454f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleSampleRates</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a5de3cc54b7ef5b25079c952b44f8482d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleBitDepths</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a7651257cb7e5cd4e2e3293c2a331ebd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoStereo</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a1e9e0354306afef5bc52496a586f6b1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoMono</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>ade3a903f7aa8e3032d004939ef29638e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a5033528d424d46305c105187f95a7602</anchor>
      <arglist>(InputStream *sourceStream, bool deleteStreamIfOpeningFails)</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatWriter *</type>
      <name>createWriterFor</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a52377fee2fd2b72aff558a9472bb4187</anchor>
      <arglist>(OutputStream *streamToWriteTo, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replaceMetadataInFile</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a1f6a333b084402d486af76d518971160</anchor>
      <arglist>(const File &amp;wavFile, const StringPairArray &amp;newMetadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringPairArray</type>
      <name>createBWAVMetadata</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a87fcfb0af923a447ecc79fa6a2f1b17e</anchor>
      <arglist>(const String &amp;description, const String &amp;originator, const String &amp;originatorRef, const Time &amp;dateAndTime, const int64 timeReferenceSamples, const String &amp;codingHistory)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>bwavDescription</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a1b75b002a3b479b8f4b992a5e21f7076</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>bwavOriginator</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>aeb655b312ca07a2c89d6f1c86fe69455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>bwavOriginatorRef</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a678c3b819d78ea687ddba590a4e73891</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>bwavOriginationDate</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a536849856a3e84afe84dded0feb921c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>bwavOriginationTime</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a6ba890f1df411a643efe13d3b02ff130</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>bwavTimeReference</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a6722c8d061d70bbd7a843e4ac213d588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>bwavCodingHistory</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a5e478da650f2e1fdb3f452e9e3c2e94f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WeakReference</name>
    <filename>classWeakReference.html</filename>
    <templarg>ObjectType</templarg>
    <templarg>ReferenceCountingType</templarg>
    <class kind="class">WeakReference::Master</class>
    <class kind="class">WeakReference::SharedPointer</class>
    <member kind="typedef">
      <type>ReferenceCountedObjectPtr&lt; SharedPointer &gt;</type>
      <name>SharedRef</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a3fd7e314186f261fc5be42b68dd0d16e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeakReference</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>ae3208aa11ac7edae1816bc281113f4fa</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeakReference</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>aa29f6ae9e71a8a61d9208f420405b7af</anchor>
      <arglist>(ObjectType *const object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeakReference</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a1dd877a29a839b13a046411f5c68f235</anchor>
      <arglist>(const WeakReference &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WeakReference &amp;</type>
      <name>operator=</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>ab3634e0befe8b0f3d018c40a16ad8886</anchor>
      <arglist>(const WeakReference &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>WeakReference &amp;</type>
      <name>operator=</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a2136a1c31a335eac280a8201733e226e</anchor>
      <arglist>(ObjectType *const newObject)</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>get</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a0c6e75034092864f959ed7a1389b0e98</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ObjectType *</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a91892403a30e5fa2d85b5dfae9a8d93e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a047a1aebb9ada210bd5d0144df14df5c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ObjectType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a5b50a2cf7ff9d5f91ffb4d5b027c7b0e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasObjectDeleted</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a523f66357f106bdf39cd5b49973b3177</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>afbe33610764d2e40f4495f084d90f21c</anchor>
      <arglist>(ObjectType *const object) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a0a81cdfcb3a5aacdf4ae05e3c226fa29</anchor>
      <arglist>(ObjectType *const object) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WeakReference::Master</name>
    <filename>classWeakReference_1_1Master.html</filename>
    <member kind="function">
      <type></type>
      <name>Master</name>
      <anchorfile>classWeakReference_1_1Master.html</anchorfile>
      <anchor>ac35b96def1f203376be1ef74310cb557</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Master</name>
      <anchorfile>classWeakReference_1_1Master.html</anchorfile>
      <anchor>aedb7f1e4346eea98cf52d9e4245d7515</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPointer *</type>
      <name>getSharedPointer</name>
      <anchorfile>classWeakReference_1_1Master.html</anchorfile>
      <anchor>a90365081e5448c6a7db4b5d21d877fed</anchor>
      <arglist>(ObjectType *const object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classWeakReference_1_1Master.html</anchorfile>
      <anchor>a07936206419210e6404d708c6c378a0e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WeakReference::SharedPointer</name>
    <filename>classWeakReference_1_1SharedPointer.html</filename>
    <member kind="function">
      <type></type>
      <name>SharedPointer</name>
      <anchorfile>classWeakReference_1_1SharedPointer.html</anchorfile>
      <anchor>a04e530668341603447c712c44ab8e42e</anchor>
      <arglist>(ObjectType *const owner_) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>get</name>
      <anchorfile>classWeakReference_1_1SharedPointer.html</anchorfile>
      <anchor>ae27107ee4ef83cd552e95dcc783e0238</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPointer</name>
      <anchorfile>classWeakReference_1_1SharedPointer.html</anchorfile>
      <anchor>a6e1786def84d6ce74d2befe690843f6a</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WebBrowserComponent</name>
    <filename>classWebBrowserComponent.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>WebBrowserComponent</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>ad408275ac5ae9ec1e2f71d73fb0105ef</anchor>
      <arglist>(bool unloadPageWhenBrowserIsHidden=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WebBrowserComponent</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>a546611bb84448a775d7a519969d45ae7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>goToURL</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>a703f3232f580d72125dea4db8e5a0512</anchor>
      <arglist>(const String &amp;url, const StringArray *headers=nullptr, const MemoryBlock *postData=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>a5b95c6fcefc4448c9083b90983ce5729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>goBack</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>aa9d180ebeaadd482e1532aefc2298954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>goForward</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>acf6bdaec26fafd31aae196a4eff12a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>ac0bd69ac52a95ae941b49308327de3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pageAboutToLoad</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>afff0d888a7a77a732f0ac1ca834bbd95</anchor>
      <arglist>(const String &amp;newURL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pageFinishedLoading</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>ad30ce73038359cfefd38c139ea77a21a</anchor>
      <arglist>(const String &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>a64d081cb62aa60f8b1ab0cec0416d83f</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>a297314b29ed2ac3618ce93dc094d2c77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>a5716503447ae0d1c3ef0d1be9054eaa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visibilityChanged</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>a9948c88c29fe5685e1037769b2631d7a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WildcardFileFilter</name>
    <filename>classWildcardFileFilter.html</filename>
    <base>FileFilter</base>
    <member kind="function">
      <type></type>
      <name>WildcardFileFilter</name>
      <anchorfile>classWildcardFileFilter.html</anchorfile>
      <anchor>af1f0c501f518c2dd803e77661fb42b9d</anchor>
      <arglist>(const String &amp;fileWildcardPatterns, const String &amp;directoryWildcardPatterns, const String &amp;description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WildcardFileFilter</name>
      <anchorfile>classWildcardFileFilter.html</anchorfile>
      <anchor>a64858d78dbf60590b6144856c491c053</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFileSuitable</name>
      <anchorfile>classWildcardFileFilter.html</anchorfile>
      <anchor>a0c50cf8e1a4a81bd29b33247a6c63603</anchor>
      <arglist>(const File &amp;file) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDirectorySuitable</name>
      <anchorfile>classWildcardFileFilter.html</anchorfile>
      <anchor>af8992269366f6ad0203139556ec9a683</anchor>
      <arglist>(const File &amp;file) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WindowsRegistry</name>
    <filename>classWindowsRegistry.html</filename>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getValue</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a1511394258c8a5677a839f46c59c7746</anchor>
      <arglist>(const String &amp;regValuePath, const String &amp;defaultValue=String::empty)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getValueWow64</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a886a174632796cabe3967db42d6d485c</anchor>
      <arglist>(const String &amp;regValuePath, const String &amp;defaultValue=String::empty)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>getBinaryValue</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>ab7d85c6b3b0c86444cf52247f147682f</anchor>
      <arglist>(const String &amp;regValuePath, MemoryBlock &amp;resultData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setValue</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>ab18c1285184c6c2b7405e5b0c3589a94</anchor>
      <arglist>(const String &amp;regValuePath, const String &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setValue</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a77c64f789d090ff3a821e45d639b0846</anchor>
      <arglist>(const String &amp;regValuePath, uint32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setValue</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>af21450191b660364f979d1ee636018a1</anchor>
      <arglist>(const String &amp;regValuePath, uint64 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setValue</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a2a52ed148cc21648206c3a0b03fe62fa</anchor>
      <arglist>(const String &amp;regValuePath, const MemoryBlock &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valueExists</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>ac4fadd7f5d05f582ef8c71463d5aaabc</anchor>
      <arglist>(const String &amp;regValuePath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteValue</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a16a18632f80e87604d9a5a2968948988</anchor>
      <arglist>(const String &amp;regValuePath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteKey</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>af9c01613546fcab7b744dabcf34ede8a</anchor>
      <arglist>(const String &amp;regKeyPath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>registerFileAssociation</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a98415af412fb43c27c3c20c137989d63</anchor>
      <arglist>(const String &amp;fileExtension, const String &amp;symbolicDescription, const String &amp;fullDescription, const File &amp;targetExecutable, int iconResourceNumber, bool registerForCurrentUserOnly)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlDocument</name>
    <filename>classXmlDocument.html</filename>
    <member kind="function">
      <type></type>
      <name>XmlDocument</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>a87ad794c62c8ee9ac78961af99b2f30d</anchor>
      <arglist>(const String &amp;documentText)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlDocument</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>a0bb84c6d5a591e3ab53199b081766901</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XmlDocument</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>ab18742228f580a5e4ec87e4b39c8a68c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getDocumentElement</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>a95252ae0d6c2f228065d5503507b0131</anchor>
      <arglist>(bool onlyReadOuterDocumentElement=false)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getLastParseError</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>a54a186bd3e51c86b7c9a7edbcfe97bc7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputSource</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>aa89d5cf6602e6d3d1506f36fd17e3c3c</anchor>
      <arglist>(InputSource *newSource) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmptyTextElementsIgnored</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>a96421df16677c4e4c838383516d37f28</anchor>
      <arglist>(bool shouldBeIgnored) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmlElement *</type>
      <name>parse</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>ae14f9fc62e978ce7246922a84a568f20</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmlElement *</type>
      <name>parse</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>a359a74301cbb56b9cbbaa635a4bf66bf</anchor>
      <arglist>(const String &amp;xmlData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlElement</name>
    <filename>classXmlElement.html</filename>
    <member kind="function">
      <type></type>
      <name>XmlElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a1ef4128e361ff77d1661a16282f9b844</anchor>
      <arglist>(const String &amp;tagName) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>af7194adb8ea1694ab8f5a9810ae54920</anchor>
      <arglist>(const XmlElement &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>XmlElement &amp;</type>
      <name>operator=</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a61f3a94eb51ce136384eda904ae10033</anchor>
      <arglist>(const XmlElement &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XmlElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a07d66d0ced63876ca8d1aecfd2cd7ef9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEquivalentTo</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ac970d556bc59579feb6e1b0035240c8d</anchor>
      <arglist>(const XmlElement *other, bool ignoreOrderOfAttributes) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>createDocument</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a8f417d91e98fd5fe74a3e107f8084d30</anchor>
      <arglist>(const String &amp;dtdToUse, bool allOnOneLine=false, bool includeXmlHeader=true, const String &amp;encodingType=&quot;UTF-8&quot;, int lineWrapLength=60) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToStream</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a549217f58a801ecc952520a40eb182d8</anchor>
      <arglist>(OutputStream &amp;output, const String &amp;dtdToUse, bool allOnOneLine=false, bool includeXmlHeader=true, const String &amp;encodingType=&quot;UTF-8&quot;, int lineWrapLength=60) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeToFile</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ae5f6e3e6cdc4934f582f362c59730513</anchor>
      <arglist>(const File &amp;destinationFile, const String &amp;dtdToUse, const String &amp;encodingType=&quot;UTF-8&quot;, int lineWrapLength=60) const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getTagName</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a42763c064fcc57c24f0a4ec3c7de7b5c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTagName</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a8ef82db7eb79b580ee8dcc07ded59b3e</anchor>
      <arglist>(const String &amp;possibleTagName) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAttributes</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>aded3baadd37f11ed7d60a44954c7ae95</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getAttributeName</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ac11bcda22a4f9715095f9cef47139df0</anchor>
      <arglist>(int attributeIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getAttributeValue</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a1c61f83b2e6bf7b9bafbb29659d0dda0</anchor>
      <arglist>(int attributeIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a1086327f108c9666414e7ad525598142</anchor>
      <arglist>(const String &amp;attributeName) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getStringAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a674ca018e3103f929170dbc3031f92f3</anchor>
      <arglist>(const String &amp;attributeName) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getStringAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a2f687aea65ca1dbbd1560ac9f41f3b67</anchor>
      <arglist>(const String &amp;attributeName, const String &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a24af5b2adca2dd11502573ff8715ff89</anchor>
      <arglist>(const String &amp;attributeName, const String &amp;stringToCompareAgainst, bool ignoreCase=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a111f94851691d888557ca7f8ccfebc8d</anchor>
      <arglist>(const String &amp;attributeName, int defaultReturnValue=0) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a07684d2d8b4de43b98a94fb42c302d29</anchor>
      <arglist>(const String &amp;attributeName, double defaultReturnValue=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBoolAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a43db8641bb970839aeb4e9ba2f7fbb80</anchor>
      <arglist>(const String &amp;attributeName, bool defaultReturnValue=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>aecfa72b98bb4a7d6d01abc9edbbdef28</anchor>
      <arglist>(const String &amp;attributeName, const String &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ac69fa6e5a84515ec871eed3488a79120</anchor>
      <arglist>(const String &amp;attributeName, int newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a9f58392747df30f142a5961d63f780e8</anchor>
      <arglist>(const String &amp;attributeName, double newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a20a89087d796f8c39eb1b20d5b071d42</anchor>
      <arglist>(const String &amp;attributeName) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllAttributes</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a461b3fbfd94164b716774272fe784ec5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getFirstChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>aa8ac386908cc0c1b5c1cc76bb9f6cc7c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getNextElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a427991d7a5a39811a6a9b35fefe624bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getNextElementWithTagName</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a76436b250027e5a2e1b5c68a82e8b7b4</anchor>
      <arglist>(const String &amp;requiredTagName) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChildElements</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a6de1fb43a8b1a33677f095becb212bca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ab450f0049f7ff864024ca58550a2c7b9</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getChildByName</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a1862bf2e34b112439a61964040f8fd34</anchor>
      <arglist>(const String &amp;tagNameToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a9b9735dd8a98c5af71db4c532cd10a1c</anchor>
      <arglist>(XmlElement *newChildElement) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a7501a69d861f61a81879b35efbb7706c</anchor>
      <arglist>(XmlElement *newChildNode, int indexToInsertAt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>createNewChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a82ce9cbd54e2b559a2c78a3ee9165ac3</anchor>
      <arglist>(const String &amp;tagName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replaceChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a37bfa0575b47295b7d689369e4982310</anchor>
      <arglist>(XmlElement *currentChildElement, XmlElement *newChildNode) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ab1a572007f8cef5199dce0b5abc57f01</anchor>
      <arglist>(XmlElement *childToRemove, bool shouldDeleteTheChild) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAllChildElements</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a258f03dbe9872a8f6bf7f47733cd4db8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAllChildElementsWithTagName</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ab6e3ff8e5b97a0f152d5f8883736564a</anchor>
      <arglist>(const String &amp;tagName) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a83e444ac0092392de6402eb8f04ddd49</anchor>
      <arglist>(const XmlElement *possibleChild) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>findParentElementOf</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a6dc993a22692865c3af3bcf2fe99df9e</anchor>
      <arglist>(const XmlElement *elementToLookFor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortChildElements</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a0a5c64bdc8e58f153a83a028829354f0</anchor>
      <arglist>(ElementComparator &amp;comparator, bool retainOrderOfEquivalentItems=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a9fe9798ad1997c993ee35d7580a6189e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getText</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a5f834fecdf2afe9292a7f3e6259761fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ad0c14d8e9d0378e8a468e3d28067dde9</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getAllSubText</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a79d99d209ef3001df66a85b3cd401689</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getChildElementAllSubText</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a3a7927888fbc6a3b684043152fbc0972</anchor>
      <arglist>(const String &amp;childTagName, const String &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTextElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>aea61ae26c5c1e71f9119dd9dffac4f0d</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAllTextElements</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ad321a686465bf21ae7eb785b76d5e352</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmlElement *</type>
      <name>createTextElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ab768aee16a1cf791bd6c61cc2abbe01b</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ZipFile</name>
    <filename>classZipFile.html</filename>
    <class kind="class">ZipFile::Builder</class>
    <class kind="struct">ZipFile::ZipEntry</class>
    <member kind="function">
      <type></type>
      <name>ZipFile</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>aed7c61ad49b425119915544015dab3e8</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZipFile</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>a8b251067cc8a29f88eeaf02dfe0e3658</anchor>
      <arglist>(InputStream *inputStream, bool deleteStreamWhenDestroyed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZipFile</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>aafe1b3e2329e6af9c318d03d3aa88704</anchor>
      <arglist>(InputStream &amp;inputStream)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZipFile</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>aaaa0dfb96daf669363ef206b48cf889b</anchor>
      <arglist>(InputSource *inputSource)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ZipFile</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>a748c38101270b6e3856738f8ca02c357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEntries</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>a33219c1047e6061a6835e5381dc0f06a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ZipEntry *</type>
      <name>getEntry</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>a7168a5f54bed9f81e006f4f1ba880bf5</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexOfFileName</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>ae828c6862f8a8305b5c3aca0a42417cf</anchor>
      <arglist>(const String &amp;fileName) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ZipEntry *</type>
      <name>getEntry</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>a6e0686509a027efcce8adba4ec7b0044</anchor>
      <arglist>(const String &amp;fileName) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortEntriesByFilename</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>af33762dfb0bbe8ac0973d239eba4a376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InputStream *</type>
      <name>createStreamForEntry</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>a5cf25194d5a64e2bd0f4cb7b06262fc3</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>InputStream *</type>
      <name>createStreamForEntry</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>abd3a4bf7cff5b28f3b96ef6233fefe76</anchor>
      <arglist>(ZipEntry &amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>uncompressTo</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>a4d8bc0a4215a9464886909e527946155</anchor>
      <arglist>(const File &amp;targetDirectory, bool shouldOverwriteFiles=true)</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>uncompressEntry</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>aa7a3e0db6aa5d2cb75028251501e4dfc</anchor>
      <arglist>(int index, const File &amp;targetDirectory, bool shouldOverwriteFiles=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ZipFile::Builder</name>
    <filename>classZipFile_1_1Builder.html</filename>
    <member kind="function">
      <type></type>
      <name>Builder</name>
      <anchorfile>classZipFile_1_1Builder.html</anchorfile>
      <anchor>a06cc76fa5f6df7e172409267fe37cbf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Builder</name>
      <anchorfile>classZipFile_1_1Builder.html</anchorfile>
      <anchor>af57eaa53c5b996d60bc2854b6c73abd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFile</name>
      <anchorfile>classZipFile_1_1Builder.html</anchorfile>
      <anchor>acd51b4ba8d7d3a1ba33538f5542e756e</anchor>
      <arglist>(const File &amp;fileToAdd, int compressionLevel, const String &amp;storedPathName=String::empty)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeToStream</name>
      <anchorfile>classZipFile_1_1Builder.html</anchorfile>
      <anchor>a006051857dded0b5df8844c7f09f94d4</anchor>
      <arglist>(OutputStream &amp;target, double *progress) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ZipFile::ZipEntry</name>
    <filename>structZipFile_1_1ZipEntry.html</filename>
    <member kind="variable">
      <type>String</type>
      <name>filename</name>
      <anchorfile>structZipFile_1_1ZipEntry.html</anchorfile>
      <anchor>a77663bd8a97be2fbc840693ac653e78b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>uncompressedSize</name>
      <anchorfile>structZipFile_1_1ZipEntry.html</anchorfile>
      <anchor>a5788ff509e208d0a1fa68c6c1a424e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>fileTime</name>
      <anchorfile>structZipFile_1_1ZipEntry.html</anchorfile>
      <anchor>ae4ba65278656cea2fdf56636fa0c8476</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeOfCriticalSectionToUse</name>
    <filename>classTypeOfCriticalSectionToUse.html</filename>
  </compound>
  <compound kind="struct">
    <name>TypeHelpers::ParameterType</name>
    <filename>structTypeHelpers_1_1ParameterType.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>const Type &amp;</type>
      <name>type</name>
      <anchorfile>structTypeHelpers_1_1ParameterType.html</anchorfile>
      <anchor>a90e2de8ebb3e15f18a94a73a08aaad46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TypeHelpers::SmallestFloatType</name>
    <filename>structTypeHelpers_1_1SmallestFloatType.html</filename>
    <templarg>Type</templarg>
    <member kind="typedef">
      <type>float</type>
      <name>type</name>
      <anchorfile>structTypeHelpers_1_1SmallestFloatType.html</anchorfile>
      <anchor>a94569e66418d08b8c18c9815d30a265f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TypeHelpers::SmallestFloatType&lt; double &gt;</name>
    <filename>structTypeHelpers_1_1SmallestFloatType_3_01double_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>type</name>
      <anchorfile>structTypeHelpers_1_1SmallestFloatType_3_01double_01_4.html</anchorfile>
      <anchor>a0a4a0932df0912df21abd2678281239b</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
